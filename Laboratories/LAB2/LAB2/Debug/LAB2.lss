
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  000001fc  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001612  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001408  00000000  00000000  0000194e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000414  00000000  00000000  00002d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  0000316c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000099b  00000000  00000000  000031fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00003b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00003c27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	ae c0       	rjmp	.+348    	; 0x162 <__bad_interrupt>
   6:	00 00       	nop
   8:	ac c0       	rjmp	.+344    	; 0x162 <__bad_interrupt>
   a:	00 00       	nop
   c:	aa c0       	rjmp	.+340    	; 0x162 <__bad_interrupt>
   e:	00 00       	nop
  10:	a8 c0       	rjmp	.+336    	; 0x162 <__bad_interrupt>
  12:	00 00       	nop
  14:	a6 c0       	rjmp	.+332    	; 0x162 <__bad_interrupt>
  16:	00 00       	nop
  18:	a4 c0       	rjmp	.+328    	; 0x162 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a2 c0       	rjmp	.+324    	; 0x162 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a0 c0       	rjmp	.+320    	; 0x162 <__bad_interrupt>
  22:	00 00       	nop
  24:	9e c0       	rjmp	.+316    	; 0x162 <__bad_interrupt>
  26:	00 00       	nop
  28:	9c c0       	rjmp	.+312    	; 0x162 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	9a c0       	rjmp	.+308    	; 0x162 <__bad_interrupt>
  2e:	00 00       	nop
  30:	98 c0       	rjmp	.+304    	; 0x162 <__bad_interrupt>
  32:	00 00       	nop
  34:	96 c0       	rjmp	.+300    	; 0x162 <__bad_interrupt>
  36:	00 00       	nop
  38:	94 c0       	rjmp	.+296    	; 0x162 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	92 c0       	rjmp	.+292    	; 0x162 <__bad_interrupt>
  3e:	00 00       	nop
  40:	90 c0       	rjmp	.+288    	; 0x162 <__bad_interrupt>
  42:	00 00       	nop
  44:	8e c0       	rjmp	.+284    	; 0x162 <__bad_interrupt>
  46:	00 00       	nop
  48:	8c c0       	rjmp	.+280    	; 0x162 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8a c0       	rjmp	.+276    	; 0x162 <__bad_interrupt>
  4e:	00 00       	nop
  50:	88 c0       	rjmp	.+272    	; 0x162 <__bad_interrupt>
  52:	00 00       	nop
  54:	86 c0       	rjmp	.+268    	; 0x162 <__bad_interrupt>
  56:	00 00       	nop
  58:	84 c0       	rjmp	.+264    	; 0x162 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	82 c0       	rjmp	.+260    	; 0x162 <__bad_interrupt>
  5e:	00 00       	nop
  60:	80 c0       	rjmp	.+256    	; 0x162 <__bad_interrupt>
  62:	00 00       	nop
  64:	7e c0       	rjmp	.+252    	; 0x162 <__bad_interrupt>
  66:	00 00       	nop
  68:	7c c0       	rjmp	.+248    	; 0x162 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7a c0       	rjmp	.+244    	; 0x162 <__bad_interrupt>
  6e:	00 00       	nop
  70:	78 c0       	rjmp	.+240    	; 0x162 <__bad_interrupt>
  72:	00 00       	nop
  74:	76 c0       	rjmp	.+236    	; 0x162 <__bad_interrupt>
  76:	00 00       	nop
  78:	74 c0       	rjmp	.+232    	; 0x162 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	72 c0       	rjmp	.+228    	; 0x162 <__bad_interrupt>
  7e:	00 00       	nop
  80:	70 c0       	rjmp	.+224    	; 0x162 <__bad_interrupt>
  82:	00 00       	nop
  84:	6e c0       	rjmp	.+220    	; 0x162 <__bad_interrupt>
  86:	00 00       	nop
  88:	6c c0       	rjmp	.+216    	; 0x162 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6a c0       	rjmp	.+212    	; 0x162 <__bad_interrupt>
  8e:	00 00       	nop
  90:	68 c0       	rjmp	.+208    	; 0x162 <__bad_interrupt>
  92:	00 00       	nop
  94:	66 c0       	rjmp	.+204    	; 0x162 <__bad_interrupt>
  96:	00 00       	nop
  98:	64 c0       	rjmp	.+200    	; 0x162 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	62 c0       	rjmp	.+196    	; 0x162 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	60 c0       	rjmp	.+192    	; 0x162 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	5e c0       	rjmp	.+188    	; 0x162 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	5c c0       	rjmp	.+184    	; 0x162 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	5a c0       	rjmp	.+180    	; 0x162 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	58 c0       	rjmp	.+176    	; 0x162 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	56 c0       	rjmp	.+172    	; 0x162 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	54 c0       	rjmp	.+168    	; 0x162 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	52 c0       	rjmp	.+164    	; 0x162 <__bad_interrupt>
  be:	00 00       	nop
  c0:	50 c0       	rjmp	.+160    	; 0x162 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	4e c0       	rjmp	.+156    	; 0x162 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	4c c0       	rjmp	.+152    	; 0x162 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	4a c0       	rjmp	.+148    	; 0x162 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	48 c0       	rjmp	.+144    	; 0x162 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	46 c0       	rjmp	.+140    	; 0x162 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	44 c0       	rjmp	.+136    	; 0x162 <__bad_interrupt>
  da:	00 00       	nop
  dc:	42 c0       	rjmp	.+132    	; 0x162 <__bad_interrupt>
  de:	00 00       	nop
  e0:	40 c0       	rjmp	.+128    	; 0x162 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	3e c0       	rjmp	.+124    	; 0x162 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	3c c0       	rjmp	.+120    	; 0x162 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	3a c0       	rjmp	.+116    	; 0x162 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	38 c0       	rjmp	.+112    	; 0x162 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	36 c0       	rjmp	.+108    	; 0x162 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	34 c0       	rjmp	.+104    	; 0x162 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	32 c0       	rjmp	.+100    	; 0x162 <__bad_interrupt>
  fe:	00 00       	nop
 100:	30 c0       	rjmp	.+96     	; 0x162 <__bad_interrupt>
 102:	00 00       	nop
 104:	2e c0       	rjmp	.+92     	; 0x162 <__bad_interrupt>
 106:	00 00       	nop
 108:	2c c0       	rjmp	.+88     	; 0x162 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	2a c0       	rjmp	.+84     	; 0x162 <__bad_interrupt>
 10e:	00 00       	nop
 110:	28 c0       	rjmp	.+80     	; 0x162 <__bad_interrupt>
 112:	00 00       	nop
 114:	26 c0       	rjmp	.+76     	; 0x162 <__bad_interrupt>
 116:	00 00       	nop
 118:	24 c0       	rjmp	.+72     	; 0x162 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	22 c0       	rjmp	.+68     	; 0x162 <__bad_interrupt>
 11e:	00 00       	nop
 120:	20 c0       	rjmp	.+64     	; 0x162 <__bad_interrupt>
 122:	00 00       	nop
 124:	1e c0       	rjmp	.+60     	; 0x162 <__bad_interrupt>
 126:	00 00       	nop
 128:	1c c0       	rjmp	.+56     	; 0x162 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	1a c0       	rjmp	.+52     	; 0x162 <__bad_interrupt>
 12e:	00 00       	nop
 130:	18 c0       	rjmp	.+48     	; 0x162 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
 144:	12 e0       	ldi	r17, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	ec ef       	ldi	r30, 0xFC	; 252
 14c:	f1 e0       	ldi	r31, 0x01	; 1
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	aa 30       	cpi	r26, 0x0A	; 10
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>
 15e:	34 d0       	rcall	.+104    	; 0x1c8 <main>
 160:	4b c0       	rjmp	.+150    	; 0x1f8 <_exit>

00000162 <__bad_interrupt>:
 162:	4e cf       	rjmp	.-356    	; 0x0 <__vectors>

00000164 <USART_Init>:
/* FUNCTIONS                                                            */
/************************************************************************/

void USART_Init(uint16_t _ubrr)
{
	UBRR1H = (uint8_t)(_ubrr>>8);
 164:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
	UBRR1L = (uint8_t)(_ubrr);
 168:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
	
	UCSR1B = (1<<RXEN1) | (1<<TXEN1); //zapnuti prijmu a vysilani
 16c:	88 e1       	ldi	r24, 0x18	; 24
 16e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
	
	UCSR1C &=~ (1<<UCSZ11) | (1<<UCSZ10); // frame size 8 bits
 172:	ea ec       	ldi	r30, 0xCA	; 202
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	8b 7f       	andi	r24, 0xFB	; 251
 17a:	80 83       	st	Z, r24
 17c:	08 95       	ret

0000017e <USART_Transmist>:
	//UCSR1C &=~ (1<<USBS1); //default val stop bits = 1
}

void USART_Transmist(uint8_t data)
{
	while ( !( UCSR1A & (1<<UDRE1)) );
 17e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 182:	95 ff       	sbrs	r25, 5
 184:	fc cf       	rjmp	.-8      	; 0x17e <USART_Transmist>
	/* Put data into buffer, sends the data */
	UDR1 = data;
 186:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 18a:	08 95       	ret

0000018c <USART_Receive>:
}

uint8_t USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR1A & (1<<RXC1)) );
 18c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 190:	88 23       	and	r24, r24
 192:	e4 f7       	brge	.-8      	; 0x18c <USART_Receive>
	/* Get and return received data from buffer */
	return UDR1;
 194:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
}
 198:	08 95       	ret

0000019a <UART_SendChar>:


void UART_SendChar(uint8_t data)
{
	while ( !( UCSR1A & (1<<UDRE1)) );
 19a:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 19e:	95 ff       	sbrs	r25, 5
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <UART_SendChar>
	/* Put data into buffer, sends the data */
	UDR1 = data;
 1a2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 1a6:	08 95       	ret

000001a8 <UART_SendString>:
}

void UART_SendString(char *text)
{
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ec 01       	movw	r28, r24
	while (*text != 0x00){
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <UART_SendString+0xc>
		UART_SendChar(*text);
 1b0:	f4 df       	rcall	.-24     	; 0x19a <UART_SendChar>
		text++;
 1b2:	21 96       	adiw	r28, 0x01	; 1
	UDR1 = data;
}

void UART_SendString(char *text)
{
	while (*text != 0x00){
 1b4:	88 81       	ld	r24, Y
 1b6:	81 11       	cpse	r24, r1
 1b8:	fb cf       	rjmp	.-10     	; 0x1b0 <UART_SendString+0x8>
		UART_SendChar(*text);
		text++;
	}
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <board_init>:

void board_init()
{
	USART_Init(MYUBRR);
 1c0:	8c e0       	ldi	r24, 0x0C	; 12
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	cf cf       	rjmp	.-98     	; 0x164 <USART_Init>
 1c6:	08 95       	ret

000001c8 <main>:


int main(void)
{
	
	board_init();
 1c8:	fb df       	rcall	.-10     	; 0x1c0 <board_init>
	
	
	UART_SendChar(pismeno);
 1ca:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <pismeno>
 1ce:	e5 df       	rcall	.-54     	; 0x19a <UART_SendChar>
	UART_SendChar(pismeno);
 1d0:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <pismeno>
 1d4:	e2 df       	rcall	.-60     	; 0x19a <UART_SendChar>
	UART_SendChar(pismeno);
 1d6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <pismeno>
 1da:	df df       	rcall	.-66     	; 0x19a <UART_SendChar>
	UART_SendChar(pismeno);
 1dc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <pismeno>
 1e0:	dc df       	rcall	.-72     	; 0x19a <UART_SendChar>
	UART_SendChar(pismeno);
 1e2:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <pismeno>
 1e6:	d9 df       	rcall	.-78     	; 0x19a <UART_SendChar>
	UART_SendString(string);
 1e8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1ec:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1f0:	db df       	rcall	.-74     	; 0x1a8 <UART_SendString>
	while(1)
	{ 
		//printf("slysim/n/r");
		uint8_t recv;
		/* Recv character */
		recv = USART_Receive();
 1f2:	cc df       	rcall	.-104    	; 0x18c <USART_Receive>
 1f4:	c4 df       	rcall	.-120    	; 0x17e <USART_Transmist>
		/* Send back the character */
		USART_Transmist(recv);
 1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <main+0x2a>

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
