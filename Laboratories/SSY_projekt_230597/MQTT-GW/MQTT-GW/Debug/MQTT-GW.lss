
MQTT-GW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000276  00800200  00006974  00006a08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006974  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001f5d  00800476  00800476  00006c7e  2**0
                  ALLOC
  3 .noinit       00000001  008023d3  008023d3  00006c7e  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00006c7e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006cdc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000968  00000000  00000000  00006d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f429  00000000  00000000  00007684  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004503  00000000  00000000  00016aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000604b  00000000  00000000  0001afb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000024bc  00000000  00000000  00020ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003540  00000000  00000000  000234b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c22b  00000000  00000000  000269f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009b0  00000000  00000000  00032c23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6d c1       	rjmp	.+730    	; 0x2dc <__ctors_end>
       2:	00 00       	nop
       4:	9b c1       	rjmp	.+822    	; 0x33c <__bad_interrupt>
       6:	00 00       	nop
       8:	99 c1       	rjmp	.+818    	; 0x33c <__bad_interrupt>
       a:	00 00       	nop
       c:	97 c1       	rjmp	.+814    	; 0x33c <__bad_interrupt>
       e:	00 00       	nop
      10:	95 c1       	rjmp	.+810    	; 0x33c <__bad_interrupt>
      12:	00 00       	nop
      14:	93 c1       	rjmp	.+806    	; 0x33c <__bad_interrupt>
      16:	00 00       	nop
      18:	91 c1       	rjmp	.+802    	; 0x33c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8f c1       	rjmp	.+798    	; 0x33c <__bad_interrupt>
      1e:	00 00       	nop
      20:	8d c1       	rjmp	.+794    	; 0x33c <__bad_interrupt>
      22:	00 00       	nop
      24:	8b c1       	rjmp	.+790    	; 0x33c <__bad_interrupt>
      26:	00 00       	nop
      28:	89 c1       	rjmp	.+786    	; 0x33c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	87 c1       	rjmp	.+782    	; 0x33c <__bad_interrupt>
      2e:	00 00       	nop
      30:	85 c1       	rjmp	.+778    	; 0x33c <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 b1 21 	jmp	0x4362	; 0x4362 <__vector_13>
      38:	81 c1       	rjmp	.+770    	; 0x33c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7f c1       	rjmp	.+766    	; 0x33c <__bad_interrupt>
      3e:	00 00       	nop
      40:	7d c1       	rjmp	.+762    	; 0x33c <__bad_interrupt>
      42:	00 00       	nop
      44:	7b c1       	rjmp	.+758    	; 0x33c <__bad_interrupt>
      46:	00 00       	nop
      48:	79 c1       	rjmp	.+754    	; 0x33c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	77 c1       	rjmp	.+750    	; 0x33c <__bad_interrupt>
      4e:	00 00       	nop
      50:	75 c1       	rjmp	.+746    	; 0x33c <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__vector_21>
      58:	71 c1       	rjmp	.+738    	; 0x33c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6f c1       	rjmp	.+734    	; 0x33c <__bad_interrupt>
      5e:	00 00       	nop
      60:	6d c1       	rjmp	.+730    	; 0x33c <__bad_interrupt>
      62:	00 00       	nop
      64:	6b c1       	rjmp	.+726    	; 0x33c <__bad_interrupt>
      66:	00 00       	nop
      68:	69 c1       	rjmp	.+722    	; 0x33c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	67 c1       	rjmp	.+718    	; 0x33c <__bad_interrupt>
      6e:	00 00       	nop
      70:	65 c1       	rjmp	.+714    	; 0x33c <__bad_interrupt>
      72:	00 00       	nop
      74:	63 c1       	rjmp	.+710    	; 0x33c <__bad_interrupt>
      76:	00 00       	nop
      78:	61 c1       	rjmp	.+706    	; 0x33c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5f c1       	rjmp	.+702    	; 0x33c <__bad_interrupt>
      7e:	00 00       	nop
      80:	5d c1       	rjmp	.+698    	; 0x33c <__bad_interrupt>
      82:	00 00       	nop
      84:	5b c1       	rjmp	.+694    	; 0x33c <__bad_interrupt>
      86:	00 00       	nop
      88:	59 c1       	rjmp	.+690    	; 0x33c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	57 c1       	rjmp	.+686    	; 0x33c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 7e 22 	jmp	0x44fc	; 0x44fc <__vector_36>
      94:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <__vector_37>
      98:	51 c1       	rjmp	.+674    	; 0x33c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4f c1       	rjmp	.+670    	; 0x33c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4d c1       	rjmp	.+666    	; 0x33c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4b c1       	rjmp	.+662    	; 0x33c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 a0 21 	jmp	0x4340	; 0x4340 <__vector_42>
      ac:	47 c1       	rjmp	.+654    	; 0x33c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	45 c1       	rjmp	.+650    	; 0x33c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	43 c1       	rjmp	.+646    	; 0x33c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	41 c1       	rjmp	.+642    	; 0x33c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3f c1       	rjmp	.+638    	; 0x33c <__bad_interrupt>
      be:	00 00       	nop
      c0:	3d c1       	rjmp	.+634    	; 0x33c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3b c1       	rjmp	.+630    	; 0x33c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	39 c1       	rjmp	.+626    	; 0x33c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	37 c1       	rjmp	.+622    	; 0x33c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	35 c1       	rjmp	.+618    	; 0x33c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	33 c1       	rjmp	.+614    	; 0x33c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	31 c1       	rjmp	.+610    	; 0x33c <__bad_interrupt>
      da:	00 00       	nop
      dc:	2f c1       	rjmp	.+606    	; 0x33c <__bad_interrupt>
      de:	00 00       	nop
      e0:	2d c1       	rjmp	.+602    	; 0x33c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2b c1       	rjmp	.+598    	; 0x33c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	29 c1       	rjmp	.+594    	; 0x33c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	27 c1       	rjmp	.+590    	; 0x33c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	25 c1       	rjmp	.+586    	; 0x33c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	23 c1       	rjmp	.+582    	; 0x33c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	21 c1       	rjmp	.+578    	; 0x33c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	1f c1       	rjmp	.+574    	; 0x33c <__bad_interrupt>
      fe:	00 00       	nop
     100:	1d c1       	rjmp	.+570    	; 0x33c <__bad_interrupt>
     102:	00 00       	nop
     104:	1b c1       	rjmp	.+566    	; 0x33c <__bad_interrupt>
     106:	00 00       	nop
     108:	19 c1       	rjmp	.+562    	; 0x33c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	17 c1       	rjmp	.+558    	; 0x33c <__bad_interrupt>
     10e:	00 00       	nop
     110:	15 c1       	rjmp	.+554    	; 0x33c <__bad_interrupt>
     112:	00 00       	nop
     114:	13 c1       	rjmp	.+550    	; 0x33c <__bad_interrupt>
     116:	00 00       	nop
     118:	11 c1       	rjmp	.+546    	; 0x33c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0f c1       	rjmp	.+542    	; 0x33c <__bad_interrupt>
     11e:	00 00       	nop
     120:	0d c1       	rjmp	.+538    	; 0x33c <__bad_interrupt>
     122:	00 00       	nop
     124:	0b c1       	rjmp	.+534    	; 0x33c <__bad_interrupt>
     126:	00 00       	nop
     128:	09 c1       	rjmp	.+530    	; 0x33c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	07 c1       	rjmp	.+526    	; 0x33c <__bad_interrupt>
     12e:	00 00       	nop
     130:	05 c1       	rjmp	.+522    	; 0x33c <__bad_interrupt>
	...

00000134 <__trampolines_end>:
     134:	63 64       	ori	r22, 0x43	; 67
     136:	69 6e       	ori	r22, 0xE9	; 233
     138:	6f 70       	andi	r22, 0x0F	; 15
     13a:	73 75       	andi	r23, 0x53	; 83
     13c:	78 58       	subi	r23, 0x88	; 136
     13e:	5b 00       	.word	0x005b	; ????

00000140 <__c.3544>:
     140:	25 73 00                                            %s.

00000143 <__c.3722>:
     143:	55 70 74 69 6d 65 3a 20 25 6c 75 20 73 65 63 3b     Uptime: %lu sec;
     153:	20 46 72 65 65 20 52 41 4d 3a 20 25 64 20 62 79      Free RAM: %d by
     163:	74 65 73 0d 0a 00                                   tes...

00000169 <__c.3706>:
     169:	2d 2d 4d 51 54 54 20 43 6f 6e 6e 65 63 74 65 64     --MQTT Connected
     179:	20 45 52 52 4f 52 3a 20 25 6c 64 0d 0a 00            ERROR: %ld...

00000187 <__c.3710>:
     187:	53 75 62 73 63 72 69 62 65 64 20 28 25 73 29 20     Subscribed (%s) 
     197:	25 64 0d 0a 00                                      %d...

0000019c <__c.3704>:
     19c:	2b 2b 4d 51 54 54 20 43 6f 6e 6e 65 63 74 65 64     ++MQTT Connected
     1ac:	20 53 55 43 43 45 53 53 3a 20 25 6c 64 0d 0a 00      SUCCESS: %ld...

000001bc <__c.3701>:
     1bc:	3e 3e 54 72 79 69 6e 67 20 63 6f 6e 6e 65 63 74     >>Trying connect
     1cc:	20 74 6f 20 4d 51 54 54 20 62 72 6f 6b 65 72 3a      to MQTT broker:
     1dc:	20 25 64 2e 25 64 2e 25 64 2e 25 64 20 2e 2e 0d      %d.%d.%d.%d ...
     1ec:	0a 00                                               ..

000001ee <__c.3696>:
     1ee:	25 53 00                                            %S.

000001f1 <__c.3597>:
     1f1:	43 6f 6e 6e 65 63 74 69 6f 6e 20 77 69 74 68 20     Connection with 
     201:	4d 51 54 54 20 42 72 6f 6b 65 72 20 77 61 73 20     MQTT Broker was 
     211:	6c 6f 73 74 21 21 0d 0a 52 65 62 6f 6f 74 20 74     lost!!..Reboot t
     221:	68 65 20 62 6f 61 72 64 2e 2e 0d 0a 00              he board.....

0000022e <__c.3595>:
     22e:	20 2d 20 45 52 52 4f 52 0d 0a 00                     - ERROR...

00000239 <__c.3593>:
     239:	20 2d 20 4f 4b 0d 0a 00                              - OK...

00000241 <__c.3590>:
     241:	3e 3e 4d 51 54 54 20 70 75 62 20 6d 73 67 20 25     >>MQTT pub msg %
     251:	6c 75 20 00                                         lu .

00000255 <__c.3579>:
     255:	4c 57 4d 20 43 6f 6e 66 69 67 20 55 70 64 61 74     LWM Config Updat
     265:	65 64 3a 20 61 64 64 72 3d 25 75 2c 20 70 61 6e     ed: addr=%u, pan
     275:	69 64 3d 30 78 25 30 34 58 2c 20 63 68 61 6e 6e     id=0x%04X, chann
     285:	65 6c 3d 25 75 0d 0a 00                             el=%u...

0000028d <__c.3574>:
     28d:	3c 3c 4d 51 54 54 20 53 75 62 3a 20 5b 25 73 5d     <<MQTT Sub: [%s]
     29d:	20 25 73 00                                          %s.

000002a1 <str_prog_name>:
     2a1:	0d 0a 41 74 4d 65 67 61 32 35 36 52 46 52 32 20     ..AtMega256RFR2 
     2b1:	4c 57 4d 20 2d 3e 20 4d 51 54 54 20 47 61 74 65     LWM -> MQTT Gate
     2c1:	77 61 79 20 57 49 5a 4e 45 54 5f 35 35 30 30 20     way WIZNET_5500 
     2d1:	45 54 48 45 52 4e 45 54 0d 0a 00                    ETHERNET...

000002dc <__ctors_end>:
     2dc:	11 24       	eor	r1, r1
     2de:	1f be       	out	0x3f, r1	; 63
     2e0:	cf ef       	ldi	r28, 0xFF	; 255
     2e2:	d1 e8       	ldi	r29, 0x81	; 129
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	cd bf       	out	0x3d, r28	; 61
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0c bf       	out	0x3c, r16	; 60

000002ec <get_mcusr>:
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
	printf("SM Mask	   : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
}
     2ec:	84 b7       	in	r24, 0x34	; 52
     2ee:	80 93 d3 23 	sts	0x23D3, r24	; 0x8023d3 <__bss_end>
     2f2:	14 be       	out	0x34, r1	; 52
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	a8 95       	wdr
     2fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     2fe:	88 61       	ori	r24, 0x18	; 24
     300:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     304:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     308:	0f be       	out	0x3f, r0	; 63

0000030a <__do_copy_data>:
     30a:	14 e0       	ldi	r17, 0x04	; 4
     30c:	a0 e0       	ldi	r26, 0x00	; 0
     30e:	b2 e0       	ldi	r27, 0x02	; 2
     310:	e4 e7       	ldi	r30, 0x74	; 116
     312:	f9 e6       	ldi	r31, 0x69	; 105
     314:	00 e0       	ldi	r16, 0x00	; 0
     316:	0b bf       	out	0x3b, r16	; 59
     318:	02 c0       	rjmp	.+4      	; 0x31e <__do_copy_data+0x14>
     31a:	07 90       	elpm	r0, Z+
     31c:	0d 92       	st	X+, r0
     31e:	a6 37       	cpi	r26, 0x76	; 118
     320:	b1 07       	cpc	r27, r17
     322:	d9 f7       	brne	.-10     	; 0x31a <__do_copy_data+0x10>

00000324 <__do_clear_bss>:
     324:	23 e2       	ldi	r18, 0x23	; 35
     326:	a6 e7       	ldi	r26, 0x76	; 118
     328:	b4 e0       	ldi	r27, 0x04	; 4
     32a:	01 c0       	rjmp	.+2      	; 0x32e <.do_clear_bss_start>

0000032c <.do_clear_bss_loop>:
     32c:	1d 92       	st	X+, r1

0000032e <.do_clear_bss_start>:
     32e:	a3 3d       	cpi	r26, 0xD3	; 211
     330:	b2 07       	cpc	r27, r18
     332:	e1 f7       	brne	.-8      	; 0x32c <.do_clear_bss_loop>
     334:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <main>
     338:	0c 94 b8 34 	jmp	0x6970	; 0x6970 <_exit>

0000033c <__bad_interrupt>:
     33c:	61 ce       	rjmp	.-830    	; 0x0 <__vectors>

0000033e <close>:
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
}
     33e:	8f 92       	push	r8
     340:	9f 92       	push	r9
     342:	af 92       	push	r10
     344:	bf 92       	push	r11
     346:	cf 92       	push	r12
     348:	df 92       	push	r13
     34a:	ef 92       	push	r14
     34c:	ff 92       	push	r15
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	89 30       	cpi	r24, 0x09	; 9
     354:	08 f0       	brcs	.+2      	; 0x358 <close+0x1a>
     356:	5c c0       	rjmp	.+184    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     358:	f8 2e       	mov	r15, r24
     35a:	c8 2f       	mov	r28, r24
     35c:	d0 e0       	ldi	r29, 0x00	; 0
     35e:	6e 01       	movw	r12, r28
     360:	cc 0c       	add	r12, r12
     362:	dd 1c       	adc	r13, r13
     364:	cc 0c       	add	r12, r12
     366:	dd 1c       	adc	r13, r13
     368:	8f ef       	ldi	r24, 0xFF	; 255
     36a:	c8 1a       	sub	r12, r24
     36c:	d8 0a       	sbc	r13, r24
     36e:	cc 0c       	add	r12, r12
     370:	dd 1c       	adc	r13, r13
     372:	cc 0c       	add	r12, r12
     374:	dd 1c       	adc	r13, r13
     376:	cc 0c       	add	r12, r12
     378:	dd 1c       	adc	r13, r13
     37a:	46 01       	movw	r8, r12
     37c:	93 94       	inc	r9
     37e:	09 2c       	mov	r0, r9
     380:	00 0c       	add	r0, r0
     382:	aa 08       	sbc	r10, r10
     384:	bb 08       	sbc	r11, r11
     386:	40 e1       	ldi	r20, 0x10	; 16
     388:	c5 01       	movw	r24, r10
     38a:	b4 01       	movw	r22, r8
     38c:	1a d5       	rcall	.+2612   	; 0xdc2 <WIZCHIP_WRITE>
     38e:	c5 01       	movw	r24, r10
     390:	b4 01       	movw	r22, r8
     392:	b0 d4       	rcall	.+2400   	; 0xcf4 <WIZCHIP_READ>
     394:	81 11       	cpse	r24, r1
     396:	fb cf       	rjmp	.-10     	; 0x38e <close+0x50>
     398:	b6 01       	movw	r22, r12
     39a:	7e 5f       	subi	r23, 0xFE	; 254
     39c:	07 2e       	mov	r0, r23
     39e:	00 0c       	add	r0, r0
     3a0:	88 0b       	sbc	r24, r24
     3a2:	99 0b       	sbc	r25, r25
     3a4:	4f e1       	ldi	r20, 0x1F	; 31
     3a6:	0d d5       	rcall	.+2586   	; 0xdc2 <WIZCHIP_WRITE>
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <close+0x74>
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	fa 94       	dec	r15
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <close+0x70>
     3b6:	80 95       	com	r24
     3b8:	90 95       	com	r25
     3ba:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <sock_io_mode>
     3be:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <sock_io_mode+0x1>
     3c2:	28 23       	and	r18, r24
     3c4:	39 23       	and	r19, r25
     3c6:	30 93 91 04 	sts	0x0491, r19	; 0x800491 <sock_io_mode+0x1>
     3ca:	20 93 90 04 	sts	0x0490, r18	; 0x800490 <sock_io_mode>
     3ce:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <sock_is_sending>
     3d2:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <sock_is_sending+0x1>
     3d6:	82 23       	and	r24, r18
     3d8:	93 23       	and	r25, r19
     3da:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <sock_is_sending+0x1>
     3de:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <sock_is_sending>
     3e2:	fe 01       	movw	r30, r28
     3e4:	ee 0f       	add	r30, r30
     3e6:	ff 1f       	adc	r31, r31
     3e8:	e2 58       	subi	r30, 0x82	; 130
     3ea:	fb 4f       	sbci	r31, 0xFB	; 251
     3ec:	11 82       	std	Z+1, r1	; 0x01
     3ee:	10 82       	st	Z, r1
     3f0:	ca 58       	subi	r28, 0x8A	; 138
     3f2:	db 4f       	sbci	r29, 0xFB	; 251
     3f4:	18 82       	st	Y, r1
     3f6:	8d ef       	ldi	r24, 0xFD	; 253
     3f8:	d8 1a       	sub	r13, r24
     3fa:	0d 2c       	mov	r0, r13
     3fc:	00 0c       	add	r0, r0
     3fe:	ee 08       	sbc	r14, r14
     400:	ff 08       	sbc	r15, r15
     402:	c7 01       	movw	r24, r14
     404:	b6 01       	movw	r22, r12
     406:	76 d4       	rcall	.+2284   	; 0xcf4 <WIZCHIP_READ>
     408:	81 11       	cpse	r24, r1
     40a:	fb cf       	rjmp	.-10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	01 c0       	rjmp	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     410:	8f ef       	ldi	r24, 0xFF	; 255
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	df 90       	pop	r13
     41c:	cf 90       	pop	r12
     41e:	bf 90       	pop	r11
     420:	af 90       	pop	r10
     422:	9f 90       	pop	r9
     424:	8f 90       	pop	r8
     426:	08 95       	ret

00000428 <socket>:
     428:	4f 92       	push	r4
     42a:	5f 92       	push	r5
     42c:	6f 92       	push	r6
     42e:	7f 92       	push	r7
     430:	af 92       	push	r10
     432:	bf 92       	push	r11
     434:	cf 92       	push	r12
     436:	df 92       	push	r13
     438:	ef 92       	push	r14
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	00 d0       	rcall	.+0      	; 0x446 <socket+0x1e>
     446:	1f 92       	push	r1
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
     44c:	18 2f       	mov	r17, r24
     44e:	56 2e       	mov	r5, r22
     450:	3a 01       	movw	r6, r20
     452:	02 2f       	mov	r16, r18
     454:	89 30       	cpi	r24, 0x09	; 9
     456:	08 f0       	brcs	.+2      	; 0x45a <socket+0x32>
     458:	cb c0       	rjmp	.+406    	; 0x5f0 <socket+0x1c8>
     45a:	21 e0       	ldi	r18, 0x01	; 1
     45c:	62 17       	cp	r22, r18
     45e:	39 f0       	breq	.+14     	; 0x46e <socket+0x46>
     460:	62 17       	cp	r22, r18
     462:	08 f4       	brcc	.+2      	; 0x466 <socket+0x3e>
     464:	c7 c0       	rjmp	.+398    	; 0x5f4 <socket+0x1cc>
     466:	84 e0       	ldi	r24, 0x04	; 4
     468:	86 17       	cp	r24, r22
     46a:	a8 f4       	brcc	.+42     	; 0x496 <socket+0x6e>
     46c:	c3 c0       	rjmp	.+390    	; 0x5f4 <socket+0x1cc>
     46e:	24 e0       	ldi	r18, 0x04	; 4
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	ae 01       	movw	r20, r28
     474:	4f 5f       	subi	r20, 0xFF	; 255
     476:	5f 4f       	sbci	r21, 0xFF	; 255
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	7f e0       	ldi	r23, 0x0F	; 15
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	12 d5       	rcall	.+2596   	; 0xea6 <WIZCHIP_READ_BUF>
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	9a 81       	ldd	r25, Y+2	; 0x02
     486:	ab 81       	ldd	r26, Y+3	; 0x03
     488:	bc 81       	ldd	r27, Y+4	; 0x04
     48a:	89 2b       	or	r24, r25
     48c:	8a 2b       	or	r24, r26
     48e:	8b 2b       	or	r24, r27
     490:	11 f4       	brne	.+4      	; 0x496 <socket+0x6e>
     492:	8d ef       	ldi	r24, 0xFD	; 253
     494:	b8 c0       	rjmp	.+368    	; 0x606 <socket+0x1de>
     496:	02 fd       	sbrc	r16, 2
     498:	af c0       	rjmp	.+350    	; 0x5f8 <socket+0x1d0>
     49a:	00 23       	and	r16, r16
     49c:	a9 f0       	breq	.+42     	; 0x4c8 <socket+0xa0>
     49e:	21 e0       	ldi	r18, 0x01	; 1
     4a0:	52 16       	cp	r5, r18
     4a2:	21 f0       	breq	.+8      	; 0x4ac <socket+0x84>
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	58 16       	cp	r5, r24
     4a8:	29 f0       	breq	.+10     	; 0x4b4 <socket+0x8c>
     4aa:	0e c0       	rjmp	.+28     	; 0x4c8 <socket+0xa0>
     4ac:	80 2f       	mov	r24, r16
     4ae:	81 72       	andi	r24, 0x21	; 33
     4b0:	59 f4       	brne	.+22     	; 0x4c8 <socket+0xa0>
     4b2:	a4 c0       	rjmp	.+328    	; 0x5fc <socket+0x1d4>
     4b4:	05 ff       	sbrs	r16, 5
     4b6:	03 c0       	rjmp	.+6      	; 0x4be <socket+0x96>
     4b8:	00 23       	and	r16, r16
     4ba:	34 f0       	brlt	.+12     	; 0x4c8 <socket+0xa0>
     4bc:	a1 c0       	rjmp	.+322    	; 0x600 <socket+0x1d8>
     4be:	04 ff       	sbrs	r16, 4
     4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <socket+0xa0>
     4c2:	00 23       	and	r16, r16
     4c4:	0c f0       	brlt	.+2      	; 0x4c8 <socket+0xa0>
     4c6:	9e c0       	rjmp	.+316    	; 0x604 <socket+0x1dc>
     4c8:	81 2f       	mov	r24, r17
     4ca:	39 df       	rcall	.-398    	; 0x33e <close>
     4cc:	a1 2e       	mov	r10, r17
     4ce:	b1 2c       	mov	r11, r1
     4d0:	65 01       	movw	r12, r10
     4d2:	cc 0c       	add	r12, r12
     4d4:	dd 1c       	adc	r13, r13
     4d6:	cc 0c       	add	r12, r12
     4d8:	dd 1c       	adc	r13, r13
     4da:	2f ef       	ldi	r18, 0xFF	; 255
     4dc:	c2 1a       	sub	r12, r18
     4de:	d2 0a       	sbc	r13, r18
     4e0:	cc 0c       	add	r12, r12
     4e2:	dd 1c       	adc	r13, r13
     4e4:	cc 0c       	add	r12, r12
     4e6:	dd 1c       	adc	r13, r13
     4e8:	cc 0c       	add	r12, r12
     4ea:	dd 1c       	adc	r13, r13
     4ec:	40 2f       	mov	r20, r16
     4ee:	40 7f       	andi	r20, 0xF0	; 240
     4f0:	45 29       	or	r20, r5
     4f2:	b6 01       	movw	r22, r12
     4f4:	0d 2c       	mov	r0, r13
     4f6:	00 0c       	add	r0, r0
     4f8:	88 0b       	sbc	r24, r24
     4fa:	99 0b       	sbc	r25, r25
     4fc:	62 d4       	rcall	.+2244   	; 0xdc2 <WIZCHIP_WRITE>
     4fe:	61 14       	cp	r6, r1
     500:	71 04       	cpc	r7, r1
     502:	a9 f4       	brne	.+42     	; 0x52e <socket+0x106>
     504:	60 90 04 02 	lds	r6, 0x0204	; 0x800204 <sock_any_port>
     508:	70 90 05 02 	lds	r7, 0x0205	; 0x800205 <sock_any_port+0x1>
     50c:	c3 01       	movw	r24, r6
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	80 3f       	cpi	r24, 0xF0	; 240
     512:	2f ef       	ldi	r18, 0xFF	; 255
     514:	92 07       	cpc	r25, r18
     516:	29 f0       	breq	.+10     	; 0x522 <socket+0xfa>
     518:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sock_any_port+0x1>
     51c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sock_any_port>
     520:	06 c0       	rjmp	.+12     	; 0x52e <socket+0x106>
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 ec       	ldi	r25, 0xC0	; 192
     526:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sock_any_port+0x1>
     52a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sock_any_port>
     52e:	b6 01       	movw	r22, r12
     530:	7c 5f       	subi	r23, 0xFC	; 252
     532:	07 2e       	mov	r0, r23
     534:	00 0c       	add	r0, r0
     536:	88 0b       	sbc	r24, r24
     538:	99 0b       	sbc	r25, r25
     53a:	47 2d       	mov	r20, r7
     53c:	42 d4       	rcall	.+2180   	; 0xdc2 <WIZCHIP_WRITE>
     53e:	b6 01       	movw	r22, r12
     540:	7b 5f       	subi	r23, 0xFB	; 251
     542:	07 2e       	mov	r0, r23
     544:	00 0c       	add	r0, r0
     546:	88 0b       	sbc	r24, r24
     548:	99 0b       	sbc	r25, r25
     54a:	46 2d       	mov	r20, r6
     54c:	3a d4       	rcall	.+2164   	; 0xdc2 <WIZCHIP_WRITE>
     54e:	26 01       	movw	r4, r12
     550:	53 94       	inc	r5
     552:	05 2c       	mov	r0, r5
     554:	00 0c       	add	r0, r0
     556:	66 08       	sbc	r6, r6
     558:	77 08       	sbc	r7, r7
     55a:	41 e0       	ldi	r20, 0x01	; 1
     55c:	c3 01       	movw	r24, r6
     55e:	b2 01       	movw	r22, r4
     560:	30 d4       	rcall	.+2144   	; 0xdc2 <WIZCHIP_WRITE>
     562:	c3 01       	movw	r24, r6
     564:	b2 01       	movw	r22, r4
     566:	c6 d3       	rcall	.+1932   	; 0xcf4 <WIZCHIP_READ>
     568:	81 11       	cpse	r24, r1
     56a:	fb cf       	rjmp	.-10     	; 0x562 <socket+0x13a>
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	01 2e       	mov	r0, r17
     572:	02 c0       	rjmp	.+4      	; 0x578 <socket+0x150>
     574:	88 0f       	add	r24, r24
     576:	99 1f       	adc	r25, r25
     578:	0a 94       	dec	r0
     57a:	e2 f7       	brpl	.-8      	; 0x574 <socket+0x14c>
     57c:	80 95       	com	r24
     57e:	90 95       	com	r25
     580:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <sock_io_mode>
     584:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <sock_io_mode+0x1>
     588:	28 23       	and	r18, r24
     58a:	39 23       	and	r19, r25
     58c:	00 fb       	bst	r16, 0
     58e:	ee 24       	eor	r14, r14
     590:	e0 f8       	bld	r14, 0
     592:	f1 2c       	mov	r15, r1
     594:	01 2e       	mov	r0, r17
     596:	02 c0       	rjmp	.+4      	; 0x59c <socket+0x174>
     598:	ee 0c       	add	r14, r14
     59a:	ff 1c       	adc	r15, r15
     59c:	0a 94       	dec	r0
     59e:	e2 f7       	brpl	.-8      	; 0x598 <socket+0x170>
     5a0:	e2 2a       	or	r14, r18
     5a2:	f3 2a       	or	r15, r19
     5a4:	f0 92 91 04 	sts	0x0491, r15	; 0x800491 <sock_io_mode+0x1>
     5a8:	e0 92 90 04 	sts	0x0490, r14	; 0x800490 <sock_io_mode>
     5ac:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <sock_is_sending>
     5b0:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <sock_is_sending+0x1>
     5b4:	82 23       	and	r24, r18
     5b6:	93 23       	and	r25, r19
     5b8:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <sock_is_sending+0x1>
     5bc:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <sock_is_sending>
     5c0:	f5 01       	movw	r30, r10
     5c2:	ee 0f       	add	r30, r30
     5c4:	ff 1f       	adc	r31, r31
     5c6:	e2 58       	subi	r30, 0x82	; 130
     5c8:	fb 4f       	sbci	r31, 0xFB	; 251
     5ca:	11 82       	std	Z+1, r1	; 0x01
     5cc:	10 82       	st	Z, r1
     5ce:	f5 01       	movw	r30, r10
     5d0:	ea 58       	subi	r30, 0x8A	; 138
     5d2:	fb 4f       	sbci	r31, 0xFB	; 251
     5d4:	10 82       	st	Z, r1
     5d6:	2d ef       	ldi	r18, 0xFD	; 253
     5d8:	d2 1a       	sub	r13, r18
     5da:	0d 2c       	mov	r0, r13
     5dc:	00 0c       	add	r0, r0
     5de:	ee 08       	sbc	r14, r14
     5e0:	ff 08       	sbc	r15, r15
     5e2:	c7 01       	movw	r24, r14
     5e4:	b6 01       	movw	r22, r12
     5e6:	86 d3       	rcall	.+1804   	; 0xcf4 <WIZCHIP_READ>
     5e8:	88 23       	and	r24, r24
     5ea:	d9 f3       	breq	.-10     	; 0x5e2 <socket+0x1ba>
     5ec:	81 2f       	mov	r24, r17
     5ee:	0b c0       	rjmp	.+22     	; 0x606 <socket+0x1de>
     5f0:	8f ef       	ldi	r24, 0xFF	; 255
     5f2:	09 c0       	rjmp	.+18     	; 0x606 <socket+0x1de>
     5f4:	8b ef       	ldi	r24, 0xFB	; 251
     5f6:	07 c0       	rjmp	.+14     	; 0x606 <socket+0x1de>
     5f8:	8a ef       	ldi	r24, 0xFA	; 250
     5fa:	05 c0       	rjmp	.+10     	; 0x606 <socket+0x1de>
     5fc:	8a ef       	ldi	r24, 0xFA	; 250
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <socket+0x1de>
     600:	8a ef       	ldi	r24, 0xFA	; 250
     602:	01 c0       	rjmp	.+2      	; 0x606 <socket+0x1de>
     604:	8a ef       	ldi	r24, 0xFA	; 250
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	df 90       	pop	r13
     61c:	cf 90       	pop	r12
     61e:	bf 90       	pop	r11
     620:	af 90       	pop	r10
     622:	7f 90       	pop	r7
     624:	6f 90       	pop	r6
     626:	5f 90       	pop	r5
     628:	4f 90       	pop	r4
     62a:	08 95       	ret

0000062c <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
     62c:	4f 92       	push	r4
     62e:	5f 92       	push	r5
     630:	6f 92       	push	r6
     632:	7f 92       	push	r7
     634:	8f 92       	push	r8
     636:	9f 92       	push	r9
     638:	af 92       	push	r10
     63a:	bf 92       	push	r11
     63c:	cf 92       	push	r12
     63e:	df 92       	push	r13
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
   CHECK_SOCKNUM();
     64a:	89 30       	cpi	r24, 0x09	; 9
     64c:	08 f0       	brcs	.+2      	; 0x650 <connect+0x24>
     64e:	b0 c0       	rjmp	.+352    	; 0x7b0 <connect+0x184>
     650:	7a 01       	movw	r14, r20
     652:	eb 01       	movw	r28, r22
     654:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     656:	c8 2e       	mov	r12, r24
     658:	d1 2c       	mov	r13, r1
     65a:	cc 0c       	add	r12, r12
     65c:	dd 1c       	adc	r13, r13
     65e:	cc 0c       	add	r12, r12
     660:	dd 1c       	adc	r13, r13
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	c8 1a       	sub	r12, r24
     666:	d8 0a       	sbc	r13, r24
     668:	cc 0c       	add	r12, r12
     66a:	dd 1c       	adc	r13, r13
     66c:	cc 0c       	add	r12, r12
     66e:	dd 1c       	adc	r13, r13
     670:	cc 0c       	add	r12, r12
     672:	dd 1c       	adc	r13, r13
     674:	b6 01       	movw	r22, r12
     676:	0d 2c       	mov	r0, r13
     678:	00 0c       	add	r0, r0
     67a:	88 0b       	sbc	r24, r24
     67c:	99 0b       	sbc	r25, r25
     67e:	3a d3       	rcall	.+1652   	; 0xcf4 <WIZCHIP_READ>
     680:	8f 70       	andi	r24, 0x0F	; 15
     682:	81 30       	cpi	r24, 0x01	; 1
     684:	09 f0       	breq	.+2      	; 0x688 <connect+0x5c>
     686:	96 c0       	rjmp	.+300    	; 0x7b4 <connect+0x188>
   CHECK_SOCKINIT();
     688:	46 01       	movw	r8, r12
     68a:	8d ef       	ldi	r24, 0xFD	; 253
     68c:	98 1a       	sub	r9, r24
     68e:	09 2c       	mov	r0, r9
     690:	00 0c       	add	r0, r0
     692:	aa 08       	sbc	r10, r10
     694:	bb 08       	sbc	r11, r11
     696:	c5 01       	movw	r24, r10
     698:	b4 01       	movw	r22, r8
     69a:	2c d3       	rcall	.+1624   	; 0xcf4 <WIZCHIP_READ>
     69c:	83 31       	cpi	r24, 0x13	; 19
     69e:	09 f0       	breq	.+2      	; 0x6a2 <connect+0x76>
     6a0:	8b c0       	rjmp	.+278    	; 0x7b8 <connect+0x18c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
     6a2:	48 81       	ld	r20, Y
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	76 2f       	mov	r23, r22
     6ac:	65 2f       	mov	r22, r21
     6ae:	54 2f       	mov	r21, r20
     6b0:	44 27       	eor	r20, r20
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	48 0f       	add	r20, r24
     6b6:	51 1d       	adc	r21, r1
     6b8:	61 1d       	adc	r22, r1
     6ba:	71 1d       	adc	r23, r1
     6bc:	76 2f       	mov	r23, r22
     6be:	65 2f       	mov	r22, r21
     6c0:	54 2f       	mov	r21, r20
     6c2:	44 27       	eor	r20, r20
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
     6c4:	8a 81       	ldd	r24, Y+2	; 0x02
     6c6:	48 0f       	add	r20, r24
     6c8:	51 1d       	adc	r21, r1
     6ca:	61 1d       	adc	r22, r1
     6cc:	71 1d       	adc	r23, r1
     6ce:	76 2f       	mov	r23, r22
     6d0:	65 2f       	mov	r22, r21
     6d2:	54 2f       	mov	r21, r20
     6d4:	44 27       	eor	r20, r20
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	a0 e0       	ldi	r26, 0x00	; 0
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	a1 09       	sbc	r26, r1
     6e2:	b1 09       	sbc	r27, r1
     6e4:	48 0f       	add	r20, r24
     6e6:	59 1f       	adc	r21, r25
     6e8:	6a 1f       	adc	r22, r26
     6ea:	7b 1f       	adc	r23, r27
     6ec:	4e 3f       	cpi	r20, 0xFE	; 254
     6ee:	5f 4f       	sbci	r21, 0xFF	; 255
     6f0:	6f 4f       	sbci	r22, 0xFF	; 255
     6f2:	7f 4f       	sbci	r23, 0xFF	; 255
     6f4:	08 f0       	brcs	.+2      	; 0x6f8 <connect+0xcc>
     6f6:	62 c0       	rjmp	.+196    	; 0x7bc <connect+0x190>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
     6f8:	e1 14       	cp	r14, r1
     6fa:	f1 04       	cpc	r15, r1
     6fc:	09 f4       	brne	.+2      	; 0x700 <connect+0xd4>
     6fe:	60 c0       	rjmp	.+192    	; 0x7c0 <connect+0x194>
	setSn_DIPR(sn,addr);
     700:	b6 01       	movw	r22, r12
     702:	74 5f       	subi	r23, 0xF4	; 244
     704:	07 2e       	mov	r0, r23
     706:	00 0c       	add	r0, r0
     708:	88 0b       	sbc	r24, r24
     70a:	99 0b       	sbc	r25, r25
     70c:	24 e0       	ldi	r18, 0x04	; 4
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	ae 01       	movw	r20, r28
     712:	51 d4       	rcall	.+2210   	; 0xfb6 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
     714:	b6 01       	movw	r22, r12
     716:	70 5f       	subi	r23, 0xF0	; 240
     718:	07 2e       	mov	r0, r23
     71a:	00 0c       	add	r0, r0
     71c:	88 0b       	sbc	r24, r24
     71e:	99 0b       	sbc	r25, r25
     720:	4f 2d       	mov	r20, r15
     722:	4f d3       	rcall	.+1694   	; 0xdc2 <WIZCHIP_WRITE>
     724:	b6 01       	movw	r22, r12
     726:	7f 5e       	subi	r23, 0xEF	; 239
     728:	07 2e       	mov	r0, r23
     72a:	00 0c       	add	r0, r0
     72c:	88 0b       	sbc	r24, r24
     72e:	99 0b       	sbc	r25, r25
     730:	4e 2d       	mov	r20, r14
     732:	47 d3       	rcall	.+1678   	; 0xdc2 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
     734:	26 01       	movw	r4, r12
     736:	53 94       	inc	r5
     738:	05 2c       	mov	r0, r5
     73a:	00 0c       	add	r0, r0
     73c:	66 08       	sbc	r6, r6
     73e:	77 08       	sbc	r7, r7
     740:	44 e0       	ldi	r20, 0x04	; 4
     742:	c3 01       	movw	r24, r6
     744:	b2 01       	movw	r22, r4
   while(getSn_CR(sn));
     746:	3d d3       	rcall	.+1658   	; 0xdc2 <WIZCHIP_WRITE>
     748:	c3 01       	movw	r24, r6
     74a:	b2 01       	movw	r22, r4
     74c:	d3 d2       	rcall	.+1446   	; 0xcf4 <WIZCHIP_READ>
     74e:	81 11       	cpse	r24, r1
     750:	fb cf       	rjmp	.-10     	; 0x748 <connect+0x11c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	02 c0       	rjmp	.+4      	; 0x75c <connect+0x130>
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	1a 95       	dec	r17
     75e:	e2 f7       	brpl	.-8      	; 0x758 <connect+0x12c>
     760:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <sock_io_mode>
     764:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <sock_io_mode+0x1>
     768:	82 23       	and	r24, r18
     76a:	93 23       	and	r25, r19
     76c:	89 2b       	or	r24, r25
     76e:	51 f5       	brne	.+84     	; 0x7c4 <connect+0x198>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
     770:	8e ef       	ldi	r24, 0xFE	; 254
     772:	d8 1a       	sub	r13, r24
     774:	0d 2c       	mov	r0, r13
     776:	00 0c       	add	r0, r0
     778:	ee 08       	sbc	r14, r14
     77a:	ff 08       	sbc	r15, r15
     77c:	12 c0       	rjmp	.+36     	; 0x7a2 <connect+0x176>
     77e:	c7 01       	movw	r24, r14
     780:	b6 01       	movw	r22, r12
     782:	b8 d2       	rcall	.+1392   	; 0xcf4 <WIZCHIP_READ>
     784:	83 ff       	sbrs	r24, 3
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
     786:	08 c0       	rjmp	.+16     	; 0x798 <connect+0x16c>
     788:	48 e0       	ldi	r20, 0x08	; 8
     78a:	6c 2d       	mov	r22, r12
     78c:	7d 2d       	mov	r23, r13
     78e:	8e 2d       	mov	r24, r14
     790:	9f 2d       	mov	r25, r15
            return SOCKERR_TIMEOUT;
     792:	17 d3       	rcall	.+1582   	; 0xdc2 <WIZCHIP_WRITE>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
     794:	83 ef       	ldi	r24, 0xF3	; 243
     796:	19 c0       	rjmp	.+50     	; 0x7ca <connect+0x19e>
     798:	c5 01       	movw	r24, r10
     79a:	b4 01       	movw	r22, r8
     79c:	ab d2       	rcall	.+1366   	; 0xcf4 <WIZCHIP_READ>
     79e:	88 23       	and	r24, r24
	setSn_DIPR(sn,addr);
	setSn_DPORT(sn,port);
	setSn_CR(sn,Sn_CR_CONNECT);
   while(getSn_CR(sn));
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
     7a0:	99 f0       	breq	.+38     	; 0x7c8 <connect+0x19c>
     7a2:	c5 01       	movw	r24, r10
     7a4:	b4 01       	movw	r22, r8
     7a6:	a6 d2       	rcall	.+1356   	; 0xcf4 <WIZCHIP_READ>
     7a8:	87 31       	cpi	r24, 0x17	; 23
     7aa:	49 f7       	brne	.-46     	; 0x77e <connect+0x152>
		{
			return SOCKERR_SOCKCLOSED;
		}
	}
   
   return SOCK_OK;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	0d c0       	rjmp	.+26     	; 0x7ca <connect+0x19e>
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
   CHECK_SOCKNUM();
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	0b c0       	rjmp	.+22     	; 0x7ca <connect+0x19e>
   CHECK_SOCKMODE(Sn_MR_TCP);
     7b4:	8b ef       	ldi	r24, 0xFB	; 251
     7b6:	09 c0       	rjmp	.+18     	; 0x7ca <connect+0x19e>
   CHECK_SOCKINIT();
     7b8:	8d ef       	ldi	r24, 0xFD	; 253
     7ba:	07 c0       	rjmp	.+14     	; 0x7ca <connect+0x19e>
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
     7bc:	84 ef       	ldi	r24, 0xF4	; 244
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <connect+0x19e>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
     7c0:	85 ef       	ldi	r24, 0xF5	; 245
     7c2:	03 c0       	rjmp	.+6      	; 0x7ca <connect+0x19e>
	setSn_DIPR(sn,addr);
	setSn_DPORT(sn,port);
	setSn_CR(sn,Sn_CR_CONNECT);
   while(getSn_CR(sn));
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <connect+0x19e>
            return SOCKERR_TIMEOUT;
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
		{
			return SOCKERR_SOCKCLOSED;
     7c8:	8c ef       	ldi	r24, 0xFC	; 252
		}
	}
   
   return SOCK_OK;
}
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	df 90       	pop	r13
     7d6:	cf 90       	pop	r12
     7d8:	bf 90       	pop	r11
     7da:	af 90       	pop	r10
     7dc:	9f 90       	pop	r9
     7de:	8f 90       	pop	r8
     7e0:	7f 90       	pop	r7
     7e2:	6f 90       	pop	r6
     7e4:	5f 90       	pop	r5
     7e6:	4f 90       	pop	r4
     7e8:	08 95       	ret

000007ea <disconnect>:

int8_t disconnect(uint8_t sn)
{
     7ea:	8f 92       	push	r8
     7ec:	9f 92       	push	r9
     7ee:	af 92       	push	r10
     7f0:	bf 92       	push	r11
     7f2:	cf 92       	push	r12
     7f4:	df 92       	push	r13
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
   CHECK_SOCKNUM();
     800:	89 30       	cpi	r24, 0x09	; 9
     802:	08 f0       	brcs	.+2      	; 0x806 <disconnect+0x1c>
     804:	63 c0       	rjmp	.+198    	; 0x8cc <disconnect+0xe2>
     806:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     808:	c8 2f       	mov	r28, r24
     80a:	d0 e0       	ldi	r29, 0x00	; 0
     80c:	cc 0f       	add	r28, r28
     80e:	dd 1f       	adc	r29, r29
     810:	cc 0f       	add	r28, r28
     812:	dd 1f       	adc	r29, r29
     814:	21 96       	adiw	r28, 0x01	; 1
     816:	cc 0f       	add	r28, r28
     818:	dd 1f       	adc	r29, r29
     81a:	cc 0f       	add	r28, r28
     81c:	dd 1f       	adc	r29, r29
     81e:	cc 0f       	add	r28, r28
     820:	dd 1f       	adc	r29, r29
     822:	be 01       	movw	r22, r28
     824:	0d 2e       	mov	r0, r29
     826:	00 0c       	add	r0, r0
     828:	88 0b       	sbc	r24, r24
     82a:	99 0b       	sbc	r25, r25
     82c:	63 d2       	rcall	.+1222   	; 0xcf4 <WIZCHIP_READ>
     82e:	8f 70       	andi	r24, 0x0F	; 15
     830:	81 30       	cpi	r24, 0x01	; 1
     832:	09 f0       	breq	.+2      	; 0x836 <disconnect+0x4c>
     834:	4d c0       	rjmp	.+154    	; 0x8d0 <disconnect+0xe6>
	setSn_CR(sn,Sn_CR_DISCON);
     836:	6e 01       	movw	r12, r28
     838:	d3 94       	inc	r13
     83a:	0d 2c       	mov	r0, r13
     83c:	00 0c       	add	r0, r0
     83e:	ee 08       	sbc	r14, r14
     840:	ff 08       	sbc	r15, r15
     842:	48 e0       	ldi	r20, 0x08	; 8
     844:	c7 01       	movw	r24, r14
     846:	b6 01       	movw	r22, r12
     848:	bc d2       	rcall	.+1400   	; 0xdc2 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
     84a:	c7 01       	movw	r24, r14
     84c:	b6 01       	movw	r22, r12
     84e:	52 d2       	rcall	.+1188   	; 0xcf4 <WIZCHIP_READ>
     850:	81 11       	cpse	r24, r1
     852:	fb cf       	rjmp	.-10     	; 0x84a <disconnect+0x60>
	sock_is_sending &= ~(1<<sn);
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	01 2e       	mov	r0, r17
     85a:	02 c0       	rjmp	.+4      	; 0x860 <disconnect+0x76>
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	0a 94       	dec	r0
     862:	e2 f7       	brpl	.-8      	; 0x85c <disconnect+0x72>
     864:	9c 01       	movw	r18, r24
     866:	20 95       	com	r18
     868:	30 95       	com	r19
     86a:	40 91 8e 04 	lds	r20, 0x048E	; 0x80048e <sock_is_sending>
     86e:	50 91 8f 04 	lds	r21, 0x048F	; 0x80048f <sock_is_sending+0x1>
     872:	24 23       	and	r18, r20
     874:	35 23       	and	r19, r21
     876:	30 93 8f 04 	sts	0x048F, r19	; 0x80048f <sock_is_sending+0x1>
     87a:	20 93 8e 04 	sts	0x048E, r18	; 0x80048e <sock_is_sending>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     87e:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <sock_io_mode>
     882:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <sock_io_mode+0x1>
     886:	82 23       	and	r24, r18
     888:	93 23       	and	r25, r19
     88a:	89 2b       	or	r24, r25
     88c:	19 f5       	brne	.+70     	; 0x8d4 <disconnect+0xea>
	while(getSn_SR(sn) != SOCK_CLOSED)
     88e:	4e 01       	movw	r8, r28
     890:	8d ef       	ldi	r24, 0xFD	; 253
     892:	98 1a       	sub	r9, r24
     894:	09 2c       	mov	r0, r9
     896:	00 0c       	add	r0, r0
     898:	aa 08       	sbc	r10, r10
     89a:	bb 08       	sbc	r11, r11
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
     89c:	6e 01       	movw	r12, r28
     89e:	8e ef       	ldi	r24, 0xFE	; 254
     8a0:	d8 1a       	sub	r13, r24
     8a2:	0d 2c       	mov	r0, r13
     8a4:	00 0c       	add	r0, r0
     8a6:	ee 08       	sbc	r14, r14
     8a8:	ff 08       	sbc	r15, r15
     8aa:	09 c0       	rjmp	.+18     	; 0x8be <disconnect+0xd4>
     8ac:	c7 01       	movw	r24, r14
     8ae:	b6 01       	movw	r22, r12
     8b0:	21 d2       	rcall	.+1090   	; 0xcf4 <WIZCHIP_READ>
     8b2:	83 ff       	sbrs	r24, 3
	   {
	      close(sn);
     8b4:	04 c0       	rjmp	.+8      	; 0x8be <disconnect+0xd4>
     8b6:	81 2f       	mov	r24, r17
	      return SOCKERR_TIMEOUT;
     8b8:	42 dd       	rcall	.-1404   	; 0x33e <close>
     8ba:	83 ef       	ldi	r24, 0xF3	; 243
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
	while(getSn_SR(sn) != SOCK_CLOSED)
     8bc:	0c c0       	rjmp	.+24     	; 0x8d6 <disconnect+0xec>
     8be:	c5 01       	movw	r24, r10
     8c0:	b4 01       	movw	r22, r8
     8c2:	18 d2       	rcall	.+1072   	; 0xcf4 <WIZCHIP_READ>
     8c4:	81 11       	cpse	r24, r1
     8c6:	f2 cf       	rjmp	.-28     	; 0x8ac <disconnect+0xc2>
	   {
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <disconnect+0xec>
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
     8cc:	8f ef       	ldi	r24, 0xFF	; 255
     8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <disconnect+0xec>
   CHECK_SOCKMODE(Sn_MR_TCP);
     8d0:	8b ef       	ldi	r24, 0xFB	; 251
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <disconnect+0xec>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     8d4:	80 e0       	ldi	r24, 0x00	; 0
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	df 90       	pop	r13
     8e2:	cf 90       	pop	r12
     8e4:	bf 90       	pop	r11
     8e6:	af 90       	pop	r10
     8e8:	9f 90       	pop	r9
     8ea:	8f 90       	pop	r8
     8ec:	08 95       	ret

000008ee <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
     8ee:	2f 92       	push	r2
     8f0:	3f 92       	push	r3
     8f2:	4f 92       	push	r4
     8f4:	5f 92       	push	r5
     8f6:	6f 92       	push	r6
     8f8:	7f 92       	push	r7
     8fa:	8f 92       	push	r8
     8fc:	9f 92       	push	r9
     8fe:	af 92       	push	r10
     900:	bf 92       	push	r11
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	00 d0       	rcall	.+0      	; 0x912 <send+0x24>
     912:	1f 92       	push	r1
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
     918:	89 30       	cpi	r24, 0x09	; 9
     91a:	08 f0       	brcs	.+2      	; 0x91e <send+0x30>
     91c:	c3 c0       	rjmp	.+390    	; 0xaa4 <send+0x1b6>
     91e:	6a 01       	movw	r12, r20
     920:	1b 01       	movw	r2, r22
     922:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     924:	e8 2e       	mov	r14, r24
     926:	f1 2c       	mov	r15, r1
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	ee 0c       	add	r14, r14
     92e:	ff 1c       	adc	r15, r15
     930:	2f ef       	ldi	r18, 0xFF	; 255
     932:	e2 1a       	sub	r14, r18
     934:	f2 0a       	sbc	r15, r18
     936:	ee 0c       	add	r14, r14
     938:	ff 1c       	adc	r15, r15
     93a:	ee 0c       	add	r14, r14
     93c:	ff 1c       	adc	r15, r15
     93e:	ee 0c       	add	r14, r14
     940:	ff 1c       	adc	r15, r15
     942:	b7 01       	movw	r22, r14
     944:	0f 2c       	mov	r0, r15
     946:	00 0c       	add	r0, r0
     948:	88 0b       	sbc	r24, r24
     94a:	99 0b       	sbc	r25, r25
     94c:	d3 d1       	rcall	.+934    	; 0xcf4 <WIZCHIP_READ>
     94e:	8f 70       	andi	r24, 0x0F	; 15
     950:	81 30       	cpi	r24, 0x01	; 1
     952:	09 f0       	breq	.+2      	; 0x956 <send+0x68>
     954:	ab c0       	rjmp	.+342    	; 0xaac <send+0x1be>
   CHECK_SOCKDATA();
     956:	c1 14       	cp	r12, r1
     958:	d1 04       	cpc	r13, r1
     95a:	09 f4       	brne	.+2      	; 0x95e <send+0x70>
     95c:	ac c0       	rjmp	.+344    	; 0xab6 <send+0x1c8>
   tmp = getSn_SR(sn);
     95e:	27 01       	movw	r4, r14
     960:	3d ef       	ldi	r19, 0xFD	; 253
     962:	53 1a       	sub	r5, r19
     964:	05 2c       	mov	r0, r5
     966:	00 0c       	add	r0, r0
     968:	66 08       	sbc	r6, r6
     96a:	77 08       	sbc	r7, r7
     96c:	c3 01       	movw	r24, r6
     96e:	b2 01       	movw	r22, r4
     970:	c1 d1       	rcall	.+898    	; 0xcf4 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
     972:	87 31       	cpi	r24, 0x17	; 23
     974:	19 f0       	breq	.+6      	; 0x97c <send+0x8e>
     976:	8c 31       	cpi	r24, 0x1C	; 28
     978:	09 f0       	breq	.+2      	; 0x97c <send+0x8e>
     97a:	a2 c0       	rjmp	.+324    	; 0xac0 <send+0x1d2>
   if( sock_is_sending & (1<<sn) )
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	4c 01       	movw	r8, r24
     982:	01 2e       	mov	r0, r17
     984:	02 c0       	rjmp	.+4      	; 0x98a <send+0x9c>
     986:	88 0c       	add	r8, r8
     988:	99 1c       	adc	r9, r9
     98a:	0a 94       	dec	r0
     98c:	e2 f7       	brpl	.-8      	; 0x986 <send+0x98>
     98e:	54 01       	movw	r10, r8
     990:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <sock_is_sending>
     994:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <sock_is_sending+0x1>
     998:	88 21       	and	r24, r8
     99a:	99 21       	and	r25, r9
     99c:	89 2b       	or	r24, r25
     99e:	61 f1       	breq	.+88     	; 0x9f8 <send+0x10a>
   {
      tmp = getSn_IR(sn);
     9a0:	c7 01       	movw	r24, r14
     9a2:	9e 5f       	subi	r25, 0xFE	; 254
     9a4:	9c 01       	movw	r18, r24
     9a6:	99 0f       	add	r25, r25
     9a8:	44 0b       	sbc	r20, r20
     9aa:	55 0b       	sbc	r21, r21
     9ac:	29 83       	std	Y+1, r18	; 0x01
     9ae:	3a 83       	std	Y+2, r19	; 0x02
     9b0:	4b 83       	std	Y+3, r20	; 0x03
     9b2:	5c 83       	std	Y+4, r21	; 0x04
     9b4:	ca 01       	movw	r24, r20
     9b6:	b9 01       	movw	r22, r18
     9b8:	9d d1       	rcall	.+826    	; 0xcf4 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
     9ba:	84 ff       	sbrs	r24, 4
     9bc:	14 c0       	rjmp	.+40     	; 0x9e6 <send+0xf8>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
     9be:	40 e1       	ldi	r20, 0x10	; 16
     9c0:	69 81       	ldd	r22, Y+1	; 0x01
     9c2:	7a 81       	ldd	r23, Y+2	; 0x02
     9c4:	8b 81       	ldd	r24, Y+3	; 0x03
     9c6:	9c 81       	ldd	r25, Y+4	; 0x04
     9c8:	fc d1       	rcall	.+1016   	; 0xdc2 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
     9ca:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <sock_is_sending>
     9ce:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <sock_is_sending+0x1>
     9d2:	c4 01       	movw	r24, r8
     9d4:	80 95       	com	r24
     9d6:	90 95       	com	r25
     9d8:	82 23       	and	r24, r18
     9da:	93 23       	and	r25, r19
     9dc:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <sock_is_sending+0x1>
     9e0:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <sock_is_sending>
      }
      else if(tmp & Sn_IR_TIMEOUT)
     9e4:	09 c0       	rjmp	.+18     	; 0x9f8 <send+0x10a>
     9e6:	83 ff       	sbrs	r24, 3
      {
         close(sn);
     9e8:	70 c0       	rjmp	.+224    	; 0xaca <send+0x1dc>
     9ea:	81 2f       	mov	r24, r17
     9ec:	a8 dc       	rcall	.-1712   	; 0x33e <close>
         return SOCKERR_TIMEOUT;
     9ee:	63 ef       	ldi	r22, 0xF3	; 243
     9f0:	7f ef       	ldi	r23, 0xFF	; 255
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	9f ef       	ldi	r25, 0xFF	; 255
     9f6:	70 c0       	rjmp	.+224    	; 0xad8 <send+0x1ea>
      }
      else return SOCK_BUSY;
   }
   freesize = getSn_TxMAX(sn);
     9f8:	b7 01       	movw	r22, r14
     9fa:	71 5e       	subi	r23, 0xE1	; 225
     9fc:	07 2e       	mov	r0, r23
     9fe:	00 0c       	add	r0, r0
     a00:	88 0b       	sbc	r24, r24
     a02:	99 0b       	sbc	r25, r25
     a04:	77 d1       	rcall	.+750    	; 0xcf4 <WIZCHIP_READ>
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	98 2f       	mov	r25, r24
     a0a:	88 27       	eor	r24, r24
     a0c:	99 0f       	add	r25, r25
     a0e:	99 0f       	add	r25, r25
     a10:	8c 15       	cp	r24, r12
     a12:	9d 05       	cpc	r25, r13
     a14:	08 f4       	brcc	.+2      	; 0xa18 <send+0x12a>
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
     a16:	6c 01       	movw	r12, r24
     a18:	81 2f       	mov	r24, r17
     a1a:	5b d3       	rcall	.+1718   	; 0x10d2 <getSn_TX_FSR>
     a1c:	9a 83       	std	Y+2, r25	; 0x02
      tmp = getSn_SR(sn);
     a1e:	89 83       	std	Y+1, r24	; 0x01
     a20:	c3 01       	movw	r24, r6
     a22:	b2 01       	movw	r22, r4
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
     a24:	67 d1       	rcall	.+718    	; 0xcf4 <WIZCHIP_READ>
     a26:	87 31       	cpi	r24, 0x17	; 23
     a28:	49 f0       	breq	.+18     	; 0xa3c <send+0x14e>
     a2a:	8c 31       	cpi	r24, 0x1C	; 28
      {
         close(sn);
     a2c:	39 f0       	breq	.+14     	; 0xa3c <send+0x14e>
     a2e:	81 2f       	mov	r24, r17
     a30:	86 dc       	rcall	.-1780   	; 0x33e <close>
         return SOCKERR_SOCKSTATUS;
     a32:	69 ef       	ldi	r22, 0xF9	; 249
     a34:	7f ef       	ldi	r23, 0xFF	; 255
     a36:	8f ef       	ldi	r24, 0xFF	; 255
     a38:	9f ef       	ldi	r25, 0xFF	; 255
     a3a:	4e c0       	rjmp	.+156    	; 0xad8 <send+0x1ea>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     a3c:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <sock_io_mode>
     a40:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <sock_io_mode+0x1>
     a44:	8a 21       	and	r24, r10
     a46:	9b 21       	and	r25, r11
     a48:	89 2b       	or	r24, r25
     a4a:	31 f0       	breq	.+12     	; 0xa58 <send+0x16a>
     a4c:	49 81       	ldd	r20, Y+1	; 0x01
     a4e:	5a 81       	ldd	r21, Y+2	; 0x02
     a50:	4c 15       	cp	r20, r12
     a52:	5d 05       	cpc	r21, r13
     a54:	30 f4       	brcc	.+12     	; 0xa62 <send+0x174>
      if(len <= freesize) break;
     a56:	3d c0       	rjmp	.+122    	; 0xad2 <send+0x1e4>
     a58:	89 81       	ldd	r24, Y+1	; 0x01
     a5a:	9a 81       	ldd	r25, Y+2	; 0x02
     a5c:	8c 15       	cp	r24, r12
     a5e:	9d 05       	cpc	r25, r13
   }
   wiz_send_data(sn, buf, len);
     a60:	d8 f2       	brcs	.-74     	; 0xa18 <send+0x12a>
     a62:	a6 01       	movw	r20, r12
     a64:	b1 01       	movw	r22, r2
     a66:	81 2f       	mov	r24, r17

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
     a68:	dc d3       	rcall	.+1976   	; 0x1222 <wiz_send_data>
     a6a:	27 01       	movw	r4, r14
     a6c:	53 94       	inc	r5
     a6e:	05 2c       	mov	r0, r5
     a70:	00 0c       	add	r0, r0
     a72:	66 08       	sbc	r6, r6
     a74:	77 08       	sbc	r7, r7
     a76:	40 e2       	ldi	r20, 0x20	; 32
     a78:	c3 01       	movw	r24, r6
     a7a:	b2 01       	movw	r22, r4
   /* wait to process the command... */
   while(getSn_CR(sn));
     a7c:	a2 d1       	rcall	.+836    	; 0xdc2 <WIZCHIP_WRITE>
     a7e:	c3 01       	movw	r24, r6
     a80:	b2 01       	movw	r22, r4
     a82:	38 d1       	rcall	.+624    	; 0xcf4 <WIZCHIP_READ>
     a84:	81 11       	cpse	r24, r1
     a86:	fb cf       	rjmp	.-10     	; 0xa7e <send+0x190>
   sock_is_sending |= (1 << sn);
     a88:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <sock_is_sending>
     a8c:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <sock_is_sending+0x1>
     a90:	88 2a       	or	r8, r24
     a92:	99 2a       	or	r9, r25
     a94:	90 92 8f 04 	sts	0x048F, r9	; 0x80048f <sock_is_sending+0x1>
     a98:	80 92 8e 04 	sts	0x048E, r8	; 0x80048e <sock_is_sending>
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
     a9c:	b6 01       	movw	r22, r12
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	1a c0       	rjmp	.+52     	; 0xad8 <send+0x1ea>
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
     aa4:	6f ef       	ldi	r22, 0xFF	; 255
     aa6:	7f ef       	ldi	r23, 0xFF	; 255
     aa8:	cb 01       	movw	r24, r22
     aaa:	16 c0       	rjmp	.+44     	; 0xad8 <send+0x1ea>
   CHECK_SOCKMODE(Sn_MR_TCP);
     aac:	6b ef       	ldi	r22, 0xFB	; 251
     aae:	7f ef       	ldi	r23, 0xFF	; 255
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	9f ef       	ldi	r25, 0xFF	; 255
     ab4:	11 c0       	rjmp	.+34     	; 0xad8 <send+0x1ea>
   CHECK_SOCKDATA();
     ab6:	62 ef       	ldi	r22, 0xF2	; 242
     ab8:	7f ef       	ldi	r23, 0xFF	; 255
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	9f ef       	ldi	r25, 0xFF	; 255
     abe:	0c c0       	rjmp	.+24     	; 0xad8 <send+0x1ea>
   tmp = getSn_SR(sn);
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
     ac0:	69 ef       	ldi	r22, 0xF9	; 249
     ac2:	7f ef       	ldi	r23, 0xFF	; 255
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	9f ef       	ldi	r25, 0xFF	; 255
     ac8:	07 c0       	rjmp	.+14     	; 0xad8 <send+0x1ea>
      else if(tmp & Sn_IR_TIMEOUT)
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	cb 01       	movw	r24, r22
     ad0:	03 c0       	rjmp	.+6      	; 0xad8 <send+0x1ea>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
      {
         close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	cb 01       	movw	r24, r22
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	cf 90       	pop	r12
     aee:	bf 90       	pop	r11
     af0:	af 90       	pop	r10
     af2:	9f 90       	pop	r9
     af4:	8f 90       	pop	r8
     af6:	7f 90       	pop	r7
     af8:	6f 90       	pop	r6
     afa:	5f 90       	pop	r5
     afc:	4f 90       	pop	r4
     afe:	3f 90       	pop	r3
     b00:	2f 90       	pop	r2
     b02:	08 95       	ret

00000b04 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
     b04:	2f 92       	push	r2
     b06:	3f 92       	push	r3
     b08:	4f 92       	push	r4
     b0a:	5f 92       	push	r5
     b0c:	6f 92       	push	r6
     b0e:	7f 92       	push	r7
     b10:	8f 92       	push	r8
     b12:	9f 92       	push	r9
     b14:	af 92       	push	r10
     b16:	bf 92       	push	r11
     b18:	cf 92       	push	r12
     b1a:	df 92       	push	r13
     b1c:	ef 92       	push	r14
     b1e:	ff 92       	push	r15
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	00 d0       	rcall	.+0      	; 0xb2a <recv+0x26>
     b2a:	1f 92       	push	r1
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
     b30:	89 30       	cpi	r24, 0x09	; 9
     b32:	08 f0       	brcs	.+2      	; 0xb36 <recv+0x32>
     b34:	a8 c0       	rjmp	.+336    	; 0xc86 <recv+0x182>
     b36:	6a 01       	movw	r12, r20
     b38:	7a 83       	std	Y+2, r23	; 0x02
     b3a:	69 83       	std	Y+1, r22	; 0x01
     b3c:	38 2e       	mov	r3, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     b3e:	08 2f       	mov	r16, r24
     b40:	10 e0       	ldi	r17, 0x00	; 0
     b42:	00 0f       	add	r16, r16
     b44:	11 1f       	adc	r17, r17
     b46:	00 0f       	add	r16, r16
     b48:	11 1f       	adc	r17, r17
     b4a:	0f 5f       	subi	r16, 0xFF	; 255
     b4c:	1f 4f       	sbci	r17, 0xFF	; 255
     b4e:	00 0f       	add	r16, r16
     b50:	11 1f       	adc	r17, r17
     b52:	00 0f       	add	r16, r16
     b54:	11 1f       	adc	r17, r17
     b56:	00 0f       	add	r16, r16
     b58:	11 1f       	adc	r17, r17
     b5a:	b8 01       	movw	r22, r16
     b5c:	01 2e       	mov	r0, r17
     b5e:	00 0c       	add	r0, r0
     b60:	88 0b       	sbc	r24, r24
     b62:	99 0b       	sbc	r25, r25
     b64:	c7 d0       	rcall	.+398    	; 0xcf4 <WIZCHIP_READ>
     b66:	8f 70       	andi	r24, 0x0F	; 15
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	09 f0       	breq	.+2      	; 0xb6e <recv+0x6a>
     b6c:	90 c0       	rjmp	.+288    	; 0xc8e <recv+0x18a>
   CHECK_SOCKDATA();
     b6e:	c1 14       	cp	r12, r1
     b70:	d1 04       	cpc	r13, r1
     b72:	09 f4       	brne	.+2      	; 0xb76 <recv+0x72>
     b74:	91 c0       	rjmp	.+290    	; 0xc98 <recv+0x194>
   
   recvsize = getSn_RxMAX(sn);
     b76:	b8 01       	movw	r22, r16
     b78:	72 5e       	subi	r23, 0xE2	; 226
     b7a:	07 2e       	mov	r0, r23
     b7c:	00 0c       	add	r0, r0
     b7e:	88 0b       	sbc	r24, r24
     b80:	99 0b       	sbc	r25, r25
     b82:	b8 d0       	rcall	.+368    	; 0xcf4 <WIZCHIP_READ>
     b84:	28 2e       	mov	r2, r24
            {
               close(sn);
               return SOCKERR_SOCKSTATUS;
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	7c 01       	movw	r14, r24
     b8c:	03 2c       	mov	r0, r3
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <recv+0x90>
     b90:	ee 0c       	add	r14, r14
     b92:	ff 1c       	adc	r15, r15
     b94:	0a 94       	dec	r0
     b96:	e2 f7       	brpl	.-8      	; 0xb90 <recv+0x8c>
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
         tmp = getSn_SR(sn);
     b98:	48 01       	movw	r8, r16
     b9a:	2d ef       	ldi	r18, 0xFD	; 253
     b9c:	92 1a       	sub	r9, r18
     b9e:	09 2c       	mov	r0, r9
     ba0:	00 0c       	add	r0, r0
     ba2:	aa 08       	sbc	r10, r10
     ba4:	bb 08       	sbc	r11, r11
         if (tmp != SOCK_ESTABLISHED)
         {
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
     ba6:	28 01       	movw	r4, r16
     ba8:	31 ee       	ldi	r19, 0xE1	; 225
     baa:	53 1a       	sub	r5, r19
     bac:	05 2c       	mov	r0, r5
     bae:	00 0c       	add	r0, r0
     bb0:	66 08       	sbc	r6, r6
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
     bb2:	77 08       	sbc	r7, r7
     bb4:	83 2d       	mov	r24, r3
     bb6:	e1 d2       	rcall	.+1474   	; 0x117a <getSn_RX_RSR>
     bb8:	9c 83       	std	Y+4, r25	; 0x04
         tmp = getSn_SR(sn);
     bba:	8b 83       	std	Y+3, r24	; 0x03
     bbc:	c5 01       	movw	r24, r10
     bbe:	b4 01       	movw	r22, r8
     bc0:	99 d0       	rcall	.+306    	; 0xcf4 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
     bc2:	87 31       	cpi	r24, 0x17	; 23
     bc4:	31 f1       	breq	.+76     	; 0xc12 <recv+0x10e>
         {
            if(tmp == SOCK_CLOSE_WAIT)
     bc6:	8c 31       	cpi	r24, 0x1C	; 28
     bc8:	e9 f4       	brne	.+58     	; 0xc04 <recv+0x100>
            {
               if(recvsize != 0) break;
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	9c 81       	ldd	r25, Y+4	; 0x04
     bce:	89 2b       	or	r24, r25
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
     bd0:	91 f5       	brne	.+100    	; 0xc36 <recv+0x132>
     bd2:	83 2d       	mov	r24, r3
     bd4:	7e d2       	rcall	.+1276   	; 0x10d2 <getSn_TX_FSR>
     bd6:	9c 83       	std	Y+4, r25	; 0x04
     bd8:	8b 83       	std	Y+3, r24	; 0x03
     bda:	c3 01       	movw	r24, r6
     bdc:	b2 01       	movw	r22, r4
     bde:	8a d0       	rcall	.+276    	; 0xcf4 <WIZCHIP_READ>
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	98 2f       	mov	r25, r24
     be4:	88 27       	eor	r24, r24
     be6:	99 0f       	add	r25, r25
     be8:	99 0f       	add	r25, r25
     bea:	2b 81       	ldd	r18, Y+3	; 0x03
     bec:	3c 81       	ldd	r19, Y+4	; 0x04
     bee:	28 17       	cp	r18, r24
     bf0:	39 07       	cpc	r19, r25
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <recv+0xf2>
               {
                  close(sn);
     bf4:	5e c0       	rjmp	.+188    	; 0xcb2 <recv+0x1ae>
     bf6:	83 2d       	mov	r24, r3
                  return SOCKERR_SOCKSTATUS;
     bf8:	a2 db       	rcall	.-2236   	; 0x33e <close>
     bfa:	69 ef       	ldi	r22, 0xF9	; 249
     bfc:	7f ef       	ldi	r23, 0xFF	; 255
     bfe:	8f ef       	ldi	r24, 0xFF	; 255
     c00:	9f ef       	ldi	r25, 0xFF	; 255
               }
            }
            else
            {
               close(sn);
     c02:	61 c0       	rjmp	.+194    	; 0xcc6 <recv+0x1c2>
     c04:	83 2d       	mov	r24, r3
     c06:	9b db       	rcall	.-2250   	; 0x33e <close>
               return SOCKERR_SOCKSTATUS;
     c08:	69 ef       	ldi	r22, 0xF9	; 249
     c0a:	7f ef       	ldi	r23, 0xFF	; 255
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	9f ef       	ldi	r25, 0xFF	; 255
     c10:	5a c0       	rjmp	.+180    	; 0xcc6 <recv+0x1c2>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
     c12:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <sock_io_mode>
     c16:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <sock_io_mode+0x1>
     c1a:	8e 21       	and	r24, r14
     c1c:	9f 21       	and	r25, r15
     c1e:	89 2b       	or	r24, r25
     c20:	29 f0       	breq	.+10     	; 0xc2c <recv+0x128>
     c22:	8b 81       	ldd	r24, Y+3	; 0x03
     c24:	9c 81       	ldd	r25, Y+4	; 0x04
     c26:	89 2b       	or	r24, r25
     c28:	31 f4       	brne	.+12     	; 0xc36 <recv+0x132>
     c2a:	3b c0       	rjmp	.+118    	; 0xca2 <recv+0x19e>
         if(recvsize != 0) break;
     c2c:	2b 81       	ldd	r18, Y+3	; 0x03
     c2e:	3c 81       	ldd	r19, Y+4	; 0x04
     c30:	23 2b       	or	r18, r19
     c32:	09 f4       	brne	.+2      	; 0xc36 <recv+0x132>
     c34:	bf cf       	rjmp	.-130    	; 0xbb4 <recv+0xb0>
//
   CHECK_SOCKNUM();
   CHECK_SOCKMODE(Sn_MR_TCP);
   CHECK_SOCKDATA();
   
   recvsize = getSn_RxMAX(sn);
     c36:	82 2d       	mov	r24, r2
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	98 2f       	mov	r25, r24
     c3c:	88 27       	eor	r24, r24
     c3e:	99 0f       	add	r25, r25
     c40:	99 0f       	add	r25, r25
     c42:	8c 15       	cp	r24, r12
     c44:	9d 05       	cpc	r25, r13
     c46:	08 f4       	brcc	.+2      	; 0xc4a <recv+0x146>
     c48:	6c 01       	movw	r12, r24
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	8c 15       	cp	r24, r12
     c50:	9d 05       	cpc	r25, r13
     c52:	08 f4       	brcc	.+2      	; 0xc56 <recv+0x152>
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
   wiz_recv_data(sn, buf, len);
     c54:	6c 01       	movw	r12, r24
     c56:	a6 01       	movw	r20, r12
     c58:	69 81       	ldd	r22, Y+1	; 0x01
     c5a:	7a 81       	ldd	r23, Y+2	; 0x02
     c5c:	83 2d       	mov	r24, r3
     c5e:	68 d3       	rcall	.+1744   	; 0x1330 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
     c60:	48 01       	movw	r8, r16
     c62:	93 94       	inc	r9
     c64:	09 2c       	mov	r0, r9
     c66:	00 0c       	add	r0, r0
     c68:	aa 08       	sbc	r10, r10
     c6a:	bb 08       	sbc	r11, r11
     c6c:	40 e4       	ldi	r20, 0x40	; 64
     c6e:	c5 01       	movw	r24, r10
     c70:	b4 01       	movw	r22, r8
   while(getSn_CR(sn));
     c72:	a7 d0       	rcall	.+334    	; 0xdc2 <WIZCHIP_WRITE>
     c74:	c5 01       	movw	r24, r10
     c76:	b4 01       	movw	r22, r8
     c78:	3d d0       	rcall	.+122    	; 0xcf4 <WIZCHIP_READ>
     c7a:	81 11       	cpse	r24, r1
     c7c:	fb cf       	rjmp	.-10     	; 0xc74 <recv+0x170>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
     c7e:	b6 01       	movw	r22, r12
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	20 c0       	rjmp	.+64     	; 0xcc6 <recv+0x1c2>
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
     c86:	6f ef       	ldi	r22, 0xFF	; 255
     c88:	7f ef       	ldi	r23, 0xFF	; 255
     c8a:	cb 01       	movw	r24, r22
     c8c:	1c c0       	rjmp	.+56     	; 0xcc6 <recv+0x1c2>
   CHECK_SOCKMODE(Sn_MR_TCP);
     c8e:	6b ef       	ldi	r22, 0xFB	; 251
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	9f ef       	ldi	r25, 0xFF	; 255
     c96:	17 c0       	rjmp	.+46     	; 0xcc6 <recv+0x1c2>
   CHECK_SOCKDATA();
     c98:	62 ef       	ldi	r22, 0xF2	; 242
     c9a:	7f ef       	ldi	r23, 0xFF	; 255
     c9c:	8f ef       	ldi	r24, 0xFF	; 255
     c9e:	9f ef       	ldi	r25, 0xFF	; 255
     ca0:	12 c0       	rjmp	.+36     	; 0xcc6 <recv+0x1c2>
            {
               close(sn);
               return SOCKERR_SOCKSTATUS;
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	cb 01       	movw	r24, r22
     ca8:	0e c0       	rjmp	.+28     	; 0xcc6 <recv+0x1c2>
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	cb 01       	movw	r24, r22
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <recv+0x1c2>
     cb2:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <sock_io_mode>
     cb6:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <sock_io_mode+0x1>
     cba:	8e 21       	and	r24, r14
     cbc:	9f 21       	and	r25, r15
     cbe:	89 2b       	or	r24, r25
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <recv+0x1c0>
     cc2:	78 cf       	rjmp	.-272    	; 0xbb4 <recv+0xb0>
     cc4:	f2 cf       	rjmp	.-28     	; 0xcaa <recv+0x1a6>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
     cde:	bf 90       	pop	r11
     ce0:	af 90       	pop	r10
     ce2:	9f 90       	pop	r9
     ce4:	8f 90       	pop	r8
     ce6:	7f 90       	pop	r7
     ce8:	6f 90       	pop	r6
     cea:	5f 90       	pop	r5
     cec:	4f 90       	pop	r4
     cee:	3f 90       	pop	r3
     cf0:	2f 90       	pop	r2
     cf2:	08 95       	ret

00000cf4 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	00 d0       	rcall	.+0      	; 0xd04 <WIZCHIP_READ+0x10>
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	f6 2e       	mov	r15, r22
     d0a:	e7 2e       	mov	r14, r23
     d0c:	d8 2e       	mov	r13, r24
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
     d0e:	06 e0       	ldi	r16, 0x06	; 6
     d10:	12 e0       	ldi	r17, 0x02	; 2
     d12:	d8 01       	movw	r26, r16
     d14:	18 96       	adiw	r26, 0x08	; 8
     d16:	ed 91       	ld	r30, X+
     d18:	fc 91       	ld	r31, X
     d1a:	19 97       	sbiw	r26, 0x09	; 9
     d1c:	19 95       	eicall
   WIZCHIP.CS._select();
     d1e:	d8 01       	movw	r26, r16
     d20:	1c 96       	adiw	r26, 0x0c	; 12
     d22:	ed 91       	ld	r30, X+
     d24:	fc 91       	ld	r31, X
     d26:	1d 97       	sbiw	r26, 0x0d	; 13
     d28:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
     d2a:	f8 01       	movw	r30, r16
     d2c:	84 89       	ldd	r24, Z+20	; 0x14
     d2e:	95 89       	ldd	r25, Z+21	; 0x15
     d30:	89 2b       	or	r24, r25
     d32:	31 f0       	breq	.+12     	; 0xd40 <WIZCHIP_READ+0x4c>
     d34:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
     d38:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
     d3c:	30 97       	sbiw	r30, 0x00	; 0
     d3e:	c1 f4       	brne	.+48     	; 0xd70 <WIZCHIP_READ+0x7c>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     d40:	06 e0       	ldi	r16, 0x06	; 6
     d42:	12 e0       	ldi	r17, 0x02	; 2
     d44:	d8 01       	movw	r26, r16
     d46:	52 96       	adiw	r26, 0x12	; 18
     d48:	ed 91       	ld	r30, X+
     d4a:	fc 91       	ld	r31, X
     d4c:	53 97       	sbiw	r26, 0x13	; 19
     d4e:	8d 2d       	mov	r24, r13
     d50:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     d52:	d8 01       	movw	r26, r16
     d54:	52 96       	adiw	r26, 0x12	; 18
     d56:	ed 91       	ld	r30, X+
     d58:	fc 91       	ld	r31, X
     d5a:	53 97       	sbiw	r26, 0x13	; 19
     d5c:	8e 2d       	mov	r24, r14
     d5e:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     d60:	d8 01       	movw	r26, r16
     d62:	52 96       	adiw	r26, 0x12	; 18
     d64:	ed 91       	ld	r30, X+
     d66:	fc 91       	ld	r31, X
     d68:	53 97       	sbiw	r26, 0x13	; 19
     d6a:	8f 2d       	mov	r24, r15
     d6c:	19 95       	eicall
     d6e:	08 c0       	rjmp	.+16     	; 0xd80 <WIZCHIP_READ+0x8c>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
     d70:	d9 82       	std	Y+1, r13	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
     d72:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
     d74:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
     d76:	63 e0       	ldi	r22, 0x03	; 3
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	ce 01       	movw	r24, r28
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	19 95       	eicall
   }
   ret = WIZCHIP.IF.SPI._read_byte();
     d80:	06 e0       	ldi	r16, 0x06	; 6
     d82:	12 e0       	ldi	r17, 0x02	; 2
     d84:	d8 01       	movw	r26, r16
     d86:	50 96       	adiw	r26, 0x10	; 16
     d88:	ed 91       	ld	r30, X+
     d8a:	fc 91       	ld	r31, X
     d8c:	51 97       	sbiw	r26, 0x11	; 17
     d8e:	19 95       	eicall
     d90:	f8 2e       	mov	r15, r24

   WIZCHIP.CS._deselect();
     d92:	d8 01       	movw	r26, r16
     d94:	1e 96       	adiw	r26, 0x0e	; 14
     d96:	ed 91       	ld	r30, X+
     d98:	fc 91       	ld	r31, X
     d9a:	1f 97       	sbiw	r26, 0x0f	; 15
     d9c:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
     d9e:	d8 01       	movw	r26, r16
     da0:	1a 96       	adiw	r26, 0x0a	; 10
     da2:	ed 91       	ld	r30, X+
     da4:	fc 91       	ld	r31, X
     da6:	1b 97       	sbiw	r26, 0x0b	; 11
     da8:	19 95       	eicall
   return ret;
}
     daa:	8f 2d       	mov	r24, r15
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	ff 90       	pop	r15
     dbc:	ef 90       	pop	r14
     dbe:	df 90       	pop	r13
     dc0:	08 95       	ret

00000dc2 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
     dc2:	4f 92       	push	r4
     dc4:	5f 92       	push	r5
     dc6:	6f 92       	push	r6
     dc8:	7f 92       	push	r7
     dca:	bf 92       	push	r11
     dcc:	cf 92       	push	r12
     dce:	df 92       	push	r13
     dd0:	ef 92       	push	r14
     dd2:	ff 92       	push	r15
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	00 d0       	rcall	.+0      	; 0xdde <WIZCHIP_WRITE+0x1c>
     dde:	1f 92       	push	r1
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	6b 01       	movw	r12, r22
     de6:	7c 01       	movw	r14, r24
     de8:	b4 2e       	mov	r11, r20
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
     dea:	06 e0       	ldi	r16, 0x06	; 6
     dec:	12 e0       	ldi	r17, 0x02	; 2
     dee:	d8 01       	movw	r26, r16
     df0:	18 96       	adiw	r26, 0x08	; 8
     df2:	ed 91       	ld	r30, X+
     df4:	fc 91       	ld	r31, X
     df6:	19 97       	sbiw	r26, 0x09	; 9
     df8:	19 95       	eicall
   WIZCHIP.CS._select();
     dfa:	d8 01       	movw	r26, r16
     dfc:	1c 96       	adiw	r26, 0x0c	; 12
     dfe:	ed 91       	ld	r30, X+
     e00:	fc 91       	ld	r31, X
     e02:	1d 97       	sbiw	r26, 0x0d	; 13
     e04:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
     e06:	26 01       	movw	r4, r12
     e08:	37 01       	movw	r6, r14
     e0a:	68 94       	set
     e0c:	42 f8       	bld	r4, 2

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
     e0e:	d8 01       	movw	r26, r16
     e10:	56 96       	adiw	r26, 0x16	; 22
     e12:	ed 91       	ld	r30, X+
     e14:	fc 91       	ld	r31, X
     e16:	57 97       	sbiw	r26, 0x17	; 23
     e18:	30 97       	sbiw	r30, 0x00	; 0
     e1a:	e1 f4       	brne	.+56     	; 0xe54 <WIZCHIP_WRITE+0x92>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     e1c:	52 96       	adiw	r26, 0x12	; 18
     e1e:	ed 91       	ld	r30, X+
     e20:	fc 91       	ld	r31, X
     e22:	53 97       	sbiw	r26, 0x13	; 19
     e24:	8e 2d       	mov	r24, r14
     e26:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     e28:	d8 01       	movw	r26, r16
     e2a:	52 96       	adiw	r26, 0x12	; 18
     e2c:	ed 91       	ld	r30, X+
     e2e:	fc 91       	ld	r31, X
     e30:	53 97       	sbiw	r26, 0x13	; 19
     e32:	8d 2d       	mov	r24, r13
     e34:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     e36:	d8 01       	movw	r26, r16
     e38:	52 96       	adiw	r26, 0x12	; 18
     e3a:	ed 91       	ld	r30, X+
     e3c:	fc 91       	ld	r31, X
     e3e:	53 97       	sbiw	r26, 0x13	; 19
     e40:	84 2d       	mov	r24, r4
     e42:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte(wb);
     e44:	d8 01       	movw	r26, r16
     e46:	52 96       	adiw	r26, 0x12	; 18
     e48:	ed 91       	ld	r30, X+
     e4a:	fc 91       	ld	r31, X
     e4c:	53 97       	sbiw	r26, 0x13	; 19
     e4e:	8b 2d       	mov	r24, r11
     e50:	19 95       	eicall
     e52:	09 c0       	rjmp	.+18     	; 0xe66 <WIZCHIP_WRITE+0xa4>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
     e54:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
     e56:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
     e58:	4b 82       	std	Y+3, r4	; 0x03
		spi_data[3] = wb;
     e5a:	bc 82       	std	Y+4, r11	; 0x04
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
     e5c:	64 e0       	ldi	r22, 0x04	; 4
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	ce 01       	movw	r24, r28
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
     e66:	06 e0       	ldi	r16, 0x06	; 6
     e68:	12 e0       	ldi	r17, 0x02	; 2
     e6a:	d8 01       	movw	r26, r16
     e6c:	1e 96       	adiw	r26, 0x0e	; 14
     e6e:	ed 91       	ld	r30, X+
     e70:	fc 91       	ld	r31, X
     e72:	1f 97       	sbiw	r26, 0x0f	; 15
     e74:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
     e76:	d8 01       	movw	r26, r16
     e78:	1a 96       	adiw	r26, 0x0a	; 10
     e7a:	ed 91       	ld	r30, X+
     e7c:	fc 91       	ld	r31, X
     e7e:	1b 97       	sbiw	r26, 0x0b	; 11
     e80:	19 95       	eicall
}
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	7f 90       	pop	r7
     e9e:	6f 90       	pop	r6
     ea0:	5f 90       	pop	r5
     ea2:	4f 90       	pop	r4
     ea4:	08 95       	ret

00000ea6 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
     ea6:	9f 92       	push	r9
     ea8:	af 92       	push	r10
     eaa:	bf 92       	push	r11
     eac:	cf 92       	push	r12
     eae:	df 92       	push	r13
     eb0:	ef 92       	push	r14
     eb2:	ff 92       	push	r15
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	00 d0       	rcall	.+0      	; 0xebe <WIZCHIP_READ_BUF+0x18>
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	b6 2e       	mov	r11, r22
     ec4:	a7 2e       	mov	r10, r23
     ec6:	98 2e       	mov	r9, r24
     ec8:	7a 01       	movw	r14, r20
     eca:	69 01       	movw	r12, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
     ecc:	06 e0       	ldi	r16, 0x06	; 6
     ece:	12 e0       	ldi	r17, 0x02	; 2
     ed0:	d8 01       	movw	r26, r16
     ed2:	18 96       	adiw	r26, 0x08	; 8
     ed4:	ed 91       	ld	r30, X+
     ed6:	fc 91       	ld	r31, X
     ed8:	19 97       	sbiw	r26, 0x09	; 9
     eda:	19 95       	eicall
   WIZCHIP.CS._select();
     edc:	d8 01       	movw	r26, r16
     ede:	1c 96       	adiw	r26, 0x0c	; 12
     ee0:	ed 91       	ld	r30, X+
     ee2:	fc 91       	ld	r31, X
     ee4:	1d 97       	sbiw	r26, 0x0d	; 13
     ee6:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
     ee8:	f8 01       	movw	r30, r16
     eea:	84 89       	ldd	r24, Z+20	; 0x14
     eec:	95 89       	ldd	r25, Z+21	; 0x15
     eee:	89 2b       	or	r24, r25
     ef0:	31 f0       	breq	.+12     	; 0xefe <WIZCHIP_READ_BUF+0x58>
     ef2:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
     ef6:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
     efa:	30 97       	sbiw	r30, 0x00	; 0
     efc:	81 f5       	brne	.+96     	; 0xf5e <WIZCHIP_READ_BUF+0xb8>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     efe:	06 e0       	ldi	r16, 0x06	; 6
     f00:	12 e0       	ldi	r17, 0x02	; 2
     f02:	d8 01       	movw	r26, r16
     f04:	52 96       	adiw	r26, 0x12	; 18
     f06:	ed 91       	ld	r30, X+
     f08:	fc 91       	ld	r31, X
     f0a:	53 97       	sbiw	r26, 0x13	; 19
     f0c:	89 2d       	mov	r24, r9
     f0e:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     f10:	d8 01       	movw	r26, r16
     f12:	52 96       	adiw	r26, 0x12	; 18
     f14:	ed 91       	ld	r30, X+
     f16:	fc 91       	ld	r31, X
     f18:	53 97       	sbiw	r26, 0x13	; 19
     f1a:	8a 2d       	mov	r24, r10
     f1c:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     f1e:	d8 01       	movw	r26, r16
     f20:	52 96       	adiw	r26, 0x12	; 18
     f22:	ed 91       	ld	r30, X+
     f24:	fc 91       	ld	r31, X
     f26:	53 97       	sbiw	r26, 0x13	; 19
     f28:	8b 2d       	mov	r24, r11
     f2a:	19 95       	eicall
		for(i = 0; i < len; i++)
     f2c:	c1 14       	cp	r12, r1
     f2e:	d1 04       	cpc	r13, r1
     f30:	29 f1       	breq	.+74     	; 0xf7c <WIZCHIP_READ_BUF+0xd6>
     f32:	87 01       	movw	r16, r14
     f34:	ce 0c       	add	r12, r14
     f36:	df 1c       	adc	r13, r15
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
     f38:	0f 2e       	mov	r0, r31
     f3a:	f6 e0       	ldi	r31, 0x06	; 6
     f3c:	ef 2e       	mov	r14, r31
     f3e:	f2 e0       	ldi	r31, 0x02	; 2
     f40:	ff 2e       	mov	r15, r31
     f42:	f0 2d       	mov	r31, r0
     f44:	d7 01       	movw	r26, r14
     f46:	50 96       	adiw	r26, 0x10	; 16
     f48:	ed 91       	ld	r30, X+
     f4a:	fc 91       	ld	r31, X
     f4c:	51 97       	sbiw	r26, 0x11	; 17
     f4e:	19 95       	eicall
     f50:	f8 01       	movw	r30, r16
     f52:	81 93       	st	Z+, r24
     f54:	8f 01       	movw	r16, r30
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
     f56:	ec 15       	cp	r30, r12
     f58:	fd 05       	cpc	r31, r13
     f5a:	a1 f7       	brne	.-24     	; 0xf44 <WIZCHIP_READ_BUF+0x9e>
     f5c:	0f c0       	rjmp	.+30     	; 0xf7c <WIZCHIP_READ_BUF+0xd6>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
     f5e:	99 82       	std	Y+1, r9	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
     f60:	aa 82       	std	Y+2, r10	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
     f62:	bb 82       	std	Y+3, r11	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
     f64:	63 e0       	ldi	r22, 0x03	; 3
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	ce 01       	movw	r24, r28
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	19 95       	eicall
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
     f6e:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <WIZCHIP+0x14>
     f72:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <WIZCHIP+0x15>
     f76:	b6 01       	movw	r22, r12
     f78:	c7 01       	movw	r24, r14
     f7a:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
     f7c:	06 e0       	ldi	r16, 0x06	; 6
     f7e:	12 e0       	ldi	r17, 0x02	; 2
     f80:	d8 01       	movw	r26, r16
     f82:	1e 96       	adiw	r26, 0x0e	; 14
     f84:	ed 91       	ld	r30, X+
     f86:	fc 91       	ld	r31, X
     f88:	1f 97       	sbiw	r26, 0x0f	; 15
     f8a:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
     f8c:	d8 01       	movw	r26, r16
     f8e:	1a 96       	adiw	r26, 0x0a	; 10
     f90:	ed 91       	ld	r30, X+
     f92:	fc 91       	ld	r31, X
     f94:	1b 97       	sbiw	r26, 0x0b	; 11
     f96:	19 95       	eicall
}
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	ff 90       	pop	r15
     fa8:	ef 90       	pop	r14
     faa:	df 90       	pop	r13
     fac:	cf 90       	pop	r12
     fae:	bf 90       	pop	r11
     fb0:	af 90       	pop	r10
     fb2:	9f 90       	pop	r9
     fb4:	08 95       	ret

00000fb6 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
     fb6:	4f 92       	push	r4
     fb8:	5f 92       	push	r5
     fba:	6f 92       	push	r6
     fbc:	7f 92       	push	r7
     fbe:	8f 92       	push	r8
     fc0:	9f 92       	push	r9
     fc2:	af 92       	push	r10
     fc4:	bf 92       	push	r11
     fc6:	cf 92       	push	r12
     fc8:	df 92       	push	r13
     fca:	ef 92       	push	r14
     fcc:	ff 92       	push	r15
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <WIZCHIP_WRITE_BUF+0x22>
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	6b 01       	movw	r12, r22
     fde:	7c 01       	movw	r14, r24
     fe0:	4a 01       	movw	r8, r20
     fe2:	59 01       	movw	r10, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
     fe4:	06 e0       	ldi	r16, 0x06	; 6
     fe6:	12 e0       	ldi	r17, 0x02	; 2
     fe8:	d8 01       	movw	r26, r16
     fea:	18 96       	adiw	r26, 0x08	; 8
     fec:	ed 91       	ld	r30, X+
     fee:	fc 91       	ld	r31, X
     ff0:	19 97       	sbiw	r26, 0x09	; 9
     ff2:	19 95       	eicall
   WIZCHIP.CS._select();
     ff4:	d8 01       	movw	r26, r16
     ff6:	1c 96       	adiw	r26, 0x0c	; 12
     ff8:	ed 91       	ld	r30, X+
     ffa:	fc 91       	ld	r31, X
     ffc:	1d 97       	sbiw	r26, 0x0d	; 13
     ffe:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    1000:	26 01       	movw	r4, r12
    1002:	37 01       	movw	r6, r14
    1004:	68 94       	set
    1006:	42 f8       	bld	r4, 2

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    1008:	d8 01       	movw	r26, r16
    100a:	56 96       	adiw	r26, 0x16	; 22
    100c:	ed 91       	ld	r30, X+
    100e:	fc 91       	ld	r31, X
    1010:	57 97       	sbiw	r26, 0x17	; 23
    1012:	30 97       	sbiw	r30, 0x00	; 0
    1014:	69 f5       	brne	.+90     	; 0x1070 <WIZCHIP_WRITE_BUF+0xba>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1016:	52 96       	adiw	r26, 0x12	; 18
    1018:	ed 91       	ld	r30, X+
    101a:	fc 91       	ld	r31, X
    101c:	53 97       	sbiw	r26, 0x13	; 19
    101e:	8e 2d       	mov	r24, r14
    1020:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    1022:	d8 01       	movw	r26, r16
    1024:	52 96       	adiw	r26, 0x12	; 18
    1026:	ed 91       	ld	r30, X+
    1028:	fc 91       	ld	r31, X
    102a:	53 97       	sbiw	r26, 0x13	; 19
    102c:	8d 2d       	mov	r24, r13
    102e:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    1030:	d8 01       	movw	r26, r16
    1032:	52 96       	adiw	r26, 0x12	; 18
    1034:	ed 91       	ld	r30, X+
    1036:	fc 91       	ld	r31, X
    1038:	53 97       	sbiw	r26, 0x13	; 19
    103a:	84 2d       	mov	r24, r4
    103c:	19 95       	eicall
		for(i = 0; i < len; i++)
    103e:	a1 14       	cp	r10, r1
    1040:	b1 04       	cpc	r11, r1
    1042:	29 f1       	breq	.+74     	; 0x108e <WIZCHIP_WRITE_BUF+0xd8>
    1044:	84 01       	movw	r16, r8
    1046:	a8 0c       	add	r10, r8
    1048:	b9 1c       	adc	r11, r9
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
    104a:	0f 2e       	mov	r0, r31
    104c:	f6 e0       	ldi	r31, 0x06	; 6
    104e:	ef 2e       	mov	r14, r31
    1050:	f2 e0       	ldi	r31, 0x02	; 2
    1052:	ff 2e       	mov	r15, r31
    1054:	f0 2d       	mov	r31, r0
    1056:	d7 01       	movw	r26, r14
    1058:	52 96       	adiw	r26, 0x12	; 18
    105a:	ed 91       	ld	r30, X+
    105c:	fc 91       	ld	r31, X
    105e:	53 97       	sbiw	r26, 0x13	; 19
    1060:	d8 01       	movw	r26, r16
    1062:	8d 91       	ld	r24, X+
    1064:	8d 01       	movw	r16, r26
    1066:	19 95       	eicall
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    1068:	0a 15       	cp	r16, r10
    106a:	1b 05       	cpc	r17, r11
    106c:	a1 f7       	brne	.-24     	; 0x1056 <WIZCHIP_WRITE_BUF+0xa0>
    106e:	0f c0       	rjmp	.+30     	; 0x108e <WIZCHIP_WRITE_BUF+0xd8>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    1070:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    1072:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    1074:	4b 82       	std	Y+3, r4	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    1076:	63 e0       	ldi	r22, 0x03	; 3
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	ce 01       	movw	r24, r28
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	19 95       	eicall
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
    1080:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
    1084:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
    1088:	b5 01       	movw	r22, r10
    108a:	c4 01       	movw	r24, r8
    108c:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    108e:	06 e0       	ldi	r16, 0x06	; 6
    1090:	12 e0       	ldi	r17, 0x02	; 2
    1092:	d8 01       	movw	r26, r16
    1094:	1e 96       	adiw	r26, 0x0e	; 14
    1096:	ed 91       	ld	r30, X+
    1098:	fc 91       	ld	r31, X
    109a:	1f 97       	sbiw	r26, 0x0f	; 15
    109c:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    109e:	d8 01       	movw	r26, r16
    10a0:	1a 96       	adiw	r26, 0x0a	; 10
    10a2:	ed 91       	ld	r30, X+
    10a4:	fc 91       	ld	r31, X
    10a6:	1b 97       	sbiw	r26, 0x0b	; 11
    10a8:	19 95       	eicall
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	df 90       	pop	r13
    10be:	cf 90       	pop	r12
    10c0:	bf 90       	pop	r11
    10c2:	af 90       	pop	r10
    10c4:	9f 90       	pop	r9
    10c6:	8f 90       	pop	r8
    10c8:	7f 90       	pop	r7
    10ca:	6f 90       	pop	r6
    10cc:	5f 90       	pop	r5
    10ce:	4f 90       	pop	r4
    10d0:	08 95       	ret

000010d2 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
    10d2:	8f 92       	push	r8
    10d4:	9f 92       	push	r9
    10d6:	af 92       	push	r10
    10d8:	bf 92       	push	r11
    10da:	cf 92       	push	r12
    10dc:	df 92       	push	r13
    10de:	ef 92       	push	r14
    10e0:	ff 92       	push	r15
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
   uint16_t val=0,val1=0;

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    10ea:	24 e0       	ldi	r18, 0x04	; 4
    10ec:	82 9f       	mul	r24, r18
    10ee:	c0 01       	movw	r24, r0
    10f0:	11 24       	eor	r1, r1
    10f2:	6c 01       	movw	r12, r24
    10f4:	2f ef       	ldi	r18, 0xFF	; 255
    10f6:	c2 1a       	sub	r12, r18
    10f8:	d2 0a       	sbc	r13, r18
    10fa:	cc 0c       	add	r12, r12
    10fc:	dd 1c       	adc	r13, r13
    10fe:	cc 0c       	add	r12, r12
    1100:	dd 1c       	adc	r13, r13
    1102:	cc 0c       	add	r12, r12
    1104:	dd 1c       	adc	r13, r13
    1106:	46 01       	movw	r8, r12
    1108:	80 ee       	ldi	r24, 0xE0	; 224
    110a:	98 1a       	sub	r9, r24
    110c:	09 2c       	mov	r0, r9
    110e:	00 0c       	add	r0, r0
    1110:	aa 08       	sbc	r10, r10
    1112:	bb 08       	sbc	r11, r11
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    1114:	2f ed       	ldi	r18, 0xDF	; 223
    1116:	d2 1a       	sub	r13, r18
    1118:	0d 2c       	mov	r0, r13
    111a:	00 0c       	add	r0, r0
    111c:	ee 08       	sbc	r14, r14
    111e:	ff 08       	sbc	r15, r15
}


uint16_t getSn_TX_FSR(uint8_t sn)
{
   uint16_t val=0,val1=0;
    1120:	00 e0       	ldi	r16, 0x00	; 0
    1122:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    1124:	c5 01       	movw	r24, r10
    1126:	b4 01       	movw	r22, r8
    1128:	e5 dd       	rcall	.-1078   	; 0xcf4 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    112a:	c8 2f       	mov	r28, r24
    112c:	d0 e0       	ldi	r29, 0x00	; 0
    112e:	dc 2f       	mov	r29, r28
    1130:	cc 27       	eor	r28, r28
    1132:	c7 01       	movw	r24, r14
    1134:	b6 01       	movw	r22, r12
    1136:	de dd       	rcall	.-1092   	; 0xcf4 <WIZCHIP_READ>
    1138:	c8 0f       	add	r28, r24
    113a:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    113c:	20 97       	sbiw	r28, 0x00	; 0
    113e:	61 f0       	breq	.+24     	; 0x1158 <getSn_TX_FSR+0x86>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
    1140:	c5 01       	movw	r24, r10
    1142:	b4 01       	movw	r22, r8
    1144:	d7 dd       	rcall	.-1106   	; 0xcf4 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    1146:	08 2f       	mov	r16, r24
    1148:	10 e0       	ldi	r17, 0x00	; 0
    114a:	10 2f       	mov	r17, r16
    114c:	00 27       	eor	r16, r16
    114e:	c7 01       	movw	r24, r14
    1150:	b6 01       	movw	r22, r12
    1152:	d0 dd       	rcall	.-1120   	; 0xcf4 <WIZCHIP_READ>
    1154:	08 0f       	add	r16, r24
    1156:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    1158:	0c 17       	cp	r16, r28
    115a:	1d 07       	cpc	r17, r29
    115c:	19 f7       	brne	.-58     	; 0x1124 <getSn_TX_FSR+0x52>
   return val;
}
    115e:	ce 01       	movw	r24, r28
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	ef 90       	pop	r14
    116c:	df 90       	pop	r13
    116e:	cf 90       	pop	r12
    1170:	bf 90       	pop	r11
    1172:	af 90       	pop	r10
    1174:	9f 90       	pop	r9
    1176:	8f 90       	pop	r8
    1178:	08 95       	ret

0000117a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
    117a:	8f 92       	push	r8
    117c:	9f 92       	push	r9
    117e:	af 92       	push	r10
    1180:	bf 92       	push	r11
    1182:	cf 92       	push	r12
    1184:	df 92       	push	r13
    1186:	ef 92       	push	r14
    1188:	ff 92       	push	r15
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
   uint16_t val=0,val1=0;

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    1192:	24 e0       	ldi	r18, 0x04	; 4
    1194:	82 9f       	mul	r24, r18
    1196:	c0 01       	movw	r24, r0
    1198:	11 24       	eor	r1, r1
    119a:	6c 01       	movw	r12, r24
    119c:	2f ef       	ldi	r18, 0xFF	; 255
    119e:	c2 1a       	sub	r12, r18
    11a0:	d2 0a       	sbc	r13, r18
    11a2:	cc 0c       	add	r12, r12
    11a4:	dd 1c       	adc	r13, r13
    11a6:	cc 0c       	add	r12, r12
    11a8:	dd 1c       	adc	r13, r13
    11aa:	cc 0c       	add	r12, r12
    11ac:	dd 1c       	adc	r13, r13
    11ae:	46 01       	movw	r8, r12
    11b0:	8a ed       	ldi	r24, 0xDA	; 218
    11b2:	98 1a       	sub	r9, r24
    11b4:	09 2c       	mov	r0, r9
    11b6:	00 0c       	add	r0, r0
    11b8:	aa 08       	sbc	r10, r10
    11ba:	bb 08       	sbc	r11, r11
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    11bc:	29 ed       	ldi	r18, 0xD9	; 217
    11be:	d2 1a       	sub	r13, r18
    11c0:	0d 2c       	mov	r0, r13
    11c2:	00 0c       	add	r0, r0
    11c4:	ee 08       	sbc	r14, r14
    11c6:	ff 08       	sbc	r15, r15
}


uint16_t getSn_RX_RSR(uint8_t sn)
{
   uint16_t val=0,val1=0;
    11c8:	00 e0       	ldi	r16, 0x00	; 0
    11ca:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    11cc:	c5 01       	movw	r24, r10
    11ce:	b4 01       	movw	r22, r8
    11d0:	91 dd       	rcall	.-1246   	; 0xcf4 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    11d2:	c8 2f       	mov	r28, r24
    11d4:	d0 e0       	ldi	r29, 0x00	; 0
    11d6:	dc 2f       	mov	r29, r28
    11d8:	cc 27       	eor	r28, r28
    11da:	c7 01       	movw	r24, r14
    11dc:	b6 01       	movw	r22, r12
    11de:	8a dd       	rcall	.-1260   	; 0xcf4 <WIZCHIP_READ>
    11e0:	c8 0f       	add	r28, r24
    11e2:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    11e4:	20 97       	sbiw	r28, 0x00	; 0
    11e6:	61 f0       	breq	.+24     	; 0x1200 <getSn_RX_RSR+0x86>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
    11e8:	c5 01       	movw	r24, r10
    11ea:	b4 01       	movw	r22, r8
    11ec:	83 dd       	rcall	.-1274   	; 0xcf4 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    11ee:	08 2f       	mov	r16, r24
    11f0:	10 e0       	ldi	r17, 0x00	; 0
    11f2:	10 2f       	mov	r17, r16
    11f4:	00 27       	eor	r16, r16
    11f6:	c7 01       	movw	r24, r14
    11f8:	b6 01       	movw	r22, r12
    11fa:	7c dd       	rcall	.-1288   	; 0xcf4 <WIZCHIP_READ>
    11fc:	08 0f       	add	r16, r24
    11fe:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    1200:	0c 17       	cp	r16, r28
    1202:	1d 07       	cpc	r17, r29
    1204:	19 f7       	brne	.-58     	; 0x11cc <getSn_RX_RSR+0x52>
   return val;
}
    1206:	ce 01       	movw	r24, r28
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	ff 90       	pop	r15
    1212:	ef 90       	pop	r14
    1214:	df 90       	pop	r13
    1216:	cf 90       	pop	r12
    1218:	bf 90       	pop	r11
    121a:	af 90       	pop	r10
    121c:	9f 90       	pop	r9
    121e:	8f 90       	pop	r8
    1220:	08 95       	ret

00001222 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    1222:	2f 92       	push	r2
    1224:	3f 92       	push	r3
    1226:	4f 92       	push	r4
    1228:	5f 92       	push	r5
    122a:	6f 92       	push	r6
    122c:	7f 92       	push	r7
    122e:	8f 92       	push	r8
    1230:	9f 92       	push	r9
    1232:	af 92       	push	r10
    1234:	bf 92       	push	r11
    1236:	cf 92       	push	r12
    1238:	df 92       	push	r13
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	00 d0       	rcall	.+0      	; 0x1248 <wiz_send_data+0x26>
    1248:	1f 92       	push	r1
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
    124e:	41 15       	cp	r20, r1
    1250:	51 05       	cpc	r21, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <wiz_send_data+0x34>
    1254:	56 c0       	rjmp	.+172    	; 0x1302 <wiz_send_data+0xe0>
    1256:	1a 01       	movw	r2, r20
    1258:	7a 83       	std	Y+2, r23	; 0x02
    125a:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_TX_WR(sn);
    125c:	88 2e       	mov	r8, r24
    125e:	91 2c       	mov	r9, r1
    1260:	88 0c       	add	r8, r8
    1262:	99 1c       	adc	r9, r9
    1264:	88 0c       	add	r8, r8
    1266:	99 1c       	adc	r9, r9
    1268:	64 01       	movw	r12, r8
    126a:	2f ef       	ldi	r18, 0xFF	; 255
    126c:	c2 1a       	sub	r12, r18
    126e:	d2 0a       	sbc	r13, r18
    1270:	cc 0c       	add	r12, r12
    1272:	dd 1c       	adc	r13, r13
    1274:	cc 0c       	add	r12, r12
    1276:	dd 1c       	adc	r13, r13
    1278:	cc 0c       	add	r12, r12
    127a:	dd 1c       	adc	r13, r13
    127c:	26 01       	movw	r4, r12
    127e:	3c ed       	ldi	r19, 0xDC	; 220
    1280:	53 1a       	sub	r5, r19
    1282:	05 2c       	mov	r0, r5
    1284:	00 0c       	add	r0, r0
    1286:	66 08       	sbc	r6, r6
    1288:	77 08       	sbc	r7, r7
    128a:	c3 01       	movw	r24, r6
    128c:	b2 01       	movw	r22, r4
    128e:	32 dd       	rcall	.-1436   	; 0xcf4 <WIZCHIP_READ>
    1290:	08 2f       	mov	r16, r24
    1292:	8b ed       	ldi	r24, 0xDB	; 219
    1294:	d8 1a       	sub	r13, r24
    1296:	0d 2c       	mov	r0, r13
    1298:	00 0c       	add	r0, r0
    129a:	ee 08       	sbc	r14, r14
    129c:	ff 08       	sbc	r15, r15
    129e:	c7 01       	movw	r24, r14
    12a0:	b6 01       	movw	r22, r12
    12a2:	28 dd       	rcall	.-1456   	; 0xcf4 <WIZCHIP_READ>
    12a4:	10 e0       	ldi	r17, 0x00	; 0
    12a6:	10 2f       	mov	r17, r16
    12a8:	00 27       	eor	r16, r16
    12aa:	08 0f       	add	r16, r24
    12ac:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    12ae:	94 01       	movw	r18, r8
    12b0:	2e 5f       	subi	r18, 0xFE	; 254
    12b2:	3f 4f       	sbci	r19, 0xFF	; 255
    12b4:	22 0f       	add	r18, r18
    12b6:	33 1f       	adc	r19, r19
    12b8:	22 0f       	add	r18, r18
    12ba:	33 1f       	adc	r19, r19
    12bc:	22 0f       	add	r18, r18
    12be:	33 1f       	adc	r19, r19
    12c0:	c9 01       	movw	r24, r18
    12c2:	33 0f       	add	r19, r19
    12c4:	aa 0b       	sbc	r26, r26
    12c6:	bb 0b       	sbc	r27, r27
    12c8:	a8 01       	movw	r20, r16
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	76 2f       	mov	r23, r22
    12d0:	65 2f       	mov	r22, r21
    12d2:	54 2f       	mov	r21, r20
    12d4:	44 27       	eor	r20, r20
    12d6:	4c 01       	movw	r8, r24
    12d8:	5d 01       	movw	r10, r26
    12da:	84 0e       	add	r8, r20
    12dc:	95 1e       	adc	r9, r21
    12de:	a6 1e       	adc	r10, r22
    12e0:	b7 1e       	adc	r11, r23
    12e2:	c5 01       	movw	r24, r10
    12e4:	b4 01       	movw	r22, r8
    12e6:	91 01       	movw	r18, r2
    12e8:	49 81       	ldd	r20, Y+1	; 0x01
    12ea:	5a 81       	ldd	r21, Y+2	; 0x02
    12ec:	64 de       	rcall	.-824    	; 0xfb6 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
    12ee:	02 0d       	add	r16, r2
    12f0:	13 1d       	adc	r17, r3
   setSn_TX_WR(sn,ptr);
    12f2:	41 2f       	mov	r20, r17
    12f4:	c3 01       	movw	r24, r6
    12f6:	b2 01       	movw	r22, r4
    12f8:	64 dd       	rcall	.-1336   	; 0xdc2 <WIZCHIP_WRITE>
    12fa:	40 2f       	mov	r20, r16
    12fc:	c7 01       	movw	r24, r14
    12fe:	b6 01       	movw	r22, r12
    1300:	60 dd       	rcall	.-1344   	; 0xdc2 <WIZCHIP_WRITE>
}
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	ff 90       	pop	r15
    1314:	ef 90       	pop	r14
    1316:	df 90       	pop	r13
    1318:	cf 90       	pop	r12
    131a:	bf 90       	pop	r11
    131c:	af 90       	pop	r10
    131e:	9f 90       	pop	r9
    1320:	8f 90       	pop	r8
    1322:	7f 90       	pop	r7
    1324:	6f 90       	pop	r6
    1326:	5f 90       	pop	r5
    1328:	4f 90       	pop	r4
    132a:	3f 90       	pop	r3
    132c:	2f 90       	pop	r2
    132e:	08 95       	ret

00001330 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    1330:	2f 92       	push	r2
    1332:	3f 92       	push	r3
    1334:	4f 92       	push	r4
    1336:	5f 92       	push	r5
    1338:	6f 92       	push	r6
    133a:	7f 92       	push	r7
    133c:	8f 92       	push	r8
    133e:	9f 92       	push	r9
    1340:	af 92       	push	r10
    1342:	bf 92       	push	r11
    1344:	cf 92       	push	r12
    1346:	df 92       	push	r13
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	00 d0       	rcall	.+0      	; 0x1356 <wiz_recv_data+0x26>
    1356:	1f 92       	push	r1
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
    135c:	41 15       	cp	r20, r1
    135e:	51 05       	cpc	r21, r1
    1360:	09 f4       	brne	.+2      	; 0x1364 <wiz_recv_data+0x34>
    1362:	56 c0       	rjmp	.+172    	; 0x1410 <wiz_recv_data+0xe0>
    1364:	1a 01       	movw	r2, r20
    1366:	7a 83       	std	Y+2, r23	; 0x02
    1368:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_RX_RD(sn);
    136a:	88 2e       	mov	r8, r24
    136c:	91 2c       	mov	r9, r1
    136e:	88 0c       	add	r8, r8
    1370:	99 1c       	adc	r9, r9
    1372:	88 0c       	add	r8, r8
    1374:	99 1c       	adc	r9, r9
    1376:	64 01       	movw	r12, r8
    1378:	2f ef       	ldi	r18, 0xFF	; 255
    137a:	c2 1a       	sub	r12, r18
    137c:	d2 0a       	sbc	r13, r18
    137e:	cc 0c       	add	r12, r12
    1380:	dd 1c       	adc	r13, r13
    1382:	cc 0c       	add	r12, r12
    1384:	dd 1c       	adc	r13, r13
    1386:	cc 0c       	add	r12, r12
    1388:	dd 1c       	adc	r13, r13
    138a:	26 01       	movw	r4, r12
    138c:	38 ed       	ldi	r19, 0xD8	; 216
    138e:	53 1a       	sub	r5, r19
    1390:	05 2c       	mov	r0, r5
    1392:	00 0c       	add	r0, r0
    1394:	66 08       	sbc	r6, r6
    1396:	77 08       	sbc	r7, r7
    1398:	c3 01       	movw	r24, r6
    139a:	b2 01       	movw	r22, r4
    139c:	ab dc       	rcall	.-1706   	; 0xcf4 <WIZCHIP_READ>
    139e:	08 2f       	mov	r16, r24
    13a0:	87 ed       	ldi	r24, 0xD7	; 215
    13a2:	d8 1a       	sub	r13, r24
    13a4:	0d 2c       	mov	r0, r13
    13a6:	00 0c       	add	r0, r0
    13a8:	ee 08       	sbc	r14, r14
    13aa:	ff 08       	sbc	r15, r15
    13ac:	c7 01       	movw	r24, r14
    13ae:	b6 01       	movw	r22, r12
    13b0:	a1 dc       	rcall	.-1726   	; 0xcf4 <WIZCHIP_READ>
    13b2:	10 e0       	ldi	r17, 0x00	; 0
    13b4:	10 2f       	mov	r17, r16
    13b6:	00 27       	eor	r16, r16
    13b8:	08 0f       	add	r16, r24
    13ba:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    13bc:	94 01       	movw	r18, r8
    13be:	2d 5f       	subi	r18, 0xFD	; 253
    13c0:	3f 4f       	sbci	r19, 0xFF	; 255
    13c2:	22 0f       	add	r18, r18
    13c4:	33 1f       	adc	r19, r19
    13c6:	22 0f       	add	r18, r18
    13c8:	33 1f       	adc	r19, r19
    13ca:	22 0f       	add	r18, r18
    13cc:	33 1f       	adc	r19, r19
    13ce:	c9 01       	movw	r24, r18
    13d0:	33 0f       	add	r19, r19
    13d2:	aa 0b       	sbc	r26, r26
    13d4:	bb 0b       	sbc	r27, r27
    13d6:	a8 01       	movw	r20, r16
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	76 2f       	mov	r23, r22
    13de:	65 2f       	mov	r22, r21
    13e0:	54 2f       	mov	r21, r20
    13e2:	44 27       	eor	r20, r20
    13e4:	4c 01       	movw	r8, r24
    13e6:	5d 01       	movw	r10, r26
    13e8:	84 0e       	add	r8, r20
    13ea:	95 1e       	adc	r9, r21
    13ec:	a6 1e       	adc	r10, r22
    13ee:	b7 1e       	adc	r11, r23
    13f0:	c5 01       	movw	r24, r10
    13f2:	b4 01       	movw	r22, r8
    13f4:	91 01       	movw	r18, r2
    13f6:	49 81       	ldd	r20, Y+1	; 0x01
    13f8:	5a 81       	ldd	r21, Y+2	; 0x02
    13fa:	55 dd       	rcall	.-1366   	; 0xea6 <WIZCHIP_READ_BUF>
   ptr += len;
    13fc:	02 0d       	add	r16, r2
    13fe:	13 1d       	adc	r17, r3
   
   setSn_RX_RD(sn,ptr);
    1400:	41 2f       	mov	r20, r17
    1402:	c3 01       	movw	r24, r6
    1404:	b2 01       	movw	r22, r4
    1406:	dd dc       	rcall	.-1606   	; 0xdc2 <WIZCHIP_WRITE>
    1408:	40 2f       	mov	r20, r16
    140a:	c7 01       	movw	r24, r14
    140c:	b6 01       	movw	r22, r12
    140e:	d9 dc       	rcall	.-1614   	; 0xdc2 <WIZCHIP_WRITE>
}
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	ff 90       	pop	r15
    1422:	ef 90       	pop	r14
    1424:	df 90       	pop	r13
    1426:	cf 90       	pop	r12
    1428:	bf 90       	pop	r11
    142a:	af 90       	pop	r10
    142c:	9f 90       	pop	r9
    142e:	8f 90       	pop	r8
    1430:	7f 90       	pop	r7
    1432:	6f 90       	pop	r6
    1434:	5f 90       	pop	r5
    1436:	4f 90       	pop	r4
    1438:	3f 90       	pop	r3
    143a:	2f 90       	pop	r2
    143c:	08 95       	ret

0000143e <wizchip_cris_enter>:
   #endif      
      default:
         return -1;
   }
   return 0;
}
    143e:	08 95       	ret

00001440 <wizchip_cris_exit>:
    1440:	08 95       	ret

00001442 <wizchip_cs_select>:
    1442:	08 95       	ret

00001444 <wizchip_cs_deselect>:
    1444:	08 95       	ret

00001446 <wizchip_bus_readdata>:
    1446:	fb 01       	movw	r30, r22
    1448:	80 81       	ld	r24, Z
    144a:	08 95       	ret

0000144c <wizchip_bus_writedata>:
    144c:	fb 01       	movw	r30, r22
    144e:	40 83       	st	Z, r20
    1450:	08 95       	ret

00001452 <wizchip_spi_readbyte>:
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	08 95       	ret

00001456 <wizchip_spi_writebyte>:
    1456:	08 95       	ret

00001458 <wizchip_spi_readburst>:
    1458:	08 95       	ret

0000145a <wizchip_spi_writeburst>:
    145a:	08 95       	ret

0000145c <reg_wizchip_cs_cbfunc>:
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	19 f0       	breq	.+6      	; 0x1466 <reg_wizchip_cs_cbfunc+0xa>
    1460:	61 15       	cp	r22, r1
    1462:	71 05       	cpc	r23, r1
    1464:	59 f4       	brne	.+22     	; 0x147c <reg_wizchip_cs_cbfunc+0x20>
    1466:	e6 e0       	ldi	r30, 0x06	; 6
    1468:	f2 e0       	ldi	r31, 0x02	; 2
    146a:	81 e2       	ldi	r24, 0x21	; 33
    146c:	9a e0       	ldi	r25, 0x0A	; 10
    146e:	95 87       	std	Z+13, r25	; 0x0d
    1470:	84 87       	std	Z+12, r24	; 0x0c
    1472:	82 e2       	ldi	r24, 0x22	; 34
    1474:	9a e0       	ldi	r25, 0x0A	; 10
    1476:	97 87       	std	Z+15, r25	; 0x0f
    1478:	86 87       	std	Z+14, r24	; 0x0e
    147a:	08 95       	ret
    147c:	e6 e0       	ldi	r30, 0x06	; 6
    147e:	f2 e0       	ldi	r31, 0x02	; 2
    1480:	95 87       	std	Z+13, r25	; 0x0d
    1482:	84 87       	std	Z+12, r24	; 0x0c
    1484:	77 87       	std	Z+15, r23	; 0x0f
    1486:	66 87       	std	Z+14, r22	; 0x0e
    1488:	08 95       	ret

0000148a <reg_wizchip_spi_cbfunc>:
    148a:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <WIZCHIP>
    148e:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <WIZCHIP+0x1>
    1492:	22 27       	eor	r18, r18
    1494:	32 70       	andi	r19, 0x02	; 2
    1496:	21 15       	cp	r18, r1
    1498:	31 05       	cpc	r19, r1
    149a:	e9 f3       	breq	.-6      	; 0x1496 <reg_wizchip_spi_cbfunc+0xc>
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	19 f0       	breq	.+6      	; 0x14a6 <reg_wizchip_spi_cbfunc+0x1c>
    14a0:	61 15       	cp	r22, r1
    14a2:	71 05       	cpc	r23, r1
    14a4:	59 f4       	brne	.+22     	; 0x14bc <reg_wizchip_spi_cbfunc+0x32>
    14a6:	e6 e0       	ldi	r30, 0x06	; 6
    14a8:	f2 e0       	ldi	r31, 0x02	; 2
    14aa:	89 e2       	ldi	r24, 0x29	; 41
    14ac:	9a e0       	ldi	r25, 0x0A	; 10
    14ae:	91 8b       	std	Z+17, r25	; 0x11
    14b0:	80 8b       	std	Z+16, r24	; 0x10
    14b2:	8b e2       	ldi	r24, 0x2B	; 43
    14b4:	9a e0       	ldi	r25, 0x0A	; 10
    14b6:	93 8b       	std	Z+19, r25	; 0x13
    14b8:	82 8b       	std	Z+18, r24	; 0x12
    14ba:	08 95       	ret
    14bc:	e6 e0       	ldi	r30, 0x06	; 6
    14be:	f2 e0       	ldi	r31, 0x02	; 2
    14c0:	91 8b       	std	Z+17, r25	; 0x11
    14c2:	80 8b       	std	Z+16, r24	; 0x10
    14c4:	73 8b       	std	Z+19, r23	; 0x13
    14c6:	62 8b       	std	Z+18, r22	; 0x12
    14c8:	08 95       	ret

000014ca <reg_wizchip_spiburst_cbfunc>:
    14ca:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <WIZCHIP>
    14ce:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <WIZCHIP+0x1>
    14d2:	22 27       	eor	r18, r18
    14d4:	32 70       	andi	r19, 0x02	; 2
    14d6:	21 15       	cp	r18, r1
    14d8:	31 05       	cpc	r19, r1
    14da:	e9 f3       	breq	.-6      	; 0x14d6 <reg_wizchip_spiburst_cbfunc+0xc>
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	19 f0       	breq	.+6      	; 0x14e6 <reg_wizchip_spiburst_cbfunc+0x1c>
    14e0:	61 15       	cp	r22, r1
    14e2:	71 05       	cpc	r23, r1
    14e4:	59 f4       	brne	.+22     	; 0x14fc <reg_wizchip_spiburst_cbfunc+0x32>
    14e6:	e6 e0       	ldi	r30, 0x06	; 6
    14e8:	f2 e0       	ldi	r31, 0x02	; 2
    14ea:	8c e2       	ldi	r24, 0x2C	; 44
    14ec:	9a e0       	ldi	r25, 0x0A	; 10
    14ee:	95 8b       	std	Z+21, r25	; 0x15
    14f0:	84 8b       	std	Z+20, r24	; 0x14
    14f2:	8d e2       	ldi	r24, 0x2D	; 45
    14f4:	9a e0       	ldi	r25, 0x0A	; 10
    14f6:	97 8b       	std	Z+23, r25	; 0x17
    14f8:	86 8b       	std	Z+22, r24	; 0x16
    14fa:	08 95       	ret
    14fc:	e6 e0       	ldi	r30, 0x06	; 6
    14fe:	f2 e0       	ldi	r31, 0x02	; 2
    1500:	95 8b       	std	Z+21, r25	; 0x15
    1502:	84 8b       	std	Z+20, r24	; 0x14
    1504:	77 8b       	std	Z+23, r23	; 0x17
    1506:	66 8b       	std	Z+22, r22	; 0x16
    1508:	08 95       	ret

0000150a <wizchip_sw_reset>:
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	62 97       	sbiw	r28, 0x12	; 18
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	26 e0       	ldi	r18, 0x06	; 6
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	ae 01       	movw	r20, r28
    1524:	43 5f       	subi	r20, 0xF3	; 243
    1526:	5f 4f       	sbci	r21, 0xFF	; 255
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	79 e0       	ldi	r23, 0x09	; 9
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	ba dc       	rcall	.-1676   	; 0xea6 <WIZCHIP_READ_BUF>
    1532:	24 e0       	ldi	r18, 0x04	; 4
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	ae 01       	movw	r20, r28
    1538:	4f 5f       	subi	r20, 0xFF	; 255
    153a:	5f 4f       	sbci	r21, 0xFF	; 255
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	71 e0       	ldi	r23, 0x01	; 1
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	b0 dc       	rcall	.-1696   	; 0xea6 <WIZCHIP_READ_BUF>
    1546:	24 e0       	ldi	r18, 0x04	; 4
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	ae 01       	movw	r20, r28
    154c:	4b 5f       	subi	r20, 0xFB	; 251
    154e:	5f 4f       	sbci	r21, 0xFF	; 255
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	75 e0       	ldi	r23, 0x05	; 5
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	a6 dc       	rcall	.-1716   	; 0xea6 <WIZCHIP_READ_BUF>
    155a:	24 e0       	ldi	r18, 0x04	; 4
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	ae 01       	movw	r20, r28
    1560:	47 5f       	subi	r20, 0xF7	; 247
    1562:	5f 4f       	sbci	r21, 0xFF	; 255
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	7f e0       	ldi	r23, 0x0F	; 15
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9c dc       	rcall	.-1736   	; 0xea6 <WIZCHIP_READ_BUF>
    156e:	40 e8       	ldi	r20, 0x80	; 128
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	cb 01       	movw	r24, r22
    1576:	25 dc       	rcall	.-1974   	; 0xdc2 <WIZCHIP_WRITE>
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	cb 01       	movw	r24, r22
    157e:	ba db       	rcall	.-2188   	; 0xcf4 <WIZCHIP_READ>
    1580:	26 e0       	ldi	r18, 0x06	; 6
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	ae 01       	movw	r20, r28
    1586:	43 5f       	subi	r20, 0xF3	; 243
    1588:	5f 4f       	sbci	r21, 0xFF	; 255
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	79 e0       	ldi	r23, 0x09	; 9
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	11 dd       	rcall	.-1502   	; 0xfb6 <WIZCHIP_WRITE_BUF>
    1594:	24 e0       	ldi	r18, 0x04	; 4
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	ae 01       	movw	r20, r28
    159a:	4f 5f       	subi	r20, 0xFF	; 255
    159c:	5f 4f       	sbci	r21, 0xFF	; 255
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	71 e0       	ldi	r23, 0x01	; 1
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	07 dd       	rcall	.-1522   	; 0xfb6 <WIZCHIP_WRITE_BUF>
    15a8:	24 e0       	ldi	r18, 0x04	; 4
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	ae 01       	movw	r20, r28
    15ae:	4b 5f       	subi	r20, 0xFB	; 251
    15b0:	5f 4f       	sbci	r21, 0xFF	; 255
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	75 e0       	ldi	r23, 0x05	; 5
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	fd dc       	rcall	.-1542   	; 0xfb6 <WIZCHIP_WRITE_BUF>
    15bc:	24 e0       	ldi	r18, 0x04	; 4
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	ae 01       	movw	r20, r28
    15c2:	47 5f       	subi	r20, 0xF7	; 247
    15c4:	5f 4f       	sbci	r21, 0xFF	; 255
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	7f e0       	ldi	r23, 0x0F	; 15
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	f3 dc       	rcall	.-1562   	; 0xfb6 <WIZCHIP_WRITE_BUF>
    15d0:	62 96       	adiw	r28, 0x12	; 18
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	08 95       	ret

000015e2 <wizchip_init>:
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    15ee:	ec 01       	movw	r28, r24
    15f0:	7b 01       	movw	r14, r22
    15f2:	8b df       	rcall	.-234    	; 0x150a <wizchip_sw_reset>
    15f4:	20 97       	sbiw	r28, 0x00	; 0
    15f6:	09 f4       	brne	.+2      	; 0x15fa <wizchip_init+0x18>
    15f8:	58 c0       	rjmp	.+176    	; 0x16aa <wizchip_init+0xc8>
    15fa:	88 81       	ld	r24, Y
    15fc:	81 31       	cpi	r24, 0x11	; 17
    15fe:	0c f0       	brlt	.+2      	; 0x1602 <wizchip_init+0x20>
    1600:	43 c0       	rjmp	.+134    	; 0x1688 <wizchip_init+0xa6>
    1602:	fe 01       	movw	r30, r28
    1604:	31 96       	adiw	r30, 0x01	; 1
    1606:	9e 01       	movw	r18, r28
    1608:	28 5f       	subi	r18, 0xF8	; 248
    160a:	3f 4f       	sbci	r19, 0xFF	; 255
    160c:	91 91       	ld	r25, Z+
    160e:	89 0f       	add	r24, r25
    1610:	81 31       	cpi	r24, 0x11	; 17
    1612:	e4 f5       	brge	.+120    	; 0x168c <wizchip_init+0xaa>
    1614:	e2 17       	cp	r30, r18
    1616:	f3 07       	cpc	r31, r19
    1618:	c9 f7       	brne	.-14     	; 0x160c <wizchip_init+0x2a>
    161a:	8e 01       	movw	r16, r28
    161c:	c1 e0       	ldi	r28, 0x01	; 1
    161e:	d0 e0       	ldi	r29, 0x00	; 0
    1620:	f8 01       	movw	r30, r16
    1622:	41 91       	ld	r20, Z+
    1624:	8f 01       	movw	r16, r30
    1626:	be 01       	movw	r22, r28
    1628:	66 0f       	add	r22, r22
    162a:	77 1f       	adc	r23, r23
    162c:	66 0f       	add	r22, r22
    162e:	77 1f       	adc	r23, r23
    1630:	66 0f       	add	r22, r22
    1632:	77 1f       	adc	r23, r23
    1634:	71 5e       	subi	r23, 0xE1	; 225
    1636:	07 2e       	mov	r0, r23
    1638:	00 0c       	add	r0, r0
    163a:	88 0b       	sbc	r24, r24
    163c:	99 0b       	sbc	r25, r25
    163e:	c1 db       	rcall	.-2174   	; 0xdc2 <WIZCHIP_WRITE>
    1640:	24 96       	adiw	r28, 0x04	; 4
    1642:	c1 32       	cpi	r28, 0x21	; 33
    1644:	d1 05       	cpc	r29, r1
    1646:	61 f7       	brne	.-40     	; 0x1620 <wizchip_init+0x3e>
    1648:	30 c0       	rjmp	.+96     	; 0x16aa <wizchip_init+0xc8>
    164a:	91 91       	ld	r25, Z+
    164c:	89 0f       	add	r24, r25
    164e:	81 31       	cpi	r24, 0x11	; 17
    1650:	fc f4       	brge	.+62     	; 0x1690 <wizchip_init+0xae>
    1652:	e2 17       	cp	r30, r18
    1654:	f3 07       	cpc	r31, r19
    1656:	c9 f7       	brne	.-14     	; 0x164a <wizchip_init+0x68>
    1658:	c1 e0       	ldi	r28, 0x01	; 1
    165a:	d0 e0       	ldi	r29, 0x00	; 0
    165c:	f7 01       	movw	r30, r14
    165e:	41 91       	ld	r20, Z+
    1660:	7f 01       	movw	r14, r30
    1662:	be 01       	movw	r22, r28
    1664:	66 0f       	add	r22, r22
    1666:	77 1f       	adc	r23, r23
    1668:	66 0f       	add	r22, r22
    166a:	77 1f       	adc	r23, r23
    166c:	66 0f       	add	r22, r22
    166e:	77 1f       	adc	r23, r23
    1670:	72 5e       	subi	r23, 0xE2	; 226
    1672:	07 2e       	mov	r0, r23
    1674:	00 0c       	add	r0, r0
    1676:	88 0b       	sbc	r24, r24
    1678:	99 0b       	sbc	r25, r25
    167a:	a3 db       	rcall	.-2234   	; 0xdc2 <WIZCHIP_WRITE>
    167c:	24 96       	adiw	r28, 0x04	; 4
    167e:	c1 32       	cpi	r28, 0x21	; 33
    1680:	d1 05       	cpc	r29, r1
    1682:	61 f7       	brne	.-40     	; 0x165c <wizchip_init+0x7a>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	15 c0       	rjmp	.+42     	; 0x16b2 <wizchip_init+0xd0>
    1688:	8f ef       	ldi	r24, 0xFF	; 255
    168a:	13 c0       	rjmp	.+38     	; 0x16b2 <wizchip_init+0xd0>
    168c:	8f ef       	ldi	r24, 0xFF	; 255
    168e:	11 c0       	rjmp	.+34     	; 0x16b2 <wizchip_init+0xd0>
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    1692:	0f c0       	rjmp	.+30     	; 0x16b2 <wizchip_init+0xd0>
    1694:	8f ef       	ldi	r24, 0xFF	; 255
    1696:	0d c0       	rjmp	.+26     	; 0x16b2 <wizchip_init+0xd0>
    1698:	f7 01       	movw	r30, r14
    169a:	80 81       	ld	r24, Z
    169c:	81 31       	cpi	r24, 0x11	; 17
    169e:	d4 f7       	brge	.-12     	; 0x1694 <wizchip_init+0xb2>
    16a0:	31 96       	adiw	r30, 0x01	; 1
    16a2:	97 01       	movw	r18, r14
    16a4:	28 5f       	subi	r18, 0xF8	; 248
    16a6:	3f 4f       	sbci	r19, 0xFF	; 255
    16a8:	d0 cf       	rjmp	.-96     	; 0x164a <wizchip_init+0x68>
    16aa:	e1 14       	cp	r14, r1
    16ac:	f1 04       	cpc	r15, r1
    16ae:	a1 f7       	brne	.-24     	; 0x1698 <wizchip_init+0xb6>
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	08 95       	ret

000016c0 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	ec 01       	movw	r28, r24
   setSHAR(pnetinfo->mac);
    16c6:	26 e0       	ldi	r18, 0x06	; 6
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	ac 01       	movw	r20, r24
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	79 e0       	ldi	r23, 0x09	; 9
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	70 dc       	rcall	.-1824   	; 0xfb6 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
    16d6:	ae 01       	movw	r20, r28
    16d8:	42 5f       	subi	r20, 0xF2	; 242
    16da:	5f 4f       	sbci	r21, 0xFF	; 255
    16dc:	24 e0       	ldi	r18, 0x04	; 4
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	71 e0       	ldi	r23, 0x01	; 1
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	66 dc       	rcall	.-1844   	; 0xfb6 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
    16ea:	ae 01       	movw	r20, r28
    16ec:	46 5f       	subi	r20, 0xF6	; 246
    16ee:	5f 4f       	sbci	r21, 0xFF	; 255
    16f0:	24 e0       	ldi	r18, 0x04	; 4
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	75 e0       	ldi	r23, 0x05	; 5
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	5c dc       	rcall	.-1864   	; 0xfb6 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
    16fe:	ae 01       	movw	r20, r28
    1700:	4a 5f       	subi	r20, 0xFA	; 250
    1702:	5f 4f       	sbci	r21, 0xFF	; 255
    1704:	24 e0       	ldi	r18, 0x04	; 4
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	7f e0       	ldi	r23, 0x0F	; 15
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	52 dc       	rcall	.-1884   	; 0xfb6 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
    1712:	e3 e9       	ldi	r30, 0x93	; 147
    1714:	f4 e0       	ldi	r31, 0x04	; 4
    1716:	8a 89       	ldd	r24, Y+18	; 0x12
    1718:	80 83       	st	Z, r24
   _DNS_[1] = pnetinfo->dns[1];
    171a:	8b 89       	ldd	r24, Y+19	; 0x13
    171c:	81 83       	std	Z+1, r24	; 0x01
   _DNS_[2] = pnetinfo->dns[2];
    171e:	8c 89       	ldd	r24, Y+20	; 0x14
    1720:	82 83       	std	Z+2, r24	; 0x02
   _DNS_[3] = pnetinfo->dns[3];
    1722:	8d 89       	ldd	r24, Y+21	; 0x15
    1724:	83 83       	std	Z+3, r24	; 0x03
   _DHCP_   = pnetinfo->dhcp;
    1726:	8e 89       	ldd	r24, Y+22	; 0x16
    1728:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <_DHCP_>
}
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	08 95       	ret

00001732 <getNextPacketId>:
  else
    rc = FAILURE;
    
exit:
  return rc;
}
    1732:	fc 01       	movw	r30, r24
    1734:	80 81       	ld	r24, Z
    1736:	91 81       	ldd	r25, Z+1	; 0x01
    1738:	a2 81       	ldd	r26, Z+2	; 0x02
    173a:	b3 81       	ldd	r27, Z+3	; 0x03
    173c:	8f 3f       	cpi	r24, 0xFF	; 255
    173e:	2f ef       	ldi	r18, 0xFF	; 255
    1740:	92 07       	cpc	r25, r18
    1742:	a1 05       	cpc	r26, r1
    1744:	b1 05       	cpc	r27, r1
    1746:	39 f0       	breq	.+14     	; 0x1756 <getNextPacketId+0x24>
    1748:	bc 01       	movw	r22, r24
    174a:	cd 01       	movw	r24, r26
    174c:	6f 5f       	subi	r22, 0xFF	; 255
    174e:	7f 4f       	sbci	r23, 0xFF	; 255
    1750:	8f 4f       	sbci	r24, 0xFF	; 255
    1752:	9f 4f       	sbci	r25, 0xFF	; 255
    1754:	04 c0       	rjmp	.+8      	; 0x175e <getNextPacketId+0x2c>
    1756:	61 e0       	ldi	r22, 0x01	; 1
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	60 83       	st	Z, r22
    1760:	71 83       	std	Z+1, r23	; 0x01
    1762:	82 83       	std	Z+2, r24	; 0x02
    1764:	93 83       	std	Z+3, r25	; 0x03
    1766:	08 95       	ret

00001768 <sendPacket>:
    1768:	2f 92       	push	r2
    176a:	3f 92       	push	r3
    176c:	4f 92       	push	r4
    176e:	5f 92       	push	r5
    1770:	6f 92       	push	r6
    1772:	7f 92       	push	r7
    1774:	8f 92       	push	r8
    1776:	9f 92       	push	r9
    1778:	af 92       	push	r10
    177a:	bf 92       	push	r11
    177c:	cf 92       	push	r12
    177e:	df 92       	push	r13
    1780:	ef 92       	push	r14
    1782:	ff 92       	push	r15
    1784:	0f 93       	push	r16
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	ec 01       	movw	r28, r24
    178e:	2a 01       	movw	r4, r20
    1790:	3b 01       	movw	r6, r22
    1792:	19 01       	movw	r2, r18
    1794:	14 16       	cp	r1, r20
    1796:	15 06       	cpc	r1, r21
    1798:	16 06       	cpc	r1, r22
    179a:	17 06       	cpc	r1, r23
    179c:	24 f1       	brlt	.+72     	; 0x17e6 <sendPacket+0x7e>
    179e:	81 2c       	mov	r8, r1
    17a0:	91 2c       	mov	r9, r1
    17a2:	54 01       	movw	r10, r8
    17a4:	28 c0       	rjmp	.+80     	; 0x17f6 <sendPacket+0x8e>
    17a6:	ef a5       	ldd	r30, Y+47	; 0x2f
    17a8:	f8 a9       	ldd	r31, Y+48	; 0x30
    17aa:	c6 80       	ldd	r12, Z+6	; 0x06
    17ac:	d7 80       	ldd	r13, Z+7	; 0x07
    17ae:	c1 01       	movw	r24, r2
    17b0:	0e 94 8e 1c 	call	0x391c	; 0x391c <left_ms>
    17b4:	7b 01       	movw	r14, r22
    17b6:	8c 01       	movw	r16, r24
    17b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    17ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    17bc:	bc 01       	movw	r22, r24
    17be:	68 0d       	add	r22, r8
    17c0:	79 1d       	adc	r23, r9
    17c2:	a3 01       	movw	r20, r6
    17c4:	92 01       	movw	r18, r4
    17c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ca:	f6 01       	movw	r30, r12
    17cc:	19 95       	eicall
    17ce:	99 23       	and	r25, r25
    17d0:	94 f0       	brlt	.+36     	; 0x17f6 <sendPacket+0x8e>
    17d2:	86 0e       	add	r8, r22
    17d4:	97 1e       	adc	r9, r23
    17d6:	a8 1e       	adc	r10, r24
    17d8:	b9 1e       	adc	r11, r25
    17da:	84 14       	cp	r8, r4
    17dc:	95 04       	cpc	r9, r5
    17de:	a6 04       	cpc	r10, r6
    17e0:	b7 04       	cpc	r11, r7
    17e2:	24 f0       	brlt	.+8      	; 0x17ec <sendPacket+0x84>
    17e4:	08 c0       	rjmp	.+16     	; 0x17f6 <sendPacket+0x8e>
    17e6:	81 2c       	mov	r8, r1
    17e8:	91 2c       	mov	r9, r1
    17ea:	54 01       	movw	r10, r8
    17ec:	c1 01       	movw	r24, r2
    17ee:	0e 94 2f 1c 	call	0x385e	; 0x385e <expired>
    17f2:	88 23       	and	r24, r24
    17f4:	c1 f2       	breq	.-80     	; 0x17a6 <sendPacket+0x3e>
    17f6:	48 14       	cp	r4, r8
    17f8:	59 04       	cpc	r5, r9
    17fa:	6a 04       	cpc	r6, r10
    17fc:	7b 04       	cpc	r7, r11
    17fe:	61 f4       	brne	.+24     	; 0x1818 <sendPacket+0xb0>
    1800:	48 89       	ldd	r20, Y+16	; 0x10
    1802:	59 89       	ldd	r21, Y+17	; 0x11
    1804:	6a 89       	ldd	r22, Y+18	; 0x12
    1806:	7b 89       	ldd	r23, Y+19	; 0x13
    1808:	ce 01       	movw	r24, r28
    180a:	c1 96       	adiw	r24, 0x31	; 49
    180c:	0e 94 65 1c 	call	0x38ca	; 0x38ca <countdown>
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	cb 01       	movw	r24, r22
    1816:	03 c0       	rjmp	.+6      	; 0x181e <sendPacket+0xb6>
    1818:	6f ef       	ldi	r22, 0xFF	; 255
    181a:	7f ef       	ldi	r23, 0xFF	; 255
    181c:	cb 01       	movw	r24, r22
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	df 90       	pop	r13
    182c:	cf 90       	pop	r12
    182e:	bf 90       	pop	r11
    1830:	af 90       	pop	r10
    1832:	9f 90       	pop	r9
    1834:	8f 90       	pop	r8
    1836:	7f 90       	pop	r7
    1838:	6f 90       	pop	r6
    183a:	5f 90       	pop	r5
    183c:	4f 90       	pop	r4
    183e:	3f 90       	pop	r3
    1840:	2f 90       	pop	r2
    1842:	08 95       	ret

00001844 <MQTTClient>:
    1844:	af 92       	push	r10
    1846:	bf 92       	push	r11
    1848:	cf 92       	push	r12
    184a:	df 92       	push	r13
    184c:	ef 92       	push	r14
    184e:	ff 92       	push	r15
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	fc 01       	movw	r30, r24
    1856:	70 ab       	std	Z+48, r23	; 0x30
    1858:	67 a7       	std	Z+47, r22	; 0x2f
    185a:	12 8e       	std	Z+26, r1	; 0x1a
    185c:	11 8e       	std	Z+25, r1	; 0x19
    185e:	16 8e       	std	Z+30, r1	; 0x1e
    1860:	15 8e       	std	Z+29, r1	; 0x1d
    1862:	12 a2       	std	Z+34, r1	; 0x22
    1864:	11 a2       	std	Z+33, r1	; 0x21
    1866:	16 a2       	std	Z+38, r1	; 0x26
    1868:	15 a2       	std	Z+37, r1	; 0x25
    186a:	12 a6       	std	Z+42, r1	; 0x2a
    186c:	11 a6       	std	Z+41, r1	; 0x29
    186e:	24 83       	std	Z+4, r18	; 0x04
    1870:	35 83       	std	Z+5, r19	; 0x05
    1872:	46 83       	std	Z+6, r20	; 0x06
    1874:	57 83       	std	Z+7, r21	; 0x07
    1876:	15 87       	std	Z+13, r17	; 0x0d
    1878:	04 87       	std	Z+12, r16	; 0x0c
    187a:	f1 86       	std	Z+9, r15	; 0x09
    187c:	e0 86       	std	Z+8, r14	; 0x08
    187e:	d7 86       	std	Z+15, r13	; 0x0f
    1880:	c6 86       	std	Z+14, r12	; 0x0e
    1882:	b3 86       	std	Z+11, r11	; 0x0b
    1884:	a2 86       	std	Z+10, r10	; 0x0a
    1886:	15 8a       	std	Z+21, r1	; 0x15
    1888:	16 8a       	std	Z+22, r1	; 0x16
    188a:	17 8a       	std	Z+23, r1	; 0x17
    188c:	10 8e       	std	Z+24, r1	; 0x18
    188e:	14 8a       	std	Z+20, r1	; 0x14
    1890:	16 a6       	std	Z+46, r1	; 0x2e
    1892:	15 a6       	std	Z+45, r1	; 0x2d
    1894:	c1 96       	adiw	r24, 0x31	; 49
    1896:	0e 94 a9 1c 	call	0x3952	; 0x3952 <InitTimer>
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	df 90       	pop	r13
    18a4:	cf 90       	pop	r12
    18a6:	bf 90       	pop	r11
    18a8:	af 90       	pop	r10
    18aa:	08 95       	ret

000018ac <decodePacket>:
    18ac:	2f 92       	push	r2
    18ae:	3f 92       	push	r3
    18b0:	4f 92       	push	r4
    18b2:	5f 92       	push	r5
    18b4:	6f 92       	push	r6
    18b6:	7f 92       	push	r7
    18b8:	8f 92       	push	r8
    18ba:	9f 92       	push	r9
    18bc:	af 92       	push	r10
    18be:	bf 92       	push	r11
    18c0:	cf 92       	push	r12
    18c2:	df 92       	push	r13
    18c4:	ef 92       	push	r14
    18c6:	ff 92       	push	r15
    18c8:	0f 93       	push	r16
    18ca:	1f 93       	push	r17
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <decodePacket+0x26>
    18d2:	1f 92       	push	r1
    18d4:	1f 92       	push	r1
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	1c 01       	movw	r2, r24
    18dc:	6b 01       	movw	r12, r22
    18de:	2a 83       	std	Y+2, r18	; 0x02
    18e0:	3b 83       	std	Y+3, r19	; 0x03
    18e2:	4c 83       	std	Y+4, r20	; 0x04
    18e4:	5d 83       	std	Y+5, r21	; 0x05
    18e6:	db 01       	movw	r26, r22
    18e8:	1d 92       	st	X+, r1
    18ea:	1d 92       	st	X+, r1
    18ec:	1d 92       	st	X+, r1
    18ee:	1c 92       	st	X, r1
    18f0:	13 97       	sbiw	r26, 0x03	; 3
    18f2:	41 2c       	mov	r4, r1
    18f4:	51 2c       	mov	r5, r1
    18f6:	32 01       	movw	r6, r4
    18f8:	43 94       	inc	r4
    18fa:	81 2c       	mov	r8, r1
    18fc:	91 2c       	mov	r9, r1
    18fe:	54 01       	movw	r10, r8
    1900:	83 94       	inc	r8
    1902:	0c c0       	rjmp	.+24     	; 0x191c <decodePacket+0x70>
    1904:	bf ef       	ldi	r27, 0xFF	; 255
    1906:	4b 1a       	sub	r4, r27
    1908:	5b 0a       	sbc	r5, r27
    190a:	6b 0a       	sbc	r6, r27
    190c:	7b 0a       	sbc	r7, r27
    190e:	e5 e0       	ldi	r30, 0x05	; 5
    1910:	4e 16       	cp	r4, r30
    1912:	51 04       	cpc	r5, r1
    1914:	61 04       	cpc	r6, r1
    1916:	71 04       	cpc	r7, r1
    1918:	09 f4       	brne	.+2      	; 0x191c <decodePacket+0x70>
    191a:	51 c0       	rjmp	.+162    	; 0x19be <decodePacket+0x112>
    191c:	d1 01       	movw	r26, r2
    191e:	9f 96       	adiw	r26, 0x2f	; 47
    1920:	8d 91       	ld	r24, X+
    1922:	9c 91       	ld	r25, X
    1924:	d0 97       	sbiw	r26, 0x30	; 48
    1926:	dc 01       	movw	r26, r24
    1928:	14 96       	adiw	r26, 0x04	; 4
    192a:	ed 91       	ld	r30, X+
    192c:	fc 91       	ld	r31, X
    192e:	15 97       	sbiw	r26, 0x05	; 5
    1930:	ea 80       	ldd	r14, Y+2	; 0x02
    1932:	fb 80       	ldd	r15, Y+3	; 0x03
    1934:	0c 81       	ldd	r16, Y+4	; 0x04
    1936:	1d 81       	ldd	r17, Y+5	; 0x05
    1938:	21 e0       	ldi	r18, 0x01	; 1
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e0       	ldi	r20, 0x00	; 0
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	be 01       	movw	r22, r28
    1942:	6f 5f       	subi	r22, 0xFF	; 255
    1944:	7f 4f       	sbci	r23, 0xFF	; 255
    1946:	19 95       	eicall
    1948:	61 30       	cpi	r22, 0x01	; 1
    194a:	71 05       	cpc	r23, r1
    194c:	81 05       	cpc	r24, r1
    194e:	91 05       	cpc	r25, r1
    1950:	b1 f5       	brne	.+108    	; 0x19be <decodePacket+0x112>
    1952:	f9 80       	ldd	r15, Y+1	; 0x01
    1954:	af 2d       	mov	r26, r15
    1956:	af 77       	andi	r26, 0x7F	; 127
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	a5 01       	movw	r20, r10
    195c:	94 01       	movw	r18, r8
    195e:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <__muluhisi3>
    1962:	f6 01       	movw	r30, r12
    1964:	00 81       	ld	r16, Z
    1966:	11 81       	ldd	r17, Z+1	; 0x01
    1968:	22 81       	ldd	r18, Z+2	; 0x02
    196a:	33 81       	ldd	r19, Z+3	; 0x03
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	80 0f       	add	r24, r16
    1972:	91 1f       	adc	r25, r17
    1974:	a2 1f       	adc	r26, r18
    1976:	b3 1f       	adc	r27, r19
    1978:	80 83       	st	Z, r24
    197a:	91 83       	std	Z+1, r25	; 0x01
    197c:	a2 83       	std	Z+2, r26	; 0x02
    197e:	b3 83       	std	Z+3, r27	; 0x03
    1980:	88 0c       	add	r8, r8
    1982:	99 1c       	adc	r9, r9
    1984:	aa 1c       	adc	r10, r10
    1986:	bb 1c       	adc	r11, r11
    1988:	88 0c       	add	r8, r8
    198a:	99 1c       	adc	r9, r9
    198c:	aa 1c       	adc	r10, r10
    198e:	bb 1c       	adc	r11, r11
    1990:	88 0c       	add	r8, r8
    1992:	99 1c       	adc	r9, r9
    1994:	aa 1c       	adc	r10, r10
    1996:	bb 1c       	adc	r11, r11
    1998:	88 0c       	add	r8, r8
    199a:	99 1c       	adc	r9, r9
    199c:	aa 1c       	adc	r10, r10
    199e:	bb 1c       	adc	r11, r11
    19a0:	88 0c       	add	r8, r8
    19a2:	99 1c       	adc	r9, r9
    19a4:	aa 1c       	adc	r10, r10
    19a6:	bb 1c       	adc	r11, r11
    19a8:	88 0c       	add	r8, r8
    19aa:	99 1c       	adc	r9, r9
    19ac:	aa 1c       	adc	r10, r10
    19ae:	bb 1c       	adc	r11, r11
    19b0:	88 0c       	add	r8, r8
    19b2:	99 1c       	adc	r9, r9
    19b4:	aa 1c       	adc	r10, r10
    19b6:	bb 1c       	adc	r11, r11
    19b8:	ff 20       	and	r15, r15
    19ba:	0c f4       	brge	.+2      	; 0x19be <decodePacket+0x112>
    19bc:	a3 cf       	rjmp	.-186    	; 0x1904 <decodePacket+0x58>
    19be:	c3 01       	movw	r24, r6
    19c0:	b2 01       	movw	r22, r4
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	ff 90       	pop	r15
    19d6:	ef 90       	pop	r14
    19d8:	df 90       	pop	r13
    19da:	cf 90       	pop	r12
    19dc:	bf 90       	pop	r11
    19de:	af 90       	pop	r10
    19e0:	9f 90       	pop	r9
    19e2:	8f 90       	pop	r8
    19e4:	7f 90       	pop	r7
    19e6:	6f 90       	pop	r6
    19e8:	5f 90       	pop	r5
    19ea:	4f 90       	pop	r4
    19ec:	3f 90       	pop	r3
    19ee:	2f 90       	pop	r2
    19f0:	08 95       	ret

000019f2 <readPacket>:
    19f2:	4f 92       	push	r4
    19f4:	5f 92       	push	r5
    19f6:	6f 92       	push	r6
    19f8:	7f 92       	push	r7
    19fa:	8f 92       	push	r8
    19fc:	9f 92       	push	r9
    19fe:	af 92       	push	r10
    1a00:	bf 92       	push	r11
    1a02:	cf 92       	push	r12
    1a04:	df 92       	push	r13
    1a06:	ef 92       	push	r14
    1a08:	ff 92       	push	r15
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <readPacket+0x22>
    1a14:	1f 92       	push	r1
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	6c 01       	movw	r12, r24
    1a1c:	5b 01       	movw	r10, r22
    1a1e:	19 82       	std	Y+1, r1	; 0x01
    1a20:	1a 82       	std	Y+2, r1	; 0x02
    1a22:	1b 82       	std	Y+3, r1	; 0x03
    1a24:	1c 82       	std	Y+4, r1	; 0x04
    1a26:	dc 01       	movw	r26, r24
    1a28:	9f 96       	adiw	r26, 0x2f	; 47
    1a2a:	ed 91       	ld	r30, X+
    1a2c:	fc 91       	ld	r31, X
    1a2e:	d0 97       	sbiw	r26, 0x30	; 48
    1a30:	84 80       	ldd	r8, Z+4	; 0x04
    1a32:	95 80       	ldd	r9, Z+5	; 0x05
    1a34:	cb 01       	movw	r24, r22
    1a36:	0e 94 8e 1c 	call	0x391c	; 0x391c <left_ms>
    1a3a:	7b 01       	movw	r14, r22
    1a3c:	8c 01       	movw	r16, r24
    1a3e:	f6 01       	movw	r30, r12
    1a40:	66 85       	ldd	r22, Z+14	; 0x0e
    1a42:	77 85       	ldd	r23, Z+15	; 0x0f
    1a44:	21 e0       	ldi	r18, 0x01	; 1
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	87 a5       	ldd	r24, Z+47	; 0x2f
    1a4e:	90 a9       	ldd	r25, Z+48	; 0x30
    1a50:	f4 01       	movw	r30, r8
    1a52:	19 95       	eicall
    1a54:	61 30       	cpi	r22, 0x01	; 1
    1a56:	71 05       	cpc	r23, r1
    1a58:	81 05       	cpc	r24, r1
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <readPacket+0x6e>
    1a5e:	54 c0       	rjmp	.+168    	; 0x1b08 <readPacket+0x116>
    1a60:	c5 01       	movw	r24, r10
    1a62:	0e 94 8e 1c 	call	0x391c	; 0x391c <left_ms>
    1a66:	9b 01       	movw	r18, r22
    1a68:	ac 01       	movw	r20, r24
    1a6a:	be 01       	movw	r22, r28
    1a6c:	6f 5f       	subi	r22, 0xFF	; 255
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	c6 01       	movw	r24, r12
    1a72:	1c df       	rcall	.-456    	; 0x18ac <decodePacket>
    1a74:	49 81       	ldd	r20, Y+1	; 0x01
    1a76:	5a 81       	ldd	r21, Y+2	; 0x02
    1a78:	6b 81       	ldd	r22, Y+3	; 0x03
    1a7a:	7c 81       	ldd	r23, Y+4	; 0x04
    1a7c:	d6 01       	movw	r26, r12
    1a7e:	1e 96       	adiw	r26, 0x0e	; 14
    1a80:	8d 91       	ld	r24, X+
    1a82:	9c 91       	ld	r25, X
    1a84:	1f 97       	sbiw	r26, 0x0f	; 15
    1a86:	01 96       	adiw	r24, 0x01	; 1
    1a88:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <MQTTPacket_encode>
    1a8c:	2b 01       	movw	r4, r22
    1a8e:	3c 01       	movw	r6, r24
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	ab 81       	ldd	r26, Y+3	; 0x03
    1a96:	bc 81       	ldd	r27, Y+4	; 0x04
    1a98:	18 16       	cp	r1, r24
    1a9a:	19 06       	cpc	r1, r25
    1a9c:	1a 06       	cpc	r1, r26
    1a9e:	1b 06       	cpc	r1, r27
    1aa0:	3c f5       	brge	.+78     	; 0x1af0 <readPacket+0xfe>
    1aa2:	d6 01       	movw	r26, r12
    1aa4:	9f 96       	adiw	r26, 0x2f	; 47
    1aa6:	ed 91       	ld	r30, X+
    1aa8:	fc 91       	ld	r31, X
    1aaa:	d0 97       	sbiw	r26, 0x30	; 48
    1aac:	84 80       	ldd	r8, Z+4	; 0x04
    1aae:	95 80       	ldd	r9, Z+5	; 0x05
    1ab0:	c5 01       	movw	r24, r10
    1ab2:	0e 94 8e 1c 	call	0x391c	; 0x391c <left_ms>
    1ab6:	7b 01       	movw	r14, r22
    1ab8:	8c 01       	movw	r16, r24
    1aba:	29 81       	ldd	r18, Y+1	; 0x01
    1abc:	3a 81       	ldd	r19, Y+2	; 0x02
    1abe:	4b 81       	ldd	r20, Y+3	; 0x03
    1ac0:	5c 81       	ldd	r21, Y+4	; 0x04
    1ac2:	bf ef       	ldi	r27, 0xFF	; 255
    1ac4:	4b 1a       	sub	r4, r27
    1ac6:	5b 0a       	sbc	r5, r27
    1ac8:	6b 0a       	sbc	r6, r27
    1aca:	7b 0a       	sbc	r7, r27
    1acc:	f6 01       	movw	r30, r12
    1ace:	66 85       	ldd	r22, Z+14	; 0x0e
    1ad0:	77 85       	ldd	r23, Z+15	; 0x0f
    1ad2:	64 0d       	add	r22, r4
    1ad4:	75 1d       	adc	r23, r5
    1ad6:	87 a5       	ldd	r24, Z+47	; 0x2f
    1ad8:	90 a9       	ldd	r25, Z+48	; 0x30
    1ada:	f4 01       	movw	r30, r8
    1adc:	19 95       	eicall
    1ade:	09 81       	ldd	r16, Y+1	; 0x01
    1ae0:	1a 81       	ldd	r17, Y+2	; 0x02
    1ae2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae6:	60 17       	cp	r22, r16
    1ae8:	71 07       	cpc	r23, r17
    1aea:	82 07       	cpc	r24, r18
    1aec:	93 07       	cpc	r25, r19
    1aee:	81 f4       	brne	.+32     	; 0x1b10 <readPacket+0x11e>
    1af0:	d6 01       	movw	r26, r12
    1af2:	1e 96       	adiw	r26, 0x0e	; 14
    1af4:	ed 91       	ld	r30, X+
    1af6:	fc 91       	ld	r31, X
    1af8:	1f 97       	sbiw	r26, 0x0f	; 15
    1afa:	60 81       	ld	r22, Z
    1afc:	62 95       	swap	r22
    1afe:	6f 70       	andi	r22, 0x0F	; 15
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	07 c0       	rjmp	.+14     	; 0x1b16 <readPacket+0x124>
    1b08:	6f ef       	ldi	r22, 0xFF	; 255
    1b0a:	7f ef       	ldi	r23, 0xFF	; 255
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	03 c0       	rjmp	.+6      	; 0x1b16 <readPacket+0x124>
    1b10:	6f ef       	ldi	r22, 0xFF	; 255
    1b12:	7f ef       	ldi	r23, 0xFF	; 255
    1b14:	cb 01       	movw	r24, r22
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	1f 91       	pop	r17
    1b24:	0f 91       	pop	r16
    1b26:	ff 90       	pop	r15
    1b28:	ef 90       	pop	r14
    1b2a:	df 90       	pop	r13
    1b2c:	cf 90       	pop	r12
    1b2e:	bf 90       	pop	r11
    1b30:	af 90       	pop	r10
    1b32:	9f 90       	pop	r9
    1b34:	8f 90       	pop	r8
    1b36:	7f 90       	pop	r7
    1b38:	6f 90       	pop	r6
    1b3a:	5f 90       	pop	r5
    1b3c:	4f 90       	pop	r4
    1b3e:	08 95       	ret

00001b40 <isTopicMatched>:
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	dc 01       	movw	r26, r24
    1b46:	eb 01       	movw	r28, r22
    1b48:	ee 81       	ldd	r30, Y+6	; 0x06
    1b4a:	ff 81       	ldd	r31, Y+7	; 0x07
    1b4c:	4a 81       	ldd	r20, Y+2	; 0x02
    1b4e:	5b 81       	ldd	r21, Y+3	; 0x03
    1b50:	4e 0f       	add	r20, r30
    1b52:	5f 1f       	adc	r21, r31
    1b54:	9c 91       	ld	r25, X
    1b56:	99 23       	and	r25, r25
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <isTopicMatched+0x1c>
    1b5a:	46 c0       	rjmp	.+140    	; 0x1be8 <isTopicMatched+0xa8>
    1b5c:	e4 17       	cp	r30, r20
    1b5e:	f5 07       	cpc	r31, r21
    1b60:	c0 f5       	brcc	.+112    	; 0x1bd2 <isTopicMatched+0x92>
    1b62:	11 96       	adiw	r26, 0x01	; 1
    1b64:	9a 01       	movw	r18, r20
    1b66:	21 50       	subi	r18, 0x01	; 1
    1b68:	31 09       	sbc	r19, r1
    1b6a:	01 c0       	rjmp	.+2      	; 0x1b6e <isTopicMatched+0x2e>
    1b6c:	11 96       	adiw	r26, 0x01	; 1
    1b6e:	80 81       	ld	r24, Z
    1b70:	8f 32       	cpi	r24, 0x2F	; 47
    1b72:	19 f4       	brne	.+6      	; 0x1b7a <isTopicMatched+0x3a>
    1b74:	9f 32       	cpi	r25, 0x2F	; 47
    1b76:	e1 f0       	breq	.+56     	; 0x1bb0 <isTopicMatched+0x70>
    1b78:	24 c0       	rjmp	.+72     	; 0x1bc2 <isTopicMatched+0x82>
    1b7a:	9b 32       	cpi	r25, 0x2B	; 43
    1b7c:	29 f0       	breq	.+10     	; 0x1b88 <isTopicMatched+0x48>
    1b7e:	93 32       	cpi	r25, 0x23	; 35
    1b80:	99 f0       	breq	.+38     	; 0x1ba8 <isTopicMatched+0x68>
    1b82:	89 17       	cp	r24, r25
    1b84:	a9 f0       	breq	.+42     	; 0x1bb0 <isTopicMatched+0x70>
    1b86:	1d c0       	rjmp	.+58     	; 0x1bc2 <isTopicMatched+0x82>
    1b88:	cf 01       	movw	r24, r30
    1b8a:	01 96       	adiw	r24, 0x01	; 1
    1b8c:	84 17       	cp	r24, r20
    1b8e:	95 07       	cpc	r25, r21
    1b90:	88 f5       	brcc	.+98     	; 0x1bf4 <isTopicMatched+0xb4>
    1b92:	81 81       	ldd	r24, Z+1	; 0x01
    1b94:	8f 32       	cpi	r24, 0x2F	; 47
    1b96:	19 f1       	breq	.+70     	; 0x1bde <isTopicMatched+0x9e>
    1b98:	31 96       	adiw	r30, 0x01	; 1
    1b9a:	e2 17       	cp	r30, r18
    1b9c:	f3 07       	cpc	r31, r19
    1b9e:	39 f0       	breq	.+14     	; 0x1bae <isTopicMatched+0x6e>
    1ba0:	91 81       	ldd	r25, Z+1	; 0x01
    1ba2:	9f 32       	cpi	r25, 0x2F	; 47
    1ba4:	c9 f7       	brne	.-14     	; 0x1b98 <isTopicMatched+0x58>
    1ba6:	1b c0       	rjmp	.+54     	; 0x1bde <isTopicMatched+0x9e>
    1ba8:	fa 01       	movw	r30, r20
    1baa:	31 97       	sbiw	r30, 0x01	; 1
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <isTopicMatched+0x70>
    1bae:	f9 01       	movw	r30, r18
    1bb0:	31 96       	adiw	r30, 0x01	; 1
    1bb2:	9c 91       	ld	r25, X
    1bb4:	99 23       	and	r25, r25
    1bb6:	c1 f0       	breq	.+48     	; 0x1be8 <isTopicMatched+0xa8>
    1bb8:	e4 17       	cp	r30, r20
    1bba:	f5 07       	cpc	r31, r21
    1bbc:	b8 f2       	brcs	.-82     	; 0x1b6c <isTopicMatched+0x2c>
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	1e c0       	rjmp	.+60     	; 0x1bfe <isTopicMatched+0xbe>
    1bc2:	4e 17       	cp	r20, r30
    1bc4:	5f 07       	cpc	r21, r31
    1bc6:	39 f4       	brne	.+14     	; 0x1bd6 <isTopicMatched+0x96>
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	99 23       	and	r25, r25
    1bcc:	c1 f0       	breq	.+48     	; 0x1bfe <isTopicMatched+0xbe>
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	16 c0       	rjmp	.+44     	; 0x1bfe <isTopicMatched+0xbe>
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	14 c0       	rjmp	.+40     	; 0x1bfe <isTopicMatched+0xbe>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	12 c0       	rjmp	.+36     	; 0x1bfe <isTopicMatched+0xbe>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	10 c0       	rjmp	.+32     	; 0x1bfe <isTopicMatched+0xbe>
    1bde:	31 96       	adiw	r30, 0x01	; 1
    1be0:	9c 91       	ld	r25, X
    1be2:	91 11       	cpse	r25, r1
    1be4:	c3 cf       	rjmp	.-122    	; 0x1b6c <isTopicMatched+0x2c>
    1be6:	ed cf       	rjmp	.-38     	; 0x1bc2 <isTopicMatched+0x82>
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	4e 17       	cp	r20, r30
    1bec:	5f 07       	cpc	r21, r31
    1bee:	39 f0       	breq	.+14     	; 0x1bfe <isTopicMatched+0xbe>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	05 c0       	rjmp	.+10     	; 0x1bfe <isTopicMatched+0xbe>
    1bf4:	31 96       	adiw	r30, 0x01	; 1
    1bf6:	8c 91       	ld	r24, X
    1bf8:	81 11       	cpse	r24, r1
    1bfa:	ef cf       	rjmp	.-34     	; 0x1bda <isTopicMatched+0x9a>
    1bfc:	f5 cf       	rjmp	.-22     	; 0x1be8 <isTopicMatched+0xa8>
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	08 95       	ret

00001c04 <deliverMessage>:
    1c04:	2f 92       	push	r2
    1c06:	3f 92       	push	r3
    1c08:	4f 92       	push	r4
    1c0a:	5f 92       	push	r5
    1c0c:	6f 92       	push	r6
    1c0e:	7f 92       	push	r7
    1c10:	8f 92       	push	r8
    1c12:	9f 92       	push	r9
    1c14:	af 92       	push	r10
    1c16:	bf 92       	push	r11
    1c18:	cf 92       	push	r12
    1c1a:	df 92       	push	r13
    1c1c:	ef 92       	push	r14
    1c1e:	ff 92       	push	r15
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <deliverMessage+0x26>
    1c2a:	1f 92       	push	r1
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	4c 01       	movw	r8, r24
    1c32:	6b 01       	movw	r12, r22
    1c34:	1a 01       	movw	r2, r20
    1c36:	8c 01       	movw	r16, r24
    1c38:	5c 01       	movw	r10, r24
    1c3a:	84 e1       	ldi	r24, 0x14	; 20
    1c3c:	a8 0e       	add	r10, r24
    1c3e:	b1 1c       	adc	r11, r1
    1c40:	44 24       	eor	r4, r4
    1c42:	4a 94       	dec	r4
    1c44:	54 2c       	mov	r5, r4
    1c46:	32 01       	movw	r6, r4
    1c48:	78 01       	movw	r14, r16
    1c4a:	d8 01       	movw	r26, r16
    1c4c:	59 96       	adiw	r26, 0x19	; 25
    1c4e:	6d 91       	ld	r22, X+
    1c50:	7c 91       	ld	r23, X
    1c52:	5a 97       	sbiw	r26, 0x1a	; 26
    1c54:	61 15       	cp	r22, r1
    1c56:	71 05       	cpc	r23, r1
    1c58:	01 f1       	breq	.+64     	; 0x1c9a <deliverMessage+0x96>
    1c5a:	c6 01       	movw	r24, r12
    1c5c:	0e 94 9f 18 	call	0x313e	; 0x313e <MQTTPacket_equals>
    1c60:	67 2b       	or	r22, r23
    1c62:	68 2b       	or	r22, r24
    1c64:	69 2b       	or	r22, r25
    1c66:	39 f4       	brne	.+14     	; 0x1c76 <deliverMessage+0x72>
    1c68:	b6 01       	movw	r22, r12
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	81 8d       	ldd	r24, Z+25	; 0x19
    1c6e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c70:	67 df       	rcall	.-306    	; 0x1b40 <isTopicMatched>
    1c72:	88 23       	and	r24, r24
    1c74:	91 f0       	breq	.+36     	; 0x1c9a <deliverMessage+0x96>
    1c76:	d7 01       	movw	r26, r14
    1c78:	5b 96       	adiw	r26, 0x1b	; 27
    1c7a:	ed 91       	ld	r30, X+
    1c7c:	fc 91       	ld	r31, X
    1c7e:	5c 97       	sbiw	r26, 0x1c	; 28
    1c80:	30 97       	sbiw	r30, 0x00	; 0
    1c82:	59 f0       	breq	.+22     	; 0x1c9a <deliverMessage+0x96>
    1c84:	dc 82       	std	Y+4, r13	; 0x04
    1c86:	cb 82       	std	Y+3, r12	; 0x03
    1c88:	3a 82       	std	Y+2, r3	; 0x02
    1c8a:	29 82       	std	Y+1, r2	; 0x01
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	01 96       	adiw	r24, 0x01	; 1
    1c90:	19 95       	eicall
    1c92:	41 2c       	mov	r4, r1
    1c94:	51 2c       	mov	r5, r1
    1c96:	61 2c       	mov	r6, r1
    1c98:	71 2c       	mov	r7, r1
    1c9a:	0c 5f       	subi	r16, 0xFC	; 252
    1c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9e:	0a 15       	cp	r16, r10
    1ca0:	1b 05       	cpc	r17, r11
    1ca2:	91 f6       	brne	.-92     	; 0x1c48 <deliverMessage+0x44>
    1ca4:	bf ef       	ldi	r27, 0xFF	; 255
    1ca6:	4b 16       	cp	r4, r27
    1ca8:	5b 06       	cpc	r5, r27
    1caa:	6b 06       	cpc	r6, r27
    1cac:	7b 06       	cpc	r7, r27
    1cae:	89 f4       	brne	.+34     	; 0x1cd2 <deliverMessage+0xce>
    1cb0:	d4 01       	movw	r26, r8
    1cb2:	9d 96       	adiw	r26, 0x2d	; 45
    1cb4:	ed 91       	ld	r30, X+
    1cb6:	fc 91       	ld	r31, X
    1cb8:	9e 97       	sbiw	r26, 0x2e	; 46
    1cba:	30 97       	sbiw	r30, 0x00	; 0
    1cbc:	51 f0       	breq	.+20     	; 0x1cd2 <deliverMessage+0xce>
    1cbe:	dc 82       	std	Y+4, r13	; 0x04
    1cc0:	cb 82       	std	Y+3, r12	; 0x03
    1cc2:	3a 82       	std	Y+2, r3	; 0x02
    1cc4:	29 82       	std	Y+1, r2	; 0x01
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	01 96       	adiw	r24, 0x01	; 1
    1cca:	19 95       	eicall
    1ccc:	41 2c       	mov	r4, r1
    1cce:	51 2c       	mov	r5, r1
    1cd0:	32 01       	movw	r6, r4
    1cd2:	c3 01       	movw	r24, r6
    1cd4:	b2 01       	movw	r22, r4
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	1f 91       	pop	r17
    1ce4:	0f 91       	pop	r16
    1ce6:	ff 90       	pop	r15
    1ce8:	ef 90       	pop	r14
    1cea:	df 90       	pop	r13
    1cec:	cf 90       	pop	r12
    1cee:	bf 90       	pop	r11
    1cf0:	af 90       	pop	r10
    1cf2:	9f 90       	pop	r9
    1cf4:	8f 90       	pop	r8
    1cf6:	7f 90       	pop	r7
    1cf8:	6f 90       	pop	r6
    1cfa:	5f 90       	pop	r5
    1cfc:	4f 90       	pop	r4
    1cfe:	3f 90       	pop	r3
    1d00:	2f 90       	pop	r2
    1d02:	08 95       	ret

00001d04 <keepalive>:
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	28 97       	sbiw	r28, 0x08	; 8
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	40 89       	ldd	r20, Z+16	; 0x10
    1d20:	51 89       	ldd	r21, Z+17	; 0x11
    1d22:	62 89       	ldd	r22, Z+18	; 0x12
    1d24:	73 89       	ldd	r23, Z+19	; 0x13
    1d26:	45 2b       	or	r20, r21
    1d28:	46 2b       	or	r20, r22
    1d2a:	47 2b       	or	r20, r23
    1d2c:	b9 f1       	breq	.+110    	; 0x1d9c <keepalive+0x98>
    1d2e:	8c 01       	movw	r16, r24
    1d30:	c1 96       	adiw	r24, 0x31	; 49
    1d32:	0e 94 2f 1c 	call	0x385e	; 0x385e <expired>
    1d36:	88 23       	and	r24, r24
    1d38:	a9 f1       	breq	.+106    	; 0x1da4 <keepalive+0xa0>
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	84 89       	ldd	r24, Z+20	; 0x14
    1d3e:	81 11       	cpse	r24, r1
    1d40:	35 c0       	rjmp	.+106    	; 0x1dac <keepalive+0xa8>
    1d42:	ce 01       	movw	r24, r28
    1d44:	01 96       	adiw	r24, 0x01	; 1
    1d46:	0e 94 a9 1c 	call	0x3952	; 0x3952 <InitTimer>
    1d4a:	48 ee       	ldi	r20, 0xE8	; 232
    1d4c:	53 e0       	ldi	r21, 0x03	; 3
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	70 e0       	ldi	r23, 0x00	; 0
    1d52:	ce 01       	movw	r24, r28
    1d54:	01 96       	adiw	r24, 0x01	; 1
    1d56:	0e 94 4c 1c 	call	0x3898	; 0x3898 <countdown_ms>
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	40 85       	ldd	r20, Z+8	; 0x08
    1d5e:	51 85       	ldd	r21, Z+9	; 0x09
    1d60:	60 e0       	ldi	r22, 0x00	; 0
    1d62:	70 e0       	ldi	r23, 0x00	; 0
    1d64:	84 85       	ldd	r24, Z+12	; 0x0c
    1d66:	95 85       	ldd	r25, Z+13	; 0x0d
    1d68:	86 d6       	rcall	.+3340   	; 0x2a76 <MQTTSerialize_pingreq>
    1d6a:	16 16       	cp	r1, r22
    1d6c:	17 06       	cpc	r1, r23
    1d6e:	18 06       	cpc	r1, r24
    1d70:	19 06       	cpc	r1, r25
    1d72:	84 f4       	brge	.+32     	; 0x1d94 <keepalive+0x90>
    1d74:	9e 01       	movw	r18, r28
    1d76:	2f 5f       	subi	r18, 0xFF	; 255
    1d78:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7a:	ab 01       	movw	r20, r22
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	c8 01       	movw	r24, r16
    1d80:	f3 dc       	rcall	.-1562   	; 0x1768 <sendPacket>
    1d82:	61 15       	cp	r22, r1
    1d84:	71 05       	cpc	r23, r1
    1d86:	81 05       	cpc	r24, r1
    1d88:	91 05       	cpc	r25, r1
    1d8a:	99 f4       	brne	.+38     	; 0x1db2 <keepalive+0xae>
    1d8c:	21 e0       	ldi	r18, 0x01	; 1
    1d8e:	f8 01       	movw	r30, r16
    1d90:	24 8b       	std	Z+20, r18	; 0x14
    1d92:	0f c0       	rjmp	.+30     	; 0x1db2 <keepalive+0xae>
    1d94:	6f ef       	ldi	r22, 0xFF	; 255
    1d96:	7f ef       	ldi	r23, 0xFF	; 255
    1d98:	cb 01       	movw	r24, r22
    1d9a:	0b c0       	rjmp	.+22     	; 0x1db2 <keepalive+0xae>
    1d9c:	60 e0       	ldi	r22, 0x00	; 0
    1d9e:	70 e0       	ldi	r23, 0x00	; 0
    1da0:	cb 01       	movw	r24, r22
    1da2:	07 c0       	rjmp	.+14     	; 0x1db2 <keepalive+0xae>
    1da4:	6f ef       	ldi	r22, 0xFF	; 255
    1da6:	7f ef       	ldi	r23, 0xFF	; 255
    1da8:	cb 01       	movw	r24, r22
    1daa:	03 c0       	rjmp	.+6      	; 0x1db2 <keepalive+0xae>
    1dac:	6f ef       	ldi	r22, 0xFF	; 255
    1dae:	7f ef       	ldi	r23, 0xFF	; 255
    1db0:	cb 01       	movw	r24, r22
    1db2:	28 96       	adiw	r28, 0x08	; 8
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	de bf       	out	0x3e, r29	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	cd bf       	out	0x3d, r28	; 61
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	1f 91       	pop	r17
    1dc4:	0f 91       	pop	r16
    1dc6:	08 95       	ret

00001dc8 <cycle>:
    1dc8:	2f 92       	push	r2
    1dca:	3f 92       	push	r3
    1dcc:	4f 92       	push	r4
    1dce:	5f 92       	push	r5
    1dd0:	6f 92       	push	r6
    1dd2:	7f 92       	push	r7
    1dd4:	8f 92       	push	r8
    1dd6:	9f 92       	push	r9
    1dd8:	af 92       	push	r10
    1dda:	bf 92       	push	r11
    1ddc:	cf 92       	push	r12
    1dde:	df 92       	push	r13
    1de0:	ef 92       	push	r14
    1de2:	ff 92       	push	r15
    1de4:	0f 93       	push	r16
    1de6:	1f 93       	push	r17
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	62 97       	sbiw	r28, 0x12	; 18
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	4c 01       	movw	r8, r24
    1dfe:	1b 01       	movw	r2, r22
    1e00:	f8 dd       	rcall	.-1040   	; 0x19f2 <readPacket>
    1e02:	2b 01       	movw	r4, r22
    1e04:	3c 01       	movw	r6, r24
    1e06:	85 e0       	ldi	r24, 0x05	; 5
    1e08:	48 16       	cp	r4, r24
    1e0a:	51 04       	cpc	r5, r1
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <cycle+0x48>
    1e0e:	81 c0       	rjmp	.+258    	; 0x1f12 <cycle+0x14a>
    1e10:	9d e0       	ldi	r25, 0x0D	; 13
    1e12:	49 16       	cp	r4, r25
    1e14:	51 04       	cpc	r5, r1
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <cycle+0x52>
    1e18:	af c0       	rjmp	.+350    	; 0x1f78 <cycle+0x1b0>
    1e1a:	e3 e0       	ldi	r30, 0x03	; 3
    1e1c:	4e 16       	cp	r4, r30
    1e1e:	51 04       	cpc	r5, r1
    1e20:	09 f0       	breq	.+2      	; 0x1e24 <cycle+0x5c>
    1e22:	b0 c0       	rjmp	.+352    	; 0x1f84 <cycle+0x1bc>
    1e24:	f4 01       	movw	r30, r8
    1e26:	a6 84       	ldd	r10, Z+14	; 0x0e
    1e28:	b7 84       	ldd	r11, Z+15	; 0x0f
    1e2a:	82 85       	ldd	r24, Z+10	; 0x0a
    1e2c:	93 85       	ldd	r25, Z+11	; 0x0b
    1e2e:	1f 92       	push	r1
    1e30:	1f 92       	push	r1
    1e32:	9f 93       	push	r25
    1e34:	8f 93       	push	r24
    1e36:	ce 01       	movw	r24, r28
    1e38:	08 96       	adiw	r24, 0x08	; 8
    1e3a:	6c 01       	movw	r12, r24
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	36 96       	adiw	r30, 0x06	; 6
    1e40:	7f 01       	movw	r14, r30
    1e42:	8e 01       	movw	r16, r28
    1e44:	06 5f       	subi	r16, 0xF6	; 246
    1e46:	1f 4f       	sbci	r17, 0xFF	; 255
    1e48:	9e 01       	movw	r18, r28
    1e4a:	2c 5f       	subi	r18, 0xFC	; 252
    1e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4e:	ae 01       	movw	r20, r28
    1e50:	4e 5f       	subi	r20, 0xFE	; 254
    1e52:	5f 4f       	sbci	r21, 0xFF	; 255
    1e54:	be 01       	movw	r22, r28
    1e56:	6f 5f       	subi	r22, 0xFF	; 255
    1e58:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5a:	05 97       	sbiw	r24, 0x05	; 5
    1e5c:	0f d6       	rcall	.+3102   	; 0x2a7c <MQTTDeserialize_publish>
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	61 30       	cpi	r22, 0x01	; 1
    1e68:	71 05       	cpc	r23, r1
    1e6a:	81 05       	cpc	r24, r1
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	09 f0       	breq	.+2      	; 0x1e72 <cycle+0xaa>
    1e70:	3e c0       	rjmp	.+124    	; 0x1eee <cycle+0x126>
    1e72:	ae 01       	movw	r20, r28
    1e74:	4f 5f       	subi	r20, 0xFF	; 255
    1e76:	5f 4f       	sbci	r21, 0xFF	; 255
    1e78:	b8 01       	movw	r22, r16
    1e7a:	c4 01       	movw	r24, r8
    1e7c:	c3 de       	rcall	.-634    	; 0x1c04 <deliverMessage>
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	88 23       	and	r24, r24
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <cycle+0xbe>
    1e84:	42 c0       	rjmp	.+132    	; 0x1f0a <cycle+0x142>
    1e86:	81 30       	cpi	r24, 0x01	; 1
    1e88:	81 f4       	brne	.+32     	; 0x1eaa <cycle+0xe2>
    1e8a:	ec 80       	ldd	r14, Y+4	; 0x04
    1e8c:	fd 80       	ldd	r15, Y+5	; 0x05
    1e8e:	f4 01       	movw	r30, r8
    1e90:	40 85       	ldd	r20, Z+8	; 0x08
    1e92:	51 85       	ldd	r21, Z+9	; 0x09
    1e94:	60 e0       	ldi	r22, 0x00	; 0
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	00 e0       	ldi	r16, 0x00	; 0
    1e9a:	24 e0       	ldi	r18, 0x04	; 4
    1e9c:	84 85       	ldd	r24, Z+12	; 0x0c
    1e9e:	95 85       	ldd	r25, Z+13	; 0x0d
    1ea0:	0e 94 b3 19 	call	0x3366	; 0x3366 <MQTTSerialize_ack>
    1ea4:	ab 01       	movw	r20, r22
    1ea6:	bc 01       	movw	r22, r24
    1ea8:	11 c0       	rjmp	.+34     	; 0x1ecc <cycle+0x104>
    1eaa:	82 30       	cpi	r24, 0x02	; 2
    1eac:	21 f5       	brne	.+72     	; 0x1ef6 <cycle+0x12e>
    1eae:	ec 80       	ldd	r14, Y+4	; 0x04
    1eb0:	fd 80       	ldd	r15, Y+5	; 0x05
    1eb2:	f4 01       	movw	r30, r8
    1eb4:	40 85       	ldd	r20, Z+8	; 0x08
    1eb6:	51 85       	ldd	r21, Z+9	; 0x09
    1eb8:	60 e0       	ldi	r22, 0x00	; 0
    1eba:	70 e0       	ldi	r23, 0x00	; 0
    1ebc:	00 e0       	ldi	r16, 0x00	; 0
    1ebe:	25 e0       	ldi	r18, 0x05	; 5
    1ec0:	84 85       	ldd	r24, Z+12	; 0x0c
    1ec2:	95 85       	ldd	r25, Z+13	; 0x0d
    1ec4:	0e 94 b3 19 	call	0x3366	; 0x3366 <MQTTSerialize_ack>
    1ec8:	ab 01       	movw	r20, r22
    1eca:	bc 01       	movw	r22, r24
    1ecc:	14 16       	cp	r1, r20
    1ece:	15 06       	cpc	r1, r21
    1ed0:	16 06       	cpc	r1, r22
    1ed2:	17 06       	cpc	r1, r23
    1ed4:	ac f4       	brge	.+42     	; 0x1f00 <cycle+0x138>
    1ed6:	91 01       	movw	r18, r2
    1ed8:	c4 01       	movw	r24, r8
    1eda:	46 dc       	rcall	.-1908   	; 0x1768 <sendPacket>
    1edc:	6b 01       	movw	r12, r22
    1ede:	7c 01       	movw	r14, r24
    1ee0:	6f 3f       	cpi	r22, 0xFF	; 255
    1ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <cycle+0x124>
    1eea:	4f c0       	rjmp	.+158    	; 0x1f8a <cycle+0x1c2>
    1eec:	50 c0       	rjmp	.+160    	; 0x1f8e <cycle+0x1c6>
    1eee:	c1 2c       	mov	r12, r1
    1ef0:	d1 2c       	mov	r13, r1
    1ef2:	76 01       	movw	r14, r12
    1ef4:	4c c0       	rjmp	.+152    	; 0x1f8e <cycle+0x1c6>
    1ef6:	cc 24       	eor	r12, r12
    1ef8:	ca 94       	dec	r12
    1efa:	dc 2c       	mov	r13, r12
    1efc:	76 01       	movw	r14, r12
    1efe:	47 c0       	rjmp	.+142    	; 0x1f8e <cycle+0x1c6>
    1f00:	cc 24       	eor	r12, r12
    1f02:	ca 94       	dec	r12
    1f04:	dc 2c       	mov	r13, r12
    1f06:	76 01       	movw	r14, r12
    1f08:	42 c0       	rjmp	.+132    	; 0x1f8e <cycle+0x1c6>
    1f0a:	c1 2c       	mov	r12, r1
    1f0c:	d1 2c       	mov	r13, r1
    1f0e:	76 01       	movw	r14, r12
    1f10:	3c c0       	rjmp	.+120    	; 0x1f8a <cycle+0x1c2>
    1f12:	f4 01       	movw	r30, r8
    1f14:	e2 84       	ldd	r14, Z+10	; 0x0a
    1f16:	f3 84       	ldd	r15, Z+11	; 0x0b
    1f18:	00 e0       	ldi	r16, 0x00	; 0
    1f1a:	10 e0       	ldi	r17, 0x00	; 0
    1f1c:	26 85       	ldd	r18, Z+14	; 0x0e
    1f1e:	37 85       	ldd	r19, Z+15	; 0x0f
    1f20:	ae 01       	movw	r20, r28
    1f22:	4f 5f       	subi	r20, 0xFF	; 255
    1f24:	5f 4f       	sbci	r21, 0xFF	; 255
    1f26:	be 01       	movw	r22, r28
    1f28:	6e 5e       	subi	r22, 0xEE	; 238
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	0a 96       	adiw	r24, 0x0a	; 10
    1f30:	42 d6       	rcall	.+3204   	; 0x2bb6 <MQTTDeserialize_ack>
    1f32:	61 30       	cpi	r22, 0x01	; 1
    1f34:	71 05       	cpc	r23, r1
    1f36:	81 05       	cpc	r24, r1
    1f38:	91 05       	cpc	r25, r1
    1f3a:	99 f5       	brne	.+102    	; 0x1fa2 <cycle+0x1da>
    1f3c:	e9 80       	ldd	r14, Y+1	; 0x01
    1f3e:	fa 80       	ldd	r15, Y+2	; 0x02
    1f40:	f4 01       	movw	r30, r8
    1f42:	40 85       	ldd	r20, Z+8	; 0x08
    1f44:	51 85       	ldd	r21, Z+9	; 0x09
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	70 e0       	ldi	r23, 0x00	; 0
    1f4a:	00 e0       	ldi	r16, 0x00	; 0
    1f4c:	26 e0       	ldi	r18, 0x06	; 6
    1f4e:	84 85       	ldd	r24, Z+12	; 0x0c
    1f50:	95 85       	ldd	r25, Z+13	; 0x0d
    1f52:	0e 94 b3 19 	call	0x3366	; 0x3366 <MQTTSerialize_ack>
    1f56:	16 16       	cp	r1, r22
    1f58:	17 06       	cpc	r1, r23
    1f5a:	18 06       	cpc	r1, r24
    1f5c:	19 06       	cpc	r1, r25
    1f5e:	0c f5       	brge	.+66     	; 0x1fa2 <cycle+0x1da>
    1f60:	91 01       	movw	r18, r2
    1f62:	ab 01       	movw	r20, r22
    1f64:	bc 01       	movw	r22, r24
    1f66:	c4 01       	movw	r24, r8
    1f68:	ff db       	rcall	.-2050   	; 0x1768 <sendPacket>
    1f6a:	6b 01       	movw	r12, r22
    1f6c:	7c 01       	movw	r14, r24
    1f6e:	67 2b       	or	r22, r23
    1f70:	68 2b       	or	r22, r24
    1f72:	69 2b       	or	r22, r25
    1f74:	b1 f4       	brne	.+44     	; 0x1fa2 <cycle+0x1da>
    1f76:	09 c0       	rjmp	.+18     	; 0x1f8a <cycle+0x1c2>
    1f78:	f4 01       	movw	r30, r8
    1f7a:	14 8a       	std	Z+20, r1	; 0x14
    1f7c:	c1 2c       	mov	r12, r1
    1f7e:	d1 2c       	mov	r13, r1
    1f80:	76 01       	movw	r14, r12
    1f82:	03 c0       	rjmp	.+6      	; 0x1f8a <cycle+0x1c2>
    1f84:	c1 2c       	mov	r12, r1
    1f86:	d1 2c       	mov	r13, r1
    1f88:	76 01       	movw	r14, r12
    1f8a:	c4 01       	movw	r24, r8
    1f8c:	bb de       	rcall	.-650    	; 0x1d04 <keepalive>
    1f8e:	c1 14       	cp	r12, r1
    1f90:	d1 04       	cpc	r13, r1
    1f92:	e1 04       	cpc	r14, r1
    1f94:	f1 04       	cpc	r15, r1
    1f96:	49 f4       	brne	.+18     	; 0x1faa <cycle+0x1e2>
    1f98:	73 01       	movw	r14, r6
    1f9a:	62 01       	movw	r12, r4
    1f9c:	ee 24       	eor	r14, r14
    1f9e:	ff 24       	eor	r15, r15
    1fa0:	04 c0       	rjmp	.+8      	; 0x1faa <cycle+0x1e2>
    1fa2:	cc 24       	eor	r12, r12
    1fa4:	ca 94       	dec	r12
    1fa6:	dc 2c       	mov	r13, r12
    1fa8:	76 01       	movw	r14, r12
    1faa:	c7 01       	movw	r24, r14
    1fac:	b6 01       	movw	r22, r12
    1fae:	62 96       	adiw	r28, 0x12	; 18
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	ff 90       	pop	r15
    1fc4:	ef 90       	pop	r14
    1fc6:	df 90       	pop	r13
    1fc8:	cf 90       	pop	r12
    1fca:	bf 90       	pop	r11
    1fcc:	af 90       	pop	r10
    1fce:	9f 90       	pop	r9
    1fd0:	8f 90       	pop	r8
    1fd2:	7f 90       	pop	r7
    1fd4:	6f 90       	pop	r6
    1fd6:	5f 90       	pop	r5
    1fd8:	4f 90       	pop	r4
    1fda:	3f 90       	pop	r3
    1fdc:	2f 90       	pop	r2
    1fde:	08 95       	ret

00001fe0 <MQTTYield>:
    1fe0:	cf 92       	push	r12
    1fe2:	df 92       	push	r13
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	28 97       	sbiw	r28, 0x08	; 8
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	cd bf       	out	0x3d, r28	; 61
    2000:	8c 01       	movw	r16, r24
    2002:	6a 01       	movw	r12, r20
    2004:	7b 01       	movw	r14, r22
    2006:	ce 01       	movw	r24, r28
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	0e 94 a9 1c 	call	0x3952	; 0x3952 <InitTimer>
    200e:	b7 01       	movw	r22, r14
    2010:	a6 01       	movw	r20, r12
    2012:	ce 01       	movw	r24, r28
    2014:	01 96       	adiw	r24, 0x01	; 1
    2016:	0e 94 4c 1c 	call	0x3898	; 0x3898 <countdown_ms>
    201a:	0a c0       	rjmp	.+20     	; 0x2030 <__EEPROM_REGION_LENGTH__+0x30>
    201c:	be 01       	movw	r22, r28
    201e:	6f 5f       	subi	r22, 0xFF	; 255
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	c8 01       	movw	r24, r16
    2024:	d1 de       	rcall	.-606    	; 0x1dc8 <cycle>
    2026:	6f 3f       	cpi	r22, 0xFF	; 255
    2028:	7f 4f       	sbci	r23, 0xFF	; 255
    202a:	8f 4f       	sbci	r24, 0xFF	; 255
    202c:	9f 4f       	sbci	r25, 0xFF	; 255
    202e:	51 f0       	breq	.+20     	; 0x2044 <__EEPROM_REGION_LENGTH__+0x44>
    2030:	ce 01       	movw	r24, r28
    2032:	01 96       	adiw	r24, 0x01	; 1
    2034:	0e 94 2f 1c 	call	0x385e	; 0x385e <expired>
    2038:	88 23       	and	r24, r24
    203a:	81 f3       	breq	.-32     	; 0x201c <__EEPROM_REGION_LENGTH__+0x1c>
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	cb 01       	movw	r24, r22
    2042:	03 c0       	rjmp	.+6      	; 0x204a <__EEPROM_REGION_LENGTH__+0x4a>
    2044:	6f ef       	ldi	r22, 0xFF	; 255
    2046:	7f ef       	ldi	r23, 0xFF	; 255
    2048:	cb 01       	movw	r24, r22
    204a:	28 96       	adiw	r28, 0x08	; 8
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	ff 90       	pop	r15
    2060:	ef 90       	pop	r14
    2062:	df 90       	pop	r13
    2064:	cf 90       	pop	r12
    2066:	08 95       	ret

00002068 <waitfor>:
    2068:	8f 92       	push	r8
    206a:	9f 92       	push	r9
    206c:	af 92       	push	r10
    206e:	bf 92       	push	r11
    2070:	cf 92       	push	r12
    2072:	df 92       	push	r13
    2074:	ef 92       	push	r14
    2076:	ff 92       	push	r15
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	8c 01       	movw	r16, r24
    2082:	4a 01       	movw	r8, r20
    2084:	5b 01       	movw	r10, r22
    2086:	e9 01       	movw	r28, r18
    2088:	cc 24       	eor	r12, r12
    208a:	ca 94       	dec	r12
    208c:	dc 2c       	mov	r13, r12
    208e:	76 01       	movw	r14, r12
    2090:	ce 01       	movw	r24, r28
    2092:	0e 94 2f 1c 	call	0x385e	; 0x385e <expired>
    2096:	81 11       	cpse	r24, r1
    2098:	0c c0       	rjmp	.+24     	; 0x20b2 <waitfor+0x4a>
    209a:	be 01       	movw	r22, r28
    209c:	c8 01       	movw	r24, r16
    209e:	94 de       	rcall	.-728    	; 0x1dc8 <cycle>
    20a0:	6b 01       	movw	r12, r22
    20a2:	7c 01       	movw	r14, r24
    20a4:	68 15       	cp	r22, r8
    20a6:	79 05       	cpc	r23, r9
    20a8:	8a 05       	cpc	r24, r10
    20aa:	9b 05       	cpc	r25, r11
    20ac:	89 f7       	brne	.-30     	; 0x2090 <waitfor+0x28>
    20ae:	75 01       	movw	r14, r10
    20b0:	64 01       	movw	r12, r8
    20b2:	c7 01       	movw	r24, r14
    20b4:	b6 01       	movw	r22, r12
    20b6:	df 91       	pop	r29
    20b8:	cf 91       	pop	r28
    20ba:	1f 91       	pop	r17
    20bc:	0f 91       	pop	r16
    20be:	ff 90       	pop	r15
    20c0:	ef 90       	pop	r14
    20c2:	df 90       	pop	r13
    20c4:	cf 90       	pop	r12
    20c6:	bf 90       	pop	r11
    20c8:	af 90       	pop	r10
    20ca:	9f 90       	pop	r9
    20cc:	8f 90       	pop	r8
    20ce:	08 95       	ret

000020d0 <MQTTConnect>:
    20d0:	ef 92       	push	r14
    20d2:	ff 92       	push	r15
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	c5 54       	subi	r28, 0x45	; 69
    20e2:	d1 09       	sbc	r29, r1
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	7c 01       	movw	r14, r24
    20f0:	8b 01       	movw	r16, r22
    20f2:	8b e3       	ldi	r24, 0x3B	; 59
    20f4:	e9 e7       	ldi	r30, 0x79	; 121
    20f6:	f2 e0       	ldi	r31, 0x02	; 2
    20f8:	de 01       	movw	r26, r28
    20fa:	19 96       	adiw	r26, 0x09	; 9
    20fc:	01 90       	ld	r0, Z+
    20fe:	0d 92       	st	X+, r0
    2100:	8a 95       	dec	r24
    2102:	e1 f7       	brne	.-8      	; 0x20fc <MQTTConnect+0x2c>
    2104:	ce 01       	movw	r24, r28
    2106:	01 96       	adiw	r24, 0x01	; 1
    2108:	0e 94 a9 1c 	call	0x3952	; 0x3952 <InitTimer>
    210c:	f7 01       	movw	r30, r14
    210e:	44 81       	ldd	r20, Z+4	; 0x04
    2110:	55 81       	ldd	r21, Z+5	; 0x05
    2112:	66 81       	ldd	r22, Z+6	; 0x06
    2114:	77 81       	ldd	r23, Z+7	; 0x07
    2116:	ce 01       	movw	r24, r28
    2118:	01 96       	adiw	r24, 0x01	; 1
    211a:	0e 94 4c 1c 	call	0x3898	; 0x3898 <countdown_ms>
    211e:	f7 01       	movw	r30, r14
    2120:	85 89       	ldd	r24, Z+21	; 0x15
    2122:	96 89       	ldd	r25, Z+22	; 0x16
    2124:	a7 89       	ldd	r26, Z+23	; 0x17
    2126:	b0 8d       	ldd	r27, Z+24	; 0x18
    2128:	89 2b       	or	r24, r25
    212a:	8a 2b       	or	r24, r26
    212c:	8b 2b       	or	r24, r27
    212e:	09 f0       	breq	.+2      	; 0x2132 <MQTTConnect+0x62>
    2130:	6d c0       	rjmp	.+218    	; 0x220c <MQTTConnect+0x13c>
    2132:	01 15       	cp	r16, r1
    2134:	11 05       	cpc	r17, r1
    2136:	19 f4       	brne	.+6      	; 0x213e <MQTTConnect+0x6e>
    2138:	8e 01       	movw	r16, r28
    213a:	07 5f       	subi	r16, 0xF7	; 247
    213c:	1f 4f       	sbci	r17, 0xFF	; 255
    213e:	f8 01       	movw	r30, r16
    2140:	47 85       	ldd	r20, Z+15	; 0x0f
    2142:	50 89       	ldd	r21, Z+16	; 0x10
    2144:	60 e0       	ldi	r22, 0x00	; 0
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	f7 01       	movw	r30, r14
    214a:	40 8b       	std	Z+16, r20	; 0x10
    214c:	51 8b       	std	Z+17, r21	; 0x11
    214e:	62 8b       	std	Z+18, r22	; 0x12
    2150:	73 8b       	std	Z+19, r23	; 0x13
    2152:	c7 01       	movw	r24, r14
    2154:	c1 96       	adiw	r24, 0x31	; 49
    2156:	0e 94 65 1c 	call	0x38ca	; 0x38ca <countdown>
    215a:	f7 01       	movw	r30, r14
    215c:	40 85       	ldd	r20, Z+8	; 0x08
    215e:	51 85       	ldd	r21, Z+9	; 0x09
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	98 01       	movw	r18, r16
    2166:	84 85       	ldd	r24, Z+12	; 0x0c
    2168:	95 85       	ldd	r25, Z+13	; 0x0d
    216a:	1e d3       	rcall	.+1596   	; 0x27a8 <MQTTSerialize_connect>
    216c:	ab 01       	movw	r20, r22
    216e:	bc 01       	movw	r22, r24
    2170:	14 16       	cp	r1, r20
    2172:	15 06       	cpc	r1, r21
    2174:	16 06       	cpc	r1, r22
    2176:	17 06       	cpc	r1, r23
    2178:	0c f0       	brlt	.+2      	; 0x217c <MQTTConnect+0xac>
    217a:	4c c0       	rjmp	.+152    	; 0x2214 <MQTTConnect+0x144>
    217c:	9e 01       	movw	r18, r28
    217e:	2f 5f       	subi	r18, 0xFF	; 255
    2180:	3f 4f       	sbci	r19, 0xFF	; 255
    2182:	c7 01       	movw	r24, r14
    2184:	f1 da       	rcall	.-2590   	; 0x1768 <sendPacket>
    2186:	61 15       	cp	r22, r1
    2188:	71 05       	cpc	r23, r1
    218a:	81 05       	cpc	r24, r1
    218c:	91 05       	cpc	r25, r1
    218e:	09 f0       	breq	.+2      	; 0x2192 <MQTTConnect+0xc2>
    2190:	4c c0       	rjmp	.+152    	; 0x222a <MQTTConnect+0x15a>
    2192:	9e 01       	movw	r18, r28
    2194:	2f 5f       	subi	r18, 0xFF	; 255
    2196:	3f 4f       	sbci	r19, 0xFF	; 255
    2198:	42 e0       	ldi	r20, 0x02	; 2
    219a:	50 e0       	ldi	r21, 0x00	; 0
    219c:	60 e0       	ldi	r22, 0x00	; 0
    219e:	70 e0       	ldi	r23, 0x00	; 0
    21a0:	c7 01       	movw	r24, r14
    21a2:	62 df       	rcall	.-316    	; 0x2068 <waitfor>
    21a4:	62 30       	cpi	r22, 0x02	; 2
    21a6:	71 05       	cpc	r23, r1
    21a8:	81 05       	cpc	r24, r1
    21aa:	91 05       	cpc	r25, r1
    21ac:	b9 f5       	brne	.+110    	; 0x221c <MQTTConnect+0x14c>
    21ae:	8f ef       	ldi	r24, 0xFF	; 255
    21b0:	26 96       	adiw	r28, 0x06	; 6
    21b2:	8f af       	std	Y+63, r24	; 0x3f
    21b4:	26 97       	sbiw	r28, 0x06	; 6
    21b6:	25 96       	adiw	r28, 0x05	; 5
    21b8:	1f ae       	std	Y+63, r1	; 0x3f
    21ba:	25 97       	sbiw	r28, 0x05	; 5
    21bc:	f7 01       	movw	r30, r14
    21be:	02 85       	ldd	r16, Z+10	; 0x0a
    21c0:	13 85       	ldd	r17, Z+11	; 0x0b
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	46 85       	ldd	r20, Z+14	; 0x0e
    21c8:	57 85       	ldd	r21, Z+15	; 0x0f
    21ca:	be 01       	movw	r22, r28
    21cc:	6b 5b       	subi	r22, 0xBB	; 187
    21ce:	7f 4f       	sbci	r23, 0xFF	; 255
    21d0:	ce 01       	movw	r24, r28
    21d2:	8c 5b       	subi	r24, 0xBC	; 188
    21d4:	9f 4f       	sbci	r25, 0xFF	; 255
    21d6:	d6 d3       	rcall	.+1964   	; 0x2984 <MQTTDeserialize_connack>
    21d8:	61 30       	cpi	r22, 0x01	; 1
    21da:	71 05       	cpc	r23, r1
    21dc:	81 05       	cpc	r24, r1
    21de:	91 05       	cpc	r25, r1
    21e0:	09 f5       	brne	.+66     	; 0x2224 <MQTTConnect+0x154>
    21e2:	26 96       	adiw	r28, 0x06	; 6
    21e4:	6f ad       	ldd	r22, Y+63	; 0x3f
    21e6:	26 97       	sbiw	r28, 0x06	; 6
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	61 15       	cp	r22, r1
    21f0:	71 05       	cpc	r23, r1
    21f2:	81 05       	cpc	r24, r1
    21f4:	91 05       	cpc	r25, r1
    21f6:	c9 f4       	brne	.+50     	; 0x222a <MQTTConnect+0x15a>
    21f8:	01 e0       	ldi	r16, 0x01	; 1
    21fa:	10 e0       	ldi	r17, 0x00	; 0
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	f7 01       	movw	r30, r14
    2202:	05 8b       	std	Z+21, r16	; 0x15
    2204:	16 8b       	std	Z+22, r17	; 0x16
    2206:	27 8b       	std	Z+23, r18	; 0x17
    2208:	30 8f       	std	Z+24, r19	; 0x18
    220a:	0f c0       	rjmp	.+30     	; 0x222a <MQTTConnect+0x15a>
    220c:	6f ef       	ldi	r22, 0xFF	; 255
    220e:	7f ef       	ldi	r23, 0xFF	; 255
    2210:	cb 01       	movw	r24, r22
    2212:	0b c0       	rjmp	.+22     	; 0x222a <MQTTConnect+0x15a>
    2214:	6f ef       	ldi	r22, 0xFF	; 255
    2216:	7f ef       	ldi	r23, 0xFF	; 255
    2218:	cb 01       	movw	r24, r22
    221a:	07 c0       	rjmp	.+14     	; 0x222a <MQTTConnect+0x15a>
    221c:	6f ef       	ldi	r22, 0xFF	; 255
    221e:	7f ef       	ldi	r23, 0xFF	; 255
    2220:	cb 01       	movw	r24, r22
    2222:	03 c0       	rjmp	.+6      	; 0x222a <MQTTConnect+0x15a>
    2224:	6f ef       	ldi	r22, 0xFF	; 255
    2226:	7f ef       	ldi	r23, 0xFF	; 255
    2228:	cb 01       	movw	r24, r22
    222a:	cb 5b       	subi	r28, 0xBB	; 187
    222c:	df 4f       	sbci	r29, 0xFF	; 255
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	1f 91       	pop	r17
    223e:	0f 91       	pop	r16
    2240:	ff 90       	pop	r15
    2242:	ef 90       	pop	r14
    2244:	08 95       	ret

00002246 <MQTTSubscribe>:
    2246:	2f 92       	push	r2
    2248:	3f 92       	push	r3
    224a:	4f 92       	push	r4
    224c:	5f 92       	push	r5
    224e:	6f 92       	push	r6
    2250:	7f 92       	push	r7
    2252:	8f 92       	push	r8
    2254:	9f 92       	push	r9
    2256:	af 92       	push	r10
    2258:	bf 92       	push	r11
    225a:	cf 92       	push	r12
    225c:	df 92       	push	r13
    225e:	ef 92       	push	r14
    2260:	ff 92       	push	r15
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	6f 97       	sbiw	r28, 0x1f	; 31
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	3c 01       	movw	r6, r24
    227c:	7d 8f       	std	Y+29, r23	; 0x1d
    227e:	6c 8f       	std	Y+28, r22	; 0x1c
    2280:	4b 8f       	std	Y+27, r20	; 0x1b
    2282:	3f 8f       	std	Y+31, r19	; 0x1f
    2284:	2e 8f       	std	Y+30, r18	; 0x1e
    2286:	1b 86       	std	Y+11, r1	; 0x0b
    2288:	1c 86       	std	Y+12, r1	; 0x0c
    228a:	1d 86       	std	Y+13, r1	; 0x0d
    228c:	1e 86       	std	Y+14, r1	; 0x0e
    228e:	18 8a       	std	Y+16, r1	; 0x10
    2290:	1f 86       	std	Y+15, r1	; 0x0f
    2292:	7a 87       	std	Y+10, r23	; 0x0a
    2294:	69 87       	std	Y+9, r22	; 0x09
    2296:	ce 01       	movw	r24, r28
    2298:	01 96       	adiw	r24, 0x01	; 1
    229a:	0e 94 a9 1c 	call	0x3952	; 0x3952 <InitTimer>
    229e:	f3 01       	movw	r30, r6
    22a0:	44 81       	ldd	r20, Z+4	; 0x04
    22a2:	55 81       	ldd	r21, Z+5	; 0x05
    22a4:	66 81       	ldd	r22, Z+6	; 0x06
    22a6:	77 81       	ldd	r23, Z+7	; 0x07
    22a8:	ce 01       	movw	r24, r28
    22aa:	01 96       	adiw	r24, 0x01	; 1
    22ac:	0e 94 4c 1c 	call	0x3898	; 0x3898 <countdown_ms>
    22b0:	f3 01       	movw	r30, r6
    22b2:	85 89       	ldd	r24, Z+21	; 0x15
    22b4:	96 89       	ldd	r25, Z+22	; 0x16
    22b6:	a7 89       	ldd	r26, Z+23	; 0x17
    22b8:	b0 8d       	ldd	r27, Z+24	; 0x18
    22ba:	89 2b       	or	r24, r25
    22bc:	8a 2b       	or	r24, r26
    22be:	8b 2b       	or	r24, r27
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <MQTTSubscribe+0x7e>
    22c2:	9d c0       	rjmp	.+314    	; 0x23fe <MQTTSubscribe+0x1b8>
    22c4:	c3 01       	movw	r24, r6
    22c6:	35 da       	rcall	.-2966   	; 0x1732 <getNextPacketId>
    22c8:	8b 01       	movw	r16, r22
    22ca:	9c 01       	movw	r18, r24
    22cc:	f3 01       	movw	r30, r6
    22ce:	40 85       	ldd	r20, Z+8	; 0x08
    22d0:	51 85       	ldd	r21, Z+9	; 0x09
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	70 e0       	ldi	r23, 0x00	; 0
    22d6:	ce 01       	movw	r24, r28
    22d8:	4b 96       	adiw	r24, 0x1b	; 27
    22da:	4c 01       	movw	r8, r24
    22dc:	fe 01       	movw	r30, r28
    22de:	39 96       	adiw	r30, 0x09	; 9
    22e0:	5f 01       	movw	r10, r30
    22e2:	c1 2c       	mov	r12, r1
    22e4:	d1 2c       	mov	r13, r1
    22e6:	76 01       	movw	r14, r12
    22e8:	c3 94       	inc	r12
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	f3 01       	movw	r30, r6
    22ee:	84 85       	ldd	r24, Z+12	; 0x0c
    22f0:	95 85       	ldd	r25, Z+13	; 0x0d
    22f2:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <MQTTSerialize_subscribe>
    22f6:	ab 01       	movw	r20, r22
    22f8:	bc 01       	movw	r22, r24
    22fa:	14 16       	cp	r1, r20
    22fc:	15 06       	cpc	r1, r21
    22fe:	16 06       	cpc	r1, r22
    2300:	17 06       	cpc	r1, r23
    2302:	0c f0       	brlt	.+2      	; 0x2306 <MQTTSubscribe+0xc0>
    2304:	81 c0       	rjmp	.+258    	; 0x2408 <MQTTSubscribe+0x1c2>
    2306:	9e 01       	movw	r18, r28
    2308:	2f 5f       	subi	r18, 0xFF	; 255
    230a:	3f 4f       	sbci	r19, 0xFF	; 255
    230c:	c3 01       	movw	r24, r6
    230e:	2c da       	rcall	.-2984   	; 0x1768 <sendPacket>
    2310:	1b 01       	movw	r2, r22
    2312:	2c 01       	movw	r4, r24
    2314:	67 2b       	or	r22, r23
    2316:	68 2b       	or	r22, r24
    2318:	69 2b       	or	r22, r25
    231a:	09 f0       	breq	.+2      	; 0x231e <MQTTSubscribe+0xd8>
    231c:	7e c0       	rjmp	.+252    	; 0x241a <MQTTSubscribe+0x1d4>
    231e:	9e 01       	movw	r18, r28
    2320:	2f 5f       	subi	r18, 0xFF	; 255
    2322:	3f 4f       	sbci	r19, 0xFF	; 255
    2324:	49 e0       	ldi	r20, 0x09	; 9
    2326:	50 e0       	ldi	r21, 0x00	; 0
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	70 e0       	ldi	r23, 0x00	; 0
    232c:	c3 01       	movw	r24, r6
    232e:	9c de       	rcall	.-712    	; 0x2068 <waitfor>
    2330:	69 30       	cpi	r22, 0x09	; 9
    2332:	71 05       	cpc	r23, r1
    2334:	81 05       	cpc	r24, r1
    2336:	91 05       	cpc	r25, r1
    2338:	09 f0       	breq	.+2      	; 0x233c <MQTTSubscribe+0xf6>
    233a:	6b c0       	rjmp	.+214    	; 0x2412 <MQTTSubscribe+0x1cc>
    233c:	1d 8a       	std	Y+21, r1	; 0x15
    233e:	1e 8a       	std	Y+22, r1	; 0x16
    2340:	1f 8a       	std	Y+23, r1	; 0x17
    2342:	18 8e       	std	Y+24, r1	; 0x18
    2344:	8f ef       	ldi	r24, 0xFF	; 255
    2346:	9f ef       	ldi	r25, 0xFF	; 255
    2348:	dc 01       	movw	r26, r24
    234a:	89 8b       	std	Y+17, r24	; 0x11
    234c:	9a 8b       	std	Y+18, r25	; 0x12
    234e:	ab 8b       	std	Y+19, r26	; 0x13
    2350:	bc 8b       	std	Y+20, r27	; 0x14
    2352:	f3 01       	movw	r30, r6
    2354:	a2 84       	ldd	r10, Z+10	; 0x0a
    2356:	b3 84       	ldd	r11, Z+11	; 0x0b
    2358:	c1 2c       	mov	r12, r1
    235a:	d1 2c       	mov	r13, r1
    235c:	e6 84       	ldd	r14, Z+14	; 0x0e
    235e:	f7 84       	ldd	r15, Z+15	; 0x0f
    2360:	8e 01       	movw	r16, r28
    2362:	0f 5e       	subi	r16, 0xEF	; 239
    2364:	1f 4f       	sbci	r17, 0xFF	; 255
    2366:	9e 01       	movw	r18, r28
    2368:	2b 5e       	subi	r18, 0xEB	; 235
    236a:	3f 4f       	sbci	r19, 0xFF	; 255
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	50 e0       	ldi	r21, 0x00	; 0
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	ce 01       	movw	r24, r28
    2376:	49 96       	adiw	r24, 0x19	; 25
    2378:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <MQTTDeserialize_suback>
    237c:	61 30       	cpi	r22, 0x01	; 1
    237e:	71 05       	cpc	r23, r1
    2380:	81 05       	cpc	r24, r1
    2382:	91 05       	cpc	r25, r1
    2384:	51 f4       	brne	.+20     	; 0x239a <MQTTSubscribe+0x154>
    2386:	49 89       	ldd	r20, Y+17	; 0x11
    2388:	5a 89       	ldd	r21, Y+18	; 0x12
    238a:	6b 89       	ldd	r22, Y+19	; 0x13
    238c:	7c 89       	ldd	r23, Y+20	; 0x14
    238e:	40 38       	cpi	r20, 0x80	; 128
    2390:	51 05       	cpc	r21, r1
    2392:	61 05       	cpc	r22, r1
    2394:	71 05       	cpc	r23, r1
    2396:	81 f1       	breq	.+96     	; 0x23f8 <MQTTSubscribe+0x1b2>
    2398:	02 c0       	rjmp	.+4      	; 0x239e <MQTTSubscribe+0x158>
    239a:	b2 01       	movw	r22, r4
    239c:	a1 01       	movw	r20, r2
    239e:	f3 01       	movw	r30, r6
    23a0:	81 8d       	ldd	r24, Z+25	; 0x19
    23a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    23a4:	89 2b       	or	r24, r25
    23a6:	49 f0       	breq	.+18     	; 0x23ba <MQTTSubscribe+0x174>
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	a0 e0       	ldi	r26, 0x00	; 0
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	25 8d       	ldd	r18, Z+29	; 0x1d
    23b2:	36 8d       	ldd	r19, Z+30	; 0x1e
    23b4:	23 2b       	or	r18, r19
    23b6:	a1 f4       	brne	.+40     	; 0x23e0 <MQTTSubscribe+0x19a>
    23b8:	03 c0       	rjmp	.+6      	; 0x23c0 <MQTTSubscribe+0x17a>
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	dc 01       	movw	r26, r24
    23c0:	88 0f       	add	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	f3 01       	movw	r30, r6
    23ca:	e8 0f       	add	r30, r24
    23cc:	f9 1f       	adc	r31, r25
    23ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23d0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23d2:	92 8f       	std	Z+26, r25	; 0x1a
    23d4:	81 8f       	std	Z+25, r24	; 0x19
    23d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23d8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23da:	94 8f       	std	Z+28, r25	; 0x1c
    23dc:	83 8f       	std	Z+27, r24	; 0x1b
    23de:	1d c0       	rjmp	.+58     	; 0x241a <MQTTSubscribe+0x1d4>
    23e0:	01 96       	adiw	r24, 0x01	; 1
    23e2:	a1 1d       	adc	r26, r1
    23e4:	b1 1d       	adc	r27, r1
    23e6:	34 96       	adiw	r30, 0x04	; 4
    23e8:	85 30       	cpi	r24, 0x05	; 5
    23ea:	91 05       	cpc	r25, r1
    23ec:	a1 05       	cpc	r26, r1
    23ee:	b1 05       	cpc	r27, r1
    23f0:	f9 f6       	brne	.-66     	; 0x23b0 <MQTTSubscribe+0x16a>
    23f2:	1a 01       	movw	r2, r20
    23f4:	2b 01       	movw	r4, r22
    23f6:	11 c0       	rjmp	.+34     	; 0x241a <MQTTSubscribe+0x1d4>
    23f8:	1a 01       	movw	r2, r20
    23fa:	2b 01       	movw	r4, r22
    23fc:	0e c0       	rjmp	.+28     	; 0x241a <MQTTSubscribe+0x1d4>
    23fe:	22 24       	eor	r2, r2
    2400:	2a 94       	dec	r2
    2402:	32 2c       	mov	r3, r2
    2404:	21 01       	movw	r4, r2
    2406:	09 c0       	rjmp	.+18     	; 0x241a <MQTTSubscribe+0x1d4>
    2408:	22 24       	eor	r2, r2
    240a:	2a 94       	dec	r2
    240c:	32 2c       	mov	r3, r2
    240e:	21 01       	movw	r4, r2
    2410:	04 c0       	rjmp	.+8      	; 0x241a <MQTTSubscribe+0x1d4>
    2412:	22 24       	eor	r2, r2
    2414:	2a 94       	dec	r2
    2416:	32 2c       	mov	r3, r2
    2418:	21 01       	movw	r4, r2
    241a:	c2 01       	movw	r24, r4
    241c:	b1 01       	movw	r22, r2
    241e:	6f 96       	adiw	r28, 0x1f	; 31
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	df 91       	pop	r29
    242c:	cf 91       	pop	r28
    242e:	1f 91       	pop	r17
    2430:	0f 91       	pop	r16
    2432:	ff 90       	pop	r15
    2434:	ef 90       	pop	r14
    2436:	df 90       	pop	r13
    2438:	cf 90       	pop	r12
    243a:	bf 90       	pop	r11
    243c:	af 90       	pop	r10
    243e:	9f 90       	pop	r9
    2440:	8f 90       	pop	r8
    2442:	7f 90       	pop	r7
    2444:	6f 90       	pop	r6
    2446:	5f 90       	pop	r5
    2448:	4f 90       	pop	r4
    244a:	3f 90       	pop	r3
    244c:	2f 90       	pop	r2
    244e:	08 95       	ret

00002450 <MQTTPublish>:

int32_t MQTTPublish(Client* c, const char* topicName, MQTTMessage* message)
{
    2450:	8f 92       	push	r8
    2452:	9f 92       	push	r9
    2454:	af 92       	push	r10
    2456:	bf 92       	push	r11
    2458:	cf 92       	push	r12
    245a:	df 92       	push	r13
    245c:	ef 92       	push	r14
    245e:	ff 92       	push	r15
    2460:	0f 93       	push	r16
    2462:	1f 93       	push	r17
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	64 97       	sbiw	r28, 0x14	; 20
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	4c 01       	movw	r8, r24
    247a:	5a 01       	movw	r10, r20
  int32_t rc = FAILURE;
  Timer timer;   
  MQTTString topic = MQTTString_initializer;
    247c:	1b 86       	std	Y+11, r1	; 0x0b
    247e:	1c 86       	std	Y+12, r1	; 0x0c
    2480:	1d 86       	std	Y+13, r1	; 0x0d
    2482:	1e 86       	std	Y+14, r1	; 0x0e
    2484:	18 8a       	std	Y+16, r1	; 0x10
    2486:	1f 86       	std	Y+15, r1	; 0x0f
  topic.cstring = (char *)topicName;
    2488:	7a 87       	std	Y+10, r23	; 0x0a
    248a:	69 87       	std	Y+9, r22	; 0x09
  int32_t len = 0;

  InitTimer(&timer);
    248c:	ce 01       	movw	r24, r28
    248e:	01 96       	adiw	r24, 0x01	; 1
    2490:	0e 94 a9 1c 	call	0x3952	; 0x3952 <InitTimer>
  countdown_ms(&timer, c->command_timeout_ms);
    2494:	f4 01       	movw	r30, r8
    2496:	44 81       	ldd	r20, Z+4	; 0x04
    2498:	55 81       	ldd	r21, Z+5	; 0x05
    249a:	66 81       	ldd	r22, Z+6	; 0x06
    249c:	77 81       	ldd	r23, Z+7	; 0x07
    249e:	ce 01       	movw	r24, r28
    24a0:	01 96       	adiw	r24, 0x01	; 1
    24a2:	0e 94 4c 1c 	call	0x3898	; 0x3898 <countdown_ms>
    
  if (!c->isconnected)
    24a6:	f4 01       	movw	r30, r8
    24a8:	85 89       	ldd	r24, Z+21	; 0x15
    24aa:	96 89       	ldd	r25, Z+22	; 0x16
    24ac:	a7 89       	ldd	r26, Z+23	; 0x17
    24ae:	b0 8d       	ldd	r27, Z+24	; 0x18
    24b0:	89 2b       	or	r24, r25
    24b2:	8a 2b       	or	r24, r26
    24b4:	8b 2b       	or	r24, r27
    24b6:	09 f4       	brne	.+2      	; 0x24ba <MQTTPublish+0x6a>
    24b8:	bb c0       	rjmp	.+374    	; 0x2630 <MQTTPublish+0x1e0>
    goto exit;

  if (message->qos == QOS1 || message->qos == QOS2)
    24ba:	f5 01       	movw	r30, r10
    24bc:	80 81       	ld	r24, Z
    24be:	81 50       	subi	r24, 0x01	; 1
    24c0:	82 30       	cpi	r24, 0x02	; 2
    24c2:	28 f4       	brcc	.+10     	; 0x24ce <MQTTPublish+0x7e>
    message->id = getNextPacketId(c);
    24c4:	c4 01       	movw	r24, r8
    24c6:	35 d9       	rcall	.-3478   	; 0x1732 <getNextPacketId>
    24c8:	f5 01       	movw	r30, r10
    24ca:	74 83       	std	Z+4, r23	; 0x04
    24cc:	63 83       	std	Z+3, r22	; 0x03
    
  len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
    24ce:	f5 01       	movw	r30, r10
    24d0:	c3 80       	ldd	r12, Z+3	; 0x03
    24d2:	d4 80       	ldd	r13, Z+4	; 0x04
    24d4:	f4 01       	movw	r30, r8
    24d6:	40 85       	ldd	r20, Z+8	; 0x08
    24d8:	51 85       	ldd	r21, Z+9	; 0x09
    24da:	60 e0       	ldi	r22, 0x00	; 0
    24dc:	70 e0       	ldi	r23, 0x00	; 0
    24de:	84 85       	ldd	r24, Z+12	; 0x0c
    24e0:	95 85       	ldd	r25, Z+13	; 0x0d
    24e2:	f5 01       	movw	r30, r10
    24e4:	07 81       	ldd	r16, Z+7	; 0x07
    24e6:	10 85       	ldd	r17, Z+8	; 0x08
    24e8:	1f 92       	push	r1
    24ea:	1f 92       	push	r1
    24ec:	1f 93       	push	r17
    24ee:	0f 93       	push	r16
    24f0:	26 81       	ldd	r18, Z+6	; 0x06
    24f2:	2f 93       	push	r18
    24f4:	25 81       	ldd	r18, Z+5	; 0x05
    24f6:	2f 93       	push	r18
    24f8:	2d b7       	in	r18, 0x3d	; 61
    24fa:	3e b7       	in	r19, 0x3e	; 62
    24fc:	28 50       	subi	r18, 0x08	; 8
    24fe:	31 09       	sbc	r19, r1
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	3e bf       	out	0x3e, r19	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	2d bf       	out	0x3d, r18	; 61
    250a:	ad b7       	in	r26, 0x3d	; 61
    250c:	be b7       	in	r27, 0x3e	; 62
    250e:	11 96       	adiw	r26, 0x01	; 1
    2510:	28 e0       	ldi	r18, 0x08	; 8
    2512:	fe 01       	movw	r30, r28
    2514:	39 96       	adiw	r30, 0x09	; 9
    2516:	01 90       	ld	r0, Z+
    2518:	0d 92       	st	X+, r0
    251a:	2a 95       	dec	r18
    251c:	e1 f7       	brne	.-8      	; 0x2516 <MQTTPublish+0xc6>
    251e:	f5 01       	movw	r30, r10
    2520:	e1 80       	ldd	r14, Z+1	; 0x01
    2522:	00 81       	ld	r16, Z
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	8d d6       	rcall	.+3354   	; 0x3242 <MQTTSerialize_publish>
    2528:	ab 01       	movw	r20, r22
    252a:	bc 01       	movw	r22, r24
        topic, (uint8_t*)message->payload, message->payloadlen);
    
  if (len <= 0)
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	14 16       	cp	r1, r20
    2538:	15 06       	cpc	r1, r21
    253a:	16 06       	cpc	r1, r22
    253c:	17 06       	cpc	r1, r23
    253e:	0c f0       	brlt	.+2      	; 0x2542 <MQTTPublish+0xf2>
    2540:	7b c0       	rjmp	.+246    	; 0x2638 <MQTTPublish+0x1e8>
    goto exit;
  
  if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
    2542:	9e 01       	movw	r18, r28
    2544:	2f 5f       	subi	r18, 0xFF	; 255
    2546:	3f 4f       	sbci	r19, 0xFF	; 255
    2548:	c4 01       	movw	r24, r8
    254a:	0e d9       	rcall	.-3556   	; 0x1768 <sendPacket>
    254c:	61 15       	cp	r22, r1
    254e:	71 05       	cpc	r23, r1
    2550:	81 05       	cpc	r24, r1
    2552:	91 05       	cpc	r25, r1
    2554:	09 f0       	breq	.+2      	; 0x2558 <MQTTPublish+0x108>
    2556:	7b c0       	rjmp	.+246    	; 0x264e <MQTTPublish+0x1fe>
    goto exit; // there was a problem
    
  if (message->qos == QOS1)
    2558:	f5 01       	movw	r30, r10
    255a:	20 81       	ld	r18, Z
    255c:	21 30       	cpi	r18, 0x01	; 1
    255e:	99 f5       	brne	.+102    	; 0x25c6 <MQTTPublish+0x176>
  {
    if (waitfor(c, PUBACK, &timer) == PUBACK)
    2560:	9e 01       	movw	r18, r28
    2562:	2f 5f       	subi	r18, 0xFF	; 255
    2564:	3f 4f       	sbci	r19, 0xFF	; 255
    2566:	44 e0       	ldi	r20, 0x04	; 4
    2568:	50 e0       	ldi	r21, 0x00	; 0
    256a:	60 e0       	ldi	r22, 0x00	; 0
    256c:	70 e0       	ldi	r23, 0x00	; 0
    256e:	c4 01       	movw	r24, r8
    2570:	7b dd       	rcall	.-1290   	; 0x2068 <waitfor>
    2572:	64 30       	cpi	r22, 0x04	; 4
    2574:	71 05       	cpc	r23, r1
    2576:	81 05       	cpc	r24, r1
    2578:	91 05       	cpc	r25, r1
    257a:	09 f0       	breq	.+2      	; 0x257e <MQTTPublish+0x12e>
    257c:	61 c0       	rjmp	.+194    	; 0x2640 <MQTTPublish+0x1f0>
    {
      uint16_t mypacketid;
      uint8_t dup, type;

      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    257e:	f4 01       	movw	r30, r8
    2580:	e2 84       	ldd	r14, Z+10	; 0x0a
    2582:	f3 84       	ldd	r15, Z+11	; 0x0b
    2584:	00 e0       	ldi	r16, 0x00	; 0
    2586:	10 e0       	ldi	r17, 0x00	; 0
    2588:	26 85       	ldd	r18, Z+14	; 0x0e
    258a:	37 85       	ldd	r19, Z+15	; 0x0f
    258c:	ae 01       	movw	r20, r28
    258e:	4f 5e       	subi	r20, 0xEF	; 239
    2590:	5f 4f       	sbci	r21, 0xFF	; 255
    2592:	be 01       	movw	r22, r28
    2594:	6c 5e       	subi	r22, 0xEC	; 236
    2596:	7f 4f       	sbci	r23, 0xFF	; 255
    2598:	ce 01       	movw	r24, r28
    259a:	43 96       	adiw	r24, 0x13	; 19
    259c:	0c d3       	rcall	.+1560   	; 0x2bb6 <MQTTDeserialize_ack>
    259e:	01 e0       	ldi	r16, 0x01	; 1
    25a0:	10 e0       	ldi	r17, 0x00	; 0
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	61 30       	cpi	r22, 0x01	; 1
    25a8:	71 05       	cpc	r23, r1
    25aa:	81 05       	cpc	r24, r1
    25ac:	91 05       	cpc	r25, r1
    25ae:	19 f4       	brne	.+6      	; 0x25b6 <MQTTPublish+0x166>
    25b0:	00 e0       	ldi	r16, 0x00	; 0
    25b2:	10 e0       	ldi	r17, 0x00	; 0
    25b4:	98 01       	movw	r18, r16
    25b6:	66 27       	eor	r22, r22
    25b8:	77 27       	eor	r23, r23
    25ba:	cb 01       	movw	r24, r22
    25bc:	60 1b       	sub	r22, r16
    25be:	71 0b       	sbc	r23, r17
    25c0:	82 0b       	sbc	r24, r18
    25c2:	93 0b       	sbc	r25, r19
    25c4:	44 c0       	rjmp	.+136    	; 0x264e <MQTTPublish+0x1fe>
        rc = FAILURE;
    }
    else
      rc = FAILURE;
  }
  else if (message->qos == QOS2)
    25c6:	22 30       	cpi	r18, 0x02	; 2
    25c8:	09 f0       	breq	.+2      	; 0x25cc <MQTTPublish+0x17c>
    25ca:	41 c0       	rjmp	.+130    	; 0x264e <MQTTPublish+0x1fe>
  {
    if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
    25cc:	9e 01       	movw	r18, r28
    25ce:	2f 5f       	subi	r18, 0xFF	; 255
    25d0:	3f 4f       	sbci	r19, 0xFF	; 255
    25d2:	47 e0       	ldi	r20, 0x07	; 7
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	70 e0       	ldi	r23, 0x00	; 0
    25da:	c4 01       	movw	r24, r8
    25dc:	45 dd       	rcall	.-1398   	; 0x2068 <waitfor>
    25de:	67 30       	cpi	r22, 0x07	; 7
    25e0:	71 05       	cpc	r23, r1
    25e2:	81 05       	cpc	r24, r1
    25e4:	91 05       	cpc	r25, r1
    25e6:	81 f5       	brne	.+96     	; 0x2648 <MQTTPublish+0x1f8>
    {
      uint16_t mypacketid;
      uint8_t dup, type;
    
      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    25e8:	f4 01       	movw	r30, r8
    25ea:	e2 84       	ldd	r14, Z+10	; 0x0a
    25ec:	f3 84       	ldd	r15, Z+11	; 0x0b
    25ee:	00 e0       	ldi	r16, 0x00	; 0
    25f0:	10 e0       	ldi	r17, 0x00	; 0
    25f2:	26 85       	ldd	r18, Z+14	; 0x0e
    25f4:	37 85       	ldd	r19, Z+15	; 0x0f
    25f6:	ae 01       	movw	r20, r28
    25f8:	4f 5e       	subi	r20, 0xEF	; 239
    25fa:	5f 4f       	sbci	r21, 0xFF	; 255
    25fc:	be 01       	movw	r22, r28
    25fe:	6c 5e       	subi	r22, 0xEC	; 236
    2600:	7f 4f       	sbci	r23, 0xFF	; 255
    2602:	ce 01       	movw	r24, r28
    2604:	43 96       	adiw	r24, 0x13	; 19
    2606:	d7 d2       	rcall	.+1454   	; 0x2bb6 <MQTTDeserialize_ack>
    2608:	01 e0       	ldi	r16, 0x01	; 1
    260a:	10 e0       	ldi	r17, 0x00	; 0
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	61 30       	cpi	r22, 0x01	; 1
    2612:	71 05       	cpc	r23, r1
    2614:	81 05       	cpc	r24, r1
    2616:	91 05       	cpc	r25, r1
    2618:	19 f4       	brne	.+6      	; 0x2620 <MQTTPublish+0x1d0>
    261a:	00 e0       	ldi	r16, 0x00	; 0
    261c:	10 e0       	ldi	r17, 0x00	; 0
    261e:	98 01       	movw	r18, r16
    2620:	66 27       	eor	r22, r22
    2622:	77 27       	eor	r23, r23
    2624:	cb 01       	movw	r24, r22
    2626:	60 1b       	sub	r22, r16
    2628:	71 0b       	sbc	r23, r17
    262a:	82 0b       	sbc	r24, r18
    262c:	93 0b       	sbc	r25, r19
    262e:	0f c0       	rjmp	.+30     	; 0x264e <MQTTPublish+0x1fe>
  return rc;
}

int32_t MQTTPublish(Client* c, const char* topicName, MQTTMessage* message)
{
  int32_t rc = FAILURE;
    2630:	6f ef       	ldi	r22, 0xFF	; 255
    2632:	7f ef       	ldi	r23, 0xFF	; 255
    2634:	cb 01       	movw	r24, r22
    2636:	0b c0       	rjmp	.+22     	; 0x264e <MQTTPublish+0x1fe>
    2638:	6f ef       	ldi	r22, 0xFF	; 255
    263a:	7f ef       	ldi	r23, 0xFF	; 255
    263c:	cb 01       	movw	r24, r22
    263e:	07 c0       	rjmp	.+14     	; 0x264e <MQTTPublish+0x1fe>

      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
        rc = FAILURE;
    }
    else
      rc = FAILURE;
    2640:	6f ef       	ldi	r22, 0xFF	; 255
    2642:	7f ef       	ldi	r23, 0xFF	; 255
    2644:	cb 01       	movw	r24, r22
    2646:	03 c0       	rjmp	.+6      	; 0x264e <MQTTPublish+0x1fe>
    
      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
        rc = FAILURE;
    }
    else
      rc = FAILURE;
    2648:	6f ef       	ldi	r22, 0xFF	; 255
    264a:	7f ef       	ldi	r23, 0xFF	; 255
    264c:	cb 01       	movw	r24, r22
  }
    
exit:
  return rc;
}
    264e:	64 96       	adiw	r28, 0x14	; 20
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	ff 90       	pop	r15
    2664:	ef 90       	pop	r14
    2666:	df 90       	pop	r13
    2668:	cf 90       	pop	r12
    266a:	bf 90       	pop	r11
    266c:	af 90       	pop	r10
    266e:	9f 90       	pop	r9
    2670:	8f 90       	pop	r8
    2672:	08 95       	ret

00002674 <MQTTSerialize_connectLength>:
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_disconnect(uint8_t* buf, int32_t buflen)
{
  return MQTTSerialize_zero(buf, buflen, DISCONNECT);
}
    2674:	8f 92       	push	r8
    2676:	9f 92       	push	r9
    2678:	af 92       	push	r10
    267a:	bf 92       	push	r11
    267c:	cf 92       	push	r12
    267e:	df 92       	push	r13
    2680:	ef 92       	push	r14
    2682:	ff 92       	push	r15
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    2688:	ec 01       	movw	r28, r24
    268a:	8e 81       	ldd	r24, Y+6	; 0x06
    268c:	83 30       	cpi	r24, 0x03	; 3
    268e:	51 f0       	breq	.+20     	; 0x26a4 <MQTTSerialize_connectLength+0x30>
    2690:	84 30       	cpi	r24, 0x04	; 4
    2692:	81 f4       	brne	.+32     	; 0x26b4 <MQTTSerialize_connectLength+0x40>
    2694:	0f 2e       	mov	r0, r31
    2696:	fa e0       	ldi	r31, 0x0A	; 10
    2698:	cf 2e       	mov	r12, r31
    269a:	d1 2c       	mov	r13, r1
    269c:	e1 2c       	mov	r14, r1
    269e:	f1 2c       	mov	r15, r1
    26a0:	f0 2d       	mov	r31, r0
    26a2:	0b c0       	rjmp	.+22     	; 0x26ba <MQTTSerialize_connectLength+0x46>
    26a4:	0f 2e       	mov	r0, r31
    26a6:	fc e0       	ldi	r31, 0x0C	; 12
    26a8:	cf 2e       	mov	r12, r31
    26aa:	d1 2c       	mov	r13, r1
    26ac:	e1 2c       	mov	r14, r1
    26ae:	f1 2c       	mov	r15, r1
    26b0:	f0 2d       	mov	r31, r0
    26b2:	03 c0       	rjmp	.+6      	; 0x26ba <MQTTSerialize_connectLength+0x46>
    26b4:	c1 2c       	mov	r12, r1
    26b6:	d1 2c       	mov	r13, r1
    26b8:	76 01       	movw	r14, r12
    26ba:	2f 81       	ldd	r18, Y+7	; 0x07
    26bc:	38 85       	ldd	r19, Y+8	; 0x08
    26be:	49 85       	ldd	r20, Y+9	; 0x09
    26c0:	5a 85       	ldd	r21, Y+10	; 0x0a
    26c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ca:	0b d5       	rcall	.+2582   	; 0x30e2 <MQTTstrlen>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	02 96       	adiw	r24, 0x02	; 2
    26d2:	a1 1d       	adc	r26, r1
    26d4:	b1 1d       	adc	r27, r1
    26d6:	c8 0e       	add	r12, r24
    26d8:	d9 1e       	adc	r13, r25
    26da:	ea 1e       	adc	r14, r26
    26dc:	fb 1e       	adc	r15, r27
    26de:	8a 89       	ldd	r24, Y+18	; 0x12
    26e0:	88 23       	and	r24, r24
    26e2:	09 f1       	breq	.+66     	; 0x2726 <MQTTSerialize_connectLength+0xb2>
    26e4:	29 8d       	ldd	r18, Y+25	; 0x19
    26e6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    26e8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    26ea:	5c 8d       	ldd	r21, Y+28	; 0x1c
    26ec:	6d 8d       	ldd	r22, Y+29	; 0x1d
    26ee:	7e 8d       	ldd	r23, Y+30	; 0x1e
    26f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26f2:	98 a1       	ldd	r25, Y+32	; 0x20
    26f4:	f6 d4       	rcall	.+2540   	; 0x30e2 <MQTTstrlen>
    26f6:	4b 01       	movw	r8, r22
    26f8:	5c 01       	movw	r10, r24
    26fa:	29 a1       	ldd	r18, Y+33	; 0x21
    26fc:	3a a1       	ldd	r19, Y+34	; 0x22
    26fe:	4b a1       	ldd	r20, Y+35	; 0x23
    2700:	5c a1       	ldd	r21, Y+36	; 0x24
    2702:	6d a1       	ldd	r22, Y+37	; 0x25
    2704:	7e a1       	ldd	r23, Y+38	; 0x26
    2706:	8f a1       	ldd	r24, Y+39	; 0x27
    2708:	98 a5       	ldd	r25, Y+40	; 0x28
    270a:	eb d4       	rcall	.+2518   	; 0x30e2 <MQTTstrlen>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	88 0d       	add	r24, r8
    2712:	99 1d       	adc	r25, r9
    2714:	aa 1d       	adc	r26, r10
    2716:	bb 1d       	adc	r27, r11
    2718:	04 96       	adiw	r24, 0x04	; 4
    271a:	a1 1d       	adc	r26, r1
    271c:	b1 1d       	adc	r27, r1
    271e:	c8 0e       	add	r12, r24
    2720:	d9 1e       	adc	r13, r25
    2722:	ea 1e       	adc	r14, r26
    2724:	fb 1e       	adc	r15, r27
    2726:	8b a5       	ldd	r24, Y+43	; 0x2b
    2728:	9c a5       	ldd	r25, Y+44	; 0x2c
    272a:	89 2b       	or	r24, r25
    272c:	21 f4       	brne	.+8      	; 0x2736 <MQTTSerialize_connectLength+0xc2>
    272e:	89 a9       	ldd	r24, Y+49	; 0x31
    2730:	9a a9       	ldd	r25, Y+50	; 0x32
    2732:	89 2b       	or	r24, r25
    2734:	91 f0       	breq	.+36     	; 0x275a <MQTTSerialize_connectLength+0xe6>
    2736:	2b a5       	ldd	r18, Y+43	; 0x2b
    2738:	3c a5       	ldd	r19, Y+44	; 0x2c
    273a:	4d a5       	ldd	r20, Y+45	; 0x2d
    273c:	5e a5       	ldd	r21, Y+46	; 0x2e
    273e:	6f a5       	ldd	r22, Y+47	; 0x2f
    2740:	78 a9       	ldd	r23, Y+48	; 0x30
    2742:	89 a9       	ldd	r24, Y+49	; 0x31
    2744:	9a a9       	ldd	r25, Y+50	; 0x32
    2746:	cd d4       	rcall	.+2458   	; 0x30e2 <MQTTstrlen>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	02 96       	adiw	r24, 0x02	; 2
    274e:	a1 1d       	adc	r26, r1
    2750:	b1 1d       	adc	r27, r1
    2752:	c8 0e       	add	r12, r24
    2754:	d9 1e       	adc	r13, r25
    2756:	ea 1e       	adc	r14, r26
    2758:	fb 1e       	adc	r15, r27
    275a:	8b a9       	ldd	r24, Y+51	; 0x33
    275c:	9c a9       	ldd	r25, Y+52	; 0x34
    275e:	89 2b       	or	r24, r25
    2760:	21 f4       	brne	.+8      	; 0x276a <MQTTSerialize_connectLength+0xf6>
    2762:	89 ad       	ldd	r24, Y+57	; 0x39
    2764:	9a ad       	ldd	r25, Y+58	; 0x3a
    2766:	89 2b       	or	r24, r25
    2768:	91 f0       	breq	.+36     	; 0x278e <MQTTSerialize_connectLength+0x11a>
    276a:	2b a9       	ldd	r18, Y+51	; 0x33
    276c:	3c a9       	ldd	r19, Y+52	; 0x34
    276e:	4d a9       	ldd	r20, Y+53	; 0x35
    2770:	5e a9       	ldd	r21, Y+54	; 0x36
    2772:	6f a9       	ldd	r22, Y+55	; 0x37
    2774:	78 ad       	ldd	r23, Y+56	; 0x38
    2776:	89 ad       	ldd	r24, Y+57	; 0x39
    2778:	9a ad       	ldd	r25, Y+58	; 0x3a
    277a:	b3 d4       	rcall	.+2406   	; 0x30e2 <MQTTstrlen>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	02 96       	adiw	r24, 0x02	; 2
    2782:	a1 1d       	adc	r26, r1
    2784:	b1 1d       	adc	r27, r1
    2786:	c8 0e       	add	r12, r24
    2788:	d9 1e       	adc	r13, r25
    278a:	ea 1e       	adc	r14, r26
    278c:	fb 1e       	adc	r15, r27
    278e:	c7 01       	movw	r24, r14
    2790:	b6 01       	movw	r22, r12
    2792:	df 91       	pop	r29
    2794:	cf 91       	pop	r28
    2796:	ff 90       	pop	r15
    2798:	ef 90       	pop	r14
    279a:	df 90       	pop	r13
    279c:	cf 90       	pop	r12
    279e:	bf 90       	pop	r11
    27a0:	af 90       	pop	r10
    27a2:	9f 90       	pop	r9
    27a4:	8f 90       	pop	r8
    27a6:	08 95       	ret

000027a8 <MQTTSerialize_connect>:
    27a8:	4f 92       	push	r4
    27aa:	5f 92       	push	r5
    27ac:	6f 92       	push	r6
    27ae:	7f 92       	push	r7
    27b0:	af 92       	push	r10
    27b2:	bf 92       	push	r11
    27b4:	df 92       	push	r13
    27b6:	ef 92       	push	r14
    27b8:	ff 92       	push	r15
    27ba:	0f 93       	push	r16
    27bc:	1f 93       	push	r17
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <MQTTSerialize_connect+0x1c>
    27c4:	00 d0       	rcall	.+0      	; 0x27c6 <MQTTSerialize_connect+0x1e>
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	5c 01       	movw	r10, r24
    27cc:	2a 01       	movw	r4, r20
    27ce:	3b 01       	movw	r6, r22
    27d0:	79 01       	movw	r14, r18
    27d2:	9a 83       	std	Y+2, r25	; 0x02
    27d4:	89 83       	std	Y+1, r24	; 0x01
    27d6:	c9 01       	movw	r24, r18
    27d8:	4d df       	rcall	.-358    	; 0x2674 <MQTTSerialize_connectLength>
    27da:	6b 83       	std	Y+3, r22	; 0x03
    27dc:	7c 83       	std	Y+4, r23	; 0x04
    27de:	8d 83       	std	Y+5, r24	; 0x05
    27e0:	9e 83       	std	Y+6, r25	; 0x06
    27e2:	3d d3       	rcall	.+1658   	; 0x2e5e <MQTTPacket_len>
    27e4:	46 16       	cp	r4, r22
    27e6:	57 06       	cpc	r5, r23
    27e8:	68 06       	cpc	r6, r24
    27ea:	79 06       	cpc	r7, r25
    27ec:	0c f4       	brge	.+2      	; 0x27f0 <MQTTSerialize_connect+0x48>
    27ee:	b2 c0       	rjmp	.+356    	; 0x2954 <MQTTSerialize_connect+0x1ac>
    27f0:	60 e1       	ldi	r22, 0x10	; 16
    27f2:	ce 01       	movw	r24, r28
    27f4:	01 96       	adiw	r24, 0x01	; 1
    27f6:	84 d3       	rcall	.+1800   	; 0x2f00 <writeChar>
    27f8:	4b 81       	ldd	r20, Y+3	; 0x03
    27fa:	5c 81       	ldd	r21, Y+4	; 0x04
    27fc:	6d 81       	ldd	r22, Y+5	; 0x05
    27fe:	7e 81       	ldd	r23, Y+6	; 0x06
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	4f d2       	rcall	.+1182   	; 0x2ca4 <MQTTPacket_encode>
    2806:	29 81       	ldd	r18, Y+1	; 0x01
    2808:	3a 81       	ldd	r19, Y+2	; 0x02
    280a:	62 0f       	add	r22, r18
    280c:	73 1f       	adc	r23, r19
    280e:	7a 83       	std	Y+2, r23	; 0x02
    2810:	69 83       	std	Y+1, r22	; 0x01
    2812:	f7 01       	movw	r30, r14
    2814:	86 81       	ldd	r24, Z+6	; 0x06
    2816:	84 30       	cpi	r24, 0x04	; 4
    2818:	51 f4       	brne	.+20     	; 0x282e <MQTTSerialize_connect+0x86>
    281a:	67 e3       	ldi	r22, 0x37	; 55
    281c:	73 e0       	ldi	r23, 0x03	; 3
    281e:	ce 01       	movw	r24, r28
    2820:	01 96       	adiw	r24, 0x01	; 1
    2822:	a6 d3       	rcall	.+1868   	; 0x2f70 <writeCString>
    2824:	64 e0       	ldi	r22, 0x04	; 4
    2826:	ce 01       	movw	r24, r28
    2828:	01 96       	adiw	r24, 0x01	; 1
    282a:	6a d3       	rcall	.+1748   	; 0x2f00 <writeChar>
    282c:	09 c0       	rjmp	.+18     	; 0x2840 <MQTTSerialize_connect+0x98>
    282e:	6c e3       	ldi	r22, 0x3C	; 60
    2830:	73 e0       	ldi	r23, 0x03	; 3
    2832:	ce 01       	movw	r24, r28
    2834:	01 96       	adiw	r24, 0x01	; 1
    2836:	9c d3       	rcall	.+1848   	; 0x2f70 <writeCString>
    2838:	63 e0       	ldi	r22, 0x03	; 3
    283a:	ce 01       	movw	r24, r28
    283c:	01 96       	adiw	r24, 0x01	; 1
    283e:	60 d3       	rcall	.+1728   	; 0x2f00 <writeChar>
    2840:	d1 2c       	mov	r13, r1
    2842:	f7 01       	movw	r30, r14
    2844:	81 89       	ldd	r24, Z+17	; 0x11
    2846:	80 fb       	bst	r24, 0
    2848:	d1 f8       	bld	r13, 1
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	92 89       	ldd	r25, Z+18	; 0x12
    284e:	91 11       	cpse	r25, r1
    2850:	01 c0       	rjmp	.+2      	; 0x2854 <MQTTSerialize_connect+0xac>
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	80 fb       	bst	r24, 0
    2856:	d2 f8       	bld	r13, 2
    2858:	d2 fe       	sbrs	r13, 2
    285a:	0d c0       	rjmp	.+26     	; 0x2876 <MQTTSerialize_connect+0xce>
    285c:	f7 01       	movw	r30, r14
    285e:	82 a5       	ldd	r24, Z+42	; 0x2a
    2860:	83 70       	andi	r24, 0x03	; 3
    2862:	88 0f       	add	r24, r24
    2864:	88 0f       	add	r24, r24
    2866:	88 0f       	add	r24, r24
    2868:	9d 2d       	mov	r25, r13
    286a:	97 7e       	andi	r25, 0xE7	; 231
    286c:	d9 2e       	mov	r13, r25
    286e:	d8 2a       	or	r13, r24
    2870:	81 a5       	ldd	r24, Z+41	; 0x29
    2872:	80 fb       	bst	r24, 0
    2874:	d5 f8       	bld	r13, 5
    2876:	f7 01       	movw	r30, r14
    2878:	83 a5       	ldd	r24, Z+43	; 0x2b
    287a:	94 a5       	ldd	r25, Z+44	; 0x2c
    287c:	89 2b       	or	r24, r25
    287e:	21 f4       	brne	.+8      	; 0x2888 <MQTTSerialize_connect+0xe0>
    2880:	81 a9       	ldd	r24, Z+49	; 0x31
    2882:	92 a9       	ldd	r25, Z+50	; 0x32
    2884:	89 2b       	or	r24, r25
    2886:	11 f0       	breq	.+4      	; 0x288c <MQTTSerialize_connect+0xe4>
    2888:	68 94       	set
    288a:	d7 f8       	bld	r13, 7
    288c:	f7 01       	movw	r30, r14
    288e:	83 a9       	ldd	r24, Z+51	; 0x33
    2890:	94 a9       	ldd	r25, Z+52	; 0x34
    2892:	89 2b       	or	r24, r25
    2894:	21 f4       	brne	.+8      	; 0x289e <MQTTSerialize_connect+0xf6>
    2896:	81 ad       	ldd	r24, Z+57	; 0x39
    2898:	92 ad       	ldd	r25, Z+58	; 0x3a
    289a:	89 2b       	or	r24, r25
    289c:	11 f0       	breq	.+4      	; 0x28a2 <MQTTSerialize_connect+0xfa>
    289e:	68 94       	set
    28a0:	d6 f8       	bld	r13, 6
    28a2:	6d 2d       	mov	r22, r13
    28a4:	ce 01       	movw	r24, r28
    28a6:	01 96       	adiw	r24, 0x01	; 1
    28a8:	2b d3       	rcall	.+1622   	; 0x2f00 <writeChar>
    28aa:	f7 01       	movw	r30, r14
    28ac:	47 85       	ldd	r20, Z+15	; 0x0f
    28ae:	50 89       	ldd	r21, Z+16	; 0x10
    28b0:	60 e0       	ldi	r22, 0x00	; 0
    28b2:	70 e0       	ldi	r23, 0x00	; 0
    28b4:	ce 01       	movw	r24, r28
    28b6:	01 96       	adiw	r24, 0x01	; 1
    28b8:	2d d3       	rcall	.+1626   	; 0x2f14 <writeInt>
    28ba:	f7 01       	movw	r30, r14
    28bc:	07 81       	ldd	r16, Z+7	; 0x07
    28be:	10 85       	ldd	r17, Z+8	; 0x08
    28c0:	21 85       	ldd	r18, Z+9	; 0x09
    28c2:	32 85       	ldd	r19, Z+10	; 0x0a
    28c4:	43 85       	ldd	r20, Z+11	; 0x0b
    28c6:	54 85       	ldd	r21, Z+12	; 0x0c
    28c8:	65 85       	ldd	r22, Z+13	; 0x0d
    28ca:	76 85       	ldd	r23, Z+14	; 0x0e
    28cc:	ce 01       	movw	r24, r28
    28ce:	01 96       	adiw	r24, 0x01	; 1
    28d0:	77 d3       	rcall	.+1774   	; 0x2fc0 <writeMQTTString>
    28d2:	f7 01       	movw	r30, r14
    28d4:	82 89       	ldd	r24, Z+18	; 0x12
    28d6:	88 23       	and	r24, r24
    28d8:	b9 f0       	breq	.+46     	; 0x2908 <MQTTSerialize_connect+0x160>
    28da:	01 8d       	ldd	r16, Z+25	; 0x19
    28dc:	12 8d       	ldd	r17, Z+26	; 0x1a
    28de:	23 8d       	ldd	r18, Z+27	; 0x1b
    28e0:	34 8d       	ldd	r19, Z+28	; 0x1c
    28e2:	45 8d       	ldd	r20, Z+29	; 0x1d
    28e4:	56 8d       	ldd	r21, Z+30	; 0x1e
    28e6:	67 8d       	ldd	r22, Z+31	; 0x1f
    28e8:	70 a1       	ldd	r23, Z+32	; 0x20
    28ea:	ce 01       	movw	r24, r28
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	68 d3       	rcall	.+1744   	; 0x2fc0 <writeMQTTString>
    28f0:	f7 01       	movw	r30, r14
    28f2:	01 a1       	ldd	r16, Z+33	; 0x21
    28f4:	12 a1       	ldd	r17, Z+34	; 0x22
    28f6:	23 a1       	ldd	r18, Z+35	; 0x23
    28f8:	34 a1       	ldd	r19, Z+36	; 0x24
    28fa:	45 a1       	ldd	r20, Z+37	; 0x25
    28fc:	56 a1       	ldd	r21, Z+38	; 0x26
    28fe:	67 a1       	ldd	r22, Z+39	; 0x27
    2900:	70 a5       	ldd	r23, Z+40	; 0x28
    2902:	ce 01       	movw	r24, r28
    2904:	01 96       	adiw	r24, 0x01	; 1
    2906:	5c d3       	rcall	.+1720   	; 0x2fc0 <writeMQTTString>
    2908:	7d 2c       	mov	r7, r13
    290a:	dd 20       	and	r13, r13
    290c:	64 f4       	brge	.+24     	; 0x2926 <MQTTSerialize_connect+0x17e>
    290e:	f7 01       	movw	r30, r14
    2910:	03 a5       	ldd	r16, Z+43	; 0x2b
    2912:	14 a5       	ldd	r17, Z+44	; 0x2c
    2914:	25 a5       	ldd	r18, Z+45	; 0x2d
    2916:	36 a5       	ldd	r19, Z+46	; 0x2e
    2918:	47 a5       	ldd	r20, Z+47	; 0x2f
    291a:	50 a9       	ldd	r21, Z+48	; 0x30
    291c:	61 a9       	ldd	r22, Z+49	; 0x31
    291e:	72 a9       	ldd	r23, Z+50	; 0x32
    2920:	ce 01       	movw	r24, r28
    2922:	01 96       	adiw	r24, 0x01	; 1
    2924:	4d d3       	rcall	.+1690   	; 0x2fc0 <writeMQTTString>
    2926:	76 fe       	sbrs	r7, 6
    2928:	0c c0       	rjmp	.+24     	; 0x2942 <MQTTSerialize_connect+0x19a>
    292a:	f7 01       	movw	r30, r14
    292c:	03 a9       	ldd	r16, Z+51	; 0x33
    292e:	14 a9       	ldd	r17, Z+52	; 0x34
    2930:	25 a9       	ldd	r18, Z+53	; 0x35
    2932:	36 a9       	ldd	r19, Z+54	; 0x36
    2934:	47 a9       	ldd	r20, Z+55	; 0x37
    2936:	50 ad       	ldd	r21, Z+56	; 0x38
    2938:	61 ad       	ldd	r22, Z+57	; 0x39
    293a:	72 ad       	ldd	r23, Z+58	; 0x3a
    293c:	ce 01       	movw	r24, r28
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	3f d3       	rcall	.+1662   	; 0x2fc0 <writeMQTTString>
    2942:	69 81       	ldd	r22, Y+1	; 0x01
    2944:	7a 81       	ldd	r23, Y+2	; 0x02
    2946:	6a 19       	sub	r22, r10
    2948:	7b 09       	sbc	r23, r11
    294a:	07 2e       	mov	r0, r23
    294c:	00 0c       	add	r0, r0
    294e:	88 0b       	sbc	r24, r24
    2950:	99 0b       	sbc	r25, r25
    2952:	04 c0       	rjmp	.+8      	; 0x295c <MQTTSerialize_connect+0x1b4>
    2954:	6e ef       	ldi	r22, 0xFE	; 254
    2956:	7f ef       	ldi	r23, 0xFF	; 255
    2958:	8f ef       	ldi	r24, 0xFF	; 255
    295a:	9f ef       	ldi	r25, 0xFF	; 255
    295c:	26 96       	adiw	r28, 0x06	; 6
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	1f 91       	pop	r17
    296e:	0f 91       	pop	r16
    2970:	ff 90       	pop	r15
    2972:	ef 90       	pop	r14
    2974:	df 90       	pop	r13
    2976:	bf 90       	pop	r11
    2978:	af 90       	pop	r10
    297a:	7f 90       	pop	r7
    297c:	6f 90       	pop	r6
    297e:	5f 90       	pop	r5
    2980:	4f 90       	pop	r4
    2982:	08 95       	ret

00002984 <MQTTDeserialize_connack>:
    2984:	ef 92       	push	r14
    2986:	ff 92       	push	r15
    2988:	0f 93       	push	r16
    298a:	1f 93       	push	r17
    298c:	cf 93       	push	r28
    298e:	df 93       	push	r29
    2990:	00 d0       	rcall	.+0      	; 0x2992 <MQTTDeserialize_connack+0xe>
    2992:	00 d0       	rcall	.+0      	; 0x2994 <MQTTDeserialize_connack+0x10>
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	7c 01       	movw	r14, r24
    299a:	8b 01       	movw	r16, r22
    299c:	5a 83       	std	Y+2, r21	; 0x02
    299e:	49 83       	std	Y+1, r20	; 0x01
    29a0:	ce 01       	movw	r24, r28
    29a2:	01 96       	adiw	r24, 0x01	; 1
    29a4:	a5 d2       	rcall	.+1354   	; 0x2ef0 <readChar>
    29a6:	80 7f       	andi	r24, 0xF0	; 240
    29a8:	80 32       	cpi	r24, 0x20	; 32
    29aa:	19 f5       	brne	.+70     	; 0x29f2 <MQTTDeserialize_connack+0x6e>
    29ac:	be 01       	movw	r22, r28
    29ae:	6d 5f       	subi	r22, 0xFD	; 253
    29b0:	7f 4f       	sbci	r23, 0xFF	; 255
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	9a 81       	ldd	r25, Y+2	; 0x02
    29b6:	81 d2       	rcall	.+1282   	; 0x2eba <MQTTPacket_decodeBuf>
    29b8:	29 81       	ldd	r18, Y+1	; 0x01
    29ba:	3a 81       	ldd	r19, Y+2	; 0x02
    29bc:	26 0f       	add	r18, r22
    29be:	37 1f       	adc	r19, r23
    29c0:	3a 83       	std	Y+2, r19	; 0x02
    29c2:	29 83       	std	Y+1, r18	; 0x01
    29c4:	2b 81       	ldd	r18, Y+3	; 0x03
    29c6:	3c 81       	ldd	r19, Y+4	; 0x04
    29c8:	22 30       	cpi	r18, 0x02	; 2
    29ca:	31 05       	cpc	r19, r1
    29cc:	ac f0       	brlt	.+42     	; 0x29f8 <MQTTDeserialize_connack+0x74>
    29ce:	ce 01       	movw	r24, r28
    29d0:	01 96       	adiw	r24, 0x01	; 1
    29d2:	8e d2       	rcall	.+1308   	; 0x2ef0 <readChar>
    29d4:	87 fb       	bst	r24, 7
    29d6:	88 27       	eor	r24, r24
    29d8:	80 f9       	bld	r24, 0
    29da:	f7 01       	movw	r30, r14
    29dc:	80 83       	st	Z, r24
    29de:	ce 01       	movw	r24, r28
    29e0:	01 96       	adiw	r24, 0x01	; 1
    29e2:	86 d2       	rcall	.+1292   	; 0x2ef0 <readChar>
    29e4:	f8 01       	movw	r30, r16
    29e6:	80 83       	st	Z, r24
    29e8:	61 e0       	ldi	r22, 0x01	; 1
    29ea:	70 e0       	ldi	r23, 0x00	; 0
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	03 c0       	rjmp	.+6      	; 0x29f8 <MQTTDeserialize_connack+0x74>
    29f2:	60 e0       	ldi	r22, 0x00	; 0
    29f4:	70 e0       	ldi	r23, 0x00	; 0
    29f6:	cb 01       	movw	r24, r22
    29f8:	26 96       	adiw	r28, 0x06	; 6
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	df 91       	pop	r29
    2a06:	cf 91       	pop	r28
    2a08:	1f 91       	pop	r17
    2a0a:	0f 91       	pop	r16
    2a0c:	ff 90       	pop	r15
    2a0e:	ef 90       	pop	r14
    2a10:	08 95       	ret

00002a12 <MQTTSerialize_zero>:
    2a12:	0f 93       	push	r16
    2a14:	1f 93       	push	r17
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	1f 92       	push	r1
    2a1c:	1f 92       	push	r1
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	9a 83       	std	Y+2, r25	; 0x02
    2a24:	89 83       	std	Y+1, r24	; 0x01
    2a26:	42 30       	cpi	r20, 0x02	; 2
    2a28:	51 05       	cpc	r21, r1
    2a2a:	61 05       	cpc	r22, r1
    2a2c:	71 05       	cpc	r23, r1
    2a2e:	c4 f0       	brlt	.+48     	; 0x2a60 <MQTTSerialize_zero+0x4e>
    2a30:	8c 01       	movw	r16, r24
    2a32:	62 2f       	mov	r22, r18
    2a34:	62 95       	swap	r22
    2a36:	60 7f       	andi	r22, 0xF0	; 240
    2a38:	ce 01       	movw	r24, r28
    2a3a:	01 96       	adiw	r24, 0x01	; 1
    2a3c:	61 d2       	rcall	.+1218   	; 0x2f00 <writeChar>
    2a3e:	40 e0       	ldi	r20, 0x00	; 0
    2a40:	50 e0       	ldi	r21, 0x00	; 0
    2a42:	ba 01       	movw	r22, r20
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	9a 81       	ldd	r25, Y+2	; 0x02
    2a48:	2d d1       	rcall	.+602    	; 0x2ca4 <MQTTPacket_encode>
    2a4a:	29 81       	ldd	r18, Y+1	; 0x01
    2a4c:	3a 81       	ldd	r19, Y+2	; 0x02
    2a4e:	62 0f       	add	r22, r18
    2a50:	73 1f       	adc	r23, r19
    2a52:	60 1b       	sub	r22, r16
    2a54:	71 0b       	sbc	r23, r17
    2a56:	07 2e       	mov	r0, r23
    2a58:	00 0c       	add	r0, r0
    2a5a:	88 0b       	sbc	r24, r24
    2a5c:	99 0b       	sbc	r25, r25
    2a5e:	04 c0       	rjmp	.+8      	; 0x2a68 <MQTTSerialize_zero+0x56>
    2a60:	6e ef       	ldi	r22, 0xFE	; 254
    2a62:	7f ef       	ldi	r23, 0xFF	; 255
    2a64:	8f ef       	ldi	r24, 0xFF	; 255
    2a66:	9f ef       	ldi	r25, 0xFF	; 255
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	df 91       	pop	r29
    2a6e:	cf 91       	pop	r28
    2a70:	1f 91       	pop	r17
    2a72:	0f 91       	pop	r16
    2a74:	08 95       	ret

00002a76 <MQTTSerialize_pingreq>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_pingreq(uint8_t* buf, int32_t buflen)
{
  return MQTTSerialize_zero(buf, buflen, PINGREQ);
    2a76:	2c e0       	ldi	r18, 0x0C	; 12
    2a78:	cc cf       	rjmp	.-104    	; 0x2a12 <MQTTSerialize_zero>
    2a7a:	08 95       	ret

00002a7c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int32_t MQTTDeserialize_publish(uint8_t* dup, uint8_t* qos, uint8_t* retained, uint16_t* packetid, MQTTString* topicName,
		uint8_t** payload, int32_t* payloadlen, uint8_t* buf, int32_t buflen)
{
    2a7c:	2f 92       	push	r2
    2a7e:	3f 92       	push	r3
    2a80:	4f 92       	push	r4
    2a82:	5f 92       	push	r5
    2a84:	6f 92       	push	r6
    2a86:	7f 92       	push	r7
    2a88:	8f 92       	push	r8
    2a8a:	9f 92       	push	r9
    2a8c:	af 92       	push	r10
    2a8e:	bf 92       	push	r11
    2a90:	cf 92       	push	r12
    2a92:	df 92       	push	r13
    2a94:	ef 92       	push	r14
    2a96:	ff 92       	push	r15
    2a98:	0f 93       	push	r16
    2a9a:	1f 93       	push	r17
    2a9c:	cf 93       	push	r28
    2a9e:	df 93       	push	r29
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	28 97       	sbiw	r28, 0x08	; 8
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	f8 94       	cli
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	cd bf       	out	0x3d, r28	; 61
    2ab0:	3c 01       	movw	r6, r24
    2ab2:	1b 01       	movw	r2, r22
    2ab4:	2a 01       	movw	r4, r20
    2ab6:	38 87       	std	Y+8, r19	; 0x08
    2ab8:	2f 83       	std	Y+7, r18	; 0x07
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    2aba:	ba 82       	std	Y+2, r11	; 0x02
    2abc:	a9 82       	std	Y+1, r10	; 0x01
  uint8_t* enddata = NULL;
  int32_t rc = 0;
  int32_t mylen = 0;
    2abe:	1b 82       	std	Y+3, r1	; 0x03
    2ac0:	1c 82       	std	Y+4, r1	; 0x04
    2ac2:	1d 82       	std	Y+5, r1	; 0x05
    2ac4:	1e 82       	std	Y+6, r1	; 0x06

  FUNC_ENTRY;
  header.byte = readChar(&curdata);
    2ac6:	ce 01       	movw	r24, r28
    2ac8:	01 96       	adiw	r24, 0x01	; 1
    2aca:	12 d2       	rcall	.+1060   	; 0x2ef0 <readChar>

  if (header.bits.type != PUBLISH)
    2acc:	98 2f       	mov	r25, r24
    2ace:	90 7f       	andi	r25, 0xF0	; 240
    2ad0:	90 33       	cpi	r25, 0x30	; 48
    2ad2:	09 f0       	breq	.+2      	; 0x2ad6 <MQTTDeserialize_publish+0x5a>
    2ad4:	52 c0       	rjmp	.+164    	; 0x2b7a <MQTTDeserialize_publish+0xfe>
    goto exit;
	
  *dup = header.bits.dup;
    2ad6:	83 fb       	bst	r24, 3
    2ad8:	99 27       	eor	r25, r25
    2ada:	90 f9       	bld	r25, 0
    2adc:	f3 01       	movw	r30, r6
    2ade:	90 83       	st	Z, r25
  *qos = header.bits.qos;
    2ae0:	98 2f       	mov	r25, r24
    2ae2:	96 95       	lsr	r25
    2ae4:	93 70       	andi	r25, 0x03	; 3
    2ae6:	f1 01       	movw	r30, r2
    2ae8:	90 83       	st	Z, r25
  *retained = header.bits.retain;
    2aea:	81 70       	andi	r24, 0x01	; 1
    2aec:	f2 01       	movw	r30, r4
    2aee:	80 83       	st	Z, r24

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    2af0:	be 01       	movw	r22, r28
    2af2:	6d 5f       	subi	r22, 0xFD	; 253
    2af4:	7f 4f       	sbci	r23, 0xFF	; 255
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	9a 81       	ldd	r25, Y+2	; 0x02
    2afa:	df d1       	rcall	.+958    	; 0x2eba <MQTTPacket_decodeBuf>
    2afc:	4b 01       	movw	r8, r22
    2afe:	5c 01       	movw	r10, r24
    2b00:	69 80       	ldd	r6, Y+1	; 0x01
    2b02:	7a 80       	ldd	r7, Y+2	; 0x02
    2b04:	66 0e       	add	r6, r22
    2b06:	77 1e       	adc	r7, r23
    2b08:	7a 82       	std	Y+2, r7	; 0x02
    2b0a:	69 82       	std	Y+1, r6	; 0x01
  enddata = curdata + mylen;
    2b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b10:	68 0e       	add	r6, r24
    2b12:	79 1e       	adc	r7, r25

  /* do we have enough data to read the protocol version byte? */
  if (!readMQTTLenString(topicName, &curdata, enddata) || enddata - curdata < 0)
    2b14:	a3 01       	movw	r20, r6
    2b16:	be 01       	movw	r22, r28
    2b18:	6f 5f       	subi	r22, 0xFF	; 255
    2b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1c:	c8 01       	movw	r24, r16
    2b1e:	a3 d2       	rcall	.+1350   	; 0x3066 <readMQTTLenString>
    2b20:	67 2b       	or	r22, r23
    2b22:	68 2b       	or	r22, r24
    2b24:	69 2b       	or	r22, r25
    2b26:	61 f1       	breq	.+88     	; 0x2b80 <MQTTDeserialize_publish+0x104>
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2c:	93 01       	movw	r18, r6
    2b2e:	28 1b       	sub	r18, r24
    2b30:	39 0b       	sbc	r19, r25
    2b32:	c9 01       	movw	r24, r18
    2b34:	99 23       	and	r25, r25
    2b36:	24 f1       	brlt	.+72     	; 0x2b80 <MQTTDeserialize_publish+0x104>
    goto exit;

  if (*qos > 0)
    2b38:	f1 01       	movw	r30, r2
    2b3a:	80 81       	ld	r24, Z
    2b3c:	88 23       	and	r24, r24
    *packetid = readInt(&curdata);
    2b3e:	39 f0       	breq	.+14     	; 0x2b4e <MQTTDeserialize_publish+0xd2>
    2b40:	ce 01       	movw	r24, r28
    2b42:	01 96       	adiw	r24, 0x01	; 1
    2b44:	c2 d1       	rcall	.+900    	; 0x2eca <readInt>
    2b46:	ef 81       	ldd	r30, Y+7	; 0x07
    2b48:	f8 85       	ldd	r31, Y+8	; 0x08
    2b4a:	71 83       	std	Z+1, r23	; 0x01
    2b4c:	60 83       	st	Z, r22

  *payloadlen = enddata - curdata;
    2b4e:	29 81       	ldd	r18, Y+1	; 0x01
    2b50:	3a 81       	ldd	r19, Y+2	; 0x02
    2b52:	c3 01       	movw	r24, r6
    2b54:	82 1b       	sub	r24, r18
    2b56:	93 0b       	sbc	r25, r19
    2b58:	09 2e       	mov	r0, r25
    2b5a:	00 0c       	add	r0, r0
    2b5c:	aa 0b       	sbc	r26, r26
    2b5e:	bb 0b       	sbc	r27, r27
    2b60:	f6 01       	movw	r30, r12
    2b62:	80 83       	st	Z, r24
    2b64:	91 83       	std	Z+1, r25	; 0x01
    2b66:	a2 83       	std	Z+2, r26	; 0x02
    2b68:	b3 83       	std	Z+3, r27	; 0x03
  *payload = curdata;
    2b6a:	f7 01       	movw	r30, r14
    2b6c:	31 83       	std	Z+1, r19	; 0x01
    2b6e:	20 83       	st	Z, r18
  rc = 1;
    2b70:	81 2c       	mov	r8, r1
    2b72:	91 2c       	mov	r9, r1
    2b74:	54 01       	movw	r10, r8
    2b76:	83 94       	inc	r8
    2b78:	03 c0       	rjmp	.+6      	; 0x2b80 <MQTTDeserialize_publish+0x104>
		uint8_t** payload, int32_t* payloadlen, uint8_t* buf, int32_t buflen)
{
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
  uint8_t* enddata = NULL;
  int32_t rc = 0;
    2b7a:	81 2c       	mov	r8, r1
    2b7c:	91 2c       	mov	r9, r1
    2b7e:	54 01       	movw	r10, r8
  *payload = curdata;
  rc = 1;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    2b80:	c5 01       	movw	r24, r10
    2b82:	b4 01       	movw	r22, r8
    2b84:	28 96       	adiw	r28, 0x08	; 8
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	de bf       	out	0x3e, r29	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cd bf       	out	0x3d, r28	; 61
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	1f 91       	pop	r17
    2b96:	0f 91       	pop	r16
    2b98:	ff 90       	pop	r15
    2b9a:	ef 90       	pop	r14
    2b9c:	df 90       	pop	r13
    2b9e:	cf 90       	pop	r12
    2ba0:	bf 90       	pop	r11
    2ba2:	af 90       	pop	r10
    2ba4:	9f 90       	pop	r9
    2ba6:	8f 90       	pop	r8
    2ba8:	7f 90       	pop	r7
    2baa:	6f 90       	pop	r6
    2bac:	5f 90       	pop	r5
    2bae:	4f 90       	pop	r4
    2bb0:	3f 90       	pop	r3
    2bb2:	2f 90       	pop	r2
    2bb4:	08 95       	ret

00002bb6 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int32_t MQTTDeserialize_ack(uint8_t* packettype, uint8_t* dup, uint16_t* packetid, uint8_t* buf, int32_t buflen)
{
    2bb6:	cf 92       	push	r12
    2bb8:	df 92       	push	r13
    2bba:	ef 92       	push	r14
    2bbc:	ff 92       	push	r15
    2bbe:	0f 93       	push	r16
    2bc0:	1f 93       	push	r17
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
    2bc6:	00 d0       	rcall	.+0      	; 0x2bc8 <MQTTDeserialize_ack+0x12>
    2bc8:	00 d0       	rcall	.+0      	; 0x2bca <MQTTDeserialize_ack+0x14>
    2bca:	cd b7       	in	r28, 0x3d	; 61
    2bcc:	de b7       	in	r29, 0x3e	; 62
    2bce:	7c 01       	movw	r14, r24
    2bd0:	6b 01       	movw	r12, r22
    2bd2:	8a 01       	movw	r16, r20
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    2bd4:	3a 83       	std	Y+2, r19	; 0x02
    2bd6:	29 83       	std	Y+1, r18	; 0x01
  uint8_t* enddata = NULL;
  int32_t rc = 0;
  int32_t mylen;

  FUNC_ENTRY;
  header.byte = readChar(&curdata);
    2bd8:	ce 01       	movw	r24, r28
    2bda:	01 96       	adiw	r24, 0x01	; 1
    2bdc:	89 d1       	rcall	.+786    	; 0x2ef0 <readChar>
  *dup = header.bits.dup;
    2bde:	83 fb       	bst	r24, 3
    2be0:	99 27       	eor	r25, r25
    2be2:	90 f9       	bld	r25, 0
    2be4:	f6 01       	movw	r30, r12
    2be6:	90 83       	st	Z, r25
  *packettype = header.bits.type;
    2be8:	82 95       	swap	r24
    2bea:	8f 70       	andi	r24, 0x0F	; 15
    2bec:	f7 01       	movw	r30, r14
    2bee:	80 83       	st	Z, r24

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    2bf0:	be 01       	movw	r22, r28
    2bf2:	6d 5f       	subi	r22, 0xFD	; 253
    2bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfa:	5f d1       	rcall	.+702    	; 0x2eba <MQTTPacket_decodeBuf>
    2bfc:	29 81       	ldd	r18, Y+1	; 0x01
    2bfe:	3a 81       	ldd	r19, Y+2	; 0x02
    2c00:	26 0f       	add	r18, r22
    2c02:	37 1f       	adc	r19, r23
    2c04:	3a 83       	std	Y+2, r19	; 0x02
    2c06:	29 83       	std	Y+1, r18	; 0x01
  enddata = curdata + mylen;

  if (enddata - curdata < 2)
    2c08:	2b 81       	ldd	r18, Y+3	; 0x03
    2c0a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c0c:	22 30       	cpi	r18, 0x02	; 2
    2c0e:	31 05       	cpc	r19, r1
    2c10:	54 f0       	brlt	.+20     	; 0x2c26 <MQTTDeserialize_ack+0x70>
    goto exit;
	
  *packetid = readInt(&curdata);
    2c12:	ce 01       	movw	r24, r28
    2c14:	01 96       	adiw	r24, 0x01	; 1
    2c16:	59 d1       	rcall	.+690    	; 0x2eca <readInt>
    2c18:	f8 01       	movw	r30, r16
    2c1a:	71 83       	std	Z+1, r23	; 0x01
    2c1c:	60 83       	st	Z, r22

  rc = 1;
    2c1e:	61 e0       	ldi	r22, 0x01	; 1
    2c20:	70 e0       	ldi	r23, 0x00	; 0
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	90 e0       	ldi	r25, 0x00	; 0
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    2c26:	26 96       	adiw	r28, 0x06	; 6
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	1f 91       	pop	r17
    2c38:	0f 91       	pop	r16
    2c3a:	ff 90       	pop	r15
    2c3c:	ef 90       	pop	r14
    2c3e:	df 90       	pop	r13
    2c40:	cf 90       	pop	r12
    2c42:	08 95       	ret

00002c44 <bufchar>:

int32_t getLenStringLen(char* ptr)
{
  int32_t len = 256*((uint8_t)(*ptr)) + (uint8_t)(*(ptr+1));
  return len;
}
    2c44:	0f 93       	push	r16
    2c46:	1f 93       	push	r17
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	14 16       	cp	r1, r20
    2c50:	15 06       	cpc	r1, r21
    2c52:	16 06       	cpc	r1, r22
    2c54:	17 06       	cpc	r1, r23
    2c56:	fc f4       	brge	.+62     	; 0x2c96 <bufchar+0x52>
    2c58:	c0 91 97 04 	lds	r28, 0x0497	; 0x800497 <bufptr>
    2c5c:	d0 91 98 04 	lds	r29, 0x0498	; 0x800498 <bufptr+0x1>
    2c60:	fe 01       	movw	r30, r28
    2c62:	00 e0       	ldi	r16, 0x00	; 0
    2c64:	10 e0       	ldi	r17, 0x00	; 0
    2c66:	98 01       	movw	r18, r16
    2c68:	91 91       	ld	r25, Z+
    2c6a:	9c 93       	st	X, r25
    2c6c:	0f 5f       	subi	r16, 0xFF	; 255
    2c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c70:	2f 4f       	sbci	r18, 0xFF	; 255
    2c72:	3f 4f       	sbci	r19, 0xFF	; 255
    2c74:	40 17       	cp	r20, r16
    2c76:	51 07       	cpc	r21, r17
    2c78:	62 07       	cpc	r22, r18
    2c7a:	73 07       	cpc	r23, r19
    2c7c:	a9 f7       	brne	.-22     	; 0x2c68 <bufchar+0x24>
    2c7e:	db 01       	movw	r26, r22
    2c80:	ca 01       	movw	r24, r20
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	a1 09       	sbc	r26, r1
    2c86:	b1 09       	sbc	r27, r1
    2c88:	01 96       	adiw	r24, 0x01	; 1
    2c8a:	c8 0f       	add	r28, r24
    2c8c:	d9 1f       	adc	r29, r25
    2c8e:	d0 93 98 04 	sts	0x0498, r29	; 0x800498 <bufptr+0x1>
    2c92:	c0 93 97 04 	sts	0x0497, r28	; 0x800497 <bufptr>
    2c96:	cb 01       	movw	r24, r22
    2c98:	ba 01       	movw	r22, r20
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	1f 91       	pop	r17
    2ca0:	0f 91       	pop	r16
    2ca2:	08 95       	ret

00002ca4 <MQTTPacket_encode>:
    2ca4:	8f 92       	push	r8
    2ca6:	9f 92       	push	r9
    2ca8:	af 92       	push	r10
    2caa:	bf 92       	push	r11
    2cac:	cf 92       	push	r12
    2cae:	df 92       	push	r13
    2cb0:	ef 92       	push	r14
    2cb2:	ff 92       	push	r15
    2cb4:	0f 93       	push	r16
    2cb6:	1f 93       	push	r17
    2cb8:	fc 01       	movw	r30, r24
    2cba:	81 2c       	mov	r8, r1
    2cbc:	91 2c       	mov	r9, r1
    2cbe:	54 01       	movw	r10, r8
    2cc0:	8a 01       	movw	r16, r20
    2cc2:	9b 01       	movw	r18, r22
    2cc4:	0f 77       	andi	r16, 0x7F	; 127
    2cc6:	11 27       	eor	r17, r17
    2cc8:	22 27       	eor	r18, r18
    2cca:	30 78       	andi	r19, 0x80	; 128
    2ccc:	33 23       	and	r19, r19
    2cce:	64 f4       	brge	.+24     	; 0x2ce8 <MQTTPacket_encode+0x44>
    2cd0:	01 50       	subi	r16, 0x01	; 1
    2cd2:	11 09       	sbc	r17, r1
    2cd4:	21 09       	sbc	r18, r1
    2cd6:	31 09       	sbc	r19, r1
    2cd8:	00 68       	ori	r16, 0x80	; 128
    2cda:	1f 6f       	ori	r17, 0xFF	; 255
    2cdc:	2f 6f       	ori	r18, 0xFF	; 255
    2cde:	3f 6f       	ori	r19, 0xFF	; 255
    2ce0:	0f 5f       	subi	r16, 0xFF	; 255
    2ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce4:	2f 4f       	sbci	r18, 0xFF	; 255
    2ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce8:	6a 01       	movw	r12, r20
    2cea:	7b 01       	movw	r14, r22
    2cec:	77 23       	and	r23, r23
    2cee:	2c f4       	brge	.+10     	; 0x2cfa <MQTTPacket_encode+0x56>
    2cf0:	2f e7       	ldi	r18, 0x7F	; 127
    2cf2:	c2 0e       	add	r12, r18
    2cf4:	d1 1c       	adc	r13, r1
    2cf6:	e1 1c       	adc	r14, r1
    2cf8:	f1 1c       	adc	r15, r1
    2cfa:	b7 01       	movw	r22, r14
    2cfc:	a6 01       	movw	r20, r12
    2cfe:	68 94       	set
    2d00:	16 f8       	bld	r1, 6
    2d02:	75 95       	asr	r23
    2d04:	67 95       	ror	r22
    2d06:	57 95       	ror	r21
    2d08:	47 95       	ror	r20
    2d0a:	16 94       	lsr	r1
    2d0c:	d1 f7       	brne	.-12     	; 0x2d02 <MQTTPacket_encode+0x5e>
    2d0e:	14 16       	cp	r1, r20
    2d10:	15 06       	cpc	r1, r21
    2d12:	16 06       	cpc	r1, r22
    2d14:	17 06       	cpc	r1, r23
    2d16:	44 f4       	brge	.+16     	; 0x2d28 <MQTTPacket_encode+0x84>
    2d18:	2f ef       	ldi	r18, 0xFF	; 255
    2d1a:	82 1a       	sub	r8, r18
    2d1c:	92 0a       	sbc	r9, r18
    2d1e:	a2 0a       	sbc	r10, r18
    2d20:	b2 0a       	sbc	r11, r18
    2d22:	00 68       	ori	r16, 0x80	; 128
    2d24:	01 93       	st	Z+, r16
    2d26:	cc cf       	rjmp	.-104    	; 0x2cc0 <MQTTPacket_encode+0x1c>
    2d28:	fc 01       	movw	r30, r24
    2d2a:	e8 0d       	add	r30, r8
    2d2c:	f9 1d       	adc	r31, r9
    2d2e:	00 83       	st	Z, r16
    2d30:	c5 01       	movw	r24, r10
    2d32:	b4 01       	movw	r22, r8
    2d34:	6f 5f       	subi	r22, 0xFF	; 255
    2d36:	7f 4f       	sbci	r23, 0xFF	; 255
    2d38:	8f 4f       	sbci	r24, 0xFF	; 255
    2d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d3c:	1f 91       	pop	r17
    2d3e:	0f 91       	pop	r16
    2d40:	ff 90       	pop	r15
    2d42:	ef 90       	pop	r14
    2d44:	df 90       	pop	r13
    2d46:	cf 90       	pop	r12
    2d48:	bf 90       	pop	r11
    2d4a:	af 90       	pop	r10
    2d4c:	9f 90       	pop	r9
    2d4e:	8f 90       	pop	r8
    2d50:	08 95       	ret

00002d52 <MQTTPacket_decode>:
    2d52:	4f 92       	push	r4
    2d54:	5f 92       	push	r5
    2d56:	6f 92       	push	r6
    2d58:	7f 92       	push	r7
    2d5a:	9f 92       	push	r9
    2d5c:	af 92       	push	r10
    2d5e:	bf 92       	push	r11
    2d60:	cf 92       	push	r12
    2d62:	df 92       	push	r13
    2d64:	ef 92       	push	r14
    2d66:	ff 92       	push	r15
    2d68:	0f 93       	push	r16
    2d6a:	1f 93       	push	r17
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	1f 92       	push	r1
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	5c 01       	movw	r10, r24
    2d78:	8b 01       	movw	r16, r22
    2d7a:	db 01       	movw	r26, r22
    2d7c:	1d 92       	st	X+, r1
    2d7e:	1d 92       	st	X+, r1
    2d80:	1d 92       	st	X+, r1
    2d82:	1c 92       	st	X, r1
    2d84:	13 97       	sbiw	r26, 0x03	; 3
    2d86:	41 2c       	mov	r4, r1
    2d88:	51 2c       	mov	r5, r1
    2d8a:	32 01       	movw	r6, r4
    2d8c:	43 94       	inc	r4
    2d8e:	c1 2c       	mov	r12, r1
    2d90:	d1 2c       	mov	r13, r1
    2d92:	76 01       	movw	r14, r12
    2d94:	c3 94       	inc	r12
    2d96:	0c c0       	rjmp	.+24     	; 0x2db0 <MQTTPacket_decode+0x5e>
    2d98:	bf ef       	ldi	r27, 0xFF	; 255
    2d9a:	4b 1a       	sub	r4, r27
    2d9c:	5b 0a       	sbc	r5, r27
    2d9e:	6b 0a       	sbc	r6, r27
    2da0:	7b 0a       	sbc	r7, r27
    2da2:	e5 e0       	ldi	r30, 0x05	; 5
    2da4:	4e 16       	cp	r4, r30
    2da6:	51 04       	cpc	r5, r1
    2da8:	61 04       	cpc	r6, r1
    2daa:	71 04       	cpc	r7, r1
    2dac:	09 f4       	brne	.+2      	; 0x2db0 <MQTTPacket_decode+0x5e>
    2dae:	44 c0       	rjmp	.+136    	; 0x2e38 <MQTTPacket_decode+0xe6>
    2db0:	41 e0       	ldi	r20, 0x01	; 1
    2db2:	50 e0       	ldi	r21, 0x00	; 0
    2db4:	60 e0       	ldi	r22, 0x00	; 0
    2db6:	70 e0       	ldi	r23, 0x00	; 0
    2db8:	ce 01       	movw	r24, r28
    2dba:	01 96       	adiw	r24, 0x01	; 1
    2dbc:	f5 01       	movw	r30, r10
    2dbe:	19 95       	eicall
    2dc0:	61 30       	cpi	r22, 0x01	; 1
    2dc2:	71 05       	cpc	r23, r1
    2dc4:	81 05       	cpc	r24, r1
    2dc6:	91 05       	cpc	r25, r1
    2dc8:	b9 f5       	brne	.+110    	; 0x2e38 <MQTTPacket_decode+0xe6>
    2dca:	99 80       	ldd	r9, Y+1	; 0x01
    2dcc:	a9 2d       	mov	r26, r9
    2dce:	af 77       	andi	r26, 0x7F	; 127
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	a7 01       	movw	r20, r14
    2dd4:	96 01       	movw	r18, r12
    2dd6:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <__muluhisi3>
    2dda:	d8 01       	movw	r26, r16
    2ddc:	2d 91       	ld	r18, X+
    2dde:	3d 91       	ld	r19, X+
    2de0:	4d 91       	ld	r20, X+
    2de2:	5c 91       	ld	r21, X
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	82 0f       	add	r24, r18
    2dea:	93 1f       	adc	r25, r19
    2dec:	a4 1f       	adc	r26, r20
    2dee:	b5 1f       	adc	r27, r21
    2df0:	f8 01       	movw	r30, r16
    2df2:	80 83       	st	Z, r24
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	a2 83       	std	Z+2, r26	; 0x02
    2df8:	b3 83       	std	Z+3, r27	; 0x03
    2dfa:	cc 0c       	add	r12, r12
    2dfc:	dd 1c       	adc	r13, r13
    2dfe:	ee 1c       	adc	r14, r14
    2e00:	ff 1c       	adc	r15, r15
    2e02:	cc 0c       	add	r12, r12
    2e04:	dd 1c       	adc	r13, r13
    2e06:	ee 1c       	adc	r14, r14
    2e08:	ff 1c       	adc	r15, r15
    2e0a:	cc 0c       	add	r12, r12
    2e0c:	dd 1c       	adc	r13, r13
    2e0e:	ee 1c       	adc	r14, r14
    2e10:	ff 1c       	adc	r15, r15
    2e12:	cc 0c       	add	r12, r12
    2e14:	dd 1c       	adc	r13, r13
    2e16:	ee 1c       	adc	r14, r14
    2e18:	ff 1c       	adc	r15, r15
    2e1a:	cc 0c       	add	r12, r12
    2e1c:	dd 1c       	adc	r13, r13
    2e1e:	ee 1c       	adc	r14, r14
    2e20:	ff 1c       	adc	r15, r15
    2e22:	cc 0c       	add	r12, r12
    2e24:	dd 1c       	adc	r13, r13
    2e26:	ee 1c       	adc	r14, r14
    2e28:	ff 1c       	adc	r15, r15
    2e2a:	cc 0c       	add	r12, r12
    2e2c:	dd 1c       	adc	r13, r13
    2e2e:	ee 1c       	adc	r14, r14
    2e30:	ff 1c       	adc	r15, r15
    2e32:	99 20       	and	r9, r9
    2e34:	0c f4       	brge	.+2      	; 0x2e38 <MQTTPacket_decode+0xe6>
    2e36:	b0 cf       	rjmp	.-160    	; 0x2d98 <MQTTPacket_decode+0x46>
    2e38:	c3 01       	movw	r24, r6
    2e3a:	b2 01       	movw	r22, r4
    2e3c:	0f 90       	pop	r0
    2e3e:	df 91       	pop	r29
    2e40:	cf 91       	pop	r28
    2e42:	1f 91       	pop	r17
    2e44:	0f 91       	pop	r16
    2e46:	ff 90       	pop	r15
    2e48:	ef 90       	pop	r14
    2e4a:	df 90       	pop	r13
    2e4c:	cf 90       	pop	r12
    2e4e:	bf 90       	pop	r11
    2e50:	af 90       	pop	r10
    2e52:	9f 90       	pop	r9
    2e54:	7f 90       	pop	r7
    2e56:	6f 90       	pop	r6
    2e58:	5f 90       	pop	r5
    2e5a:	4f 90       	pop	r4
    2e5c:	08 95       	ret

00002e5e <MQTTPacket_len>:
    2e5e:	0f 93       	push	r16
    2e60:	1f 93       	push	r17
    2e62:	8b 01       	movw	r16, r22
    2e64:	9c 01       	movw	r18, r24
    2e66:	0f 5f       	subi	r16, 0xFF	; 255
    2e68:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6a:	2f 4f       	sbci	r18, 0xFF	; 255
    2e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e6e:	00 38       	cpi	r16, 0x80	; 128
    2e70:	11 05       	cpc	r17, r1
    2e72:	21 05       	cpc	r18, r1
    2e74:	31 05       	cpc	r19, r1
    2e76:	2c f4       	brge	.+10     	; 0x2e82 <MQTTPacket_len+0x24>
    2e78:	6e 5f       	subi	r22, 0xFE	; 254
    2e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e7c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e80:	19 c0       	rjmp	.+50     	; 0x2eb4 <MQTTPacket_len+0x56>
    2e82:	01 15       	cp	r16, r1
    2e84:	40 e4       	ldi	r20, 0x40	; 64
    2e86:	14 07       	cpc	r17, r20
    2e88:	21 05       	cpc	r18, r1
    2e8a:	31 05       	cpc	r19, r1
    2e8c:	2c f4       	brge	.+10     	; 0x2e98 <MQTTPacket_len+0x3a>
    2e8e:	6d 5f       	subi	r22, 0xFD	; 253
    2e90:	7f 4f       	sbci	r23, 0xFF	; 255
    2e92:	8f 4f       	sbci	r24, 0xFF	; 255
    2e94:	9f 4f       	sbci	r25, 0xFF	; 255
    2e96:	0e c0       	rjmp	.+28     	; 0x2eb4 <MQTTPacket_len+0x56>
    2e98:	0f 3f       	cpi	r16, 0xFF	; 255
    2e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9c:	2f 41       	sbci	r18, 0x1F	; 31
    2e9e:	31 05       	cpc	r19, r1
    2ea0:	2c f4       	brge	.+10     	; 0x2eac <MQTTPacket_len+0x4e>
    2ea2:	6c 5f       	subi	r22, 0xFC	; 252
    2ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eaa:	04 c0       	rjmp	.+8      	; 0x2eb4 <MQTTPacket_len+0x56>
    2eac:	6b 5f       	subi	r22, 0xFB	; 251
    2eae:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb0:	8f 4f       	sbci	r24, 0xFF	; 255
    2eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb4:	1f 91       	pop	r17
    2eb6:	0f 91       	pop	r16
    2eb8:	08 95       	ret

00002eba <MQTTPacket_decodeBuf>:
    2eba:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <bufptr+0x1>
    2ebe:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <bufptr>
    2ec2:	82 e2       	ldi	r24, 0x22	; 34
    2ec4:	96 e1       	ldi	r25, 0x16	; 22
    2ec6:	45 cf       	rjmp	.-374    	; 0x2d52 <MQTTPacket_decode>
    2ec8:	08 95       	ret

00002eca <readInt>:
    2eca:	dc 01       	movw	r26, r24
    2ecc:	ed 91       	ld	r30, X+
    2ece:	fc 91       	ld	r31, X
    2ed0:	11 97       	sbiw	r26, 0x01	; 1
    2ed2:	60 81       	ld	r22, Z
    2ed4:	70 e0       	ldi	r23, 0x00	; 0
    2ed6:	76 2f       	mov	r23, r22
    2ed8:	66 27       	eor	r22, r22
    2eda:	81 81       	ldd	r24, Z+1	; 0x01
    2edc:	68 0f       	add	r22, r24
    2ede:	71 1d       	adc	r23, r1
    2ee0:	07 2e       	mov	r0, r23
    2ee2:	00 0c       	add	r0, r0
    2ee4:	88 0b       	sbc	r24, r24
    2ee6:	99 0b       	sbc	r25, r25
    2ee8:	32 96       	adiw	r30, 0x02	; 2
    2eea:	ed 93       	st	X+, r30
    2eec:	fc 93       	st	X, r31
    2eee:	08 95       	ret

00002ef0 <readChar>:
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	ed 91       	ld	r30, X+
    2ef4:	fc 91       	ld	r31, X
    2ef6:	11 97       	sbiw	r26, 0x01	; 1
    2ef8:	81 91       	ld	r24, Z+
    2efa:	ed 93       	st	X+, r30
    2efc:	fc 93       	st	X, r31
    2efe:	08 95       	ret

00002f00 <writeChar>:
    2f00:	fc 01       	movw	r30, r24
    2f02:	a0 81       	ld	r26, Z
    2f04:	b1 81       	ldd	r27, Z+1	; 0x01
    2f06:	6c 93       	st	X, r22
    2f08:	80 81       	ld	r24, Z
    2f0a:	91 81       	ldd	r25, Z+1	; 0x01
    2f0c:	01 96       	adiw	r24, 0x01	; 1
    2f0e:	91 83       	std	Z+1, r25	; 0x01
    2f10:	80 83       	st	Z, r24
    2f12:	08 95       	ret

00002f14 <writeInt>:
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	fc 01       	movw	r30, r24
    2f1a:	c0 81       	ld	r28, Z
    2f1c:	d1 81       	ldd	r29, Z+1	; 0x01
    2f1e:	db 01       	movw	r26, r22
    2f20:	ca 01       	movw	r24, r20
    2f22:	77 23       	and	r23, r23
    2f24:	24 f4       	brge	.+8      	; 0x2f2e <writeInt+0x1a>
    2f26:	81 50       	subi	r24, 0x01	; 1
    2f28:	9f 4f       	sbci	r25, 0xFF	; 255
    2f2a:	af 4f       	sbci	r26, 0xFF	; 255
    2f2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2e:	98 83       	st	Y, r25
    2f30:	a0 81       	ld	r26, Z
    2f32:	b1 81       	ldd	r27, Z+1	; 0x01
    2f34:	cd 01       	movw	r24, r26
    2f36:	01 96       	adiw	r24, 0x01	; 1
    2f38:	91 83       	std	Z+1, r25	; 0x01
    2f3a:	80 83       	st	Z, r24
    2f3c:	55 27       	eor	r21, r21
    2f3e:	66 27       	eor	r22, r22
    2f40:	70 78       	andi	r23, 0x80	; 128
    2f42:	77 23       	and	r23, r23
    2f44:	5c f4       	brge	.+22     	; 0x2f5c <writeInt+0x48>
    2f46:	41 50       	subi	r20, 0x01	; 1
    2f48:	51 09       	sbc	r21, r1
    2f4a:	61 09       	sbc	r22, r1
    2f4c:	71 09       	sbc	r23, r1
    2f4e:	5f 6f       	ori	r21, 0xFF	; 255
    2f50:	6f 6f       	ori	r22, 0xFF	; 255
    2f52:	7f 6f       	ori	r23, 0xFF	; 255
    2f54:	4f 5f       	subi	r20, 0xFF	; 255
    2f56:	5f 4f       	sbci	r21, 0xFF	; 255
    2f58:	6f 4f       	sbci	r22, 0xFF	; 255
    2f5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f5c:	11 96       	adiw	r26, 0x01	; 1
    2f5e:	4c 93       	st	X, r20
    2f60:	80 81       	ld	r24, Z
    2f62:	91 81       	ldd	r25, Z+1	; 0x01
    2f64:	01 96       	adiw	r24, 0x01	; 1
    2f66:	91 83       	std	Z+1, r25	; 0x01
    2f68:	80 83       	st	Z, r24
    2f6a:	df 91       	pop	r29
    2f6c:	cf 91       	pop	r28
    2f6e:	08 95       	ret

00002f70 <writeCString>:
    2f70:	ef 92       	push	r14
    2f72:	ff 92       	push	r15
    2f74:	0f 93       	push	r16
    2f76:	1f 93       	push	r17
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	8c 01       	movw	r16, r24
    2f7e:	7b 01       	movw	r14, r22
    2f80:	eb 01       	movw	r28, r22
    2f82:	09 90       	ld	r0, Y+
    2f84:	00 20       	and	r0, r0
    2f86:	e9 f7       	brne	.-6      	; 0x2f82 <writeCString+0x12>
    2f88:	21 97       	sbiw	r28, 0x01	; 1
    2f8a:	c6 1b       	sub	r28, r22
    2f8c:	d7 0b       	sbc	r29, r23
    2f8e:	ae 01       	movw	r20, r28
    2f90:	60 e0       	ldi	r22, 0x00	; 0
    2f92:	70 e0       	ldi	r23, 0x00	; 0
    2f94:	bf df       	rcall	.-130    	; 0x2f14 <writeInt>
    2f96:	ae 01       	movw	r20, r28
    2f98:	b7 01       	movw	r22, r14
    2f9a:	f8 01       	movw	r30, r16
    2f9c:	80 81       	ld	r24, Z
    2f9e:	91 81       	ldd	r25, Z+1	; 0x01
    2fa0:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <memcpy>
    2fa4:	f8 01       	movw	r30, r16
    2fa6:	80 81       	ld	r24, Z
    2fa8:	91 81       	ldd	r25, Z+1	; 0x01
    2faa:	c8 0f       	add	r28, r24
    2fac:	d9 1f       	adc	r29, r25
    2fae:	d1 83       	std	Z+1, r29	; 0x01
    2fb0:	c0 83       	st	Z, r28
    2fb2:	df 91       	pop	r29
    2fb4:	cf 91       	pop	r28
    2fb6:	1f 91       	pop	r17
    2fb8:	0f 91       	pop	r16
    2fba:	ff 90       	pop	r15
    2fbc:	ef 90       	pop	r14
    2fbe:	08 95       	ret

00002fc0 <writeMQTTString>:


void writeMQTTString(uint8_t** pptr, MQTTString mqttstring)
{
    2fc0:	af 92       	push	r10
    2fc2:	bf 92       	push	r11
    2fc4:	cf 92       	push	r12
    2fc6:	df 92       	push	r13
    2fc8:	ef 92       	push	r14
    2fca:	ff 92       	push	r15
    2fcc:	0f 93       	push	r16
    2fce:	1f 93       	push	r17
    2fd0:	cf 93       	push	r28
    2fd2:	df 93       	push	r29
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
    2fd8:	28 97       	sbiw	r28, 0x08	; 8
    2fda:	0f b6       	in	r0, 0x3f	; 63
    2fdc:	f8 94       	cli
    2fde:	de bf       	out	0x3e, r29	; 62
    2fe0:	0f be       	out	0x3f, r0	; 63
    2fe2:	cd bf       	out	0x3d, r28	; 61
    2fe4:	5c 01       	movw	r10, r24
    2fe6:	09 83       	std	Y+1, r16	; 0x01
    2fe8:	1a 83       	std	Y+2, r17	; 0x02
    2fea:	2b 83       	std	Y+3, r18	; 0x03
    2fec:	3c 83       	std	Y+4, r19	; 0x04
    2fee:	4d 83       	std	Y+5, r20	; 0x05
    2ff0:	5e 83       	std	Y+6, r21	; 0x06
    2ff2:	6f 83       	std	Y+7, r22	; 0x07
    2ff4:	78 87       	std	Y+8, r23	; 0x08
    2ff6:	cb 80       	ldd	r12, Y+3	; 0x03
    2ff8:	dc 80       	ldd	r13, Y+4	; 0x04
    2ffa:	ed 80       	ldd	r14, Y+5	; 0x05
    2ffc:	fe 80       	ldd	r15, Y+6	; 0x06
  if (mqttstring.lenstring.len > 0)
    2ffe:	1c 14       	cp	r1, r12
    3000:	1d 04       	cpc	r1, r13
    3002:	1e 04       	cpc	r1, r14
    3004:	1f 04       	cpc	r1, r15
    3006:	9c f4       	brge	.+38     	; 0x302e <writeMQTTString+0x6e>
  {
    writeInt(pptr, mqttstring.lenstring.len);
    3008:	b7 01       	movw	r22, r14
    300a:	a6 01       	movw	r20, r12
    300c:	83 df       	rcall	.-250    	; 0x2f14 <writeInt>
    memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
    300e:	6f 81       	ldd	r22, Y+7	; 0x07
    3010:	78 85       	ldd	r23, Y+8	; 0x08
    3012:	a6 01       	movw	r20, r12
    3014:	f5 01       	movw	r30, r10
    3016:	80 81       	ld	r24, Z
    3018:	91 81       	ldd	r25, Z+1	; 0x01
    301a:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <memcpy>
    *pptr += mqttstring.lenstring.len;
    301e:	f5 01       	movw	r30, r10
    3020:	80 81       	ld	r24, Z
    3022:	91 81       	ldd	r25, Z+1	; 0x01
    3024:	c8 0e       	add	r12, r24
    3026:	d9 1e       	adc	r13, r25
    3028:	d1 82       	std	Z+1, r13	; 0x01
    302a:	c0 82       	st	Z, r12
    302c:	0b c0       	rjmp	.+22     	; 0x3044 <writeMQTTString+0x84>
    302e:	69 81       	ldd	r22, Y+1	; 0x01
    3030:	7a 81       	ldd	r23, Y+2	; 0x02
  }
  else if (mqttstring.cstring)
    3032:	61 15       	cp	r22, r1
    3034:	71 05       	cpc	r23, r1
    writeCString(pptr, mqttstring.cstring);
    3036:	11 f0       	breq	.+4      	; 0x303c <writeMQTTString+0x7c>
    3038:	9b df       	rcall	.-202    	; 0x2f70 <writeCString>
    303a:	04 c0       	rjmp	.+8      	; 0x3044 <writeMQTTString+0x84>
  else
    writeInt(pptr, 0);
    303c:	40 e0       	ldi	r20, 0x00	; 0
    303e:	50 e0       	ldi	r21, 0x00	; 0
    3040:	ba 01       	movw	r22, r20
    3042:	68 df       	rcall	.-304    	; 0x2f14 <writeInt>
}
    3044:	28 96       	adiw	r28, 0x08	; 8
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	f8 94       	cli
    304a:	de bf       	out	0x3e, r29	; 62
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	cd bf       	out	0x3d, r28	; 61
    3050:	df 91       	pop	r29
    3052:	cf 91       	pop	r28
    3054:	1f 91       	pop	r17
    3056:	0f 91       	pop	r16
    3058:	ff 90       	pop	r15
    305a:	ef 90       	pop	r14
    305c:	df 90       	pop	r13
    305e:	cf 90       	pop	r12
    3060:	bf 90       	pop	r11
    3062:	af 90       	pop	r10
    3064:	08 95       	ret

00003066 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int32_t readMQTTLenString(MQTTString* mqttstring, uint8_t** pptr, uint8_t* enddata)
{
    3066:	ef 92       	push	r14
    3068:	ff 92       	push	r15
    306a:	0f 93       	push	r16
    306c:	1f 93       	push	r17
    306e:	cf 93       	push	r28
    3070:	df 93       	push	r29
    3072:	8c 01       	movw	r16, r24
    3074:	eb 01       	movw	r28, r22
    3076:	7a 01       	movw	r14, r20
  int32_t rc = 0;

  FUNC_ENTRY;

  /* the first two bytes are the length of the string */
  if (enddata - (*pptr) > 1) /* enough length to read the integer? */
    3078:	88 81       	ld	r24, Y
    307a:	99 81       	ldd	r25, Y+1	; 0x01
    307c:	9a 01       	movw	r18, r20
    307e:	28 1b       	sub	r18, r24
    3080:	39 0b       	sbc	r19, r25
    3082:	22 30       	cpi	r18, 0x02	; 2
    3084:	31 05       	cpc	r19, r1
    3086:	e4 f0       	brlt	.+56     	; 0x30c0 <readMQTTLenString+0x5a>
  {
    mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
    3088:	cb 01       	movw	r24, r22
    308a:	1f df       	rcall	.-450    	; 0x2eca <readInt>
    308c:	f8 01       	movw	r30, r16
    308e:	62 83       	std	Z+2, r22	; 0x02
    3090:	73 83       	std	Z+3, r23	; 0x03
    3092:	84 83       	std	Z+4, r24	; 0x04
    3094:	95 83       	std	Z+5, r25	; 0x05
	
    if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
    3096:	28 81       	ld	r18, Y
    3098:	39 81       	ldd	r19, Y+1	; 0x01
    309a:	a9 01       	movw	r20, r18
    309c:	46 0f       	add	r20, r22
    309e:	57 1f       	adc	r21, r23
    30a0:	e4 16       	cp	r14, r20
    30a2:	f5 06       	cpc	r15, r21
    30a4:	88 f0       	brcs	.+34     	; 0x30c8 <readMQTTLenString+0x62>
    {
      mqttstring->lenstring.data = (char*)*pptr;
    30a6:	37 83       	std	Z+7, r19	; 0x07
    30a8:	26 83       	std	Z+6, r18	; 0x06
      *pptr += mqttstring->lenstring.len;
    30aa:	28 81       	ld	r18, Y
    30ac:	39 81       	ldd	r19, Y+1	; 0x01
    30ae:	62 0f       	add	r22, r18
    30b0:	73 1f       	adc	r23, r19
    30b2:	79 83       	std	Y+1, r23	; 0x01
    30b4:	68 83       	st	Y, r22
      rc = 1;
    30b6:	61 e0       	ldi	r22, 0x01	; 1
    30b8:	70 e0       	ldi	r23, 0x00	; 0
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	07 c0       	rjmp	.+14     	; 0x30ce <readMQTTLenString+0x68>
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int32_t readMQTTLenString(MQTTString* mqttstring, uint8_t** pptr, uint8_t* enddata)
{
  int32_t rc = 0;
    30c0:	60 e0       	ldi	r22, 0x00	; 0
    30c2:	70 e0       	ldi	r23, 0x00	; 0
    30c4:	cb 01       	movw	r24, r22
    30c6:	03 c0       	rjmp	.+6      	; 0x30ce <readMQTTLenString+0x68>
    30c8:	60 e0       	ldi	r22, 0x00	; 0
    30ca:	70 e0       	ldi	r23, 0x00	; 0
    30cc:	cb 01       	movw	r24, r22
      *pptr += mqttstring->lenstring.len;
      rc = 1;
    }
  }

  mqttstring->cstring = NULL;
    30ce:	f8 01       	movw	r30, r16
    30d0:	11 82       	std	Z+1, r1	; 0x01
    30d2:	10 82       	st	Z, r1
  FUNC_EXIT_RC(rc);
  return rc;
}
    30d4:	df 91       	pop	r29
    30d6:	cf 91       	pop	r28
    30d8:	1f 91       	pop	r17
    30da:	0f 91       	pop	r16
    30dc:	ff 90       	pop	r15
    30de:	ef 90       	pop	r14
    30e0:	08 95       	ret

000030e2 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int32_t MQTTstrlen(MQTTString mqttstring)
{
    30e2:	cf 93       	push	r28
    30e4:	df 93       	push	r29
    30e6:	cd b7       	in	r28, 0x3d	; 61
    30e8:	de b7       	in	r29, 0x3e	; 62
    30ea:	28 97       	sbiw	r28, 0x08	; 8
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	f8 94       	cli
    30f0:	de bf       	out	0x3e, r29	; 62
    30f2:	0f be       	out	0x3f, r0	; 63
    30f4:	cd bf       	out	0x3d, r28	; 61
    30f6:	29 83       	std	Y+1, r18	; 0x01
    30f8:	3a 83       	std	Y+2, r19	; 0x02
    30fa:	4b 83       	std	Y+3, r20	; 0x03
    30fc:	5c 83       	std	Y+4, r21	; 0x04
    30fe:	6d 83       	std	Y+5, r22	; 0x05
    3100:	7e 83       	std	Y+6, r23	; 0x06
    3102:	8f 83       	std	Y+7, r24	; 0x07
    3104:	98 87       	std	Y+8, r25	; 0x08
    3106:	e9 81       	ldd	r30, Y+1	; 0x01
    3108:	fa 81       	ldd	r31, Y+2	; 0x02
  int rc = 0;

  if (mqttstring.cstring)
    310a:	30 97       	sbiw	r30, 0x00	; 0
    310c:	49 f0       	breq	.+18     	; 0x3120 <MQTTstrlen+0x3e>
    rc = strlen(mqttstring.cstring);
    310e:	df 01       	movw	r26, r30
    3110:	0d 90       	ld	r0, X+
    3112:	00 20       	and	r0, r0
    3114:	e9 f7       	brne	.-6      	; 0x3110 <MQTTstrlen+0x2e>
    3116:	11 97       	sbiw	r26, 0x01	; 1
    3118:	bd 01       	movw	r22, r26
    311a:	6e 1b       	sub	r22, r30
    311c:	7f 0b       	sbc	r23, r31
    311e:	02 c0       	rjmp	.+4      	; 0x3124 <MQTTstrlen+0x42>
  else
    rc = mqttstring.lenstring.len;
    3120:	6b 81       	ldd	r22, Y+3	; 0x03
    3122:	7c 81       	ldd	r23, Y+4	; 0x04
	
  return rc;
    3124:	07 2e       	mov	r0, r23
    3126:	00 0c       	add	r0, r0
    3128:	88 0b       	sbc	r24, r24
    312a:	99 0b       	sbc	r25, r25
}
    312c:	28 96       	adiw	r28, 0x08	; 8
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	f8 94       	cli
    3132:	de bf       	out	0x3e, r29	; 62
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	df 91       	pop	r29
    313a:	cf 91       	pop	r28
    313c:	08 95       	ret

0000313e <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int32_t MQTTPacket_equals(MQTTString* a, char* bptr)
{
    313e:	0f 93       	push	r16
    3140:	1f 93       	push	r17
    3142:	cf 93       	push	r28
    3144:	df 93       	push	r29
    3146:	eb 01       	movw	r28, r22
  int32_t alen = 0, blen = 0;
  char *aptr;
	
  if (a->cstring)
    3148:	fc 01       	movw	r30, r24
    314a:	a0 81       	ld	r26, Z
    314c:	b1 81       	ldd	r27, Z+1	; 0x01
    314e:	10 97       	sbiw	r26, 0x00	; 0
    3150:	59 f0       	breq	.+22     	; 0x3168 <MQTTPacket_equals+0x2a>
  {
    aptr = a->cstring;
    alen = strlen(a->cstring);
    3152:	fd 01       	movw	r30, r26
    3154:	01 90       	ld	r0, Z+
    3156:	00 20       	and	r0, r0
    3158:	e9 f7       	brne	.-6      	; 0x3154 <MQTTPacket_equals+0x16>
    315a:	31 97       	sbiw	r30, 0x01	; 1
    315c:	af 01       	movw	r20, r30
    315e:	4a 1b       	sub	r20, r26
    3160:	5b 0b       	sbc	r21, r27
    3162:	60 e0       	ldi	r22, 0x00	; 0
    3164:	70 e0       	ldi	r23, 0x00	; 0
    3166:	07 c0       	rjmp	.+14     	; 0x3176 <MQTTPacket_equals+0x38>
  }
  else
  {
    aptr = a->lenstring.data;
    3168:	fc 01       	movw	r30, r24
    316a:	a6 81       	ldd	r26, Z+6	; 0x06
    316c:	b7 81       	ldd	r27, Z+7	; 0x07
    alen = a->lenstring.len;
    316e:	42 81       	ldd	r20, Z+2	; 0x02
    3170:	53 81       	ldd	r21, Z+3	; 0x03
    3172:	64 81       	ldd	r22, Z+4	; 0x04
    3174:	75 81       	ldd	r23, Z+5	; 0x05
  }

  blen = strlen(bptr);
    3176:	fe 01       	movw	r30, r28
    3178:	01 90       	ld	r0, Z+
    317a:	00 20       	and	r0, r0
    317c:	e9 f7       	brne	.-6      	; 0x3178 <MQTTPacket_equals+0x3a>
    317e:	31 97       	sbiw	r30, 0x01	; 1
    3180:	8f 01       	movw	r16, r30
    3182:	0c 1b       	sub	r16, r28
    3184:	1d 0b       	sbc	r17, r29
	
  return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	40 17       	cp	r20, r16
    318c:	51 07       	cpc	r21, r17
    318e:	62 07       	cpc	r22, r18
    3190:	73 07       	cpc	r23, r19
    3192:	61 f4       	brne	.+24     	; 0x31ac <MQTTPacket_equals+0x6e>
    3194:	be 01       	movw	r22, r28
    3196:	cd 01       	movw	r24, r26
    3198:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <strncmp>
    319c:	31 e0       	ldi	r19, 0x01	; 1
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	89 2b       	or	r24, r25
    31a2:	09 f0       	breq	.+2      	; 0x31a6 <MQTTPacket_equals+0x68>
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	63 2f       	mov	r22, r19
    31a8:	72 2f       	mov	r23, r18
    31aa:	02 c0       	rjmp	.+4      	; 0x31b0 <MQTTPacket_equals+0x72>
    31ac:	60 e0       	ldi	r22, 0x00	; 0
    31ae:	70 e0       	ldi	r23, 0x00	; 0
    31b0:	07 2e       	mov	r0, r23
    31b2:	00 0c       	add	r0, r0
    31b4:	88 0b       	sbc	r24, r24
    31b6:	99 0b       	sbc	r25, r25
}
    31b8:	df 91       	pop	r29
    31ba:	cf 91       	pop	r28
    31bc:	1f 91       	pop	r17
    31be:	0f 91       	pop	r16
    31c0:	08 95       	ret

000031c2 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_publishLength(uint8_t qos, MQTTString topicName, int32_t payloadlen)
{
    31c2:	bf 92       	push	r11
    31c4:	cf 92       	push	r12
    31c6:	df 92       	push	r13
    31c8:	ef 92       	push	r14
    31ca:	ff 92       	push	r15
    31cc:	0f 93       	push	r16
    31ce:	1f 93       	push	r17
    31d0:	cf 93       	push	r28
    31d2:	df 93       	push	r29
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
    31d8:	28 97       	sbiw	r28, 0x08	; 8
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	f8 94       	cli
    31de:	de bf       	out	0x3e, r29	; 62
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	cd bf       	out	0x3d, r28	; 61
    31e4:	b8 2e       	mov	r11, r24
    31e6:	b2 2f       	mov	r27, r18
    31e8:	a3 2f       	mov	r26, r19
    31ea:	f4 2f       	mov	r31, r20
    31ec:	e5 2f       	mov	r30, r21
    31ee:	86 2f       	mov	r24, r22
    31f0:	97 2f       	mov	r25, r23
  int32_t len = 2 + MQTTstrlen(topicName) + payloadlen;
    31f2:	20 2f       	mov	r18, r16
    31f4:	31 2f       	mov	r19, r17
    31f6:	4b 2f       	mov	r20, r27
    31f8:	5a 2f       	mov	r21, r26
    31fa:	6f 2f       	mov	r22, r31
    31fc:	7e 2f       	mov	r23, r30
    31fe:	71 df       	rcall	.-286    	; 0x30e2 <MQTTstrlen>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	02 96       	adiw	r24, 0x02	; 2
    3206:	a1 1d       	adc	r26, r1
    3208:	b1 1d       	adc	r27, r1
    320a:	bc 01       	movw	r22, r24
    320c:	cd 01       	movw	r24, r26
    320e:	6c 0d       	add	r22, r12
    3210:	7d 1d       	adc	r23, r13
    3212:	8e 1d       	adc	r24, r14
    3214:	9f 1d       	adc	r25, r15
  
  if (qos > 0)
    3216:	bb 20       	and	r11, r11
    3218:	21 f0       	breq	.+8      	; 0x3222 <MQTTSerialize_publishLength+0x60>
    len += 2; /* packetid */
    321a:	6e 5f       	subi	r22, 0xFE	; 254
    321c:	7f 4f       	sbci	r23, 0xFF	; 255
    321e:	8f 4f       	sbci	r24, 0xFF	; 255
    3220:	9f 4f       	sbci	r25, 0xFF	; 255
	
  return len;
}
    3222:	28 96       	adiw	r28, 0x08	; 8
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	de bf       	out	0x3e, r29	; 62
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	cd bf       	out	0x3d, r28	; 61
    322e:	df 91       	pop	r29
    3230:	cf 91       	pop	r28
    3232:	1f 91       	pop	r17
    3234:	0f 91       	pop	r16
    3236:	ff 90       	pop	r15
    3238:	ef 90       	pop	r14
    323a:	df 90       	pop	r13
    323c:	cf 90       	pop	r12
    323e:	bf 90       	pop	r11
    3240:	08 95       	ret

00003242 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int32_t MQTTSerialize_publish(uint8_t* buf, int32_t buflen, uint8_t dup, uint8_t qos, uint8_t retained, uint16_t packetid,
		MQTTString topicName, uint8_t* payload, int32_t payloadlen)
{
    3242:	3f 92       	push	r3
    3244:	4f 92       	push	r4
    3246:	5f 92       	push	r5
    3248:	6f 92       	push	r6
    324a:	7f 92       	push	r7
    324c:	8f 92       	push	r8
    324e:	9f 92       	push	r9
    3250:	af 92       	push	r10
    3252:	bf 92       	push	r11
    3254:	cf 92       	push	r12
    3256:	df 92       	push	r13
    3258:	ef 92       	push	r14
    325a:	ff 92       	push	r15
    325c:	0f 93       	push	r16
    325e:	1f 93       	push	r17
    3260:	cf 93       	push	r28
    3262:	df 93       	push	r29
    3264:	00 d0       	rcall	.+0      	; 0x3266 <MQTTSerialize_publish+0x24>
    3266:	1f 92       	push	r1
    3268:	cd b7       	in	r28, 0x3d	; 61
    326a:	de b7       	in	r29, 0x3e	; 62
    326c:	4c 01       	movw	r8, r24
    326e:	2a 01       	movw	r4, r20
    3270:	3b 01       	movw	r6, r22
    3272:	32 2e       	mov	r3, r18
    3274:	b0 2e       	mov	r11, r16
    3276:	ae 2c       	mov	r10, r14
    3278:	dc 82       	std	Y+4, r13	; 0x04
    327a:	cb 82       	std	Y+3, r12	; 0x03
  uint8_t *ptr = buf;
    327c:	9a 83       	std	Y+2, r25	; 0x02
    327e:	89 83       	std	Y+1, r24	; 0x01
  int32_t rem_len = 0;
  int32_t rc = 0;

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    3280:	cb a0       	ldd	r12, Y+35	; 0x23
    3282:	dc a0       	ldd	r13, Y+36	; 0x24
    3284:	ed a0       	ldd	r14, Y+37	; 0x25
    3286:	fe a0       	ldd	r15, Y+38	; 0x26
    3288:	09 8d       	ldd	r16, Y+25	; 0x19
    328a:	1a 8d       	ldd	r17, Y+26	; 0x1a
    328c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    328e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3290:	4d 8d       	ldd	r20, Y+29	; 0x1d
    3292:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3294:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3296:	78 a1       	ldd	r23, Y+32	; 0x20
    3298:	8b 2d       	mov	r24, r11
    329a:	93 df       	rcall	.-218    	; 0x31c2 <MQTTSerialize_publishLength>
    329c:	6b 01       	movw	r12, r22
    329e:	7c 01       	movw	r14, r24
    32a0:	de dd       	rcall	.-1092   	; 0x2e5e <MQTTPacket_len>
    32a2:	46 16       	cp	r4, r22
    32a4:	57 06       	cpc	r5, r23
    32a6:	68 06       	cpc	r6, r24
    32a8:	79 06       	cpc	r7, r25
    32aa:	0c f4       	brge	.+2      	; 0x32ae <MQTTSerialize_publish+0x6c>
    32ac:	42 c0       	rjmp	.+132    	; 0x3332 <MQTTSerialize_publish+0xf0>
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.bits.type = PUBLISH;
    32ae:	60 e3       	ldi	r22, 0x30	; 48
  header.bits.dup = dup;
    32b0:	30 fa       	bst	r3, 0
    32b2:	63 f9       	bld	r22, 3
  header.bits.qos = qos;
    32b4:	8b 2d       	mov	r24, r11
    32b6:	83 70       	andi	r24, 0x03	; 3
    32b8:	88 0f       	add	r24, r24
    32ba:	69 7f       	andi	r22, 0xF9	; 249
    32bc:	68 2b       	or	r22, r24
  header.bits.retain = retained;
    32be:	a0 fa       	bst	r10, 0
    32c0:	60 f9       	bld	r22, 0
  writeChar(&ptr, header.byte); /* write header */
    32c2:	ce 01       	movw	r24, r28
    32c4:	01 96       	adiw	r24, 0x01	; 1
    32c6:	1c de       	rcall	.-968    	; 0x2f00 <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    32c8:	b7 01       	movw	r22, r14
    32ca:	a6 01       	movw	r20, r12
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	9a 81       	ldd	r25, Y+2	; 0x02
    32d0:	e9 dc       	rcall	.-1582   	; 0x2ca4 <MQTTPacket_encode>
    32d2:	29 81       	ldd	r18, Y+1	; 0x01
    32d4:	3a 81       	ldd	r19, Y+2	; 0x02
    32d6:	62 0f       	add	r22, r18
    32d8:	73 1f       	adc	r23, r19
    32da:	7a 83       	std	Y+2, r23	; 0x02
    32dc:	69 83       	std	Y+1, r22	; 0x01

  writeMQTTString(&ptr, topicName);
    32de:	09 8d       	ldd	r16, Y+25	; 0x19
    32e0:	1a 8d       	ldd	r17, Y+26	; 0x1a
    32e2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    32e4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    32e6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    32e8:	5e 8d       	ldd	r21, Y+30	; 0x1e
    32ea:	6f 8d       	ldd	r22, Y+31	; 0x1f
    32ec:	78 a1       	ldd	r23, Y+32	; 0x20
    32ee:	ce 01       	movw	r24, r28
    32f0:	01 96       	adiw	r24, 0x01	; 1
    32f2:	66 de       	rcall	.-820    	; 0x2fc0 <writeMQTTString>

  if (qos > 0)
    32f4:	bb 20       	and	r11, r11
    32f6:	41 f0       	breq	.+16     	; 0x3308 <MQTTSerialize_publish+0xc6>
    writeInt(&ptr, packetid);
    32f8:	8b 81       	ldd	r24, Y+3	; 0x03
    32fa:	9c 81       	ldd	r25, Y+4	; 0x04
    32fc:	ac 01       	movw	r20, r24
    32fe:	60 e0       	ldi	r22, 0x00	; 0
    3300:	70 e0       	ldi	r23, 0x00	; 0
    3302:	ce 01       	movw	r24, r28
    3304:	01 96       	adiw	r24, 0x01	; 1
    3306:	06 de       	rcall	.-1012   	; 0x2f14 <writeInt>

  memcpy(ptr, payload, payloadlen);
    3308:	4b a1       	ldd	r20, Y+35	; 0x23
    330a:	5c a1       	ldd	r21, Y+36	; 0x24
    330c:	69 a1       	ldd	r22, Y+33	; 0x21
    330e:	7a a1       	ldd	r23, Y+34	; 0x22
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	9a 81       	ldd	r25, Y+2	; 0x02
    3314:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <memcpy>
  ptr += payloadlen;

  rc = ptr - buf;
    3318:	69 81       	ldd	r22, Y+1	; 0x01
    331a:	7a 81       	ldd	r23, Y+2	; 0x02
    331c:	8b a1       	ldd	r24, Y+35	; 0x23
    331e:	9c a1       	ldd	r25, Y+36	; 0x24
    3320:	68 0f       	add	r22, r24
    3322:	79 1f       	adc	r23, r25
    3324:	68 19       	sub	r22, r8
    3326:	79 09       	sbc	r23, r9
    3328:	07 2e       	mov	r0, r23
    332a:	00 0c       	add	r0, r0
    332c:	88 0b       	sbc	r24, r24
    332e:	99 0b       	sbc	r25, r25
    3330:	04 c0       	rjmp	.+8      	; 0x333a <MQTTSerialize_publish+0xf8>

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    3332:	6e ef       	ldi	r22, 0xFE	; 254
    3334:	7f ef       	ldi	r23, 0xFF	; 255
    3336:	8f ef       	ldi	r24, 0xFF	; 255
    3338:	9f ef       	ldi	r25, 0xFF	; 255

  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    333a:	0f 90       	pop	r0
    333c:	0f 90       	pop	r0
    333e:	0f 90       	pop	r0
    3340:	0f 90       	pop	r0
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	ff 90       	pop	r15
    334c:	ef 90       	pop	r14
    334e:	df 90       	pop	r13
    3350:	cf 90       	pop	r12
    3352:	bf 90       	pop	r11
    3354:	af 90       	pop	r10
    3356:	9f 90       	pop	r9
    3358:	8f 90       	pop	r8
    335a:	7f 90       	pop	r7
    335c:	6f 90       	pop	r6
    335e:	5f 90       	pop	r5
    3360:	4f 90       	pop	r4
    3362:	3f 90       	pop	r3
    3364:	08 95       	ret

00003366 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_ack(uint8_t* buf, int32_t buflen, uint8_t packettype, uint8_t dup, uint16_t packetid)
{
    3366:	ef 92       	push	r14
    3368:	ff 92       	push	r15
    336a:	0f 93       	push	r16
    336c:	1f 93       	push	r17
    336e:	cf 93       	push	r28
    3370:	df 93       	push	r29
    3372:	1f 92       	push	r1
    3374:	1f 92       	push	r1
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
    337a:	fc 01       	movw	r30, r24
  MQTTHeader header = {0};
  int32_t rc = 0;
  uint8_t *ptr = buf;
    337c:	9a 83       	std	Y+2, r25	; 0x02
    337e:	89 83       	std	Y+1, r24	; 0x01

  FUNC_ENTRY;

  if (buflen < 4)
    3380:	44 30       	cpi	r20, 0x04	; 4
    3382:	51 05       	cpc	r21, r1
    3384:	61 05       	cpc	r22, r1
    3386:	71 05       	cpc	r23, r1
    3388:	6c f1       	brlt	.+90     	; 0x33e4 <MQTTSerialize_ack+0x7e>
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.bits.type = packettype;
    338a:	62 2f       	mov	r22, r18
    338c:	62 95       	swap	r22
    338e:	60 7f       	andi	r22, 0xF0	; 240
  header.bits.dup = dup;
    3390:	00 fb       	bst	r16, 0
    3392:	63 f9       	bld	r22, 3
  header.bits.qos = (packettype == PUBREL) ? 1 : 0;
    3394:	91 e0       	ldi	r25, 0x01	; 1
    3396:	26 30       	cpi	r18, 0x06	; 6
    3398:	09 f0       	breq	.+2      	; 0x339c <MQTTSerialize_ack+0x36>
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	8f 01       	movw	r16, r30
    339e:	93 70       	andi	r25, 0x03	; 3
    33a0:	99 0f       	add	r25, r25
    33a2:	69 7f       	andi	r22, 0xF9	; 249
    33a4:	69 2b       	or	r22, r25
  writeChar(&ptr, header.byte); /* write header */
    33a6:	ce 01       	movw	r24, r28
    33a8:	01 96       	adiw	r24, 0x01	; 1
    33aa:	aa dd       	rcall	.-1196   	; 0x2f00 <writeChar>

  ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
    33ac:	42 e0       	ldi	r20, 0x02	; 2
    33ae:	50 e0       	ldi	r21, 0x00	; 0
    33b0:	60 e0       	ldi	r22, 0x00	; 0
    33b2:	70 e0       	ldi	r23, 0x00	; 0
    33b4:	89 81       	ldd	r24, Y+1	; 0x01
    33b6:	9a 81       	ldd	r25, Y+2	; 0x02
    33b8:	75 dc       	rcall	.-1814   	; 0x2ca4 <MQTTPacket_encode>
    33ba:	29 81       	ldd	r18, Y+1	; 0x01
    33bc:	3a 81       	ldd	r19, Y+2	; 0x02
    33be:	62 0f       	add	r22, r18
    33c0:	73 1f       	adc	r23, r19
    33c2:	7a 83       	std	Y+2, r23	; 0x02
    33c4:	69 83       	std	Y+1, r22	; 0x01
  writeInt(&ptr, packetid);
    33c6:	a7 01       	movw	r20, r14
    33c8:	60 e0       	ldi	r22, 0x00	; 0
    33ca:	70 e0       	ldi	r23, 0x00	; 0
    33cc:	ce 01       	movw	r24, r28
    33ce:	01 96       	adiw	r24, 0x01	; 1
    33d0:	a1 dd       	rcall	.-1214   	; 0x2f14 <writeInt>
  rc = ptr - buf;
    33d2:	69 81       	ldd	r22, Y+1	; 0x01
    33d4:	7a 81       	ldd	r23, Y+2	; 0x02
    33d6:	60 1b       	sub	r22, r16
    33d8:	71 0b       	sbc	r23, r17
    33da:	07 2e       	mov	r0, r23
    33dc:	00 0c       	add	r0, r0
    33de:	88 0b       	sbc	r24, r24
    33e0:	99 0b       	sbc	r25, r25
    33e2:	04 c0       	rjmp	.+8      	; 0x33ec <MQTTSerialize_ack+0x86>

  FUNC_ENTRY;

  if (buflen < 4)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    33e4:	6e ef       	ldi	r22, 0xFE	; 254
    33e6:	7f ef       	ldi	r23, 0xFF	; 255
    33e8:	8f ef       	ldi	r24, 0xFF	; 255
    33ea:	9f ef       	ldi	r25, 0xFF	; 255
  writeInt(&ptr, packetid);
  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    33ec:	0f 90       	pop	r0
    33ee:	0f 90       	pop	r0
    33f0:	df 91       	pop	r29
    33f2:	cf 91       	pop	r28
    33f4:	1f 91       	pop	r17
    33f6:	0f 91       	pop	r16
    33f8:	ff 90       	pop	r15
    33fa:	ef 90       	pop	r14
    33fc:	08 95       	ret

000033fe <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
    33fe:	4f 92       	push	r4
    3400:	5f 92       	push	r5
    3402:	6f 92       	push	r6
    3404:	7f 92       	push	r7
    3406:	8f 92       	push	r8
    3408:	9f 92       	push	r9
    340a:	af 92       	push	r10
    340c:	bf 92       	push	r11
    340e:	cf 92       	push	r12
    3410:	df 92       	push	r13
    3412:	ef 92       	push	r14
    3414:	ff 92       	push	r15
    3416:	cf 93       	push	r28
    3418:	df 93       	push	r29
  int32_t len = 2; /* packetid */

  for (int32_t i = 0; i < count; ++i)
    341a:	16 16       	cp	r1, r22
    341c:	17 06       	cpc	r1, r23
    341e:	18 06       	cpc	r1, r24
    3420:	19 06       	cpc	r1, r25
    3422:	54 f5       	brge	.+84     	; 0x3478 <MQTTSerialize_subscribeLength+0x7a>
    3424:	2b 01       	movw	r4, r22
    3426:	3c 01       	movw	r6, r24
    3428:	c4 2f       	mov	r28, r20
    342a:	d5 2f       	mov	r29, r21
    342c:	c1 2c       	mov	r12, r1
    342e:	d1 2c       	mov	r13, r1
    3430:	76 01       	movw	r14, r12
    3432:	81 2c       	mov	r8, r1
    3434:	91 2c       	mov	r9, r1
    3436:	54 01       	movw	r10, r8
    3438:	68 94       	set
    343a:	81 f8       	bld	r8, 1
    len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
    343c:	28 81       	ld	r18, Y
    343e:	39 81       	ldd	r19, Y+1	; 0x01
    3440:	4a 81       	ldd	r20, Y+2	; 0x02
    3442:	5b 81       	ldd	r21, Y+3	; 0x03
    3444:	6c 81       	ldd	r22, Y+4	; 0x04
    3446:	7d 81       	ldd	r23, Y+5	; 0x05
    3448:	8e 81       	ldd	r24, Y+6	; 0x06
    344a:	9f 81       	ldd	r25, Y+7	; 0x07
    344c:	4a de       	rcall	.-876    	; 0x30e2 <MQTTstrlen>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	03 96       	adiw	r24, 0x03	; 3
    3454:	a1 1d       	adc	r26, r1
    3456:	b1 1d       	adc	r27, r1
    3458:	88 0e       	add	r8, r24
    345a:	99 1e       	adc	r9, r25
    345c:	aa 1e       	adc	r10, r26
    345e:	bb 1e       	adc	r11, r27
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
  int32_t len = 2; /* packetid */

  for (int32_t i = 0; i < count; ++i)
    3460:	8f ef       	ldi	r24, 0xFF	; 255
    3462:	c8 1a       	sub	r12, r24
    3464:	d8 0a       	sbc	r13, r24
    3466:	e8 0a       	sbc	r14, r24
    3468:	f8 0a       	sbc	r15, r24
    346a:	28 96       	adiw	r28, 0x08	; 8
    346c:	4c 14       	cp	r4, r12
    346e:	5d 04       	cpc	r5, r13
    3470:	6e 04       	cpc	r6, r14
    3472:	7f 04       	cpc	r7, r15
    3474:	19 f7       	brne	.-58     	; 0x343c <MQTTSerialize_subscribeLength+0x3e>
    3476:	05 c0       	rjmp	.+10     	; 0x3482 <MQTTSerialize_subscribeLength+0x84>
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
  int32_t len = 2; /* packetid */
    3478:	81 2c       	mov	r8, r1
    347a:	91 2c       	mov	r9, r1
    347c:	54 01       	movw	r10, r8
    347e:	68 94       	set
    3480:	81 f8       	bld	r8, 1

  for (int32_t i = 0; i < count; ++i)
    len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
	
  return len;
}
    3482:	c5 01       	movw	r24, r10
    3484:	b4 01       	movw	r22, r8
    3486:	df 91       	pop	r29
    3488:	cf 91       	pop	r28
    348a:	ff 90       	pop	r15
    348c:	ef 90       	pop	r14
    348e:	df 90       	pop	r13
    3490:	cf 90       	pop	r12
    3492:	bf 90       	pop	r11
    3494:	af 90       	pop	r10
    3496:	9f 90       	pop	r9
    3498:	8f 90       	pop	r8
    349a:	7f 90       	pop	r7
    349c:	6f 90       	pop	r6
    349e:	5f 90       	pop	r5
    34a0:	4f 90       	pop	r4
    34a2:	08 95       	ret

000034a4 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int32_t MQTTSerialize_subscribe(uint8_t* buf, int32_t buflen, uint8_t dup, uint16_t packetid, int32_t count,
		MQTTString topicFilters[], int32_t requestedQoSs[])
{
    34a4:	2f 92       	push	r2
    34a6:	3f 92       	push	r3
    34a8:	4f 92       	push	r4
    34aa:	5f 92       	push	r5
    34ac:	6f 92       	push	r6
    34ae:	7f 92       	push	r7
    34b0:	8f 92       	push	r8
    34b2:	9f 92       	push	r9
    34b4:	af 92       	push	r10
    34b6:	bf 92       	push	r11
    34b8:	cf 92       	push	r12
    34ba:	df 92       	push	r13
    34bc:	ef 92       	push	r14
    34be:	ff 92       	push	r15
    34c0:	0f 93       	push	r16
    34c2:	1f 93       	push	r17
    34c4:	cf 93       	push	r28
    34c6:	df 93       	push	r29
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
    34cc:	28 97       	sbiw	r28, 0x08	; 8
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	f8 94       	cli
    34d2:	de bf       	out	0x3e, r29	; 62
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	cd bf       	out	0x3d, r28	; 61
    34d8:	9c 83       	std	Y+4, r25	; 0x04
    34da:	8b 83       	std	Y+3, r24	; 0x03
    34dc:	4d 83       	std	Y+5, r20	; 0x05
    34de:	5e 83       	std	Y+6, r21	; 0x06
    34e0:	6f 83       	std	Y+7, r22	; 0x07
    34e2:	78 87       	std	Y+8, r23	; 0x08
    34e4:	72 2e       	mov	r7, r18
    34e6:	16 01       	movw	r2, r12
    34e8:	27 01       	movw	r4, r14
  uint8_t *ptr = buf;
    34ea:	9a 83       	std	Y+2, r25	; 0x02
    34ec:	89 83       	std	Y+1, r24	; 0x01
  int32_t rem_len = 0;
  int32_t rc = 0;

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
    34ee:	4a 2d       	mov	r20, r10
    34f0:	5b 2d       	mov	r21, r11
    34f2:	c7 01       	movw	r24, r14
    34f4:	b6 01       	movw	r22, r12
    34f6:	83 df       	rcall	.-250    	; 0x33fe <MQTTSerialize_subscribeLength>
    34f8:	6b 01       	movw	r12, r22
    34fa:	7c 01       	movw	r14, r24
    34fc:	b0 dc       	rcall	.-1696   	; 0x2e5e <MQTTPacket_len>
    34fe:	2d 81       	ldd	r18, Y+5	; 0x05
    3500:	3e 81       	ldd	r19, Y+6	; 0x06
    3502:	4f 81       	ldd	r20, Y+7	; 0x07
    3504:	58 85       	ldd	r21, Y+8	; 0x08
    3506:	26 17       	cp	r18, r22
    3508:	37 07       	cpc	r19, r23
    350a:	48 07       	cpc	r20, r24
    350c:	59 07       	cpc	r21, r25
    350e:	0c f4       	brge	.+2      	; 0x3512 <MQTTSerialize_subscribe+0x6e>
    3510:	51 c0       	rjmp	.+162    	; 0x35b4 <MQTTSerialize_subscribe+0x110>
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.byte = 0;
  header.bits.type = SUBSCRIBE;
    3512:	60 e8       	ldi	r22, 0x80	; 128
  header.bits.dup = dup;
    3514:	70 fa       	bst	r7, 0
    3516:	63 f9       	bld	r22, 3
  header.bits.qos = 1;
    3518:	69 7f       	andi	r22, 0xF9	; 249
    351a:	62 60       	ori	r22, 0x02	; 2
  writeChar(&ptr, header.byte); /* write header */
    351c:	ce 01       	movw	r24, r28
    351e:	01 96       	adiw	r24, 0x01	; 1
    3520:	ef dc       	rcall	.-1570   	; 0x2f00 <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    3522:	b7 01       	movw	r22, r14
    3524:	a6 01       	movw	r20, r12
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	9a 81       	ldd	r25, Y+2	; 0x02
    352a:	bc db       	rcall	.-2184   	; 0x2ca4 <MQTTPacket_encode>
    352c:	29 81       	ldd	r18, Y+1	; 0x01
    352e:	3a 81       	ldd	r19, Y+2	; 0x02
    3530:	62 0f       	add	r22, r18
    3532:	73 1f       	adc	r23, r19
    3534:	7a 83       	std	Y+2, r23	; 0x02
    3536:	69 83       	std	Y+1, r22	; 0x01

  writeInt(&ptr, packetid);
    3538:	a8 01       	movw	r20, r16
    353a:	60 e0       	ldi	r22, 0x00	; 0
    353c:	70 e0       	ldi	r23, 0x00	; 0
    353e:	ce 01       	movw	r24, r28
    3540:	01 96       	adiw	r24, 0x01	; 1
    3542:	e8 dc       	rcall	.-1584   	; 0x2f14 <writeInt>

  for (int32_t i = 0; i < count; ++i)
    3544:	12 14       	cp	r1, r2
    3546:	13 04       	cpc	r1, r3
    3548:	14 04       	cpc	r1, r4
    354a:	15 04       	cpc	r1, r5
    354c:	44 f5       	brge	.+80     	; 0x359e <MQTTSerialize_subscribe+0xfa>
    354e:	ea 2c       	mov	r14, r10
    3550:	fb 2c       	mov	r15, r11
    3552:	68 2c       	mov	r6, r8
    3554:	79 2c       	mov	r7, r9
    3556:	81 2c       	mov	r8, r1
    3558:	91 2c       	mov	r9, r1
    355a:	54 01       	movw	r10, r8
  {
    writeMQTTString(&ptr, topicFilters[i]);
    355c:	f7 01       	movw	r30, r14
    355e:	00 81       	ld	r16, Z
    3560:	11 81       	ldd	r17, Z+1	; 0x01
    3562:	22 81       	ldd	r18, Z+2	; 0x02
    3564:	33 81       	ldd	r19, Z+3	; 0x03
    3566:	44 81       	ldd	r20, Z+4	; 0x04
    3568:	55 81       	ldd	r21, Z+5	; 0x05
    356a:	66 81       	ldd	r22, Z+6	; 0x06
    356c:	77 81       	ldd	r23, Z+7	; 0x07
    356e:	ce 01       	movw	r24, r28
    3570:	01 96       	adiw	r24, 0x01	; 1
    3572:	26 dd       	rcall	.-1460   	; 0x2fc0 <writeMQTTString>
    writeChar(&ptr, requestedQoSs[i]);
    3574:	f3 01       	movw	r30, r6
    3576:	60 81       	ld	r22, Z
    3578:	f4 e0       	ldi	r31, 0x04	; 4
    357a:	6f 0e       	add	r6, r31
    357c:	71 1c       	adc	r7, r1
    357e:	ce 01       	movw	r24, r28
    3580:	01 96       	adiw	r24, 0x01	; 1
    3582:	be dc       	rcall	.-1668   	; 0x2f00 <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;

  writeInt(&ptr, packetid);

  for (int32_t i = 0; i < count; ++i)
    3584:	2f ef       	ldi	r18, 0xFF	; 255
    3586:	82 1a       	sub	r8, r18
    3588:	92 0a       	sbc	r9, r18
    358a:	a2 0a       	sbc	r10, r18
    358c:	b2 0a       	sbc	r11, r18
    358e:	38 e0       	ldi	r19, 0x08	; 8
    3590:	e3 0e       	add	r14, r19
    3592:	f1 1c       	adc	r15, r1
    3594:	28 14       	cp	r2, r8
    3596:	39 04       	cpc	r3, r9
    3598:	4a 04       	cpc	r4, r10
    359a:	5b 04       	cpc	r5, r11
    359c:	f9 f6       	brne	.-66     	; 0x355c <MQTTSerialize_subscribe+0xb8>
  {
    writeMQTTString(&ptr, topicFilters[i]);
    writeChar(&ptr, requestedQoSs[i]);
  }

  rc = ptr - buf;
    359e:	69 81       	ldd	r22, Y+1	; 0x01
    35a0:	7a 81       	ldd	r23, Y+2	; 0x02
    35a2:	4b 81       	ldd	r20, Y+3	; 0x03
    35a4:	5c 81       	ldd	r21, Y+4	; 0x04
    35a6:	64 1b       	sub	r22, r20
    35a8:	75 0b       	sbc	r23, r21
    35aa:	07 2e       	mov	r0, r23
    35ac:	00 0c       	add	r0, r0
    35ae:	88 0b       	sbc	r24, r24
    35b0:	99 0b       	sbc	r25, r25
    35b2:	04 c0       	rjmp	.+8      	; 0x35bc <MQTTSerialize_subscribe+0x118>

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    35b4:	6e ef       	ldi	r22, 0xFE	; 254
    35b6:	7f ef       	ldi	r23, 0xFF	; 255
    35b8:	8f ef       	ldi	r24, 0xFF	; 255
    35ba:	9f ef       	ldi	r25, 0xFF	; 255

  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    35bc:	28 96       	adiw	r28, 0x08	; 8
    35be:	0f b6       	in	r0, 0x3f	; 63
    35c0:	f8 94       	cli
    35c2:	de bf       	out	0x3e, r29	; 62
    35c4:	0f be       	out	0x3f, r0	; 63
    35c6:	cd bf       	out	0x3d, r28	; 61
    35c8:	df 91       	pop	r29
    35ca:	cf 91       	pop	r28
    35cc:	1f 91       	pop	r17
    35ce:	0f 91       	pop	r16
    35d0:	ff 90       	pop	r15
    35d2:	ef 90       	pop	r14
    35d4:	df 90       	pop	r13
    35d6:	cf 90       	pop	r12
    35d8:	bf 90       	pop	r11
    35da:	af 90       	pop	r10
    35dc:	9f 90       	pop	r9
    35de:	8f 90       	pop	r8
    35e0:	7f 90       	pop	r7
    35e2:	6f 90       	pop	r6
    35e4:	5f 90       	pop	r5
    35e6:	4f 90       	pop	r4
    35e8:	3f 90       	pop	r3
    35ea:	2f 90       	pop	r2
    35ec:	08 95       	ret

000035ee <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int32_t MQTTDeserialize_suback(uint16_t* packetid, int32_t maxcount, int32_t* count, int32_t grantedQoSs[], uint8_t* buf, int32_t buflen)
{
    35ee:	4f 92       	push	r4
    35f0:	5f 92       	push	r5
    35f2:	6f 92       	push	r6
    35f4:	7f 92       	push	r7
    35f6:	8f 92       	push	r8
    35f8:	9f 92       	push	r9
    35fa:	af 92       	push	r10
    35fc:	bf 92       	push	r11
    35fe:	cf 92       	push	r12
    3600:	df 92       	push	r13
    3602:	ef 92       	push	r14
    3604:	ff 92       	push	r15
    3606:	0f 93       	push	r16
    3608:	1f 93       	push	r17
    360a:	cf 93       	push	r28
    360c:	df 93       	push	r29
    360e:	00 d0       	rcall	.+0      	; 0x3610 <MQTTDeserialize_suback+0x22>
    3610:	00 d0       	rcall	.+0      	; 0x3612 <MQTTDeserialize_suback+0x24>
    3612:	cd b7       	in	r28, 0x3d	; 61
    3614:	de b7       	in	r29, 0x3e	; 62
    3616:	4c 01       	movw	r8, r24
    3618:	2a 01       	movw	r4, r20
    361a:	3b 01       	movw	r6, r22
    361c:	69 01       	movw	r12, r18
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    361e:	fa 82       	std	Y+2, r15	; 0x02
    3620:	e9 82       	std	Y+1, r14	; 0x01
  int32_t rc = 0;
  int32_t mylen;

  FUNC_ENTRY;

  header.byte = readChar(&curdata);
    3622:	ce 01       	movw	r24, r28
    3624:	01 96       	adiw	r24, 0x01	; 1
    3626:	64 dc       	rcall	.-1848   	; 0x2ef0 <readChar>
  if (header.bits.type != SUBACK)
    3628:	80 7f       	andi	r24, 0xF0	; 240
    362a:	80 39       	cpi	r24, 0x90	; 144
    362c:	09 f0       	breq	.+2      	; 0x3630 <MQTTDeserialize_suback+0x42>
    362e:	5e c0       	rjmp	.+188    	; 0x36ec <MQTTDeserialize_suback+0xfe>
    goto exit;

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    3630:	be 01       	movw	r22, r28
    3632:	6d 5f       	subi	r22, 0xFD	; 253
    3634:	7f 4f       	sbci	r23, 0xFF	; 255
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	9a 81       	ldd	r25, Y+2	; 0x02
    363a:	3f dc       	rcall	.-1922   	; 0x2eba <MQTTPacket_decodeBuf>
    363c:	a9 80       	ldd	r10, Y+1	; 0x01
    363e:	ba 80       	ldd	r11, Y+2	; 0x02
    3640:	a6 0e       	add	r10, r22
    3642:	b7 1e       	adc	r11, r23
    3644:	ba 82       	std	Y+2, r11	; 0x02
    3646:	a9 82       	std	Y+1, r10	; 0x01
  enddata = curdata + mylen;
    3648:	2b 81       	ldd	r18, Y+3	; 0x03
    364a:	3c 81       	ldd	r19, Y+4	; 0x04
    364c:	4d 81       	ldd	r20, Y+5	; 0x05
    364e:	5e 81       	ldd	r21, Y+6	; 0x06

  if (enddata - curdata < 2)
    3650:	22 30       	cpi	r18, 0x02	; 2
    3652:	31 05       	cpc	r19, r1
    3654:	0c f4       	brge	.+2      	; 0x3658 <MQTTDeserialize_suback+0x6a>
    3656:	5a c0       	rjmp	.+180    	; 0x370c <MQTTDeserialize_suback+0x11e>
  header.byte = readChar(&curdata);
  if (header.bits.type != SUBACK)
    goto exit;

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
  enddata = curdata + mylen;
    3658:	a2 0e       	add	r10, r18
    365a:	b3 1e       	adc	r11, r19

  if (enddata - curdata < 2)
    goto exit;

  *packetid = readInt(&curdata);
    365c:	ce 01       	movw	r24, r28
    365e:	01 96       	adiw	r24, 0x01	; 1
    3660:	34 dc       	rcall	.-1944   	; 0x2eca <readInt>
    3662:	f4 01       	movw	r30, r8
    3664:	71 83       	std	Z+1, r23	; 0x01
    3666:	60 83       	st	Z, r22

  *count = 0;
    3668:	f6 01       	movw	r30, r12
    366a:	10 82       	st	Z, r1
    366c:	11 82       	std	Z+1, r1	; 0x01
    366e:	12 82       	std	Z+2, r1	; 0x02
    3670:	13 82       	std	Z+3, r1	; 0x03

  while (curdata < enddata)
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	8a 15       	cp	r24, r10
    3678:	9b 05       	cpc	r25, r11
    367a:	e0 f5       	brcc	.+120    	; 0x36f4 <MQTTDeserialize_suback+0x106>
  {
    if (*count > maxcount)
    367c:	77 20       	and	r7, r7
    367e:	0c f4       	brge	.+2      	; 0x3682 <MQTTDeserialize_suback+0x94>
    3680:	3e c0       	rjmp	.+124    	; 0x36fe <MQTTDeserialize_suback+0x110>
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	dc 01       	movw	r26, r24
    3688:	0a c0       	rjmp	.+20     	; 0x369e <MQTTDeserialize_suback+0xb0>
    368a:	f6 01       	movw	r30, r12
    368c:	80 81       	ld	r24, Z
    368e:	91 81       	ldd	r25, Z+1	; 0x01
    3690:	a2 81       	ldd	r26, Z+2	; 0x02
    3692:	b3 81       	ldd	r27, Z+3	; 0x03
    3694:	48 16       	cp	r4, r24
    3696:	59 06       	cpc	r5, r25
    3698:	6a 06       	cpc	r6, r26
    369a:	7b 06       	cpc	r7, r27
    369c:	a4 f1       	brlt	.+104    	; 0x3706 <MQTTDeserialize_suback+0x118>
    {
      rc = -1;
      goto exit;
    }
    grantedQoSs[(*count)++] = readChar(&curdata);
    369e:	ac 01       	movw	r20, r24
    36a0:	bd 01       	movw	r22, r26
    36a2:	4f 5f       	subi	r20, 0xFF	; 255
    36a4:	5f 4f       	sbci	r21, 0xFF	; 255
    36a6:	6f 4f       	sbci	r22, 0xFF	; 255
    36a8:	7f 4f       	sbci	r23, 0xFF	; 255
    36aa:	f6 01       	movw	r30, r12
    36ac:	40 83       	st	Z, r20
    36ae:	51 83       	std	Z+1, r21	; 0x01
    36b0:	62 83       	std	Z+2, r22	; 0x02
    36b2:	73 83       	std	Z+3, r23	; 0x03
    36b4:	88 0f       	add	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	88 0f       	add	r24, r24
    36ba:	99 1f       	adc	r25, r25
    36bc:	78 01       	movw	r14, r16
    36be:	e8 0e       	add	r14, r24
    36c0:	f9 1e       	adc	r15, r25
    36c2:	ce 01       	movw	r24, r28
    36c4:	01 96       	adiw	r24, 0x01	; 1
    36c6:	14 dc       	rcall	.-2008   	; 0x2ef0 <readChar>
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	a0 e0       	ldi	r26, 0x00	; 0
    36cc:	b0 e0       	ldi	r27, 0x00	; 0
    36ce:	f7 01       	movw	r30, r14
    36d0:	80 83       	st	Z, r24
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	a2 83       	std	Z+2, r26	; 0x02
    36d6:	b3 83       	std	Z+3, r27	; 0x03

  *packetid = readInt(&curdata);

  *count = 0;

  while (curdata < enddata)
    36d8:	89 81       	ldd	r24, Y+1	; 0x01
    36da:	9a 81       	ldd	r25, Y+2	; 0x02
    36dc:	8a 15       	cp	r24, r10
    36de:	9b 05       	cpc	r25, r11
    36e0:	a0 f2       	brcs	.-88     	; 0x368a <MQTTDeserialize_suback+0x9c>
      goto exit;
    }
    grantedQoSs[(*count)++] = readChar(&curdata);
  }

  rc = 1;
    36e2:	61 e0       	ldi	r22, 0x01	; 1
    36e4:	70 e0       	ldi	r23, 0x00	; 0
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	10 c0       	rjmp	.+32     	; 0x370c <MQTTDeserialize_suback+0x11e>
int32_t MQTTDeserialize_suback(uint16_t* packetid, int32_t maxcount, int32_t* count, int32_t grantedQoSs[], uint8_t* buf, int32_t buflen)
{
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
  uint8_t* enddata = NULL;
  int32_t rc = 0;
    36ec:	60 e0       	ldi	r22, 0x00	; 0
    36ee:	70 e0       	ldi	r23, 0x00	; 0
    36f0:	cb 01       	movw	r24, r22
    36f2:	0c c0       	rjmp	.+24     	; 0x370c <MQTTDeserialize_suback+0x11e>
      goto exit;
    }
    grantedQoSs[(*count)++] = readChar(&curdata);
  }

  rc = 1;
    36f4:	61 e0       	ldi	r22, 0x01	; 1
    36f6:	70 e0       	ldi	r23, 0x00	; 0
    36f8:	80 e0       	ldi	r24, 0x00	; 0
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	07 c0       	rjmp	.+14     	; 0x370c <MQTTDeserialize_suback+0x11e>

  while (curdata < enddata)
  {
    if (*count > maxcount)
    {
      rc = -1;
    36fe:	6f ef       	ldi	r22, 0xFF	; 255
    3700:	7f ef       	ldi	r23, 0xFF	; 255
    3702:	cb 01       	movw	r24, r22
    3704:	03 c0       	rjmp	.+6      	; 0x370c <MQTTDeserialize_suback+0x11e>
    3706:	6f ef       	ldi	r22, 0xFF	; 255
    3708:	7f ef       	ldi	r23, 0xFF	; 255
    370a:	cb 01       	movw	r24, r22

  rc = 1;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    370c:	26 96       	adiw	r28, 0x06	; 6
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	de bf       	out	0x3e, r29	; 62
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	cd bf       	out	0x3d, r28	; 61
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	1f 91       	pop	r17
    371e:	0f 91       	pop	r16
    3720:	ff 90       	pop	r15
    3722:	ef 90       	pop	r14
    3724:	df 90       	pop	r13
    3726:	cf 90       	pop	r12
    3728:	bf 90       	pop	r11
    372a:	af 90       	pop	r10
    372c:	9f 90       	pop	r9
    372e:	8f 90       	pop	r8
    3730:	7f 90       	pop	r7
    3732:	6f 90       	pop	r6
    3734:	5f 90       	pop	r5
    3736:	4f 90       	pop	r4
    3738:	08 95       	ret

0000373a <w5500_read>:
  n->mqttwrite = w5500_write;
  n->disconnect = w5500_disconnect;
}

int32_t w5500_read(Network* n, uint8_t* buffer, int32_t len, int32_t timeout_ms)
{
    373a:	cf 92       	push	r12
    373c:	df 92       	push	r13
    373e:	ef 92       	push	r14
    3740:	ff 92       	push	r15
    3742:	0f 93       	push	r16
    3744:	1f 93       	push	r17
    3746:	cf 93       	push	r28
    3748:	df 93       	push	r29
    374a:	ec 01       	movw	r28, r24
    374c:	8b 01       	movw	r16, r22
    374e:	69 01       	movw	r12, r18
    3750:	7a 01       	movw	r14, r20
  if ((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket) > 0))
    3752:	88 81       	ld	r24, Y
    3754:	99 81       	ldd	r25, Y+1	; 0x01
    3756:	aa 81       	ldd	r26, Y+2	; 0x02
    3758:	bb 81       	ldd	r27, Y+3	; 0x03
    375a:	88 0f       	add	r24, r24
    375c:	99 1f       	adc	r25, r25
    375e:	aa 1f       	adc	r26, r26
    3760:	bb 1f       	adc	r27, r27
    3762:	88 0f       	add	r24, r24
    3764:	99 1f       	adc	r25, r25
    3766:	aa 1f       	adc	r26, r26
    3768:	bb 1f       	adc	r27, r27
    376a:	01 96       	adiw	r24, 0x01	; 1
    376c:	a1 1d       	adc	r26, r1
    376e:	b1 1d       	adc	r27, r1
    3770:	88 0f       	add	r24, r24
    3772:	99 1f       	adc	r25, r25
    3774:	aa 1f       	adc	r26, r26
    3776:	bb 1f       	adc	r27, r27
    3778:	88 0f       	add	r24, r24
    377a:	99 1f       	adc	r25, r25
    377c:	aa 1f       	adc	r26, r26
    377e:	bb 1f       	adc	r27, r27
    3780:	88 0f       	add	r24, r24
    3782:	99 1f       	adc	r25, r25
    3784:	aa 1f       	adc	r26, r26
    3786:	bb 1f       	adc	r27, r27
    3788:	bc 01       	movw	r22, r24
    378a:	cd 01       	movw	r24, r26
    378c:	7d 5f       	subi	r23, 0xFD	; 253
    378e:	8f 4f       	sbci	r24, 0xFF	; 255
    3790:	9f 4f       	sbci	r25, 0xFF	; 255
    3792:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <WIZCHIP_READ>
    3796:	87 31       	cpi	r24, 0x17	; 23
    3798:	59 f4       	brne	.+22     	; 0x37b0 <w5500_read+0x76>
    379a:	88 81       	ld	r24, Y
    379c:	0e 94 bd 08 	call	0x117a	; 0x117a <getSn_RX_RSR>
    37a0:	89 2b       	or	r24, r25
    37a2:	51 f0       	breq	.+20     	; 0x37b8 <w5500_read+0x7e>
    return recv(n->my_socket, buffer, len);
    37a4:	a6 01       	movw	r20, r12
    37a6:	b8 01       	movw	r22, r16
    37a8:	88 81       	ld	r24, Y
    37aa:	0e 94 82 05 	call	0xb04	; 0xb04 <recv>
    37ae:	07 c0       	rjmp	.+14     	; 0x37be <w5500_read+0x84>
  
  return 0;
    37b0:	60 e0       	ldi	r22, 0x00	; 0
    37b2:	70 e0       	ldi	r23, 0x00	; 0
    37b4:	cb 01       	movw	r24, r22
    37b6:	03 c0       	rjmp	.+6      	; 0x37be <w5500_read+0x84>
    37b8:	60 e0       	ldi	r22, 0x00	; 0
    37ba:	70 e0       	ldi	r23, 0x00	; 0
    37bc:	cb 01       	movw	r24, r22
}
    37be:	df 91       	pop	r29
    37c0:	cf 91       	pop	r28
    37c2:	1f 91       	pop	r17
    37c4:	0f 91       	pop	r16
    37c6:	ff 90       	pop	r15
    37c8:	ef 90       	pop	r14
    37ca:	df 90       	pop	r13
    37cc:	cf 90       	pop	r12
    37ce:	08 95       	ret

000037d0 <w5500_write>:

int32_t w5500_write(Network* n, uint8_t* buffer, int32_t len, int32_t timeout_ms)
{
    37d0:	cf 92       	push	r12
    37d2:	df 92       	push	r13
    37d4:	ef 92       	push	r14
    37d6:	ff 92       	push	r15
    37d8:	0f 93       	push	r16
    37da:	1f 93       	push	r17
    37dc:	cf 93       	push	r28
    37de:	df 93       	push	r29
    37e0:	ec 01       	movw	r28, r24
    37e2:	8b 01       	movw	r16, r22
    37e4:	69 01       	movw	r12, r18
    37e6:	7a 01       	movw	r14, r20
  if (getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
    37e8:	88 81       	ld	r24, Y
    37ea:	99 81       	ldd	r25, Y+1	; 0x01
    37ec:	aa 81       	ldd	r26, Y+2	; 0x02
    37ee:	bb 81       	ldd	r27, Y+3	; 0x03
    37f0:	88 0f       	add	r24, r24
    37f2:	99 1f       	adc	r25, r25
    37f4:	aa 1f       	adc	r26, r26
    37f6:	bb 1f       	adc	r27, r27
    37f8:	88 0f       	add	r24, r24
    37fa:	99 1f       	adc	r25, r25
    37fc:	aa 1f       	adc	r26, r26
    37fe:	bb 1f       	adc	r27, r27
    3800:	01 96       	adiw	r24, 0x01	; 1
    3802:	a1 1d       	adc	r26, r1
    3804:	b1 1d       	adc	r27, r1
    3806:	88 0f       	add	r24, r24
    3808:	99 1f       	adc	r25, r25
    380a:	aa 1f       	adc	r26, r26
    380c:	bb 1f       	adc	r27, r27
    380e:	88 0f       	add	r24, r24
    3810:	99 1f       	adc	r25, r25
    3812:	aa 1f       	adc	r26, r26
    3814:	bb 1f       	adc	r27, r27
    3816:	88 0f       	add	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	aa 1f       	adc	r26, r26
    381c:	bb 1f       	adc	r27, r27
    381e:	bc 01       	movw	r22, r24
    3820:	cd 01       	movw	r24, r26
    3822:	7d 5f       	subi	r23, 0xFD	; 253
    3824:	8f 4f       	sbci	r24, 0xFF	; 255
    3826:	9f 4f       	sbci	r25, 0xFF	; 255
    3828:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <WIZCHIP_READ>
    382c:	87 31       	cpi	r24, 0x17	; 23
    382e:	31 f4       	brne	.+12     	; 0x383c <w5500_write+0x6c>
    return send(n->my_socket, buffer, len);
    3830:	a6 01       	movw	r20, r12
    3832:	b8 01       	movw	r22, r16
    3834:	88 81       	ld	r24, Y
    3836:	0e 94 77 04 	call	0x8ee	; 0x8ee <send>
    383a:	03 c0       	rjmp	.+6      	; 0x3842 <w5500_write+0x72>
  
  return 0;
    383c:	60 e0       	ldi	r22, 0x00	; 0
    383e:	70 e0       	ldi	r23, 0x00	; 0
    3840:	cb 01       	movw	r24, r22
}
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	1f 91       	pop	r17
    3848:	0f 91       	pop	r16
    384a:	ff 90       	pop	r15
    384c:	ef 90       	pop	r14
    384e:	df 90       	pop	r13
    3850:	cf 90       	pop	r12
    3852:	08 95       	ret

00003854 <w5500_disconnect>:

void w5500_disconnect(Network* n)
{
  disconnect(n->my_socket);
    3854:	fc 01       	movw	r30, r24
    3856:	80 81       	ld	r24, Z
    3858:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <disconnect>
    385c:	08 95       	ret

0000385e <expired>:
  MilliTimer++;
}
*/

int8_t expired(Timer* timer)
{
    385e:	cf 92       	push	r12
    3860:	df 92       	push	r13
    3862:	ef 92       	push	r14
    3864:	ff 92       	push	r15
  int32_t left = (timer->end_time) - millis();
    3866:	fc 01       	movw	r30, r24
    3868:	c4 80       	ldd	r12, Z+4	; 0x04
    386a:	d5 80       	ldd	r13, Z+5	; 0x05
    386c:	e6 80       	ldd	r14, Z+6	; 0x06
    386e:	f7 80       	ldd	r15, Z+7	; 0x07
    3870:	57 d3       	rcall	.+1710   	; 0x3f20 <millis>
  return (left < 0);
    3872:	a7 01       	movw	r20, r14
    3874:	96 01       	movw	r18, r12
    3876:	26 1b       	sub	r18, r22
    3878:	37 0b       	sbc	r19, r23
    387a:	48 0b       	sbc	r20, r24
    387c:	59 0b       	sbc	r21, r25
    387e:	da 01       	movw	r26, r20
    3880:	c9 01       	movw	r24, r18
    3882:	88 27       	eor	r24, r24
    3884:	b7 fd       	sbrc	r27, 7
    3886:	83 95       	inc	r24
    3888:	99 27       	eor	r25, r25
    388a:	aa 27       	eor	r26, r26
    388c:	bb 27       	eor	r27, r27
}
    388e:	ff 90       	pop	r15
    3890:	ef 90       	pop	r14
    3892:	df 90       	pop	r13
    3894:	cf 90       	pop	r12
    3896:	08 95       	ret

00003898 <countdown_ms>:

void countdown_ms(Timer* timer, uint32_t timeout)
{
    3898:	cf 92       	push	r12
    389a:	df 92       	push	r13
    389c:	ef 92       	push	r14
    389e:	ff 92       	push	r15
    38a0:	cf 93       	push	r28
    38a2:	df 93       	push	r29
    38a4:	ec 01       	movw	r28, r24
    38a6:	6a 01       	movw	r12, r20
    38a8:	7b 01       	movw	r14, r22
	timer->end_time = millis() + timeout;
    38aa:	3a d3       	rcall	.+1652   	; 0x3f20 <millis>
    38ac:	c6 0e       	add	r12, r22
    38ae:	d7 1e       	adc	r13, r23
    38b0:	e8 1e       	adc	r14, r24
    38b2:	f9 1e       	adc	r15, r25
    38b4:	cc 82       	std	Y+4, r12	; 0x04
    38b6:	dd 82       	std	Y+5, r13	; 0x05
    38b8:	ee 82       	std	Y+6, r14	; 0x06
    38ba:	ff 82       	std	Y+7, r15	; 0x07
}
    38bc:	df 91       	pop	r29
    38be:	cf 91       	pop	r28
    38c0:	ff 90       	pop	r15
    38c2:	ef 90       	pop	r14
    38c4:	df 90       	pop	r13
    38c6:	cf 90       	pop	r12
    38c8:	08 95       	ret

000038ca <countdown>:

void countdown(Timer* timer, uint32_t timeout)
{
    38ca:	8f 92       	push	r8
    38cc:	9f 92       	push	r9
    38ce:	af 92       	push	r10
    38d0:	bf 92       	push	r11
    38d2:	cf 92       	push	r12
    38d4:	df 92       	push	r13
    38d6:	ef 92       	push	r14
    38d8:	ff 92       	push	r15
    38da:	cf 93       	push	r28
    38dc:	df 93       	push	r29
    38de:	ec 01       	movw	r28, r24
    38e0:	4a 01       	movw	r8, r20
    38e2:	5b 01       	movw	r10, r22
  timer->end_time = millis() + (timeout * 1000UL);
    38e4:	1d d3       	rcall	.+1594   	; 0x3f20 <millis>
    38e6:	6b 01       	movw	r12, r22
    38e8:	7c 01       	movw	r14, r24
    38ea:	a8 ee       	ldi	r26, 0xE8	; 232
    38ec:	b3 e0       	ldi	r27, 0x03	; 3
    38ee:	a5 01       	movw	r20, r10
    38f0:	94 01       	movw	r18, r8
    38f2:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <__muluhisi3>
    38f6:	c6 0e       	add	r12, r22
    38f8:	d7 1e       	adc	r13, r23
    38fa:	e8 1e       	adc	r14, r24
    38fc:	f9 1e       	adc	r15, r25
    38fe:	cc 82       	std	Y+4, r12	; 0x04
    3900:	dd 82       	std	Y+5, r13	; 0x05
    3902:	ee 82       	std	Y+6, r14	; 0x06
    3904:	ff 82       	std	Y+7, r15	; 0x07
}
    3906:	df 91       	pop	r29
    3908:	cf 91       	pop	r28
    390a:	ff 90       	pop	r15
    390c:	ef 90       	pop	r14
    390e:	df 90       	pop	r13
    3910:	cf 90       	pop	r12
    3912:	bf 90       	pop	r11
    3914:	af 90       	pop	r10
    3916:	9f 90       	pop	r9
    3918:	8f 90       	pop	r8
    391a:	08 95       	ret

0000391c <left_ms>:

int32_t left_ms(Timer* timer)
{
    391c:	cf 92       	push	r12
    391e:	df 92       	push	r13
    3920:	ef 92       	push	r14
    3922:	ff 92       	push	r15
  int32_t left = timer->end_time - millis();
    3924:	fc 01       	movw	r30, r24
    3926:	c4 80       	ldd	r12, Z+4	; 0x04
    3928:	d5 80       	ldd	r13, Z+5	; 0x05
    392a:	e6 80       	ldd	r14, Z+6	; 0x06
    392c:	f7 80       	ldd	r15, Z+7	; 0x07
    392e:	f8 d2       	rcall	.+1520   	; 0x3f20 <millis>
  return (left < 0) ? 0 : left;
    3930:	a7 01       	movw	r20, r14
    3932:	96 01       	movw	r18, r12
    3934:	26 1b       	sub	r18, r22
    3936:	37 0b       	sbc	r19, r23
    3938:	48 0b       	sbc	r20, r24
    393a:	59 0b       	sbc	r21, r25
    393c:	ca 01       	movw	r24, r20
    393e:	b9 01       	movw	r22, r18
    3940:	1a f4       	brpl	.+6      	; 0x3948 <left_ms+0x2c>
    3942:	60 e0       	ldi	r22, 0x00	; 0
    3944:	70 e0       	ldi	r23, 0x00	; 0
    3946:	cb 01       	movw	r24, r22
}
    3948:	ff 90       	pop	r15
    394a:	ef 90       	pop	r14
    394c:	df 90       	pop	r13
    394e:	cf 90       	pop	r12
    3950:	08 95       	ret

00003952 <InitTimer>:

void InitTimer(Timer* timer)
{
  timer->end_time = 0;
    3952:	fc 01       	movw	r30, r24
    3954:	14 82       	std	Z+4, r1	; 0x04
    3956:	15 82       	std	Z+5, r1	; 0x05
    3958:	16 82       	std	Z+6, r1	; 0x06
    395a:	17 82       	std	Z+7, r1	; 0x07
    395c:	08 95       	ret

0000395e <NewNetwork>:
}


void NewNetwork(Network* n)
{
    395e:	fc 01       	movw	r30, r24
  //n->my_socket = 0; //initialized outside actually..
  n->mqttread = w5500_read;
    3960:	8d e9       	ldi	r24, 0x9D	; 157
    3962:	9b e1       	ldi	r25, 0x1B	; 27
    3964:	95 83       	std	Z+5, r25	; 0x05
    3966:	84 83       	std	Z+4, r24	; 0x04
  n->mqttwrite = w5500_write;
    3968:	88 ee       	ldi	r24, 0xE8	; 232
    396a:	9b e1       	ldi	r25, 0x1B	; 27
    396c:	97 83       	std	Z+7, r25	; 0x07
    396e:	86 83       	std	Z+6, r24	; 0x06
  n->disconnect = w5500_disconnect;
    3970:	8a e2       	ldi	r24, 0x2A	; 42
    3972:	9c e1       	ldi	r25, 0x1C	; 28
    3974:	91 87       	std	Z+9, r25	; 0x09
    3976:	80 87       	std	Z+8, r24	; 0x08
    3978:	08 95       	ret

0000397a <ConnectNetwork>:
{
  disconnect(n->my_socket);
}

int32_t ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
    397a:	ef 92       	push	r14
    397c:	ff 92       	push	r15
    397e:	0f 93       	push	r16
    3980:	1f 93       	push	r17
    3982:	cf 93       	push	r28
    3984:	df 93       	push	r29
    3986:	ec 01       	movw	r28, r24
    3988:	8b 01       	movw	r16, r22
    398a:	7a 01       	movw	r14, r20
  socket(n->my_socket, Sn_MR_TCP, 12345, 0);
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	49 e3       	ldi	r20, 0x39	; 57
    3990:	50 e3       	ldi	r21, 0x30	; 48
    3992:	61 e0       	ldi	r22, 0x01	; 1
    3994:	88 81       	ld	r24, Y
    3996:	0e 94 14 02 	call	0x428	; 0x428 <socket>
  connect(n->my_socket, ip, port);
    399a:	a7 01       	movw	r20, r14
    399c:	b8 01       	movw	r22, r16
    399e:	88 81       	ld	r24, Y
    39a0:	0e 94 16 03 	call	0x62c	; 0x62c <connect>

  return 0;
}
    39a4:	60 e0       	ldi	r22, 0x00	; 0
    39a6:	70 e0       	ldi	r23, 0x00	; 0
    39a8:	cb 01       	movw	r24, r22
    39aa:	df 91       	pop	r29
    39ac:	cf 91       	pop	r28
    39ae:	1f 91       	pop	r17
    39b0:	0f 91       	pop	r16
    39b2:	ff 90       	pop	r15
    39b4:	ef 90       	pop	r14
    39b6:	08 95       	ret

000039b8 <appDataConf>:
    39b8:	10 92 94 06 	sts	0x0694, r1	; 0x800694 <appDataReqBusy>
    39bc:	08 95       	ret

000039be <cs_sel>:
    39be:	5e 98       	cbi	0x0b, 6	; 11
    39c0:	08 95       	ret

000039c2 <cs_desel>:
    39c2:	5e 9a       	sbi	0x0b, 6	; 11
    39c4:	08 95       	ret

000039c6 <spi_rb>:
    39c6:	1e bc       	out	0x2e, r1	; 46
    39c8:	0d b4       	in	r0, 0x2d	; 45
    39ca:	07 fe       	sbrs	r0, 7
    39cc:	fd cf       	rjmp	.-6      	; 0x39c8 <spi_rb+0x2>
    39ce:	8e b5       	in	r24, 0x2e	; 46
    39d0:	08 95       	ret

000039d2 <spi_wb>:
    39d2:	8e bd       	out	0x2e, r24	; 46
    39d4:	0d b4       	in	r0, 0x2d	; 45
    39d6:	07 fe       	sbrs	r0, 7
    39d8:	fd cf       	rjmp	.-6      	; 0x39d4 <spi_wb+0x2>
    39da:	08 95       	ret

000039dc <spi_rb_burst>:
    39dc:	61 15       	cp	r22, r1
    39de:	71 05       	cpc	r23, r1
    39e0:	61 f0       	breq	.+24     	; 0x39fa <spi_rb_burst+0x1e>
    39e2:	fc 01       	movw	r30, r24
    39e4:	68 0f       	add	r22, r24
    39e6:	79 1f       	adc	r23, r25
    39e8:	1e bc       	out	0x2e, r1	; 46
    39ea:	0d b4       	in	r0, 0x2d	; 45
    39ec:	07 fe       	sbrs	r0, 7
    39ee:	fd cf       	rjmp	.-6      	; 0x39ea <spi_rb_burst+0xe>
    39f0:	9e b5       	in	r25, 0x2e	; 46
    39f2:	91 93       	st	Z+, r25
    39f4:	e6 17       	cp	r30, r22
    39f6:	f7 07       	cpc	r31, r23
    39f8:	b9 f7       	brne	.-18     	; 0x39e8 <spi_rb_burst+0xc>
    39fa:	08 95       	ret

000039fc <spi_wb_burst>:
    39fc:	61 15       	cp	r22, r1
    39fe:	71 05       	cpc	r23, r1
    3a00:	59 f0       	breq	.+22     	; 0x3a18 <spi_wb_burst+0x1c>
    3a02:	fc 01       	movw	r30, r24
    3a04:	68 0f       	add	r22, r24
    3a06:	79 1f       	adc	r23, r25
    3a08:	91 91       	ld	r25, Z+
    3a0a:	9e bd       	out	0x2e, r25	; 46
    3a0c:	0d b4       	in	r0, 0x2d	; 45
    3a0e:	07 fe       	sbrs	r0, 7
    3a10:	fd cf       	rjmp	.-6      	; 0x3a0c <spi_wb_burst+0x10>
    3a12:	e6 17       	cp	r30, r22
    3a14:	f7 07       	cpc	r31, r23
    3a16:	c1 f7       	brne	.-16     	; 0x3a08 <spi_wb_burst+0xc>
    3a18:	08 95       	ret

00003a1a <appSendData>:
    3a1a:	cf 93       	push	r28
    3a1c:	df 93       	push	r29
    3a1e:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <appDataReqBusy>
    3a22:	81 11       	cpse	r24, r1
    3a24:	24 c0       	rjmp	.+72     	; 0x3a6e <appSendData+0x54>
    3a26:	c0 91 b9 05 	lds	r28, 0x05B9	; 0x8005b9 <appUartBufferPtr>
    3a2a:	cc 23       	and	r28, r28
    3a2c:	01 f1       	breq	.+64     	; 0x3a6e <appSendData+0x54>
    3a2e:	4c 2f       	mov	r20, r28
    3a30:	50 e0       	ldi	r21, 0x00	; 0
    3a32:	6a eb       	ldi	r22, 0xBA	; 186
    3a34:	75 e0       	ldi	r23, 0x05	; 5
    3a36:	87 e2       	ldi	r24, 0x27	; 39
    3a38:	96 e0       	ldi	r25, 0x06	; 6
    3a3a:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <memcpy>
    3a3e:	e5 e9       	ldi	r30, 0x95	; 149
    3a40:	f6 e0       	ldi	r31, 0x06	; 6
    3a42:	16 82       	std	Z+6, r1	; 0x06
    3a44:	15 82       	std	Z+5, r1	; 0x05
    3a46:	d1 e0       	ldi	r29, 0x01	; 1
    3a48:	d7 83       	std	Z+7, r29	; 0x07
    3a4a:	d0 87       	std	Z+8, r29	; 0x08
    3a4c:	82 e0       	ldi	r24, 0x02	; 2
    3a4e:	81 87       	std	Z+9, r24	; 0x09
    3a50:	87 e2       	ldi	r24, 0x27	; 39
    3a52:	96 e0       	ldi	r25, 0x06	; 6
    3a54:	93 87       	std	Z+11, r25	; 0x0b
    3a56:	82 87       	std	Z+10, r24	; 0x0a
    3a58:	c4 87       	std	Z+12, r28	; 0x0c
    3a5a:	8c ed       	ldi	r24, 0xDC	; 220
    3a5c:	9c e1       	ldi	r25, 0x1C	; 28
    3a5e:	96 87       	std	Z+14, r25	; 0x0e
    3a60:	85 87       	std	Z+13, r24	; 0x0d
    3a62:	cf 01       	movw	r24, r30
    3a64:	3f d6       	rcall	.+3198   	; 0x46e4 <NWK_DataReq>
    3a66:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <appUartBufferPtr>
    3a6a:	d0 93 94 06 	sts	0x0694, r29	; 0x800694 <appDataReqBusy>
    3a6e:	df 91       	pop	r29
    3a70:	cf 91       	pop	r28
    3a72:	08 95       	ret

00003a74 <appTimerHandler>:
    3a74:	d2 cf       	rjmp	.-92     	; 0x3a1a <appSendData>
    3a76:	08 95       	ret

00003a78 <APP_TaskHandler>:
    3a78:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <appState>
    3a7c:	81 11       	cpse	r24, r1
    3a7e:	22 c0       	rjmp	.+68     	; 0x3ac4 <APP_TaskHandler+0x4c>
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	ec d5       	rcall	.+3032   	; 0x465e <NWK_SetAddr>
    3a86:	88 e7       	ldi	r24, 0x78	; 120
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	f0 d5       	rcall	.+3040   	; 0x466c <NWK_SetPanId>
    3a8c:	8f e0       	ldi	r24, 0x0F	; 15
    3a8e:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <PHY_SetChannel>
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	0e 94 56 2b 	call	0x56ac	; 0x56ac <PHY_SetRxState>
    3a98:	65 e1       	ldi	r22, 0x15	; 21
    3a9a:	7f e1       	ldi	r23, 0x1F	; 31
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	ed d5       	rcall	.+3034   	; 0x467a <NWK_OpenEndpoint>
    3aa0:	e6 ea       	ldi	r30, 0xA6	; 166
    3aa2:	f6 e0       	ldi	r31, 0x06	; 6
    3aa4:	84 e1       	ldi	r24, 0x14	; 20
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	a0 e0       	ldi	r26, 0x00	; 0
    3aaa:	b0 e0       	ldi	r27, 0x00	; 0
    3aac:	86 83       	std	Z+6, r24	; 0x06
    3aae:	97 83       	std	Z+7, r25	; 0x07
    3ab0:	a0 87       	std	Z+8, r26	; 0x08
    3ab2:	b1 87       	std	Z+9, r27	; 0x09
    3ab4:	12 86       	std	Z+10, r1	; 0x0a
    3ab6:	8a e3       	ldi	r24, 0x3A	; 58
    3ab8:	9d e1       	ldi	r25, 0x1D	; 29
    3aba:	94 87       	std	Z+12, r25	; 0x0c
    3abc:	83 87       	std	Z+11, r24	; 0x0b
    3abe:	81 e0       	ldi	r24, 0x01	; 1
    3ac0:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <appState>
    3ac4:	08 95       	ret

00003ac6 <HAL_UartBytesReceived>:
    3ac6:	ff 92       	push	r15
    3ac8:	0f 93       	push	r16
    3aca:	1f 93       	push	r17
    3acc:	cf 93       	push	r28
    3ace:	df 93       	push	r29
    3ad0:	8c 01       	movw	r16, r24
    3ad2:	89 2b       	or	r24, r25
    3ad4:	c9 f0       	breq	.+50     	; 0x3b08 <HAL_UartBytesReceived+0x42>
    3ad6:	c0 e0       	ldi	r28, 0x00	; 0
    3ad8:	d0 e0       	ldi	r29, 0x00	; 0
    3ada:	ce d4       	rcall	.+2460   	; 0x4478 <HAL_UartReadByte>
    3adc:	f8 2e       	mov	r15, r24
    3ade:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <appUartBufferPtr>
    3ae2:	8d 36       	cpi	r24, 0x6D	; 109
    3ae4:	09 f4       	brne	.+2      	; 0x3ae8 <HAL_UartBytesReceived+0x22>
    3ae6:	99 df       	rcall	.-206    	; 0x3a1a <appSendData>
    3ae8:	e0 91 b9 05 	lds	r30, 0x05B9	; 0x8005b9 <appUartBufferPtr>
    3aec:	ed 36       	cpi	r30, 0x6D	; 109
    3aee:	40 f4       	brcc	.+16     	; 0x3b00 <HAL_UartBytesReceived+0x3a>
    3af0:	81 e0       	ldi	r24, 0x01	; 1
    3af2:	8e 0f       	add	r24, r30
    3af4:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <appUartBufferPtr>
    3af8:	f0 e0       	ldi	r31, 0x00	; 0
    3afa:	e6 54       	subi	r30, 0x46	; 70
    3afc:	fa 4f       	sbci	r31, 0xFA	; 250
    3afe:	f0 82       	st	Z, r15
    3b00:	21 96       	adiw	r28, 0x01	; 1
    3b02:	0c 17       	cp	r16, r28
    3b04:	1d 07       	cpc	r17, r29
    3b06:	49 f7       	brne	.-46     	; 0x3ada <HAL_UartBytesReceived+0x14>
    3b08:	86 ea       	ldi	r24, 0xA6	; 166
    3b0a:	96 e0       	ldi	r25, 0x06	; 6
    3b0c:	0e 94 a0 2c 	call	0x5940	; 0x5940 <SYS_TimerStop>
    3b10:	86 ea       	ldi	r24, 0xA6	; 166
    3b12:	96 e0       	ldi	r25, 0x06	; 6
    3b14:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <SYS_TimerStart>
    3b18:	df 91       	pop	r29
    3b1a:	cf 91       	pop	r28
    3b1c:	1f 91       	pop	r17
    3b1e:	0f 91       	pop	r16
    3b20:	ff 90       	pop	r15
    3b22:	08 95       	ret

00003b24 <HAL_UartWriteString>:
    3b24:	cf 93       	push	r28
    3b26:	df 93       	push	r29
    3b28:	ec 01       	movw	r28, r24
    3b2a:	88 81       	ld	r24, Y
    3b2c:	88 23       	and	r24, r24
    3b2e:	29 f0       	breq	.+10     	; 0x3b3a <HAL_UartWriteString+0x16>
    3b30:	21 96       	adiw	r28, 0x01	; 1
    3b32:	7b d4       	rcall	.+2294   	; 0x442a <HAL_UartWriteByte>
    3b34:	89 91       	ld	r24, Y+
    3b36:	81 11       	cpse	r24, r1
    3b38:	fc cf       	rjmp	.-8      	; 0x3b32 <HAL_UartWriteString+0xe>
    3b3a:	df 91       	pop	r29
    3b3c:	cf 91       	pop	r28
    3b3e:	08 95       	ret

00003b40 <messageArrived>:
    3b40:	af 92       	push	r10
    3b42:	bf 92       	push	r11
    3b44:	cf 92       	push	r12
    3b46:	df 92       	push	r13
    3b48:	ef 92       	push	r14
    3b4a:	ff 92       	push	r15
    3b4c:	0f 93       	push	r16
    3b4e:	1f 93       	push	r17
    3b50:	cf 93       	push	r28
    3b52:	df 93       	push	r29
    3b54:	cd b7       	in	r28, 0x3d	; 61
    3b56:	de b7       	in	r29, 0x3e	; 62
    3b58:	c1 57       	subi	r28, 0x71	; 113
    3b5a:	d1 40       	sbci	r29, 0x01	; 1
    3b5c:	0f b6       	in	r0, 0x3f	; 63
    3b5e:	f8 94       	cli
    3b60:	de bf       	out	0x3e, r29	; 62
    3b62:	0f be       	out	0x3f, r0	; 63
    3b64:	cd bf       	out	0x3d, r28	; 61
    3b66:	20 91 b4 02 	lds	r18, 0x02B4	; 0x8002b4 <ClientID+0x5b>
    3b6a:	30 91 b5 02 	lds	r19, 0x02B5	; 0x8002b5 <ClientID+0x5c>
    3b6e:	3a 83       	std	Y+2, r19	; 0x02
    3b70:	29 83       	std	Y+1, r18	; 0x01
    3b72:	fe 01       	movw	r30, r28
    3b74:	33 96       	adiw	r30, 0x03	; 3
    3b76:	4e e3       	ldi	r20, 0x3E	; 62
    3b78:	df 01       	movw	r26, r30
    3b7a:	1d 92       	st	X+, r1
    3b7c:	4a 95       	dec	r20
    3b7e:	e9 f7       	brne	.-6      	; 0x3b7a <messageArrived+0x3a>
    3b80:	8e 01       	movw	r16, r28
    3b82:	0f 5b       	subi	r16, 0xBF	; 191
    3b84:	1f 4f       	sbci	r17, 0xFF	; 255
    3b86:	f8 01       	movw	r30, r16
    3b88:	31 83       	std	Z+1, r19	; 0x01
    3b8a:	20 83       	st	Z, r18
    3b8c:	32 96       	adiw	r30, 0x02	; 2
    3b8e:	4e e7       	ldi	r20, 0x7E	; 126
    3b90:	df 01       	movw	r26, r30
    3b92:	1d 92       	st	X+, r1
    3b94:	4a 95       	dec	r20
    3b96:	e9 f7       	brne	.-6      	; 0x3b92 <messageArrived+0x52>
    3b98:	7e 01       	movw	r14, r28
    3b9a:	b1 ec       	ldi	r27, 0xC1	; 193
    3b9c:	eb 0e       	add	r14, r27
    3b9e:	f1 1c       	adc	r15, r1
    3ba0:	f7 01       	movw	r30, r14
    3ba2:	21 93       	st	Z+, r18
    3ba4:	31 93       	st	Z+, r19
    3ba6:	2a ea       	ldi	r18, 0xAA	; 170
    3ba8:	df 01       	movw	r26, r30
    3baa:	1d 92       	st	X+, r1
    3bac:	2a 95       	dec	r18
    3bae:	e9 f7       	brne	.-6      	; 0x3baa <messageArrived+0x6a>
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	a0 80       	ld	r10, Z
    3bb4:	b1 80       	ldd	r11, Z+1	; 0x01
    3bb6:	02 80       	ldd	r0, Z+2	; 0x02
    3bb8:	f3 81       	ldd	r31, Z+3	; 0x03
    3bba:	e0 2d       	mov	r30, r0
    3bbc:	42 81       	ldd	r20, Z+2	; 0x02
    3bbe:	53 81       	ldd	r21, Z+3	; 0x03
    3bc0:	66 81       	ldd	r22, Z+6	; 0x06
    3bc2:	77 81       	ldd	r23, Z+7	; 0x07
    3bc4:	9e 01       	movw	r18, r28
    3bc6:	2f 5f       	subi	r18, 0xFF	; 255
    3bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3bca:	69 01       	movw	r12, r18
    3bcc:	c9 01       	movw	r24, r18
    3bce:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <strncpy>
    3bd2:	d5 01       	movw	r26, r10
    3bd4:	17 96       	adiw	r26, 0x07	; 7
    3bd6:	4d 91       	ld	r20, X+
    3bd8:	5c 91       	ld	r21, X
    3bda:	18 97       	sbiw	r26, 0x08	; 8
    3bdc:	15 96       	adiw	r26, 0x05	; 5
    3bde:	6d 91       	ld	r22, X+
    3be0:	7c 91       	ld	r23, X
    3be2:	16 97       	sbiw	r26, 0x06	; 6
    3be4:	c8 01       	movw	r24, r16
    3be6:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <strncpy>
    3bea:	1f 93       	push	r17
    3bec:	0f 93       	push	r16
    3bee:	df 92       	push	r13
    3bf0:	cf 92       	push	r12
    3bf2:	8d e8       	ldi	r24, 0x8D	; 141
    3bf4:	92 e0       	ldi	r25, 0x02	; 2
    3bf6:	9f 93       	push	r25
    3bf8:	8f 93       	push	r24
    3bfa:	ff 92       	push	r15
    3bfc:	ef 92       	push	r14
    3bfe:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <sprintf_P>
    3c02:	c7 01       	movw	r24, r14
    3c04:	8f df       	rcall	.-226    	; 0x3b24 <HAL_UartWriteString>
    3c06:	63 e4       	ldi	r22, 0x43	; 67
    3c08:	73 e0       	ldi	r23, 0x03	; 3
    3c0a:	c8 01       	movw	r24, r16
    3c0c:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <strstr>
    3c10:	0f b6       	in	r0, 0x3f	; 63
    3c12:	f8 94       	cli
    3c14:	de bf       	out	0x3e, r29	; 62
    3c16:	0f be       	out	0x3f, r0	; 63
    3c18:	cd bf       	out	0x3d, r28	; 61
    3c1a:	89 2b       	or	r24, r25
    3c1c:	09 f4       	brne	.+2      	; 0x3c20 <messageArrived+0xe0>
    3c1e:	67 c0       	rjmp	.+206    	; 0x3cee <messageArrived+0x1ae>
    3c20:	ce 01       	movw	r24, r28
    3c22:	8f 58       	subi	r24, 0x8F	; 143
    3c24:	9e 4f       	sbci	r25, 0xFE	; 254
    3c26:	9f 93       	push	r25
    3c28:	8f 93       	push	r24
    3c2a:	04 97       	sbiw	r24, 0x04	; 4
    3c2c:	9f 93       	push	r25
    3c2e:	8f 93       	push	r24
    3c30:	02 96       	adiw	r24, 0x02	; 2
    3c32:	9f 93       	push	r25
    3c34:	8f 93       	push	r24
    3c36:	82 e5       	ldi	r24, 0x52	; 82
    3c38:	93 e0       	ldi	r25, 0x03	; 3
    3c3a:	9f 93       	push	r25
    3c3c:	8f 93       	push	r24
    3c3e:	c8 01       	movw	r24, r16
    3c40:	9f 93       	push	r25
    3c42:	0f 93       	push	r16
    3c44:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <sscanf>
    3c48:	0f b6       	in	r0, 0x3f	; 63
    3c4a:	f8 94       	cli
    3c4c:	de bf       	out	0x3e, r29	; 62
    3c4e:	0f be       	out	0x3f, r0	; 63
    3c50:	cd bf       	out	0x3d, r28	; 61
    3c52:	03 97       	sbiw	r24, 0x03	; 3
    3c54:	09 f0       	breq	.+2      	; 0x3c58 <messageArrived+0x118>
    3c56:	48 c0       	rjmp	.+144    	; 0x3ce8 <messageArrived+0x1a8>
    3c58:	c1 59       	subi	r28, 0x91	; 145
    3c5a:	de 4f       	sbci	r29, 0xFE	; 254
    3c5c:	88 81       	ld	r24, Y
    3c5e:	99 81       	ldd	r25, Y+1	; 0x01
    3c60:	cf 56       	subi	r28, 0x6F	; 111
    3c62:	d1 40       	sbci	r29, 0x01	; 1
    3c64:	fc d4       	rcall	.+2552   	; 0x465e <NWK_SetAddr>
    3c66:	c3 59       	subi	r28, 0x93	; 147
    3c68:	de 4f       	sbci	r29, 0xFE	; 254
    3c6a:	88 81       	ld	r24, Y
    3c6c:	99 81       	ldd	r25, Y+1	; 0x01
    3c6e:	cd 56       	subi	r28, 0x6D	; 109
    3c70:	d1 40       	sbci	r29, 0x01	; 1
    3c72:	fc d4       	rcall	.+2552   	; 0x466c <NWK_SetPanId>
    3c74:	cf 58       	subi	r28, 0x8F	; 143
    3c76:	de 4f       	sbci	r29, 0xFE	; 254
    3c78:	88 81       	ld	r24, Y
    3c7a:	c1 57       	subi	r28, 0x71	; 113
    3c7c:	d1 40       	sbci	r29, 0x01	; 1
    3c7e:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <PHY_SetChannel>
    3c82:	00 58       	subi	r16, 0x80	; 128
    3c84:	1f 4f       	sbci	r17, 0xFF	; 255
    3c86:	d8 01       	movw	r26, r16
    3c88:	1c 92       	st	X, r1
    3c8a:	cf 58       	subi	r28, 0x8F	; 143
    3c8c:	de 4f       	sbci	r29, 0xFE	; 254
    3c8e:	88 81       	ld	r24, Y
    3c90:	c1 57       	subi	r28, 0x71	; 113
    3c92:	d1 40       	sbci	r29, 0x01	; 1
    3c94:	1f 92       	push	r1
    3c96:	8f 93       	push	r24
    3c98:	c2 59       	subi	r28, 0x92	; 146
    3c9a:	de 4f       	sbci	r29, 0xFE	; 254
    3c9c:	88 81       	ld	r24, Y
    3c9e:	ce 56       	subi	r28, 0x6E	; 110
    3ca0:	d1 40       	sbci	r29, 0x01	; 1
    3ca2:	8f 93       	push	r24
    3ca4:	c3 59       	subi	r28, 0x93	; 147
    3ca6:	de 4f       	sbci	r29, 0xFE	; 254
    3ca8:	88 81       	ld	r24, Y
    3caa:	cd 56       	subi	r28, 0x6D	; 109
    3cac:	d1 40       	sbci	r29, 0x01	; 1
    3cae:	8f 93       	push	r24
    3cb0:	c0 59       	subi	r28, 0x90	; 144
    3cb2:	de 4f       	sbci	r29, 0xFE	; 254
    3cb4:	88 81       	ld	r24, Y
    3cb6:	c0 57       	subi	r28, 0x70	; 112
    3cb8:	d1 40       	sbci	r29, 0x01	; 1
    3cba:	8f 93       	push	r24
    3cbc:	c1 59       	subi	r28, 0x91	; 145
    3cbe:	de 4f       	sbci	r29, 0xFE	; 254
    3cc0:	88 81       	ld	r24, Y
    3cc2:	cf 56       	subi	r28, 0x6F	; 111
    3cc4:	d1 40       	sbci	r29, 0x01	; 1
    3cc6:	8f 93       	push	r24
    3cc8:	85 e5       	ldi	r24, 0x55	; 85
    3cca:	92 e0       	ldi	r25, 0x02	; 2
    3ccc:	9f 93       	push	r25
    3cce:	8f 93       	push	r24
    3cd0:	1f 93       	push	r17
    3cd2:	0f 93       	push	r16
    3cd4:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <sprintf_P>
    3cd8:	c8 01       	movw	r24, r16
    3cda:	24 df       	rcall	.-440    	; 0x3b24 <HAL_UartWriteString>
    3cdc:	0f b6       	in	r0, 0x3f	; 63
    3cde:	f8 94       	cli
    3ce0:	de bf       	out	0x3e, r29	; 62
    3ce2:	0f be       	out	0x3f, r0	; 63
    3ce4:	cd bf       	out	0x3d, r28	; 61
    3ce6:	03 c0       	rjmp	.+6      	; 0x3cee <messageArrived+0x1ae>
    3ce8:	83 e9       	ldi	r24, 0x93	; 147
    3cea:	93 e0       	ldi	r25, 0x03	; 3
    3cec:	1b df       	rcall	.-458    	; 0x3b24 <HAL_UartWriteString>
    3cee:	cf 58       	subi	r28, 0x8F	; 143
    3cf0:	de 4f       	sbci	r29, 0xFE	; 254
    3cf2:	0f b6       	in	r0, 0x3f	; 63
    3cf4:	f8 94       	cli
    3cf6:	de bf       	out	0x3e, r29	; 62
    3cf8:	0f be       	out	0x3f, r0	; 63
    3cfa:	cd bf       	out	0x3d, r28	; 61
    3cfc:	df 91       	pop	r29
    3cfe:	cf 91       	pop	r28
    3d00:	1f 91       	pop	r17
    3d02:	0f 91       	pop	r16
    3d04:	ff 90       	pop	r15
    3d06:	ef 90       	pop	r14
    3d08:	df 90       	pop	r13
    3d0a:	cf 90       	pop	r12
    3d0c:	bf 90       	pop	r11
    3d0e:	af 90       	pop	r10
    3d10:	08 95       	ret

00003d12 <mqtt_pub>:
    3d12:	af 92       	push	r10
    3d14:	bf 92       	push	r11
    3d16:	cf 92       	push	r12
    3d18:	df 92       	push	r13
    3d1a:	ef 92       	push	r14
    3d1c:	ff 92       	push	r15
    3d1e:	0f 93       	push	r16
    3d20:	1f 93       	push	r17
    3d22:	cf 93       	push	r28
    3d24:	df 93       	push	r29
    3d26:	cd b7       	in	r28, 0x3d	; 61
    3d28:	de b7       	in	r29, 0x3e	; 62
    3d2a:	29 97       	sbiw	r28, 0x09	; 9
    3d2c:	0f b6       	in	r0, 0x3f	; 63
    3d2e:	f8 94       	cli
    3d30:	de bf       	out	0x3e, r29	; 62
    3d32:	0f be       	out	0x3f, r0	; 63
    3d34:	cd bf       	out	0x3d, r28	; 61
    3d36:	8c 01       	movw	r16, r24
    3d38:	7b 01       	movw	r14, r22
    3d3a:	6a 01       	movw	r12, r20
    3d3c:	59 01       	movw	r10, r18
    3d3e:	a8 95       	wdr
    3d40:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <mqtt_pub_count.3587>
    3d44:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <mqtt_pub_count.3587+0x1>
    3d48:	a0 91 9d 04 	lds	r26, 0x049D	; 0x80049d <mqtt_pub_count.3587+0x2>
    3d4c:	b0 91 9e 04 	lds	r27, 0x049E	; 0x80049e <mqtt_pub_count.3587+0x3>
    3d50:	01 96       	adiw	r24, 0x01	; 1
    3d52:	a1 1d       	adc	r26, r1
    3d54:	b1 1d       	adc	r27, r1
    3d56:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <mqtt_pub_count.3587>
    3d5a:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <mqtt_pub_count.3587+0x1>
    3d5e:	a0 93 9d 04 	sts	0x049D, r26	; 0x80049d <mqtt_pub_count.3587+0x2>
    3d62:	b0 93 9e 04 	sts	0x049E, r27	; 0x80049e <mqtt_pub_count.3587+0x3>
    3d66:	bf 93       	push	r27
    3d68:	af 93       	push	r26
    3d6a:	9f 93       	push	r25
    3d6c:	8f 93       	push	r24
    3d6e:	81 e4       	ldi	r24, 0x41	; 65
    3d70:	92 e0       	ldi	r25, 0x02	; 2
    3d72:	9f 93       	push	r25
    3d74:	8f 93       	push	r24
    3d76:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <printf_P>
    3d7a:	19 82       	std	Y+1, r1	; 0x01
    3d7c:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <mes_id>
    3d80:	90 91 9f 21 	lds	r25, 0x219F	; 0x80219f <mes_id+0x1>
    3d84:	9c 01       	movw	r18, r24
    3d86:	2f 5f       	subi	r18, 0xFF	; 255
    3d88:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8a:	30 93 9f 21 	sts	0x219F, r19	; 0x80219f <mes_id+0x1>
    3d8e:	20 93 9e 21 	sts	0x219E, r18	; 0x80219e <mes_id>
    3d92:	9d 83       	std	Y+5, r25	; 0x05
    3d94:	8c 83       	std	Y+4, r24	; 0x04
    3d96:	b9 86       	std	Y+9, r11	; 0x09
    3d98:	a8 86       	std	Y+8, r10	; 0x08
    3d9a:	df 82       	std	Y+7, r13	; 0x07
    3d9c:	ce 82       	std	Y+6, r12	; 0x06
    3d9e:	ae 01       	movw	r20, r28
    3da0:	4f 5f       	subi	r20, 0xFF	; 255
    3da2:	5f 4f       	sbci	r21, 0xFF	; 255
    3da4:	b7 01       	movw	r22, r14
    3da6:	c8 01       	movw	r24, r16
    3da8:	0e 94 28 12 	call	0x2450	; 0x2450 <MQTTPublish>
    3dac:	0f 90       	pop	r0
    3dae:	0f 90       	pop	r0
    3db0:	0f 90       	pop	r0
    3db2:	0f 90       	pop	r0
    3db4:	0f 90       	pop	r0
    3db6:	0f 90       	pop	r0
    3db8:	67 2b       	or	r22, r23
    3dba:	68 2b       	or	r22, r24
    3dbc:	69 2b       	or	r22, r25
    3dbe:	59 f4       	brne	.+22     	; 0x3dd6 <mqtt_pub+0xc4>
    3dc0:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <mqtt_err_cnt.3588>
    3dc4:	89 e3       	ldi	r24, 0x39	; 57
    3dc6:	92 e0       	ldi	r25, 0x02	; 2
    3dc8:	9f 93       	push	r25
    3dca:	8f 93       	push	r24
    3dcc:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <printf_P>
    3dd0:	0f 90       	pop	r0
    3dd2:	0f 90       	pop	r0
    3dd4:	19 c0       	rjmp	.+50     	; 0x3e08 <mqtt_pub+0xf6>
    3dd6:	8e e2       	ldi	r24, 0x2E	; 46
    3dd8:	92 e0       	ldi	r25, 0x02	; 2
    3dda:	9f 93       	push	r25
    3ddc:	8f 93       	push	r24
    3dde:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <printf_P>
    3de2:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <mqtt_err_cnt.3588>
    3de6:	91 e0       	ldi	r25, 0x01	; 1
    3de8:	98 0f       	add	r25, r24
    3dea:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <mqtt_err_cnt.3588>
    3dee:	0f 90       	pop	r0
    3df0:	0f 90       	pop	r0
    3df2:	85 31       	cpi	r24, 0x15	; 21
    3df4:	48 f0       	brcs	.+18     	; 0x3e08 <mqtt_pub+0xf6>
    3df6:	81 ef       	ldi	r24, 0xF1	; 241
    3df8:	91 e0       	ldi	r25, 0x01	; 1
    3dfa:	9f 93       	push	r25
    3dfc:	8f 93       	push	r24
    3dfe:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <printf_P>
    3e02:	0f 90       	pop	r0
    3e04:	0f 90       	pop	r0
    3e06:	ff cf       	rjmp	.-2      	; 0x3e06 <mqtt_pub+0xf4>
    3e08:	29 96       	adiw	r28, 0x09	; 9
    3e0a:	0f b6       	in	r0, 0x3f	; 63
    3e0c:	f8 94       	cli
    3e0e:	de bf       	out	0x3e, r29	; 62
    3e10:	0f be       	out	0x3f, r0	; 63
    3e12:	cd bf       	out	0x3d, r28	; 61
    3e14:	df 91       	pop	r29
    3e16:	cf 91       	pop	r28
    3e18:	1f 91       	pop	r17
    3e1a:	0f 91       	pop	r16
    3e1c:	ff 90       	pop	r15
    3e1e:	ef 90       	pop	r14
    3e20:	df 90       	pop	r13
    3e22:	cf 90       	pop	r12
    3e24:	bf 90       	pop	r11
    3e26:	af 90       	pop	r10
    3e28:	08 95       	ret

00003e2a <appDataInd>:
    3e2a:	0f 93       	push	r16
    3e2c:	1f 93       	push	r17
    3e2e:	cf 93       	push	r28
    3e30:	8c 01       	movw	r16, r24
    3e32:	e9 e3       	ldi	r30, 0x39	; 57
    3e34:	f5 e0       	ldi	r31, 0x05	; 5
    3e36:	10 82       	st	Z, r1
    3e38:	dc 01       	movw	r26, r24
    3e3a:	18 96       	adiw	r26, 0x08	; 8
    3e3c:	8c 91       	ld	r24, X
    3e3e:	18 97       	sbiw	r26, 0x08	; 8
    3e40:	8f 93       	push	r24
    3e42:	17 96       	adiw	r26, 0x07	; 7
    3e44:	8c 91       	ld	r24, X
    3e46:	8f 93       	push	r24
    3e48:	80 e4       	ldi	r24, 0x40	; 64
    3e4a:	91 e0       	ldi	r25, 0x01	; 1
    3e4c:	9f 93       	push	r25
    3e4e:	8f 93       	push	r24
    3e50:	ff 93       	push	r31
    3e52:	ef 93       	push	r30
    3e54:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <sprintf_P>
    3e58:	9c 01       	movw	r18, r24
    3e5a:	49 e3       	ldi	r20, 0x39	; 57
    3e5c:	55 e0       	ldi	r21, 0x05	; 5
    3e5e:	6f eb       	ldi	r22, 0xBF	; 191
    3e60:	73 e0       	ldi	r23, 0x03	; 3
    3e62:	80 e0       	ldi	r24, 0x00	; 0
    3e64:	95 e0       	ldi	r25, 0x05	; 5
    3e66:	55 df       	rcall	.-342    	; 0x3d12 <mqtt_pub>
    3e68:	0f 90       	pop	r0
    3e6a:	0f 90       	pop	r0
    3e6c:	0f 90       	pop	r0
    3e6e:	0f 90       	pop	r0
    3e70:	0f 90       	pop	r0
    3e72:	0f 90       	pop	r0
    3e74:	f8 01       	movw	r30, r16
    3e76:	81 85       	ldd	r24, Z+9	; 0x09
    3e78:	88 23       	and	r24, r24
    3e7a:	79 f0       	breq	.+30     	; 0x3e9a <appDataInd+0x70>
    3e7c:	c0 e0       	ldi	r28, 0x00	; 0
    3e7e:	d8 01       	movw	r26, r16
    3e80:	17 96       	adiw	r26, 0x07	; 7
    3e82:	ed 91       	ld	r30, X+
    3e84:	fc 91       	ld	r31, X
    3e86:	18 97       	sbiw	r26, 0x08	; 8
    3e88:	ec 0f       	add	r30, r28
    3e8a:	f1 1d       	adc	r31, r1
    3e8c:	80 81       	ld	r24, Z
    3e8e:	cd d2       	rcall	.+1434   	; 0x442a <HAL_UartWriteByte>
    3e90:	cf 5f       	subi	r28, 0xFF	; 255
    3e92:	f8 01       	movw	r30, r16
    3e94:	81 85       	ldd	r24, Z+9	; 0x09
    3e96:	c8 17       	cp	r28, r24
    3e98:	90 f3       	brcs	.-28     	; 0x3e7e <appDataInd+0x54>
    3e9a:	81 e0       	ldi	r24, 0x01	; 1
    3e9c:	cf 91       	pop	r28
    3e9e:	1f 91       	pop	r17
    3ea0:	0f 91       	pop	r16
    3ea2:	08 95       	ret

00003ea4 <freeRam>:
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
    3ea8:	1f 92       	push	r1
    3eaa:	1f 92       	push	r1
    3eac:	cd b7       	in	r28, 0x3d	; 61
    3eae:	de b7       	in	r29, 0x3e	; 62
    3eb0:	80 91 c9 23 	lds	r24, 0x23C9	; 0x8023c9 <__brkval>
    3eb4:	90 91 ca 23 	lds	r25, 0x23CA	; 0x8023ca <__brkval+0x1>
    3eb8:	00 97       	sbiw	r24, 0x00	; 0
    3eba:	11 f0       	breq	.+4      	; 0x3ec0 <freeRam+0x1c>
    3ebc:	9c 01       	movw	r18, r24
    3ebe:	02 c0       	rjmp	.+4      	; 0x3ec4 <freeRam+0x20>
    3ec0:	24 ed       	ldi	r18, 0xD4	; 212
    3ec2:	33 e2       	ldi	r19, 0x23	; 35
    3ec4:	ce 01       	movw	r24, r28
    3ec6:	01 96       	adiw	r24, 0x01	; 1
    3ec8:	82 1b       	sub	r24, r18
    3eca:	93 0b       	sbc	r25, r19
    3ecc:	0f 90       	pop	r0
    3ece:	0f 90       	pop	r0
    3ed0:	df 91       	pop	r29
    3ed2:	cf 91       	pop	r28
    3ed4:	08 95       	ret

00003ed6 <__vector_21>:
    3ed6:	1f 92       	push	r1
    3ed8:	0f 92       	push	r0
    3eda:	0f b6       	in	r0, 0x3f	; 63
    3edc:	0f 92       	push	r0
    3ede:	11 24       	eor	r1, r1
    3ee0:	8f 93       	push	r24
    3ee2:	9f 93       	push	r25
    3ee4:	af 93       	push	r26
    3ee6:	bf 93       	push	r27
    3ee8:	80 91 9a 1f 	lds	r24, 0x1F9A	; 0x801f9a <_millis>
    3eec:	90 91 9b 1f 	lds	r25, 0x1F9B	; 0x801f9b <_millis+0x1>
    3ef0:	a0 91 9c 1f 	lds	r26, 0x1F9C	; 0x801f9c <_millis+0x2>
    3ef4:	b0 91 9d 1f 	lds	r27, 0x1F9D	; 0x801f9d <_millis+0x3>
    3ef8:	01 96       	adiw	r24, 0x01	; 1
    3efa:	a1 1d       	adc	r26, r1
    3efc:	b1 1d       	adc	r27, r1
    3efe:	80 93 9a 1f 	sts	0x1F9A, r24	; 0x801f9a <_millis>
    3f02:	90 93 9b 1f 	sts	0x1F9B, r25	; 0x801f9b <_millis+0x1>
    3f06:	a0 93 9c 1f 	sts	0x1F9C, r26	; 0x801f9c <_millis+0x2>
    3f0a:	b0 93 9d 1f 	sts	0x1F9D, r27	; 0x801f9d <_millis+0x3>
    3f0e:	bf 91       	pop	r27
    3f10:	af 91       	pop	r26
    3f12:	9f 91       	pop	r25
    3f14:	8f 91       	pop	r24
    3f16:	0f 90       	pop	r0
    3f18:	0f be       	out	0x3f, r0	; 63
    3f1a:	0f 90       	pop	r0
    3f1c:	1f 90       	pop	r1
    3f1e:	18 95       	reti

00003f20 <millis>:
    3f20:	f8 94       	cli
    3f22:	60 91 9a 1f 	lds	r22, 0x1F9A	; 0x801f9a <_millis>
    3f26:	70 91 9b 1f 	lds	r23, 0x1F9B	; 0x801f9b <_millis+0x1>
    3f2a:	80 91 9c 1f 	lds	r24, 0x1F9C	; 0x801f9c <_millis+0x2>
    3f2e:	90 91 9d 1f 	lds	r25, 0x1F9D	; 0x801f9d <_millis+0x3>
    3f32:	78 94       	sei
    3f34:	08 95       	ret

00003f36 <IO_LIBRARY_Init>:
    3f36:	cf 93       	push	r28
    3f38:	df 93       	push	r29
    3f3a:	cd b7       	in	r28, 0x3d	; 61
    3f3c:	de b7       	in	r29, 0x3e	; 62
    3f3e:	28 97       	sbiw	r28, 0x08	; 8
    3f40:	0f b6       	in	r0, 0x3f	; 63
    3f42:	f8 94       	cli
    3f44:	de bf       	out	0x3e, r29	; 62
    3f46:	0f be       	out	0x3f, r0	; 63
    3f48:	cd bf       	out	0x3d, r28	; 61
    3f4a:	88 e0       	ldi	r24, 0x08	; 8
    3f4c:	e4 ef       	ldi	r30, 0xF4	; 244
    3f4e:	f2 e0       	ldi	r31, 0x02	; 2
    3f50:	de 01       	movw	r26, r28
    3f52:	11 96       	adiw	r26, 0x01	; 1
    3f54:	01 90       	ld	r0, Z+
    3f56:	0d 92       	st	X+, r0
    3f58:	8a 95       	dec	r24
    3f5a:	e1 f7       	brne	.-8      	; 0x3f54 <IO_LIBRARY_Init+0x1e>
    3f5c:	61 ee       	ldi	r22, 0xE1	; 225
    3f5e:	7c e1       	ldi	r23, 0x1C	; 28
    3f60:	8f ed       	ldi	r24, 0xDF	; 223
    3f62:	9c e1       	ldi	r25, 0x1C	; 28
    3f64:	0e 94 2e 0a 	call	0x145c	; 0x145c <reg_wizchip_cs_cbfunc>
    3f68:	69 ee       	ldi	r22, 0xE9	; 233
    3f6a:	7c e1       	ldi	r23, 0x1C	; 28
    3f6c:	83 ee       	ldi	r24, 0xE3	; 227
    3f6e:	9c e1       	ldi	r25, 0x1C	; 28
    3f70:	0e 94 45 0a 	call	0x148a	; 0x148a <reg_wizchip_spi_cbfunc>
    3f74:	6e ef       	ldi	r22, 0xFE	; 254
    3f76:	7c e1       	ldi	r23, 0x1C	; 28
    3f78:	8e ee       	ldi	r24, 0xEE	; 238
    3f7a:	9c e1       	ldi	r25, 0x1C	; 28
    3f7c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <reg_wizchip_spiburst_cbfunc>
    3f80:	be 01       	movw	r22, r28
    3f82:	6f 5f       	subi	r22, 0xFF	; 255
    3f84:	7f 4f       	sbci	r23, 0xFF	; 255
    3f86:	cb 01       	movw	r24, r22
    3f88:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <wizchip_init>
    3f8c:	82 e2       	ldi	r24, 0x22	; 34
    3f8e:	92 e0       	ldi	r25, 0x02	; 2
    3f90:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <wizchip_setnetinfo>
    3f94:	28 96       	adiw	r28, 0x08	; 8
    3f96:	0f b6       	in	r0, 0x3f	; 63
    3f98:	f8 94       	cli
    3f9a:	de bf       	out	0x3e, r29	; 62
    3f9c:	0f be       	out	0x3f, r0	; 63
    3f9e:	cd bf       	out	0x3d, r28	; 61
    3fa0:	df 91       	pop	r29
    3fa2:	cf 91       	pop	r28
    3fa4:	08 95       	ret

00003fa6 <timer0_init>:
    3fa6:	82 e0       	ldi	r24, 0x02	; 2
    3fa8:	84 bd       	out	0x24, r24	; 36
    3faa:	83 e0       	ldi	r24, 0x03	; 3
    3fac:	85 bd       	out	0x25, r24	; 37
    3fae:	89 ef       	ldi	r24, 0xF9	; 249
    3fb0:	87 bd       	out	0x27, r24	; 39
    3fb2:	ee e6       	ldi	r30, 0x6E	; 110
    3fb4:	f0 e0       	ldi	r31, 0x00	; 0
    3fb6:	80 81       	ld	r24, Z
    3fb8:	82 60       	ori	r24, 0x02	; 2
    3fba:	80 83       	st	Z, r24
    3fbc:	08 95       	ret

00003fbe <main>:
#endif //MQTT end

int main()
{
    3fbe:	cf 93       	push	r28
    3fc0:	df 93       	push	r29
    3fc2:	cd b7       	in	r28, 0x3d	; 61
    3fc4:	de b7       	in	r29, 0x3e	; 62
    3fc6:	c8 5b       	subi	r28, 0xB8	; 184
    3fc8:	d1 09       	sbc	r29, r1
    3fca:	0f b6       	in	r0, 0x3f	; 63
    3fcc:	f8 94       	cli
    3fce:	de bf       	out	0x3e, r29	; 62
    3fd0:	0f be       	out	0x3f, r0	; 63
    3fd2:	cd bf       	out	0x3d, r28	; 61
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    3fd4:	99 e2       	ldi	r25, 0x29	; 41
    3fd6:	88 e1       	ldi	r24, 0x18	; 24
    3fd8:	0f b6       	in	r0, 0x3f	; 63
    3fda:	f8 94       	cli
    3fdc:	a8 95       	wdr
    3fde:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    3fe2:	0f be       	out	0x3f, r0	; 63
    3fe4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
static void avr_init(void)
{
	// Initialize device here.
	// WatchDog INIT
	wdt_enable(WDTO_8S);  // set up wdt reset interval 2 second
	wdt_reset(); // wdt reset ~ every <2000ms
    3fe8:	a8 95       	wdr

	timer0_init();// Timer0 millis engine init
    3fea:	dd df       	rcall	.-70     	; 0x3fa6 <timer0_init>
	HAL_UartInit(UART_BAUD_RATE);
    3fec:	60 e0       	ldi	r22, 0x00	; 0
    3fee:	76 e9       	ldi	r23, 0x96	; 150
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
	spi_init(); // SPI init for WIZNET chip
    3ff4:	c5 d1       	rcall	.+906    	; 0x4380 <HAL_UartInit>
    3ff6:	6e d1       	rcall	.+732    	; 0x42d4 <spi_init>
	sei(); //re-enable global interrupts
    3ff8:	78 94       	sei

int main()
{
	// INIT MCU
	avr_init(); // MCU init, including WDT, UART, Timer0, SPI
	SYS_Init(); // LWM Stack init
    3ffa:	0e 94 2b 2c 	call	0x5856	; 0x5856 <SYS_Init>

	// Print program metrics
	strcpy(_msg, "");
    3ffe:	00 ea       	ldi	r16, 0xA0	; 160
    4000:	14 e0       	ldi	r17, 0x04	; 4
    4002:	f8 01       	movw	r30, r16
    4004:	10 82       	st	Z, r1
	_len = SPRINTF(_msg,"%S", str_prog_name);// ???????? ?????????
    4006:	81 ea       	ldi	r24, 0xA1	; 161
    4008:	92 e0       	ldi	r25, 0x02	; 2
    400a:	9f 93       	push	r25
    400c:	8f 93       	push	r24
    400e:	8e ee       	ldi	r24, 0xEE	; 238
    4010:	91 e0       	ldi	r25, 0x01	; 1
    4012:	9f 93       	push	r25
    4014:	8f 93       	push	r24
    4016:	1f 93       	push	r17
    4018:	0f 93       	push	r16
    401a:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <sprintf_P>
	HAL_UartWriteString(_msg);
    401e:	c8 01       	movw	r24, r16
    4020:	81 dd       	rcall	.-1278   	; 0x3b24 <HAL_UartWriteString>
	

	//Wizchip WIZ5500 Ethernet initialize
	IO_LIBRARY_Init(); //After that ping must working
    4022:	89 df       	rcall	.-238    	; 0x3f36 <IO_LIBRARY_Init>
    4024:	82 e0       	ldi	r24, 0x02	; 2
//****************MQTT client initialize
	//Find MQTT broker and connect with it
	uint8_t mqtt_buf[100];
	int32_t mqtt_rc = 0;
	Network mqtt_network;
	mqtt_network.my_socket = SOCK_MQTT;
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	a0 e0       	ldi	r26, 0x00	; 0
    402a:	b0 e0       	ldi	r27, 0x00	; 0
    402c:	a9 96       	adiw	r28, 0x29	; 41
    402e:	8c af       	std	Y+60, r24	; 0x3c
    4030:	9d af       	std	Y+61, r25	; 0x3d
    4032:	ae af       	std	Y+62, r26	; 0x3e
    4034:	bf af       	std	Y+63, r27	; 0x3f
    4036:	a9 97       	sbiw	r28, 0x29	; 41
    4038:	f8 01       	movw	r30, r16

	strcpy(_msg, "");
    403a:	10 82       	st	Z, r1
    403c:	ee e1       	ldi	r30, 0x1E	; 30
	_len = 0;
	_len = SPRINTF(_msg,">>Trying connect to MQTT broker: %d.%d.%d.%d ..\r\n", MQTT_targetIP[0], MQTT_targetIP[1], MQTT_targetIP[2], MQTT_targetIP[3]);
    403e:	f2 e0       	ldi	r31, 0x02	; 2
    4040:	83 81       	ldd	r24, Z+3	; 0x03
    4042:	1f 92       	push	r1
    4044:	8f 93       	push	r24
    4046:	82 81       	ldd	r24, Z+2	; 0x02
    4048:	1f 92       	push	r1
    404a:	8f 93       	push	r24
    404c:	81 81       	ldd	r24, Z+1	; 0x01
    404e:	1f 92       	push	r1
    4050:	8f 93       	push	r24
    4052:	80 81       	ld	r24, Z
    4054:	1f 92       	push	r1
    4056:	8f 93       	push	r24
    4058:	8c eb       	ldi	r24, 0xBC	; 188
    405a:	91 e0       	ldi	r25, 0x01	; 1
    405c:	9f 93       	push	r25
    405e:	8f 93       	push	r24
    4060:	1f 93       	push	r17
    4062:	0f 93       	push	r16
    4064:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <sprintf_P>
	HAL_UartWriteString(_msg);
    4068:	c8 01       	movw	r24, r16
    406a:	5c dd       	rcall	.-1352   	; 0x3b24 <HAL_UartWriteString>
	NewNetwork(&mqtt_network);
    406c:	ce 01       	movw	r24, r28
    406e:	8b 59       	subi	r24, 0x9B	; 155
    4070:	9f 4f       	sbci	r25, 0xFF	; 255
    4072:	75 dc       	rcall	.-1814   	; 0x395e <NewNetwork>
    4074:	4b e5       	ldi	r20, 0x5B	; 91
	ConnectNetwork(&mqtt_network, MQTT_targetIP, 1883);
    4076:	57 e0       	ldi	r21, 0x07	; 7
    4078:	6e e1       	ldi	r22, 0x1E	; 30
    407a:	72 e0       	ldi	r23, 0x02	; 2
    407c:	ce 01       	movw	r24, r28
    407e:	8b 59       	subi	r24, 0x9B	; 155
    4080:	9f 4f       	sbci	r25, 0xFF	; 255
    4082:	7b dc       	rcall	.-1802   	; 0x397a <ConnectNetwork>
    4084:	a1 2c       	mov	r10, r1
	MQTTClient(&mqtt_client, &mqtt_network, 1000, mqtt_buf, 100, mqtt_readBuffer, MQTT_BUFFER_SIZE);
    4086:	68 94       	set
    4088:	bb 24       	eor	r11, r11
    408a:	b1 f8       	bld	r11, 1
    408c:	0f 2e       	mov	r0, r31
    408e:	fe e9       	ldi	r31, 0x9E	; 158
    4090:	cf 2e       	mov	r12, r31
    4092:	ff e1       	ldi	r31, 0x1F	; 31
    4094:	df 2e       	mov	r13, r31
    4096:	f0 2d       	mov	r31, r0
    4098:	0f 2e       	mov	r0, r31
    409a:	f4 e6       	ldi	r31, 0x64	; 100
    409c:	ef 2e       	mov	r14, r31
    409e:	f1 2c       	mov	r15, r1
    40a0:	f0 2d       	mov	r31, r0
    40a2:	8e 01       	movw	r16, r28
    40a4:	0f 5f       	subi	r16, 0xFF	; 255
    40a6:	1f 4f       	sbci	r17, 0xFF	; 255
    40a8:	28 ee       	ldi	r18, 0xE8	; 232
    40aa:	33 e0       	ldi	r19, 0x03	; 3
    40ac:	40 e0       	ldi	r20, 0x00	; 0
    40ae:	50 e0       	ldi	r21, 0x00	; 0
    40b0:	be 01       	movw	r22, r28
    40b2:	6b 59       	subi	r22, 0x9B	; 155
    40b4:	7f 4f       	sbci	r23, 0xFF	; 255
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	95 e0       	ldi	r25, 0x05	; 5
    40ba:	0e 94 22 0c 	call	0x1844	; 0x1844 <MQTTClient>
    40be:	8b e3       	ldi	r24, 0x3B	; 59

	//Connection to MQTT broker
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    40c0:	ec ef       	ldi	r30, 0xFC	; 252
    40c2:	f2 e0       	ldi	r31, 0x02	; 2
    40c4:	de 01       	movw	r26, r28
    40c6:	a1 59       	subi	r26, 0x91	; 145
    40c8:	bf 4f       	sbci	r27, 0xFF	; 255
    40ca:	01 90       	ld	r0, Z+
    40cc:	0d 92       	st	X+, r0
    40ce:	8a 95       	dec	r24
    40d0:	e1 f7       	brne	.-8      	; 0x40ca <main+0x10c>
    40d2:	cf 57       	subi	r28, 0x7F	; 127
	data.willFlag = 0;
    40d4:	df 4f       	sbci	r29, 0xFF	; 255
    40d6:	18 82       	st	Y, r1
    40d8:	c1 58       	subi	r28, 0x81	; 129
    40da:	d0 40       	sbci	r29, 0x00	; 0
    40dc:	84 e0       	ldi	r24, 0x04	; 4
	data.MQTTVersion = 4;//3;
    40de:	e6 96       	adiw	r28, 0x36	; 54
    40e0:	8f af       	std	Y+63, r24	; 0x3f
    40e2:	e6 97       	sbiw	r28, 0x36	; 54
    40e4:	89 e5       	ldi	r24, 0x59	; 89
	data.clientID.cstring = ClientID;
    40e6:	92 e0       	ldi	r25, 0x02	; 2
    40e8:	e8 96       	adiw	r28, 0x38	; 56
    40ea:	9f af       	std	Y+63, r25	; 0x3f
    40ec:	8e af       	std	Y+62, r24	; 0x3e
    40ee:	e8 97       	sbiw	r28, 0x38	; 56
    40f0:	89 e3       	ldi	r24, 0x39	; 57
	data.username.cstring = ClientUsername;
    40f2:	92 e0       	ldi	r25, 0x02	; 2
    40f4:	c6 56       	subi	r28, 0x66	; 102
    40f6:	df 4f       	sbci	r29, 0xFF	; 255
    40f8:	99 83       	std	Y+1, r25	; 0x01
    40fa:	88 83       	st	Y, r24
    40fc:	ca 59       	subi	r28, 0x9A	; 154
    40fe:	d0 40       	sbci	r29, 0x00	; 0
    4100:	80 ee       	ldi	r24, 0xE0	; 224
	data.password.cstring = ClientPassword;
    4102:	94 e0       	ldi	r25, 0x04	; 4
    4104:	ce 55       	subi	r28, 0x5E	; 94
    4106:	df 4f       	sbci	r29, 0xFF	; 255
    4108:	99 83       	std	Y+1, r25	; 0x01
    410a:	88 83       	st	Y, r24
    410c:	c2 5a       	subi	r28, 0xA2	; 162
    410e:	d0 40       	sbci	r29, 0x00	; 0
    4110:	8c e3       	ldi	r24, 0x3C	; 60
	data.keepAliveInterval = 60;
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	c2 58       	subi	r28, 0x82	; 130
    4116:	df 4f       	sbci	r29, 0xFF	; 255
    4118:	99 83       	std	Y+1, r25	; 0x01
    411a:	88 83       	st	Y, r24
    411c:	ce 57       	subi	r28, 0x7E	; 126
    411e:	d0 40       	sbci	r29, 0x00	; 0
    4120:	81 e0       	ldi	r24, 0x01	; 1
	data.cleansession = 1;
    4122:	c0 58       	subi	r28, 0x80	; 128
    4124:	df 4f       	sbci	r29, 0xFF	; 255
    4126:	88 83       	st	Y, r24
    4128:	c0 58       	subi	r28, 0x80	; 128
    412a:	d0 40       	sbci	r29, 0x00	; 0
    412c:	be 01       	movw	r22, r28
	mqtt_rc = MQTTConnect(&mqtt_client, &data);
    412e:	61 59       	subi	r22, 0x91	; 145
    4130:	7f 4f       	sbci	r23, 0xFF	; 255
    4132:	80 e0       	ldi	r24, 0x00	; 0
    4134:	95 e0       	ldi	r25, 0x05	; 5
    4136:	0e 94 68 10 	call	0x20d0	; 0x20d0 <MQTTConnect>
    413a:	0f b6       	in	r0, 0x3f	; 63
	if (mqtt_rc == SUCCESSS)
    413c:	f8 94       	cli
    413e:	de bf       	out	0x3e, r29	; 62
    4140:	0f be       	out	0x3f, r0	; 63
    4142:	cd bf       	out	0x3d, r28	; 61
    4144:	61 15       	cp	r22, r1
    4146:	71 05       	cpc	r23, r1
    4148:	81 05       	cpc	r24, r1
    414a:	91 05       	cpc	r25, r1
    414c:	09 f0       	breq	.+2      	; 0x4150 <main+0x192>
    414e:	50 c0       	rjmp	.+160    	; 0x41f0 <main+0x232>
    4150:	00 ea       	ldi	r16, 0xA0	; 160
	{
		strcpy(_msg, "");
    4152:	14 e0       	ldi	r17, 0x04	; 4
    4154:	f8 01       	movw	r30, r16
    4156:	10 82       	st	Z, r1
    4158:	1f 92       	push	r1
		_len = 0;
		_len = SPRINTF(_msg,"++MQTT Connected SUCCESS: %ld\r\n", mqtt_rc);
    415a:	1f 92       	push	r1
    415c:	1f 92       	push	r1
    415e:	1f 92       	push	r1
    4160:	8c e9       	ldi	r24, 0x9C	; 156
    4162:	91 e0       	ldi	r25, 0x01	; 1
    4164:	9f 93       	push	r25
    4166:	8f 93       	push	r24
    4168:	1f 93       	push	r17
    416a:	0f 93       	push	r16
    416c:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <sprintf_P>
		HAL_UartWriteString(_msg);
    4170:	c8 01       	movw	r24, r16
    4172:	d8 dc       	rcall	.-1616   	; 0x3b24 <HAL_UartWriteString>
    4174:	7e 01       	movw	r14, r28
		HAL_UartWriteString(_msg);
		while(1);//Reboot the board
	}

	// Subscribe topic
	char SubString[] = SUBSCRIBE;
    4176:	fa ea       	ldi	r31, 0xAA	; 170
    4178:	ef 0e       	add	r14, r31
    417a:	f1 1c       	adc	r15, r1
    417c:	8f e0       	ldi	r24, 0x0F	; 15
    417e:	ef eb       	ldi	r30, 0xBF	; 191
    4180:	f3 e0       	ldi	r31, 0x03	; 3
    4182:	d7 01       	movw	r26, r14
    4184:	01 90       	ld	r0, Z+
    4186:	0d 92       	st	X+, r0
    4188:	8a 95       	dec	r24
    418a:	e1 f7       	brne	.-8      	; 0x4184 <main+0x1c6>
    418c:	20 ea       	ldi	r18, 0xA0	; 160
	mqtt_rc = MQTTSubscribe(&mqtt_client, SubString, QOS0, messageArrived);
    418e:	3d e1       	ldi	r19, 0x1D	; 29
    4190:	40 e0       	ldi	r20, 0x00	; 0
    4192:	b7 01       	movw	r22, r14
    4194:	80 e0       	ldi	r24, 0x00	; 0
    4196:	95 e0       	ldi	r25, 0x05	; 5
    4198:	0e 94 23 11 	call	0x2246	; 0x2246 <MQTTSubscribe>
    419c:	f8 01       	movw	r30, r16
	strcpy(_msg, "");
    419e:	10 82       	st	Z, r1
    41a0:	9f 93       	push	r25
	_len = 0;
	_len = SPRINTF(_msg,"Subscribed (%s) %d\r\n", SubString, mqtt_rc);
    41a2:	8f 93       	push	r24
    41a4:	7f 93       	push	r23
    41a6:	6f 93       	push	r22
    41a8:	ff 92       	push	r15
    41aa:	ef 92       	push	r14
    41ac:	87 e8       	ldi	r24, 0x87	; 135
    41ae:	91 e0       	ldi	r25, 0x01	; 1
    41b0:	9f 93       	push	r25
    41b2:	8f 93       	push	r24
    41b4:	1f 93       	push	r17
    41b6:	0f 93       	push	r16
    41b8:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <sprintf_P>
	HAL_UartWriteString(_msg);
    41bc:	c8 01       	movw	r24, r16
    41be:	b2 dc       	rcall	.-1692   	; 0x3b24 <HAL_UartWriteString>
	
	//timer
	uint32_t timer_mqtt_pub_1sec = millis();
    41c0:	af de       	rcall	.-674    	; 0x3f20 <millis>
    41c2:	4b 01       	movw	r8, r22
    41c4:	5c 01       	movw	r10, r24
    41c6:	0f b6       	in	r0, 0x3f	; 63
    41c8:	f8 94       	cli
    41ca:	de bf       	out	0x3e, r29	; 62
    41cc:	0f be       	out	0x3f, r0	; 63
    41ce:	cd bf       	out	0x3d, r28	; 61
    41d0:	78 01       	movw	r14, r16
			
			//Every 20sec public message: "Uptime: xxx sec; Free RAM: xxxxx bytes" to "/w5500_avr_dbg"
			if(++mqtt_20sec_cnt>19)
			{
				mqtt_20sec_cnt = 0;
				strcpy(_msg, "");
    41d2:	0f 2e       	mov	r0, r31
				_len = SPRINTF(_msg, "Uptime: %lu sec; Free RAM: %d bytes\r\n", millis()/1000, freeRam());
    41d4:	f8 ee       	ldi	r31, 0xE8	; 232
    41d6:	4f 2e       	mov	r4, r31
    41d8:	f3 e0       	ldi	r31, 0x03	; 3
    41da:	5f 2e       	mov	r5, r31
    41dc:	61 2c       	mov	r6, r1
    41de:	71 2c       	mov	r7, r1
    41e0:	f0 2d       	mov	r31, r0
    41e2:	0f 2e       	mov	r0, r31
    41e4:	f3 e4       	ldi	r31, 0x43	; 67
    41e6:	cf 2e       	mov	r12, r31
    41e8:	f1 e0       	ldi	r31, 0x01	; 1
    41ea:	df 2e       	mov	r13, r31
    41ec:	f0 2d       	mov	r31, r0
    41ee:	18 c0       	rjmp	.+48     	; 0x4220 <main+0x262>
    41f0:	e0 ea       	ldi	r30, 0xA0	; 160
		_len = SPRINTF(_msg,"++MQTT Connected SUCCESS: %ld\r\n", mqtt_rc);
		HAL_UartWriteString(_msg);
	}
	else
	{
		strcpy(_msg, "");
    41f2:	f4 e0       	ldi	r31, 0x04	; 4
    41f4:	10 82       	st	Z, r1
    41f6:	9f 93       	push	r25
		_len = 0;
		_len = SPRINTF(_msg,"--MQTT Connected ERROR: %ld\r\n", mqtt_rc);
    41f8:	8f 93       	push	r24
    41fa:	7f 93       	push	r23
    41fc:	6f 93       	push	r22
    41fe:	89 e6       	ldi	r24, 0x69	; 105
    4200:	91 e0       	ldi	r25, 0x01	; 1
    4202:	9f 93       	push	r25
    4204:	8f 93       	push	r24
    4206:	ff 93       	push	r31
    4208:	ef 93       	push	r30
    420a:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <sprintf_P>
		HAL_UartWriteString(_msg);
    420e:	80 ea       	ldi	r24, 0xA0	; 160
    4210:	94 e0       	ldi	r25, 0x04	; 4
    4212:	88 dc       	rcall	.-1776   	; 0x3b24 <HAL_UartWriteString>
    4214:	0f b6       	in	r0, 0x3f	; 63
    4216:	f8 94       	cli
    4218:	de bf       	out	0x3e, r29	; 62
    421a:	0f be       	out	0x3f, r0	; 63
    421c:	cd bf       	out	0x3d, r28	; 61
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
}
#endif //MQTT end

int main()
{
    421e:	ff cf       	rjmp	.-2      	; 0x421e <main+0x260>
    4220:	07 e0       	ldi	r16, 0x07	; 7
	static uint8_t mqtt_20sec_cnt =0;
	
	while(1)
	{
		for (int i = 0; i < 7; i++) {
			SYS_TaskHandler();
    4222:	10 e0       	ldi	r17, 0x00	; 0
			HAL_UartTaskHandler();
    4224:	0e 94 32 2c 	call	0x5864	; 0x5864 <SYS_TaskHandler>
			APP_TaskHandler();
    4228:	c0 d1       	rcall	.+896    	; 0x45aa <HAL_UartTaskHandler>
    422a:	26 dc       	rcall	.-1972   	; 0x3a78 <APP_TaskHandler>
    422c:	01 50       	subi	r16, 0x01	; 1
	// counter - 20 sec
	static uint8_t mqtt_20sec_cnt =0;
	
	while(1)
	{
		for (int i = 0; i < 7; i++) {
    422e:	11 09       	sbc	r17, r1
			HAL_UartTaskHandler();
			APP_TaskHandler();
			}
		
		//Here at least every 1sec
		wdt_reset(); // WDT reset at least every sec
    4230:	c9 f7       	brne	.-14     	; 0x4224 <main+0x266>
    4232:	a8 95       	wdr
    4234:	07 e0       	ldi	r16, 0x07	; 7
		#if defined( _PING )
		ping_srv(2);
		#endif
		
		for (int i = 0; i < 7; i++) {
			SYS_TaskHandler();
    4236:	10 e0       	ldi	r17, 0x00	; 0
    4238:	0e 94 32 2c 	call	0x5864	; 0x5864 <SYS_TaskHandler>
			HAL_UartTaskHandler();
    423c:	b6 d1       	rcall	.+876    	; 0x45aa <HAL_UartTaskHandler>
			APP_TaskHandler();
    423e:	1c dc       	rcall	.-1992   	; 0x3a78 <APP_TaskHandler>
    4240:	01 50       	subi	r16, 0x01	; 1
    4242:	11 09       	sbc	r17, r1
		#endif
		#if defined( _PING )
		ping_srv(2);
		#endif
		
		for (int i = 0; i < 7; i++) {
    4244:	c9 f7       	brne	.-14     	; 0x4238 <main+0x27a>
			HAL_UartTaskHandler();
			APP_TaskHandler();
			}

		// MQTT pub event every 1 sec
		if((millis()-timer_mqtt_pub_1sec)> 1000)
    4246:	6c de       	rcall	.-808    	; 0x3f20 <millis>
    4248:	dc 01       	movw	r26, r24
    424a:	cb 01       	movw	r24, r22
    424c:	88 19       	sub	r24, r8
    424e:	99 09       	sbc	r25, r9
    4250:	aa 09       	sbc	r26, r10
    4252:	bb 09       	sbc	r27, r11
    4254:	89 3e       	cpi	r24, 0xE9	; 233
    4256:	93 40       	sbci	r25, 0x03	; 3
    4258:	a1 05       	cpc	r26, r1
    425a:	b1 05       	cpc	r27, r1
    425c:	90 f1       	brcs	.+100    	; 0x42c2 <main+0x304>
		{
			//here every 1 sec
			timer_mqtt_pub_1sec = millis();
    425e:	60 de       	rcall	.-832    	; 0x3f20 <millis>
    4260:	4b 01       	movw	r8, r22
    4262:	5c 01       	movw	r10, r24
			
			//Every 20sec public message: "Uptime: xxx sec; Free RAM: xxxxx bytes" to "/w5500_avr_dbg"
			if(++mqtt_20sec_cnt>19)
    4264:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <mqtt_20sec_cnt.3713>
    4268:	8f 5f       	subi	r24, 0xFF	; 255
    426a:	84 31       	cpi	r24, 0x14	; 20
    426c:	18 f4       	brcc	.+6      	; 0x4274 <main+0x2b6>
    426e:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <mqtt_20sec_cnt.3713>
    4272:	27 c0       	rjmp	.+78     	; 0x42c2 <main+0x304>
			{
				mqtt_20sec_cnt = 0;
    4274:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <mqtt_20sec_cnt.3713>
				strcpy(_msg, "");
    4278:	f7 01       	movw	r30, r14
    427a:	10 82       	st	Z, r1
				_len = SPRINTF(_msg, "Uptime: %lu sec; Free RAM: %d bytes\r\n", millis()/1000, freeRam());
    427c:	13 de       	rcall	.-986    	; 0x3ea4 <freeRam>
    427e:	18 2f       	mov	r17, r24
    4280:	09 2f       	mov	r16, r25
    4282:	4e de       	rcall	.-868    	; 0x3f20 <millis>
    4284:	0f 93       	push	r16
    4286:	1f 93       	push	r17
    4288:	a3 01       	movw	r20, r6
    428a:	92 01       	movw	r18, r4
    428c:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <__udivmodsi4>
    4290:	5f 93       	push	r21
    4292:	4f 93       	push	r20
    4294:	3f 93       	push	r19
    4296:	2f 93       	push	r18
    4298:	df 92       	push	r13
    429a:	cf 92       	push	r12
    429c:	ff 92       	push	r15
    429e:	ef 92       	push	r14
    42a0:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <sprintf_P>
    42a4:	0f b6       	in	r0, 0x3f	; 63
				if(_len > 0)
    42a6:	f8 94       	cli
    42a8:	de bf       	out	0x3e, r29	; 62
    42aa:	0f be       	out	0x3f, r0	; 63
    42ac:	cd bf       	out	0x3d, r28	; 61
    42ae:	18 16       	cp	r1, r24
    42b0:	19 06       	cpc	r1, r25
    42b2:	3c f4       	brge	.+14     	; 0x42c2 <main+0x304>
    42b4:	9c 01       	movw	r18, r24
				{
					mqtt_pub(&mqtt_client, PUBLISH, _msg, _len);
    42b6:	a7 01       	movw	r20, r14
    42b8:	6f eb       	ldi	r22, 0xBF	; 191
    42ba:	73 e0       	ldi	r23, 0x03	; 3
    42bc:	80 e0       	ldi	r24, 0x00	; 0
    42be:	95 e0       	ldi	r25, 0x05	; 5
    42c0:	28 dd       	rcall	.-1456   	; 0x3d12 <mqtt_pub>
    42c2:	44 e6       	ldi	r20, 0x64	; 100
    42c4:	50 e0       	ldi	r21, 0x00	; 0
				ping_request(2, netInfo.dns);
				#endif
			}
		}
	    // MQTT broker connection and sub receive
	    MQTTYield(&mqtt_client, 100);//~100msec blocking here
    42c6:	60 e0       	ldi	r22, 0x00	; 0
    42c8:	70 e0       	ldi	r23, 0x00	; 0
    42ca:	80 e0       	ldi	r24, 0x00	; 0
    42cc:	95 e0       	ldi	r25, 0x05	; 5
    42ce:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <MQTTYield>
    42d2:	a6 cf       	rjmp	.-180    	; 0x4220 <main+0x262>

000042d4 <spi_init>:

void
spi_init(void)
{
  // CS PIN for FLASH
  DDRD	|= _BV(WIZNET_CS); // CS to OUT && Disable
    42d4:	56 9a       	sbi	0x0a, 6	; 10
  SPI_WIZNET_DISABLE();
    42d6:	5e 9a       	sbi	0x0b, 6	; 11
  
  /* Initalize ports for communication with SPI units. */
  /* CSN=SS and must be output when master! */
  //DDRB  |= _BV(MOSI) | _BV(SCK) | _BV(CSN);
  DDRB  |= _BV(MOSI) | _BV(SCK);
    42d8:	84 b1       	in	r24, 0x04	; 4
    42da:	86 60       	ori	r24, 0x06	; 6
    42dc:	84 b9       	out	0x04, r24	; 4
  PORTB |= _BV(MOSI) | _BV(SCK);
    42de:	85 b1       	in	r24, 0x05	; 5
    42e0:	86 60       	ori	r24, 0x06	; 6
    42e2:	85 b9       	out	0x05, r24	; 5
  DDRD |= _BV(CSN);
    42e4:	54 9a       	sbi	0x0a, 4	; 10
 
  /* Enables SPI, selects "master", clock rate FCK / 4 - 4Mhz, and SPI mode 0 */
  SPCR = _BV(SPE) | _BV(MSTR);
    42e6:	80 e5       	ldi	r24, 0x50	; 80
    42e8:	8c bd       	out	0x2c, r24	; 44
#if defined(SPI_8_MHZ)
  SPSR = _BV(SPI2X); //FCK / 2 - 8Mhz
#elif defined (SPI_4_MHZ)
  SPSR = 0x0; //FCK / 4 - 4Mhz
#else
  SPSR = 0x0; //FCK / 4 - 4Mhz
    42ea:	1d bc       	out	0x2d, r1	; 45
    42ec:	08 95       	ret

000042ee <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    42ee:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    42f0:	0f b6       	in	r0, 0x3f	; 63
    42f2:	f8 94       	cli
    42f4:	a8 95       	wdr
    42f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    42fa:	88 61       	ori	r24, 0x18	; 24
    42fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    4300:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    4304:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    4306:	e1 e6       	ldi	r30, 0x61	; 97
    4308:	f0 e0       	ldi	r31, 0x00	; 0
    430a:	80 e8       	ldi	r24, 0x80	; 128
    430c:	80 83       	st	Z, r24
  CLKPR = 0;
    430e:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    4310:	78 94       	sei

  HAL_TimerInit();
    4312:	01 c0       	rjmp	.+2      	; 0x4316 <HAL_TimerInit>
    4314:	08 95       	ret

00004316 <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
    4316:	10 92 a0 23 	sts	0x23A0, r1	; 0x8023a0 <halTimerIrqCount>
    431a:	80 e1       	ldi	r24, 0x10	; 16
    431c:	97 e2       	ldi	r25, 0x27	; 39
    431e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    4322:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
    4326:	e1 ea       	ldi	r30, 0xA1	; 161
    4328:	f0 e0       	ldi	r31, 0x00	; 0
    432a:	88 e0       	ldi	r24, 0x08	; 8
    432c:	80 83       	st	Z, r24
    432e:	80 81       	ld	r24, Z
    4330:	82 60       	ori	r24, 0x02	; 2
    4332:	80 83       	st	Z, r24
    4334:	e2 e7       	ldi	r30, 0x72	; 114
    4336:	f0 e0       	ldi	r31, 0x00	; 0
    4338:	80 81       	ld	r24, Z
    433a:	82 60       	ori	r24, 0x02	; 2
    433c:	80 83       	st	Z, r24
    433e:	08 95       	ret

00004340 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    4340:	1f 92       	push	r1
    4342:	0f 92       	push	r0
    4344:	0f b6       	in	r0, 0x3f	; 63
    4346:	0f 92       	push	r0
    4348:	11 24       	eor	r1, r1
    434a:	8f 93       	push	r24
  halTimerIrqCount++;
    434c:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <halTimerIrqCount>
    4350:	8f 5f       	subi	r24, 0xFF	; 255
    4352:	80 93 a0 23 	sts	0x23A0, r24	; 0x8023a0 <halTimerIrqCount>
}
    4356:	8f 91       	pop	r24
    4358:	0f 90       	pop	r0
    435a:	0f be       	out	0x3f, r0	; 63
    435c:	0f 90       	pop	r0
    435e:	1f 90       	pop	r1
    4360:	18 95       	reti

00004362 <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
    4362:	1f 92       	push	r1
    4364:	0f 92       	push	r0
    4366:	0f b6       	in	r0, 0x3f	; 63
    4368:	0f 92       	push	r0
    436a:	11 24       	eor	r1, r1
    436c:	8f 93       	push	r24
  halSleepTimerEvent = true;
    436e:	81 e0       	ldi	r24, 0x01	; 1
    4370:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <halSleepTimerEvent>
}
    4374:	8f 91       	pop	r24
    4376:	0f 90       	pop	r0
    4378:	0f be       	out	0x3f, r0	; 63
    437a:	0f 90       	pop	r0
    437c:	1f 90       	pop	r1
    437e:	18 95       	reti

00004380 <HAL_UartInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
    4380:	dc 01       	movw	r26, r24
    4382:	cb 01       	movw	r24, r22
    4384:	88 0f       	add	r24, r24
    4386:	99 1f       	adc	r25, r25
    4388:	aa 1f       	adc	r26, r26
    438a:	bb 1f       	adc	r27, r27
    438c:	88 0f       	add	r24, r24
    438e:	99 1f       	adc	r25, r25
    4390:	aa 1f       	adc	r26, r26
    4392:	bb 1f       	adc	r27, r27
    4394:	9c 01       	movw	r18, r24
    4396:	ad 01       	movw	r20, r26
    4398:	22 0f       	add	r18, r18
    439a:	33 1f       	adc	r19, r19
    439c:	44 1f       	adc	r20, r20
    439e:	55 1f       	adc	r21, r21
    43a0:	22 0f       	add	r18, r18
    43a2:	33 1f       	adc	r19, r19
    43a4:	44 1f       	adc	r20, r20
    43a6:	55 1f       	adc	r21, r21
    43a8:	60 e0       	ldi	r22, 0x00	; 0
    43aa:	74 e2       	ldi	r23, 0x24	; 36
    43ac:	84 ef       	ldi	r24, 0xF4	; 244
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <__udivmodsi4>
    43b4:	ba 01       	movw	r22, r20
    43b6:	a9 01       	movw	r20, r18
    43b8:	41 50       	subi	r20, 0x01	; 1
    43ba:	51 09       	sbc	r21, r1
    43bc:	61 09       	sbc	r22, r1
    43be:	71 09       	sbc	r23, r1

  UBRRxH = (brr >> 8) & 0xff;
    43c0:	bb 27       	eor	r27, r27
    43c2:	a7 2f       	mov	r26, r23
    43c4:	96 2f       	mov	r25, r22
    43c6:	85 2f       	mov	r24, r21
    43c8:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
  UBRRxL = (brr & 0xff);
    43cc:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
  UCSRxA = (1 << U2X1);
    43d0:	82 e0       	ldi	r24, 0x02	; 2
    43d2:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
    43d6:	88 e9       	ldi	r24, 0x98	; 152
    43d8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
  UCSRxC = (3 << UCSZ10);
    43dc:	86 e0       	ldi	r24, 0x06	; 6
    43de:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>

  txFifo.data = txData;
    43e2:	e2 ee       	ldi	r30, 0xE2	; 226
    43e4:	f9 e0       	ldi	r31, 0x09	; 9
    43e6:	81 e5       	ldi	r24, 0x51	; 81
    43e8:	98 e0       	ldi	r25, 0x08	; 8
    43ea:	91 87       	std	Z+9, r25	; 0x09
    43ec:	80 87       	std	Z+8, r24	; 0x08
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
    43ee:	80 e9       	ldi	r24, 0x90	; 144
    43f0:	91 e0       	ldi	r25, 0x01	; 1
    43f2:	95 83       	std	Z+5, r25	; 0x05
    43f4:	84 83       	std	Z+4, r24	; 0x04
  txFifo.bytes = 0;
    43f6:	17 82       	std	Z+7, r1	; 0x07
    43f8:	16 82       	std	Z+6, r1	; 0x06
  txFifo.head = 0;
    43fa:	11 82       	std	Z+1, r1	; 0x01
    43fc:	10 82       	st	Z, r1
  txFifo.tail = 0;
    43fe:	13 82       	std	Z+3, r1	; 0x03
    4400:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
    4402:	e7 e4       	ldi	r30, 0x47	; 71
    4404:	f8 e0       	ldi	r31, 0x08	; 8
    4406:	26 eb       	ldi	r18, 0xB6	; 182
    4408:	36 e0       	ldi	r19, 0x06	; 6
    440a:	31 87       	std	Z+9, r19	; 0x09
    440c:	20 87       	std	Z+8, r18	; 0x08
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
    440e:	95 83       	std	Z+5, r25	; 0x05
    4410:	84 83       	std	Z+4, r24	; 0x04
  rxFifo.bytes = 0;
    4412:	17 82       	std	Z+7, r1	; 0x07
    4414:	16 82       	std	Z+6, r1	; 0x06
  rxFifo.head = 0;
    4416:	11 82       	std	Z+1, r1	; 0x01
    4418:	10 82       	st	Z, r1
  rxFifo.tail = 0;
    441a:	13 82       	std	Z+3, r1	; 0x03
    441c:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
    441e:	81 e0       	ldi	r24, 0x01	; 1
    4420:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <udrEmpty>
  newData = false;
    4424:	10 92 b4 06 	sts	0x06B4, r1	; 0x8006b4 <newData>
    4428:	08 95       	ret

0000442a <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
    442a:	cf 93       	push	r28
    442c:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
    442e:	e2 ee       	ldi	r30, 0xE2	; 226
    4430:	f9 e0       	ldi	r31, 0x09	; 9
    4432:	26 81       	ldd	r18, Z+6	; 0x06
    4434:	37 81       	ldd	r19, Z+7	; 0x07
    4436:	64 81       	ldd	r22, Z+4	; 0x04
    4438:	75 81       	ldd	r23, Z+5	; 0x05
    443a:	26 17       	cp	r18, r22
    443c:	37 07       	cpc	r19, r23
    443e:	c9 f0       	breq	.+50     	; 0x4472 <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
    4440:	c0 85       	ldd	r28, Z+8	; 0x08
    4442:	d1 85       	ldd	r29, Z+9	; 0x09
    4444:	42 81       	ldd	r20, Z+2	; 0x02
    4446:	53 81       	ldd	r21, Z+3	; 0x03
    4448:	da 01       	movw	r26, r20
    444a:	11 96       	adiw	r26, 0x01	; 1
    444c:	b3 83       	std	Z+3, r27	; 0x03
    444e:	a2 83       	std	Z+2, r26	; 0x02
    4450:	fe 01       	movw	r30, r28
    4452:	e4 0f       	add	r30, r20
    4454:	f5 1f       	adc	r31, r21
    4456:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
    4458:	6a 17       	cp	r22, r26
    445a:	7b 07       	cpc	r23, r27
    445c:	21 f4       	brne	.+8      	; 0x4466 <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
    445e:	10 92 e5 09 	sts	0x09E5, r1	; 0x8009e5 <txFifo+0x3>
    4462:	10 92 e4 09 	sts	0x09E4, r1	; 0x8009e4 <txFifo+0x2>
  txFifo.bytes++;
    4466:	2f 5f       	subi	r18, 0xFF	; 255
    4468:	3f 4f       	sbci	r19, 0xFF	; 255
    446a:	30 93 e9 09 	sts	0x09E9, r19	; 0x8009e9 <txFifo+0x7>
    446e:	20 93 e8 09 	sts	0x09E8, r18	; 0x8009e8 <txFifo+0x6>
}
    4472:	df 91       	pop	r29
    4474:	cf 91       	pop	r28
    4476:	08 95       	ret

00004478 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
    4478:	4f b7       	in	r20, 0x3f	; 63
    447a:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
    447c:	e7 e4       	ldi	r30, 0x47	; 71
    447e:	f8 e0       	ldi	r31, 0x08	; 8
    4480:	20 85       	ldd	r18, Z+8	; 0x08
    4482:	31 85       	ldd	r19, Z+9	; 0x09
    4484:	80 81       	ld	r24, Z
    4486:	91 81       	ldd	r25, Z+1	; 0x01
    4488:	bc 01       	movw	r22, r24
    448a:	6f 5f       	subi	r22, 0xFF	; 255
    448c:	7f 4f       	sbci	r23, 0xFF	; 255
    448e:	71 83       	std	Z+1, r23	; 0x01
    4490:	60 83       	st	Z, r22
    4492:	d9 01       	movw	r26, r18
    4494:	a8 0f       	add	r26, r24
    4496:	b9 1f       	adc	r27, r25
    4498:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
    449a:	60 81       	ld	r22, Z
    449c:	71 81       	ldd	r23, Z+1	; 0x01
    449e:	24 81       	ldd	r18, Z+4	; 0x04
    44a0:	35 81       	ldd	r19, Z+5	; 0x05
    44a2:	62 17       	cp	r22, r18
    44a4:	73 07       	cpc	r23, r19
    44a6:	21 f4       	brne	.+8      	; 0x44b0 <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
    44a8:	10 92 48 08 	sts	0x0848, r1	; 0x800848 <rxFifo+0x1>
    44ac:	10 92 47 08 	sts	0x0847, r1	; 0x800847 <rxFifo>
    rxFifo.bytes--;
    44b0:	e7 e4       	ldi	r30, 0x47	; 71
    44b2:	f8 e0       	ldi	r31, 0x08	; 8
    44b4:	26 81       	ldd	r18, Z+6	; 0x06
    44b6:	37 81       	ldd	r19, Z+7	; 0x07
    44b8:	21 50       	subi	r18, 0x01	; 1
    44ba:	31 09       	sbc	r19, r1
    44bc:	37 83       	std	Z+7, r19	; 0x07
    44be:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
    44c0:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
    44c2:	08 95       	ret

000044c4 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
    44c4:	1f 92       	push	r1
    44c6:	0f 92       	push	r0
    44c8:	0f b6       	in	r0, 0x3f	; 63
    44ca:	0f 92       	push	r0
    44cc:	11 24       	eor	r1, r1
    44ce:	0b b6       	in	r0, 0x3b	; 59
    44d0:	0f 92       	push	r0
    44d2:	8f 93       	push	r24
    44d4:	ef 93       	push	r30
    44d6:	ff 93       	push	r31
  udrEmpty = true;
    44d8:	81 e0       	ldi	r24, 0x01	; 1
    44da:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
    44de:	e9 ec       	ldi	r30, 0xC9	; 201
    44e0:	f0 e0       	ldi	r31, 0x00	; 0
    44e2:	80 81       	ld	r24, Z
    44e4:	8f 7d       	andi	r24, 0xDF	; 223
    44e6:	80 83       	st	Z, r24
}
    44e8:	ff 91       	pop	r31
    44ea:	ef 91       	pop	r30
    44ec:	8f 91       	pop	r24
    44ee:	0f 90       	pop	r0
    44f0:	0b be       	out	0x3b, r0	; 59
    44f2:	0f 90       	pop	r0
    44f4:	0f be       	out	0x3f, r0	; 63
    44f6:	0f 90       	pop	r0
    44f8:	1f 90       	pop	r1
    44fa:	18 95       	reti

000044fc <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
    44fc:	1f 92       	push	r1
    44fe:	0f 92       	push	r0
    4500:	0f b6       	in	r0, 0x3f	; 63
    4502:	0f 92       	push	r0
    4504:	11 24       	eor	r1, r1
    4506:	0b b6       	in	r0, 0x3b	; 59
    4508:	0f 92       	push	r0
    450a:	2f 93       	push	r18
    450c:	3f 93       	push	r19
    450e:	4f 93       	push	r20
    4510:	5f 93       	push	r21
    4512:	6f 93       	push	r22
    4514:	7f 93       	push	r23
    4516:	8f 93       	push	r24
    4518:	9f 93       	push	r25
    451a:	af 93       	push	r26
    451c:	bf 93       	push	r27
    451e:	ef 93       	push	r30
    4520:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
    4522:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
    4526:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
    452a:	8c 71       	andi	r24, 0x1C	; 28
    452c:	59 f5       	brne	.+86     	; 0x4584 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
    452e:	e7 e4       	ldi	r30, 0x47	; 71
    4530:	f8 e0       	ldi	r31, 0x08	; 8
    4532:	46 81       	ldd	r20, Z+6	; 0x06
    4534:	57 81       	ldd	r21, Z+7	; 0x07
    4536:	84 81       	ldd	r24, Z+4	; 0x04
    4538:	95 81       	ldd	r25, Z+5	; 0x05
    453a:	48 17       	cp	r20, r24
    453c:	59 07       	cpc	r21, r25
    453e:	11 f1       	breq	.+68     	; 0x4584 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
    4540:	40 85       	ldd	r20, Z+8	; 0x08
    4542:	51 85       	ldd	r21, Z+9	; 0x09
    4544:	82 81       	ldd	r24, Z+2	; 0x02
    4546:	93 81       	ldd	r25, Z+3	; 0x03
    4548:	bc 01       	movw	r22, r24
    454a:	6f 5f       	subi	r22, 0xFF	; 255
    454c:	7f 4f       	sbci	r23, 0xFF	; 255
    454e:	73 83       	std	Z+3, r23	; 0x03
    4550:	62 83       	std	Z+2, r22	; 0x02
    4552:	da 01       	movw	r26, r20
    4554:	a8 0f       	add	r26, r24
    4556:	b9 1f       	adc	r27, r25
    4558:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
    455a:	22 81       	ldd	r18, Z+2	; 0x02
    455c:	33 81       	ldd	r19, Z+3	; 0x03
    455e:	84 81       	ldd	r24, Z+4	; 0x04
    4560:	95 81       	ldd	r25, Z+5	; 0x05
    4562:	28 17       	cp	r18, r24
    4564:	39 07       	cpc	r19, r25
    4566:	21 f4       	brne	.+8      	; 0x4570 <__vector_36+0x74>
      rxFifo.tail = 0;
    4568:	10 92 4a 08 	sts	0x084A, r1	; 0x80084a <rxFifo+0x3>
    456c:	10 92 49 08 	sts	0x0849, r1	; 0x800849 <rxFifo+0x2>
    rxFifo.bytes++;
    4570:	e7 e4       	ldi	r30, 0x47	; 71
    4572:	f8 e0       	ldi	r31, 0x08	; 8
    4574:	86 81       	ldd	r24, Z+6	; 0x06
    4576:	97 81       	ldd	r25, Z+7	; 0x07
    4578:	01 96       	adiw	r24, 0x01	; 1
    457a:	97 83       	std	Z+7, r25	; 0x07
    457c:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
    457e:	81 e0       	ldi	r24, 0x01	; 1
    4580:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
    4584:	ff 91       	pop	r31
    4586:	ef 91       	pop	r30
    4588:	bf 91       	pop	r27
    458a:	af 91       	pop	r26
    458c:	9f 91       	pop	r25
    458e:	8f 91       	pop	r24
    4590:	7f 91       	pop	r23
    4592:	6f 91       	pop	r22
    4594:	5f 91       	pop	r21
    4596:	4f 91       	pop	r20
    4598:	3f 91       	pop	r19
    459a:	2f 91       	pop	r18
    459c:	0f 90       	pop	r0
    459e:	0b be       	out	0x3b, r0	; 59
    45a0:	0f 90       	pop	r0
    45a2:	0f be       	out	0x3f, r0	; 63
    45a4:	0f 90       	pop	r0
    45a6:	1f 90       	pop	r1
    45a8:	18 95       	reti

000045aa <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
    45aa:	80 91 e8 09 	lds	r24, 0x09E8	; 0x8009e8 <txFifo+0x6>
    45ae:	90 91 e9 09 	lds	r25, 0x09E9	; 0x8009e9 <txFifo+0x7>
    45b2:	00 97       	sbiw	r24, 0x00	; 0
    45b4:	69 f1       	breq	.+90     	; 0x4610 <HAL_UartTaskHandler+0x66>
    45b6:	20 91 b5 06 	lds	r18, 0x06B5	; 0x8006b5 <udrEmpty>
    45ba:	22 23       	and	r18, r18
    45bc:	49 f1       	breq	.+82     	; 0x4610 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
    45be:	e2 ee       	ldi	r30, 0xE2	; 226
    45c0:	f9 e0       	ldi	r31, 0x09	; 9
    45c2:	60 85       	ldd	r22, Z+8	; 0x08
    45c4:	71 85       	ldd	r23, Z+9	; 0x09
    45c6:	20 81       	ld	r18, Z
    45c8:	31 81       	ldd	r19, Z+1	; 0x01
    45ca:	a9 01       	movw	r20, r18
    45cc:	4f 5f       	subi	r20, 0xFF	; 255
    45ce:	5f 4f       	sbci	r21, 0xFF	; 255
    45d0:	51 83       	std	Z+1, r21	; 0x01
    45d2:	40 83       	st	Z, r20
    45d4:	db 01       	movw	r26, r22
    45d6:	a2 0f       	add	r26, r18
    45d8:	b3 1f       	adc	r27, r19
    45da:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
    45dc:	64 81       	ldd	r22, Z+4	; 0x04
    45de:	75 81       	ldd	r23, Z+5	; 0x05
    45e0:	46 17       	cp	r20, r22
    45e2:	57 07       	cpc	r21, r23
    45e4:	21 f4       	brne	.+8      	; 0x45ee <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
    45e6:	10 92 e3 09 	sts	0x09E3, r1	; 0x8009e3 <txFifo+0x1>
    45ea:	10 92 e2 09 	sts	0x09E2, r1	; 0x8009e2 <txFifo>
    txFifo.bytes--;
    45ee:	01 97       	sbiw	r24, 0x01	; 1
    45f0:	90 93 e9 09 	sts	0x09E9, r25	; 0x8009e9 <txFifo+0x7>
    45f4:	80 93 e8 09 	sts	0x09E8, r24	; 0x8009e8 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
    45f8:	9f b7       	in	r25, 0x3f	; 63
    45fa:	f8 94       	cli
      UDRx = byte;
    45fc:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
    4600:	e9 ec       	ldi	r30, 0xC9	; 201
    4602:	f0 e0       	ldi	r31, 0x00	; 0
    4604:	80 81       	ld	r24, Z
    4606:	80 62       	ori	r24, 0x20	; 32
    4608:	80 83       	st	Z, r24
      udrEmpty = false;
    460a:	10 92 b5 06 	sts	0x06B5, r1	; 0x8006b5 <udrEmpty>
    ATOMIC_SECTION_LEAVE
    460e:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
    4610:	2f b7       	in	r18, 0x3f	; 63
    4612:	f8 94       	cli
      new = newData;
    4614:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <newData>
      newData = false;
    4618:	10 92 b4 06 	sts	0x06B4, r1	; 0x8006b4 <newData>
      bytes = rxFifo.bytes;
    461c:	40 91 4d 08 	lds	r20, 0x084D	; 0x80084d <rxFifo+0x6>
    4620:	50 91 4e 08 	lds	r21, 0x084E	; 0x80084e <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
    4624:	2f bf       	out	0x3f, r18	; 63

    if (new)
    4626:	99 23       	and	r25, r25
    4628:	11 f0       	breq	.+4      	; 0x462e <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
    462a:	ca 01       	movw	r24, r20
    462c:	4c ca       	rjmp	.-2920   	; 0x3ac6 <HAL_UartBytesReceived>
    462e:	08 95       	ret

00004630 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
    4630:	e1 ea       	ldi	r30, 0xA1	; 161
    4632:	f3 e2       	ldi	r31, 0x23	; 35
    4634:	14 82       	std	Z+4, r1	; 0x04
    4636:	15 82       	std	Z+5, r1	; 0x05
    4638:	11 82       	std	Z+1, r1	; 0x01
    463a:	10 82       	st	Z, r1
    463c:	17 a2       	std	Z+39, r1	; 0x27
    463e:	16 a2       	std	Z+38, r1	; 0x26
    4640:	e7 ea       	ldi	r30, 0xA7	; 167
    4642:	f3 e2       	ldi	r31, 0x23	; 35
    4644:	87 ec       	ldi	r24, 0xC7	; 199
    4646:	93 e2       	ldi	r25, 0x23	; 35
    4648:	11 92       	st	Z+, r1
    464a:	11 92       	st	Z+, r1
    464c:	e8 17       	cp	r30, r24
    464e:	f9 07       	cpc	r31, r25
    4650:	d9 f7       	brne	.-10     	; 0x4648 <NWK_Init+0x18>
    4652:	42 d6       	rcall	.+3204   	; 0x52d8 <nwkTxInit>
    4654:	60 d3       	rcall	.+1728   	; 0x4d16 <nwkRxInit>
    4656:	0d d1       	rcall	.+538    	; 0x4872 <nwkFrameInit>
    4658:	40 d0       	rcall	.+128    	; 0x46da <nwkDataReqInit>
    465a:	92 c1       	rjmp	.+804    	; 0x4980 <nwkRouteInit>
    465c:	08 95       	ret

0000465e <NWK_SetAddr>:
    465e:	90 93 a2 23 	sts	0x23A2, r25	; 0x8023a2 <nwkIb+0x1>
    4662:	80 93 a1 23 	sts	0x23A1, r24	; 0x8023a1 <nwkIb>
    4666:	0c 94 70 2b 	jmp	0x56e0	; 0x56e0 <PHY_SetShortAddr>
    466a:	08 95       	ret

0000466c <NWK_SetPanId>:
    466c:	90 93 a4 23 	sts	0x23A4, r25	; 0x8023a4 <nwkIb+0x3>
    4670:	80 93 a3 23 	sts	0x23A3, r24	; 0x8023a3 <nwkIb+0x2>
    4674:	0c 94 5e 2b 	jmp	0x56bc	; 0x56bc <PHY_SetPanId>
    4678:	08 95       	ret

0000467a <NWK_OpenEndpoint>:
    467a:	e8 2f       	mov	r30, r24
    467c:	f0 e0       	ldi	r31, 0x00	; 0
    467e:	ee 0f       	add	r30, r30
    4680:	ff 1f       	adc	r31, r31
    4682:	e9 55       	subi	r30, 0x59	; 89
    4684:	fc 4d       	sbci	r31, 0xDC	; 220
    4686:	71 83       	std	Z+1, r23	; 0x01
    4688:	60 83       	st	Z, r22
    468a:	08 95       	ret

0000468c <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    468c:	8b d3       	rcall	.+1814   	; 0x4da4 <nwkRxTaskHandler>
  nwkTxTaskHandler();
    468e:	20 d7       	rcall	.+3648   	; 0x54d0 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    4690:	4d c0       	rjmp	.+154    	; 0x472c <nwkDataReqTaskHandler>
    4692:	08 95       	ret

00004694 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    4694:	e0 91 ec 09 	lds	r30, 0x09EC	; 0x8009ec <nwkDataReqQueue>
    4698:	f0 91 ed 09 	lds	r31, 0x09ED	; 0x8009ed <nwkDataReqQueue+0x1>
    469c:	30 97       	sbiw	r30, 0x00	; 0
    469e:	d9 f0       	breq	.+54     	; 0x46d6 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
    46a0:	22 81       	ldd	r18, Z+2	; 0x02
    46a2:	33 81       	ldd	r19, Z+3	; 0x03
    46a4:	82 17       	cp	r24, r18
    46a6:	93 07       	cpc	r25, r19
    46a8:	89 f4       	brne	.+34     	; 0x46cc <nwkDataReqTxConf+0x38>
    46aa:	05 c0       	rjmp	.+10     	; 0x46b6 <nwkDataReqTxConf+0x22>
    46ac:	22 81       	ldd	r18, Z+2	; 0x02
    46ae:	33 81       	ldd	r19, Z+3	; 0x03
    46b0:	28 17       	cp	r18, r24
    46b2:	39 07       	cpc	r19, r25
    46b4:	59 f4       	brne	.+22     	; 0x46cc <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
    46b6:	dc 01       	movw	r26, r24
    46b8:	ad 57       	subi	r26, 0x7D	; 125
    46ba:	bf 4f       	sbci	r27, 0xFF	; 255
    46bc:	2c 91       	ld	r18, X
    46be:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
    46c0:	13 96       	adiw	r26, 0x03	; 3
    46c2:	2c 91       	ld	r18, X
    46c4:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
    46c6:	22 e0       	ldi	r18, 0x02	; 2
    46c8:	24 83       	std	Z+4, r18	; 0x04
      break;
    46ca:	05 c0       	rjmp	.+10     	; 0x46d6 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    46cc:	01 90       	ld	r0, Z+
    46ce:	f0 81       	ld	r31, Z
    46d0:	e0 2d       	mov	r30, r0
    46d2:	30 97       	sbiw	r30, 0x00	; 0
    46d4:	59 f7       	brne	.-42     	; 0x46ac <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
    46d6:	11 c1       	rjmp	.+546    	; 0x48fa <nwkFrameFree>
    46d8:	08 95       	ret

000046da <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    46da:	10 92 ed 09 	sts	0x09ED, r1	; 0x8009ed <nwkDataReqQueue+0x1>
    46de:	10 92 ec 09 	sts	0x09EC, r1	; 0x8009ec <nwkDataReqQueue>
    46e2:	08 95       	ret

000046e4 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    46e4:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
    46e6:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
    46e8:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
    46ea:	13 82       	std	Z+3, r1	; 0x03
    46ec:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
    46ee:	a1 ea       	ldi	r26, 0xA1	; 161
    46f0:	b3 e2       	ldi	r27, 0x23	; 35
    46f2:	96 96       	adiw	r26, 0x26	; 38
    46f4:	8d 91       	ld	r24, X+
    46f6:	9c 91       	ld	r25, X
    46f8:	97 97       	sbiw	r26, 0x27	; 39
    46fa:	01 96       	adiw	r24, 0x01	; 1
    46fc:	97 96       	adiw	r26, 0x27	; 39
    46fe:	9c 93       	st	X, r25
    4700:	8e 93       	st	-X, r24
    4702:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
    4704:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <nwkDataReqQueue>
    4708:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <nwkDataReqQueue+0x1>
    470c:	00 97       	sbiw	r24, 0x00	; 0
    470e:	39 f4       	brne	.+14     	; 0x471e <NWK_DataReq+0x3a>
  {
    req->next = NULL;
    4710:	11 82       	std	Z+1, r1	; 0x01
    4712:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
    4714:	f0 93 ed 09 	sts	0x09ED, r31	; 0x8009ed <nwkDataReqQueue+0x1>
    4718:	e0 93 ec 09 	sts	0x09EC, r30	; 0x8009ec <nwkDataReqQueue>
    471c:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    471e:	91 83       	std	Z+1, r25	; 0x01
    4720:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    4722:	f0 93 ed 09 	sts	0x09ED, r31	; 0x8009ed <nwkDataReqQueue+0x1>
    4726:	e0 93 ec 09 	sts	0x09EC, r30	; 0x8009ec <nwkDataReqQueue>
    472a:	08 95       	ret

0000472c <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    472c:	0f 93       	push	r16
    472e:	1f 93       	push	r17
    4730:	cf 93       	push	r28
    4732:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    4734:	e0 91 ec 09 	lds	r30, 0x09EC	; 0x8009ec <nwkDataReqQueue>
    4738:	f0 91 ed 09 	lds	r31, 0x09ED	; 0x8009ed <nwkDataReqQueue+0x1>
    473c:	30 97       	sbiw	r30, 0x00	; 0
    473e:	09 f4       	brne	.+2      	; 0x4742 <nwkDataReqTaskHandler+0x16>
    4740:	93 c0       	rjmp	.+294    	; 0x4868 <nwkDataReqTaskHandler+0x13c>
    4742:	ef 01       	movw	r28, r30
  {
    switch (req->state)
    4744:	8c 81       	ldd	r24, Y+4	; 0x04
    4746:	88 23       	and	r24, r24
    4748:	21 f0       	breq	.+8      	; 0x4752 <nwkDataReqTaskHandler+0x26>
    474a:	82 30       	cpi	r24, 0x02	; 2
    474c:	09 f4       	brne	.+2      	; 0x4750 <nwkDataReqTaskHandler+0x24>
    474e:	66 c0       	rjmp	.+204    	; 0x481c <nwkDataReqTaskHandler+0xf0>
    4750:	85 c0       	rjmp	.+266    	; 0x485c <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    4752:	9a d0       	rcall	.+308    	; 0x4888 <nwkFrameAlloc>
    4754:	8c 01       	movw	r16, r24
    4756:	00 97       	sbiw	r24, 0x00	; 0
    4758:	21 f4       	brne	.+8      	; 0x4762 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    475a:	82 e0       	ldi	r24, 0x02	; 2
    475c:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    475e:	8f 87       	std	Y+15, r24	; 0x0f
    4760:	83 c0       	rjmp	.+262    	; 0x4868 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
    4762:	9b 83       	std	Y+3, r25	; 0x03
    4764:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    4766:	81 e0       	ldi	r24, 0x01	; 1
    4768:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    476a:	f8 01       	movw	r30, r16
    476c:	e9 57       	subi	r30, 0x79	; 121
    476e:	ff 4f       	sbci	r31, 0xFF	; 255
    4770:	8a e4       	ldi	r24, 0x4A	; 74
    4772:	93 e2       	ldi	r25, 0x23	; 35
    4774:	91 83       	std	Z+1, r25	; 0x01
    4776:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    4778:	31 97       	sbiw	r30, 0x01	; 1
    477a:	89 85       	ldd	r24, Y+9	; 0x09
    477c:	82 fb       	bst	r24, 2
    477e:	88 27       	eor	r24, r24
    4780:	80 f9       	bld	r24, 0
    4782:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    4784:	99 85       	ldd	r25, Y+9	; 0x09
    4786:	d8 01       	movw	r26, r16
    4788:	1b 96       	adiw	r26, 0x0b	; 11
    478a:	8c 91       	ld	r24, X
    478c:	1b 97       	sbiw	r26, 0x0b	; 11
    478e:	90 fb       	bst	r25, 0
    4790:	80 f9       	bld	r24, 0
    4792:	1b 96       	adiw	r26, 0x0b	; 11
    4794:	8c 93       	st	X, r24
    4796:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    4798:	99 85       	ldd	r25, Y+9	; 0x09
    479a:	93 fb       	bst	r25, 3
    479c:	99 27       	eor	r25, r25
    479e:	90 f9       	bld	r25, 0
    47a0:	90 fb       	bst	r25, 0
    47a2:	82 f9       	bld	r24, 2
    47a4:	1b 96       	adiw	r26, 0x0b	; 11
    47a6:	8c 93       	st	X, r24
    47a8:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    47aa:	e1 ea       	ldi	r30, 0xA1	; 161
    47ac:	f3 e2       	ldi	r31, 0x23	; 35
    47ae:	84 81       	ldd	r24, Z+4	; 0x04
    47b0:	8f 5f       	subi	r24, 0xFF	; 255
    47b2:	84 83       	std	Z+4, r24	; 0x04
    47b4:	1c 96       	adiw	r26, 0x0c	; 12
    47b6:	8c 93       	st	X, r24
    47b8:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
    47ba:	80 81       	ld	r24, Z
    47bc:	91 81       	ldd	r25, Z+1	; 0x01
    47be:	1e 96       	adiw	r26, 0x0e	; 14
    47c0:	9c 93       	st	X, r25
    47c2:	8e 93       	st	-X, r24
    47c4:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
    47c6:	8d 81       	ldd	r24, Y+5	; 0x05
    47c8:	9e 81       	ldd	r25, Y+6	; 0x06
    47ca:	50 96       	adiw	r26, 0x10	; 16
    47cc:	9c 93       	st	X, r25
    47ce:	8e 93       	st	-X, r24
    47d0:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    47d2:	88 85       	ldd	r24, Y+8	; 0x08
    47d4:	98 2f       	mov	r25, r24
    47d6:	9f 70       	andi	r25, 0x0F	; 15
    47d8:	51 96       	adiw	r26, 0x11	; 17
    47da:	8c 91       	ld	r24, X
    47dc:	51 97       	sbiw	r26, 0x11	; 17
    47de:	80 7f       	andi	r24, 0xF0	; 240
    47e0:	89 2b       	or	r24, r25
    47e2:	51 96       	adiw	r26, 0x11	; 17
    47e4:	8c 93       	st	X, r24
    47e6:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    47e8:	9f 81       	ldd	r25, Y+7	; 0x07
    47ea:	92 95       	swap	r25
    47ec:	90 7f       	andi	r25, 0xF0	; 240
    47ee:	8f 70       	andi	r24, 0x0F	; 15
    47f0:	89 2b       	or	r24, r25
    47f2:	51 96       	adiw	r26, 0x11	; 17
    47f4:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
    47f6:	f8 01       	movw	r30, r16
    47f8:	ef 57       	subi	r30, 0x7F	; 127
    47fa:	ff 4f       	sbci	r31, 0xFF	; 255
    47fc:	4c 85       	ldd	r20, Y+12	; 0x0c
    47fe:	50 e0       	ldi	r21, 0x00	; 0
    4800:	6a 85       	ldd	r22, Y+10	; 0x0a
    4802:	7b 85       	ldd	r23, Y+11	; 0x0b
    4804:	80 81       	ld	r24, Z
    4806:	91 81       	ldd	r25, Z+1	; 0x01
    4808:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <memcpy>
  frame->size += req->size;
    480c:	f8 01       	movw	r30, r16
    480e:	91 81       	ldd	r25, Z+1	; 0x01
    4810:	8c 85       	ldd	r24, Y+12	; 0x0c
    4812:	89 0f       	add	r24, r25
    4814:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
    4816:	c8 01       	movw	r24, r16
    4818:	82 d5       	rcall	.+2820   	; 0x531e <nwkTxFrame>
    481a:	26 c0       	rjmp	.+76     	; 0x4868 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    481c:	ec 17       	cp	r30, r28
    481e:	fd 07       	cpc	r31, r29
    4820:	41 f4       	brne	.+16     	; 0x4832 <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    4822:	80 81       	ld	r24, Z
    4824:	91 81       	ldd	r25, Z+1	; 0x01
    4826:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <nwkDataReqQueue+0x1>
    482a:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <nwkDataReqQueue>
    482e:	0a c0       	rjmp	.+20     	; 0x4844 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    4830:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    4832:	80 81       	ld	r24, Z
    4834:	91 81       	ldd	r25, Z+1	; 0x01
    4836:	8c 17       	cp	r24, r28
    4838:	9d 07       	cpc	r25, r29
    483a:	d1 f7       	brne	.-12     	; 0x4830 <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    483c:	88 81       	ld	r24, Y
    483e:	99 81       	ldd	r25, Y+1	; 0x01
    4840:	91 83       	std	Z+1, r25	; 0x01
    4842:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
    4844:	e1 ea       	ldi	r30, 0xA1	; 161
    4846:	f3 e2       	ldi	r31, 0x23	; 35
    4848:	86 a1       	ldd	r24, Z+38	; 0x26
    484a:	97 a1       	ldd	r25, Z+39	; 0x27
    484c:	01 97       	sbiw	r24, 0x01	; 1
    484e:	97 a3       	std	Z+39, r25	; 0x27
    4850:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
    4852:	ed 85       	ldd	r30, Y+13	; 0x0d
    4854:	fe 85       	ldd	r31, Y+14	; 0x0e
    4856:	ce 01       	movw	r24, r28
    4858:	19 95       	eicall
    485a:	06 c0       	rjmp	.+12     	; 0x4868 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    485c:	09 90       	ld	r0, Y+
    485e:	d8 81       	ld	r29, Y
    4860:	c0 2d       	mov	r28, r0
    4862:	20 97       	sbiw	r28, 0x00	; 0
    4864:	09 f0       	breq	.+2      	; 0x4868 <nwkDataReqTaskHandler+0x13c>
    4866:	6e cf       	rjmp	.-292    	; 0x4744 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
    4868:	df 91       	pop	r29
    486a:	cf 91       	pop	r28
    486c:	1f 91       	pop	r17
    486e:	0f 91       	pop	r16
    4870:	08 95       	ret

00004872 <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    4872:	ee ee       	ldi	r30, 0xEE	; 238
    4874:	f9 e0       	ldi	r31, 0x09	; 9
    4876:	8c ef       	ldi	r24, 0xFC	; 252
    4878:	99 e1       	ldi	r25, 0x19	; 25
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    487a:	10 82       	st	Z, r1
    487c:	e7 57       	subi	r30, 0x77	; 119
    487e:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    4880:	e8 17       	cp	r30, r24
    4882:	f9 07       	cpc	r31, r25
    4884:	d1 f7       	brne	.-12     	; 0x487a <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    4886:	08 95       	ret

00004888 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    4888:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <nwkFrameFrames>
    488c:	88 23       	and	r24, r24
    488e:	59 f0       	breq	.+22     	; 0x48a6 <nwkFrameAlloc+0x1e>
    4890:	e7 e7       	ldi	r30, 0x77	; 119
    4892:	fa e0       	ldi	r31, 0x0A	; 10
    4894:	6c ef       	ldi	r22, 0xFC	; 252
    4896:	79 e1       	ldi	r23, 0x19	; 25
    4898:	81 e0       	ldi	r24, 0x01	; 1
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	ac 01       	movw	r20, r24
    489e:	20 81       	ld	r18, Z
    48a0:	21 11       	cpse	r18, r1
    48a2:	22 c0       	rjmp	.+68     	; 0x48e8 <nwkFrameAlloc+0x60>
    48a4:	02 c0       	rjmp	.+4      	; 0x48aa <nwkFrameAlloc+0x22>
    48a6:	40 e0       	ldi	r20, 0x00	; 0
    48a8:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    48aa:	69 e8       	ldi	r22, 0x89	; 137
    48ac:	64 9f       	mul	r22, r20
    48ae:	90 01       	movw	r18, r0
    48b0:	65 9f       	mul	r22, r21
    48b2:	30 0d       	add	r19, r0
    48b4:	11 24       	eor	r1, r1
    48b6:	c9 01       	movw	r24, r18
    48b8:	82 51       	subi	r24, 0x12	; 18
    48ba:	96 4f       	sbci	r25, 0xF6	; 246
    48bc:	fc 01       	movw	r30, r24
    48be:	11 92       	st	Z+, r1
    48c0:	6a 95       	dec	r22
    48c2:	e9 f7       	brne	.-6      	; 0x48be <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    48c4:	40 e1       	ldi	r20, 0x10	; 16
    48c6:	fc 01       	movw	r30, r24
    48c8:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    48ca:	ef 57       	subi	r30, 0x7F	; 127
    48cc:	ff 4f       	sbci	r31, 0xFF	; 255
    48ce:	20 50       	subi	r18, 0x00	; 0
    48d0:	36 4f       	sbci	r19, 0xF6	; 246
    48d2:	31 83       	std	Z+1, r19	; 0x01
    48d4:	20 83       	st	Z, r18
      nwkIb.lock++;
    48d6:	e1 ea       	ldi	r30, 0xA1	; 161
    48d8:	f3 e2       	ldi	r31, 0x23	; 35
    48da:	26 a1       	ldd	r18, Z+38	; 0x26
    48dc:	37 a1       	ldd	r19, Z+39	; 0x27
    48de:	2f 5f       	subi	r18, 0xFF	; 255
    48e0:	3f 4f       	sbci	r19, 0xFF	; 255
    48e2:	37 a3       	std	Z+39, r19	; 0x27
    48e4:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
    48e6:	08 95       	ret
    48e8:	01 96       	adiw	r24, 0x01	; 1
    48ea:	e7 57       	subi	r30, 0x77	; 119
    48ec:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    48ee:	e6 17       	cp	r30, r22
    48f0:	f7 07       	cpc	r31, r23
    48f2:	a1 f6       	brne	.-88     	; 0x489c <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    48f4:	80 e0       	ldi	r24, 0x00	; 0
    48f6:	90 e0       	ldi	r25, 0x00	; 0
}
    48f8:	08 95       	ret

000048fa <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    48fa:	fc 01       	movw	r30, r24
    48fc:	10 82       	st	Z, r1
  nwkIb.lock--;
    48fe:	e1 ea       	ldi	r30, 0xA1	; 161
    4900:	f3 e2       	ldi	r31, 0x23	; 35
    4902:	86 a1       	ldd	r24, Z+38	; 0x26
    4904:	97 a1       	ldd	r25, Z+39	; 0x27
    4906:	01 97       	sbiw	r24, 0x01	; 1
    4908:	97 a3       	std	Z+39, r25	; 0x27
    490a:	86 a3       	std	Z+38, r24	; 0x26
    490c:	08 95       	ret

0000490e <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    490e:	00 97       	sbiw	r24, 0x00	; 0
    4910:	41 f0       	breq	.+16     	; 0x4922 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    4912:	fc 01       	movw	r30, r24
    4914:	e7 57       	subi	r30, 0x77	; 119
    4916:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    4918:	89 e1       	ldi	r24, 0x19	; 25
    491a:	ec 3f       	cpi	r30, 0xFC	; 252
    491c:	f8 07       	cpc	r31, r24
    491e:	18 f0       	brcs	.+6      	; 0x4926 <nwkFrameNext+0x18>
    4920:	12 c0       	rjmp	.+36     	; 0x4946 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    4922:	ee ee       	ldi	r30, 0xEE	; 238
    4924:	f9 e0       	ldi	r31, 0x09	; 9
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    4926:	80 81       	ld	r24, Z
    4928:	88 23       	and	r24, r24
    492a:	21 f0       	breq	.+8      	; 0x4934 <nwkFrameNext+0x26>
    492c:	0f c0       	rjmp	.+30     	; 0x494c <nwkFrameNext+0x3e>
    492e:	80 81       	ld	r24, Z
    4930:	81 11       	cpse	r24, r1
    4932:	0f c0       	rjmp	.+30     	; 0x4952 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    4934:	e7 57       	subi	r30, 0x77	; 119
    4936:	ff 4f       	sbci	r31, 0xFF	; 255
    4938:	89 e1       	ldi	r24, 0x19	; 25
    493a:	ec 3f       	cpi	r30, 0xFC	; 252
    493c:	f8 07       	cpc	r31, r24
    493e:	b8 f3       	brcs	.-18     	; 0x492e <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    4940:	80 e0       	ldi	r24, 0x00	; 0
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	08 95       	ret
    4946:	80 e0       	ldi	r24, 0x00	; 0
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    494c:	8e 2f       	mov	r24, r30
    494e:	9f 2f       	mov	r25, r31
    4950:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    4952:	8e 2f       	mov	r24, r30
    4954:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
    4956:	08 95       	ret

00004958 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    4958:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    495a:	dc 01       	movw	r26, r24
    495c:	ad 57       	subi	r26, 0x7D	; 125
    495e:	bf 4f       	sbci	r27, 0xFF	; 255
    4960:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    4962:	a1 ea       	ldi	r26, 0xA1	; 161
    4964:	b3 e2       	ldi	r27, 0x23	; 35
    4966:	14 96       	adiw	r26, 0x04	; 4
    4968:	9c 91       	ld	r25, X
    496a:	14 97       	sbiw	r26, 0x04	; 4
    496c:	9f 5f       	subi	r25, 0xFF	; 255
    496e:	14 96       	adiw	r26, 0x04	; 4
    4970:	9c 93       	st	X, r25
    4972:	14 97       	sbiw	r26, 0x04	; 4
    4974:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    4976:	8d 91       	ld	r24, X+
    4978:	9c 91       	ld	r25, X
    497a:	96 87       	std	Z+14, r25	; 0x0e
    497c:	85 87       	std	Z+13, r24	; 0x0d
    497e:	08 95       	ret

00004980 <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
    4980:	ad ef       	ldi	r26, 0xFD	; 253
    4982:	b9 e1       	ldi	r27, 0x19	; 25
    4984:	80 e0       	ldi	r24, 0x00	; 0
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	4f ef       	ldi	r20, 0xFF	; 255
    498a:	5f ef       	ldi	r21, 0xFF	; 255
    498c:	11 96       	adiw	r26, 0x01	; 1
    498e:	5c 93       	st	X, r21
    4990:	4e 93       	st	-X, r20
    4992:	fc 01       	movw	r30, r24
    4994:	ee 0f       	add	r30, r30
    4996:	ff 1f       	adc	r31, r31
    4998:	ee 0f       	add	r30, r30
    499a:	ff 1f       	adc	r31, r31
    499c:	ee 0f       	add	r30, r30
    499e:	ff 1f       	adc	r31, r31
    49a0:	e8 1b       	sub	r30, r24
    49a2:	f9 0b       	sbc	r31, r25
    49a4:	e4 50       	subi	r30, 0x04	; 4
    49a6:	f6 4e       	sbci	r31, 0xE6	; 230
    49a8:	20 81       	ld	r18, Z
    49aa:	2e 7f       	andi	r18, 0xFE	; 254
    49ac:	20 83       	st	Z, r18
    49ae:	14 96       	adiw	r26, 0x04	; 4
    49b0:	1c 92       	st	X, r1
    49b2:	14 97       	sbiw	r26, 0x04	; 4
    49b4:	01 96       	adiw	r24, 0x01	; 1
    49b6:	17 96       	adiw	r26, 0x07	; 7
    49b8:	84 36       	cpi	r24, 0x64	; 100
    49ba:	91 05       	cpc	r25, r1
    49bc:	39 f7       	brne	.-50     	; 0x498c <nwkRouteInit+0xc>
    49be:	08 95       	ret

000049c0 <NWK_RouteFindEntry>:
    49c0:	0f 93       	push	r16
    49c2:	1f 93       	push	r17
    49c4:	cf 93       	push	r28
    49c6:	df 93       	push	r29
    49c8:	ed ef       	ldi	r30, 0xFD	; 253
    49ca:	f9 e1       	ldi	r31, 0x19	; 25
    49cc:	20 e0       	ldi	r18, 0x00	; 0
    49ce:	30 e0       	ldi	r19, 0x00	; 0
    49d0:	06 2f       	mov	r16, r22
    49d2:	10 e0       	ldi	r17, 0x00	; 0
    49d4:	40 81       	ld	r20, Z
    49d6:	51 81       	ldd	r21, Z+1	; 0x01
    49d8:	48 17       	cp	r20, r24
    49da:	59 07       	cpc	r21, r25
    49dc:	b1 f4       	brne	.+44     	; 0x4a0a <NWK_RouteFindEntry+0x4a>
    49de:	d9 01       	movw	r26, r18
    49e0:	aa 0f       	add	r26, r26
    49e2:	bb 1f       	adc	r27, r27
    49e4:	aa 0f       	add	r26, r26
    49e6:	bb 1f       	adc	r27, r27
    49e8:	aa 0f       	add	r26, r26
    49ea:	bb 1f       	adc	r27, r27
    49ec:	a2 1b       	sub	r26, r18
    49ee:	b3 0b       	sbc	r27, r19
    49f0:	a4 50       	subi	r26, 0x04	; 4
    49f2:	b6 4e       	sbci	r27, 0xE6	; 230
    49f4:	4c 91       	ld	r20, X
    49f6:	46 95       	lsr	r20
    49f8:	41 70       	andi	r20, 0x01	; 1
    49fa:	c4 2f       	mov	r28, r20
    49fc:	40 e0       	ldi	r20, 0x00	; 0
    49fe:	d4 2f       	mov	r29, r20
    4a00:	c0 17       	cp	r28, r16
    4a02:	d1 07       	cpc	r29, r17
    4a04:	11 f4       	brne	.+4      	; 0x4a0a <NWK_RouteFindEntry+0x4a>
    4a06:	cd 01       	movw	r24, r26
    4a08:	08 c0       	rjmp	.+16     	; 0x4a1a <NWK_RouteFindEntry+0x5a>
    4a0a:	2f 5f       	subi	r18, 0xFF	; 255
    4a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a0e:	37 96       	adiw	r30, 0x07	; 7
    4a10:	24 36       	cpi	r18, 0x64	; 100
    4a12:	31 05       	cpc	r19, r1
    4a14:	f9 f6       	brne	.-66     	; 0x49d4 <NWK_RouteFindEntry+0x14>
    4a16:	80 e0       	ldi	r24, 0x00	; 0
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	df 91       	pop	r29
    4a1c:	cf 91       	pop	r28
    4a1e:	1f 91       	pop	r17
    4a20:	0f 91       	pop	r16
    4a22:	08 95       	ret

00004a24 <NWK_RouteNewEntry>:
    4a24:	a0 e0       	ldi	r26, 0x00	; 0
    4a26:	b0 e0       	ldi	r27, 0x00	; 0
    4a28:	ec ef       	ldi	r30, 0xFC	; 252
    4a2a:	f9 e1       	ldi	r31, 0x19	; 25
    4a2c:	80 81       	ld	r24, Z
    4a2e:	80 fd       	sbrc	r24, 0
    4a30:	0d c0       	rjmp	.+26     	; 0x4a4c <NWK_RouteNewEntry+0x28>
    4a32:	85 81       	ldd	r24, Z+5	; 0x05
    4a34:	88 23       	and	r24, r24
    4a36:	81 f0       	breq	.+32     	; 0x4a58 <NWK_RouteNewEntry+0x34>
    4a38:	10 97       	sbiw	r26, 0x00	; 0
    4a3a:	39 f0       	breq	.+14     	; 0x4a4a <NWK_RouteNewEntry+0x26>
    4a3c:	15 96       	adiw	r26, 0x05	; 5
    4a3e:	9c 91       	ld	r25, X
    4a40:	15 97       	sbiw	r26, 0x05	; 5
    4a42:	89 17       	cp	r24, r25
    4a44:	18 f4       	brcc	.+6      	; 0x4a4c <NWK_RouteNewEntry+0x28>
    4a46:	df 01       	movw	r26, r30
    4a48:	01 c0       	rjmp	.+2      	; 0x4a4c <NWK_RouteNewEntry+0x28>
    4a4a:	df 01       	movw	r26, r30
    4a4c:	37 96       	adiw	r30, 0x07	; 7
    4a4e:	8c e1       	ldi	r24, 0x1C	; 28
    4a50:	e8 3b       	cpi	r30, 0xB8	; 184
    4a52:	f8 07       	cpc	r31, r24
    4a54:	59 f7       	brne	.-42     	; 0x4a2c <NWK_RouteNewEntry+0x8>
    4a56:	fd 01       	movw	r30, r26
    4a58:	80 81       	ld	r24, Z
    4a5a:	8d 70       	andi	r24, 0x0D	; 13
    4a5c:	80 63       	ori	r24, 0x30	; 48
    4a5e:	80 83       	st	Z, r24
    4a60:	80 e8       	ldi	r24, 0x80	; 128
    4a62:	85 83       	std	Z+5, r24	; 0x05
    4a64:	cf 01       	movw	r24, r30
    4a66:	08 95       	ret

00004a68 <NWK_RouteFreeEntry>:
    4a68:	fc 01       	movw	r30, r24
    4a6a:	80 81       	ld	r24, Z
    4a6c:	80 fd       	sbrc	r24, 0
    4a6e:	05 c0       	rjmp	.+10     	; 0x4a7a <NWK_RouteFreeEntry+0x12>
    4a70:	8f ef       	ldi	r24, 0xFF	; 255
    4a72:	9f ef       	ldi	r25, 0xFF	; 255
    4a74:	92 83       	std	Z+2, r25	; 0x02
    4a76:	81 83       	std	Z+1, r24	; 0x01
    4a78:	15 82       	std	Z+5, r1	; 0x05
    4a7a:	08 95       	ret

00004a7c <NWK_RouteNextHop>:
    4a7c:	a1 df       	rcall	.-190    	; 0x49c0 <NWK_RouteFindEntry>
    4a7e:	00 97       	sbiw	r24, 0x00	; 0
    4a80:	21 f0       	breq	.+8      	; 0x4a8a <NWK_RouteNextHop+0xe>
    4a82:	fc 01       	movw	r30, r24
    4a84:	83 81       	ldd	r24, Z+3	; 0x03
    4a86:	94 81       	ldd	r25, Z+4	; 0x04
    4a88:	08 95       	ret
    4a8a:	8f ef       	ldi	r24, 0xFF	; 255
    4a8c:	9f ef       	ldi	r25, 0xFF	; 255
    4a8e:	08 95       	ret

00004a90 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    4a90:	97 df       	rcall	.-210    	; 0x49c0 <NWK_RouteFindEntry>
  if (entry)
    4a92:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
    4a94:	09 f0       	breq	.+2      	; 0x4a98 <nwkRouteRemove+0x8>
    4a96:	e8 cf       	rjmp	.-48     	; 0x4a68 <NWK_RouteFreeEntry>
    4a98:	08 95       	ret

00004a9a <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    4a9a:	0f 93       	push	r16
    4a9c:	1f 93       	push	r17
    4a9e:	cf 93       	push	r28
    4aa0:	df 93       	push	r29
    4aa2:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    4aa4:	01 85       	ldd	r16, Z+9	; 0x09
    4aa6:	12 85       	ldd	r17, Z+10	; 0x0a
    4aa8:	11 23       	and	r17, r17
    4aaa:	2c f4       	brge	.+10     	; 0x4ab6 <nwkRouteFrameReceived+0x1c>
    4aac:	85 85       	ldd	r24, Z+13	; 0x0d
    4aae:	96 85       	ldd	r25, Z+14	; 0x0e
    4ab0:	08 17       	cp	r16, r24
    4ab2:	19 07       	cpc	r17, r25
    4ab4:	e1 f5       	brne	.+120    	; 0x4b2e <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    4ab6:	85 81       	ldd	r24, Z+5	; 0x05
    4ab8:	96 81       	ldd	r25, Z+6	; 0x06
    4aba:	01 96       	adiw	r24, 0x01	; 1
    4abc:	c1 f1       	breq	.+112    	; 0x4b2e <nwkRouteFrameReceived+0x94>
    4abe:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    4ac0:	60 e0       	ldi	r22, 0x00	; 0
    4ac2:	85 85       	ldd	r24, Z+13	; 0x0d
    4ac4:	96 85       	ldd	r25, Z+14	; 0x0e
    4ac6:	7c df       	rcall	.-264    	; 0x49c0 <NWK_RouteFindEntry>
    4ac8:	fc 01       	movw	r30, r24

  if (entry)
    4aca:	89 2b       	or	r24, r25
    4acc:	a1 f0       	breq	.+40     	; 0x4af6 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    4ace:	8f 81       	ldd	r24, Y+7	; 0x07
    4ad0:	98 85       	ldd	r25, Y+8	; 0x08
    4ad2:	01 96       	adiw	r24, 0x01	; 1
    4ad4:	f9 f4       	brne	.+62     	; 0x4b14 <nwkRouteFrameReceived+0x7a>
    4ad6:	20 91 a1 23 	lds	r18, 0x23A1	; 0x8023a1 <nwkIb>
    4ada:	30 91 a2 23 	lds	r19, 0x23A2	; 0x8023a2 <nwkIb+0x1>
    4ade:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ae0:	98 89       	ldd	r25, Y+16	; 0x10
    4ae2:	28 17       	cp	r18, r24
    4ae4:	39 07       	cpc	r19, r25
    4ae6:	b1 f4       	brne	.+44     	; 0x4b14 <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
    4ae8:	14 83       	std	Z+4, r17	; 0x04
    4aea:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    4aec:	80 81       	ld	r24, Z
    4aee:	8f 70       	andi	r24, 0x0F	; 15
    4af0:	80 63       	ori	r24, 0x30	; 48
    4af2:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    4af4:	0a c0       	rjmp	.+20     	; 0x4b0a <nwkRouteFrameReceived+0x70>
    4af6:	96 df       	rcall	.-212    	; 0x4a24 <NWK_RouteNewEntry>
    4af8:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
    4afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    4afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4afe:	92 83       	std	Z+2, r25	; 0x02
    4b00:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
    4b02:	89 85       	ldd	r24, Y+9	; 0x09
    4b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b06:	94 83       	std	Z+4, r25	; 0x04
    4b08:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
    4b0a:	cd 57       	subi	r28, 0x7D	; 125
    4b0c:	df 4f       	sbci	r29, 0xFF	; 255
    4b0e:	88 81       	ld	r24, Y
    4b10:	86 83       	std	Z+6, r24	; 0x06
    4b12:	0d c0       	rjmp	.+26     	; 0x4b2e <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    4b14:	83 81       	ldd	r24, Z+3	; 0x03
    4b16:	94 81       	ldd	r25, Z+4	; 0x04
    4b18:	08 17       	cp	r16, r24
    4b1a:	19 07       	cpc	r17, r25
    4b1c:	b1 f3       	breq	.-20     	; 0x4b0a <nwkRouteFrameReceived+0x70>
    4b1e:	96 81       	ldd	r25, Z+6	; 0x06
    4b20:	de 01       	movw	r26, r28
    4b22:	ad 57       	subi	r26, 0x7D	; 125
    4b24:	bf 4f       	sbci	r27, 0xFF	; 255
    4b26:	8c 91       	ld	r24, X
    4b28:	98 17       	cp	r25, r24
    4b2a:	f0 f2       	brcs	.-68     	; 0x4ae8 <nwkRouteFrameReceived+0x4e>
    4b2c:	ee cf       	rjmp	.-36     	; 0x4b0a <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
    4b2e:	df 91       	pop	r29
    4b30:	cf 91       	pop	r28
    4b32:	1f 91       	pop	r17
    4b34:	0f 91       	pop	r16
    4b36:	08 95       	ret

00004b38 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    4b38:	cf 93       	push	r28
    4b3a:	df 93       	push	r29
    4b3c:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    4b3e:	87 85       	ldd	r24, Z+15	; 0x0f
    4b40:	90 89       	ldd	r25, Z+16	; 0x10
    4b42:	8f 3f       	cpi	r24, 0xFF	; 255
    4b44:	2f ef       	ldi	r18, 0xFF	; 255
    4b46:	92 07       	cpc	r25, r18
    4b48:	d9 f1       	breq	.+118    	; 0x4bc0 <nwkRouteFrameSent+0x88>
    4b4a:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    4b4c:	63 85       	ldd	r22, Z+11	; 0x0b
    4b4e:	63 fb       	bst	r22, 3
    4b50:	66 27       	eor	r22, r22
    4b52:	60 f9       	bld	r22, 0
    4b54:	35 df       	rcall	.-406    	; 0x49c0 <NWK_RouteFindEntry>
    4b56:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
    4b58:	89 2b       	or	r24, r25
    4b5a:	91 f1       	breq	.+100    	; 0x4bc0 <nwkRouteFrameSent+0x88>
    4b5c:	8c 91       	ld	r24, X
    4b5e:	80 fd       	sbrc	r24, 0
    4b60:	2f c0       	rjmp	.+94     	; 0x4bc0 <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    4b62:	fe 01       	movw	r30, r28
    4b64:	ed 57       	subi	r30, 0x7D	; 125
    4b66:	ff 4f       	sbci	r31, 0xFF	; 255
    4b68:	80 81       	ld	r24, Z
    4b6a:	81 11       	cpse	r24, r1
    4b6c:	19 c0       	rjmp	.+50     	; 0x4ba0 <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    4b6e:	8c 91       	ld	r24, X
    4b70:	8f 70       	andi	r24, 0x0F	; 15
    4b72:	80 63       	ori	r24, 0x30	; 48
    4b74:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    4b76:	15 96       	adiw	r26, 0x05	; 5
    4b78:	8c 91       	ld	r24, X
    4b7a:	15 97       	sbiw	r26, 0x05	; 5
    4b7c:	8f 5f       	subi	r24, 0xFF	; 255
    4b7e:	15 96       	adiw	r26, 0x05	; 5
    4b80:	8c 93       	st	X, r24
    4b82:	8f 3f       	cpi	r24, 0xFF	; 255
    4b84:	e9 f4       	brne	.+58     	; 0x4bc0 <nwkRouteFrameSent+0x88>
    4b86:	e1 e0       	ldi	r30, 0x01	; 1
    4b88:	fa e1       	ldi	r31, 0x1A	; 26
    4b8a:	2d eb       	ldi	r18, 0xBD	; 189
    4b8c:	3c e1       	ldi	r19, 0x1C	; 28
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    4b8e:	80 81       	ld	r24, Z
    4b90:	86 95       	lsr	r24
    4b92:	8f 5f       	subi	r24, 0xFF	; 255
    4b94:	80 83       	st	Z, r24
    4b96:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    4b98:	e2 17       	cp	r30, r18
    4b9a:	f3 07       	cpc	r31, r19
    4b9c:	c1 f7       	brne	.-16     	; 0x4b8e <nwkRouteFrameSent+0x56>
    4b9e:	10 c0       	rjmp	.+32     	; 0x4bc0 <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
    4ba0:	9c 91       	ld	r25, X
    4ba2:	89 2f       	mov	r24, r25
    4ba4:	82 95       	swap	r24
    4ba6:	8f 70       	andi	r24, 0x0F	; 15
    4ba8:	81 5f       	subi	r24, 0xF1	; 241
    4baa:	8f 70       	andi	r24, 0x0F	; 15
    4bac:	28 2f       	mov	r18, r24
    4bae:	22 95       	swap	r18
    4bb0:	20 7f       	andi	r18, 0xF0	; 240
    4bb2:	9f 70       	andi	r25, 0x0F	; 15
    4bb4:	92 2b       	or	r25, r18
    4bb6:	9c 93       	st	X, r25
    4bb8:	81 11       	cpse	r24, r1
    4bba:	02 c0       	rjmp	.+4      	; 0x4bc0 <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
    4bbc:	cd 01       	movw	r24, r26
    4bbe:	54 df       	rcall	.-344    	; 0x4a68 <NWK_RouteFreeEntry>
  }
}
    4bc0:	df 91       	pop	r29
    4bc2:	cf 91       	pop	r28
    4bc4:	08 95       	ret

00004bc6 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    4bc6:	cf 93       	push	r28
    4bc8:	df 93       	push	r29
    4bca:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    4bcc:	87 85       	ldd	r24, Z+15	; 0x0f
    4bce:	90 89       	ldd	r25, Z+16	; 0x10
    4bd0:	8f 3f       	cpi	r24, 0xFF	; 255
    4bd2:	2f ef       	ldi	r18, 0xFF	; 255
    4bd4:	92 07       	cpc	r25, r18
    4bd6:	29 f4       	brne	.+10     	; 0x4be2 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    4bd8:	8f ef       	ldi	r24, 0xFF	; 255
    4bda:	9f ef       	ldi	r25, 0xFF	; 255
    4bdc:	90 87       	std	Z+8, r25	; 0x08
    4bde:	87 83       	std	Z+7, r24	; 0x07
    4be0:	0e c0       	rjmp	.+28     	; 0x4bfe <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
    4be2:	23 85       	ldd	r18, Z+11	; 0x0b
    4be4:	22 ff       	sbrs	r18, 2
    4be6:	03 c0       	rjmp	.+6      	; 0x4bee <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
    4be8:	90 87       	std	Z+8, r25	; 0x08
    4bea:	87 83       	std	Z+7, r24	; 0x07
    4bec:	08 c0       	rjmp	.+16     	; 0x4bfe <nwkRoutePrepareTx+0x38>
    4bee:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    4bf0:	63 85       	ldd	r22, Z+11	; 0x0b
    4bf2:	63 fb       	bst	r22, 3
    4bf4:	66 27       	eor	r22, r22
    4bf6:	60 f9       	bld	r22, 0
    4bf8:	41 df       	rcall	.-382    	; 0x4a7c <NWK_RouteNextHop>
    4bfa:	98 87       	std	Y+8, r25	; 0x08
    4bfc:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    4bfe:	df 91       	pop	r29
    4c00:	cf 91       	pop	r28
    4c02:	08 95       	ret

00004c04 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    4c04:	af 92       	push	r10
    4c06:	bf 92       	push	r11
    4c08:	cf 92       	push	r12
    4c0a:	df 92       	push	r13
    4c0c:	ef 92       	push	r14
    4c0e:	ff 92       	push	r15
    4c10:	1f 93       	push	r17
    4c12:	cf 93       	push	r28
    4c14:	df 93       	push	r29
    4c16:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    4c18:	1b 85       	ldd	r17, Y+11	; 0x0b
    4c1a:	13 fb       	bst	r17, 3
    4c1c:	11 27       	eor	r17, r17
    4c1e:	10 f9       	bld	r17, 0
    4c20:	cf 84       	ldd	r12, Y+15	; 0x0f
    4c22:	d8 88       	ldd	r13, Y+16	; 0x10
    4c24:	61 2f       	mov	r22, r17
    4c26:	c6 01       	movw	r24, r12
    4c28:	29 df       	rcall	.-430    	; 0x4a7c <NWK_RouteNextHop>
    4c2a:	01 96       	adiw	r24, 0x01	; 1
    4c2c:	59 f0       	breq	.+22     	; 0x4c44 <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
    4c2e:	fe 01       	movw	r30, r28
    4c30:	e9 57       	subi	r30, 0x79	; 121
    4c32:	ff 4f       	sbci	r31, 0xFF	; 255
    4c34:	11 82       	std	Z+1, r1	; 0x01
    4c36:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    4c38:	31 97       	sbiw	r30, 0x01	; 1
    4c3a:	82 e0       	ldi	r24, 0x02	; 2
    4c3c:	80 83       	st	Z, r24
    nwkTxFrame(frame);
    4c3e:	ce 01       	movw	r24, r28
    4c40:	6e d3       	rcall	.+1756   	; 0x531e <nwkTxFrame>
    4c42:	22 c0       	rjmp	.+68     	; 0x4c88 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    4c44:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
    4c46:	be 84       	ldd	r11, Y+14	; 0x0e
    4c48:	1f de       	rcall	.-962    	; 0x4888 <nwkFrameAlloc>
    4c4a:	7c 01       	movw	r14, r24
    4c4c:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
    4c4e:	d1 f0       	breq	.+52     	; 0x4c84 <nwkRouteFrame+0x80>
    4c50:	83 de       	rcall	.-762    	; 0x4958 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
    4c52:	f7 01       	movw	r30, r14
    4c54:	81 81       	ldd	r24, Z+1	; 0x01
    4c56:	8a 5f       	subi	r24, 0xFA	; 250
    4c58:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
    4c5a:	e9 57       	subi	r30, 0x79	; 121
    4c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5e:	11 82       	std	Z+1, r1	; 0x01
    4c60:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
    4c62:	f7 01       	movw	r30, r14
    4c64:	b0 8a       	std	Z+16, r11	; 0x10
    4c66:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
    4c68:	ef 57       	subi	r30, 0x7F	; 127
    4c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6c:	01 90       	ld	r0, Z+
    4c6e:	f0 81       	ld	r31, Z
    4c70:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
    4c72:	81 e0       	ldi	r24, 0x01	; 1
    4c74:	80 83       	st	Z, r24
  command->srcAddr = src;
    4c76:	b2 82       	std	Z+2, r11	; 0x02
    4c78:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
    4c7a:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
    4c7c:	c3 82       	std	Z+3, r12	; 0x03
    4c7e:	15 83       	std	Z+5, r17	; 0x05
    4c80:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
    4c82:	4d d3       	rcall	.+1690   	; 0x531e <nwkTxFrame>
    4c84:	ce 01       	movw	r24, r28
    4c86:	39 de       	rcall	.-910    	; 0x48fa <nwkFrameFree>
  }
}
    4c88:	df 91       	pop	r29
    4c8a:	cf 91       	pop	r28
    4c8c:	1f 91       	pop	r17
    4c8e:	ff 90       	pop	r15
    4c90:	ef 90       	pop	r14
    4c92:	df 90       	pop	r13
    4c94:	cf 90       	pop	r12
    4c96:	bf 90       	pop	r11
    4c98:	af 90       	pop	r10
    4c9a:	08 95       	ret

00004c9c <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    4c9c:	fc 01       	movw	r30, r24
    4c9e:	21 85       	ldd	r18, Z+9	; 0x09
    4ca0:	26 30       	cpi	r18, 0x06	; 6
    4ca2:	49 f4       	brne	.+18     	; 0x4cb6 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    4ca4:	07 80       	ldd	r0, Z+7	; 0x07
    4ca6:	f0 85       	ldd	r31, Z+8	; 0x08
    4ca8:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
    4caa:	65 81       	ldd	r22, Z+5	; 0x05
    4cac:	83 81       	ldd	r24, Z+3	; 0x03
    4cae:	94 81       	ldd	r25, Z+4	; 0x04
    4cb0:	ef de       	rcall	.-546    	; 0x4a90 <nwkRouteRemove>

  return true;
    4cb2:	81 e0       	ldi	r24, 0x01	; 1
    4cb4:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
    4cb6:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
    4cb8:	08 95       	ret

00004cba <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    4cba:	dc 01       	movw	r26, r24
    4cbc:	19 96       	adiw	r26, 0x09	; 9
    4cbe:	2c 91       	ld	r18, X
    4cc0:	19 97       	sbiw	r26, 0x09	; 9
    4cc2:	22 23       	and	r18, r18
    4cc4:	71 f0       	breq	.+28     	; 0x4ce2 <nwkRxServiceDataInd+0x28>
    4cc6:	17 96       	adiw	r26, 0x07	; 7
    4cc8:	ed 91       	ld	r30, X+
    4cca:	fc 91       	ld	r31, X
    4ccc:	18 97       	sbiw	r26, 0x08	; 8
    4cce:	20 81       	ld	r18, Z
    4cd0:	22 23       	and	r18, r18
    4cd2:	19 f0       	breq	.+6      	; 0x4cda <nwkRxServiceDataInd+0x20>
    4cd4:	21 30       	cpi	r18, 0x01	; 1
    4cd6:	19 f0       	breq	.+6      	; 0x4cde <nwkRxServiceDataInd+0x24>
    4cd8:	06 c0       	rjmp	.+12     	; 0x4ce6 <nwkRxServiceDataInd+0x2c>
    4cda:	b2 c3       	rjmp	.+1892   	; 0x5440 <nwkTxAckReceived>
    4cdc:	08 95       	ret
    4cde:	de cf       	rjmp	.-68     	; 0x4c9c <nwkRouteErrorReceived>
    4ce0:	08 95       	ret
    4ce2:	80 e0       	ldi	r24, 0x00	; 0
    4ce4:	08 95       	ret
    4ce6:	80 e0       	ldi	r24, 0x00	; 0
    4ce8:	08 95       	ret

00004cea <nwkRxDuplicateRejectionTimerHandler>:
    4cea:	bc 01       	movw	r22, r24
    4cec:	ea ec       	ldi	r30, 0xCA	; 202
    4cee:	fc e1       	ldi	r31, 0x1C	; 28
    4cf0:	2c ef       	ldi	r18, 0xFC	; 252
    4cf2:	3c e1       	ldi	r19, 0x1C	; 28
    4cf4:	40 e0       	ldi	r20, 0x00	; 0
    4cf6:	51 e0       	ldi	r21, 0x01	; 1
    4cf8:	90 81       	ld	r25, Z
    4cfa:	99 23       	and	r25, r25
    4cfc:	19 f0       	breq	.+6      	; 0x4d04 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    4cfe:	91 50       	subi	r25, 0x01	; 1
    4d00:	90 83       	st	Z, r25
    4d02:	45 2f       	mov	r20, r21
    4d04:	35 96       	adiw	r30, 0x05	; 5
    4d06:	e2 17       	cp	r30, r18
    4d08:	f3 07       	cpc	r31, r19
    4d0a:	b1 f7       	brne	.-20     	; 0x4cf8 <nwkRxDuplicateRejectionTimerHandler+0xe>
    4d0c:	44 23       	and	r20, r20
    4d0e:	11 f0       	breq	.+4      	; 0x4d14 <nwkRxDuplicateRejectionTimerHandler+0x2a>
    4d10:	cb 01       	movw	r24, r22
    4d12:	6d c6       	rjmp	.+3290   	; 0x59ee <SYS_TimerStart>
    4d14:	08 95       	ret

00004d16 <nwkRxInit>:
    4d16:	ea ec       	ldi	r30, 0xCA	; 202
    4d18:	fc e1       	ldi	r31, 0x1C	; 28
    4d1a:	8c ef       	ldi	r24, 0xFC	; 252
    4d1c:	9c e1       	ldi	r25, 0x1C	; 28
    4d1e:	10 82       	st	Z, r1
    4d20:	35 96       	adiw	r30, 0x05	; 5
    4d22:	e8 17       	cp	r30, r24
    4d24:	f9 07       	cpc	r31, r25
    4d26:	d9 f7       	brne	.-10     	; 0x4d1e <nwkRxInit+0x8>
    4d28:	e8 eb       	ldi	r30, 0xB8	; 184
    4d2a:	fc e1       	ldi	r31, 0x1C	; 28
    4d2c:	84 e6       	ldi	r24, 0x64	; 100
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	a0 e0       	ldi	r26, 0x00	; 0
    4d32:	b0 e0       	ldi	r27, 0x00	; 0
    4d34:	86 83       	std	Z+6, r24	; 0x06
    4d36:	97 83       	std	Z+7, r25	; 0x07
    4d38:	a0 87       	std	Z+8, r26	; 0x08
    4d3a:	b1 87       	std	Z+9, r27	; 0x09
    4d3c:	12 86       	std	Z+10, r1	; 0x0a
    4d3e:	85 e7       	ldi	r24, 0x75	; 117
    4d40:	96 e2       	ldi	r25, 0x26	; 38
    4d42:	94 87       	std	Z+12, r25	; 0x0c
    4d44:	83 87       	std	Z+11, r24	; 0x0b
    4d46:	6d e5       	ldi	r22, 0x5D	; 93
    4d48:	76 e2       	ldi	r23, 0x26	; 38
    4d4a:	80 e0       	ldi	r24, 0x00	; 0
    4d4c:	96 cc       	rjmp	.-1748   	; 0x467a <NWK_OpenEndpoint>
    4d4e:	08 95       	ret

00004d50 <PHY_DataInd>:
    4d50:	cf 93       	push	r28
    4d52:	df 93       	push	r29
    4d54:	dc 01       	movw	r26, r24
    4d56:	ed 91       	ld	r30, X+
    4d58:	fc 91       	ld	r31, X
    4d5a:	11 97       	sbiw	r26, 0x01	; 1
    4d5c:	21 81       	ldd	r18, Z+1	; 0x01
    4d5e:	28 38       	cpi	r18, 0x88	; 136
    4d60:	f1 f4       	brne	.+60     	; 0x4d9e <PHY_DataInd+0x4e>
    4d62:	20 81       	ld	r18, Z
    4d64:	2f 7d       	andi	r18, 0xDF	; 223
    4d66:	21 34       	cpi	r18, 0x41	; 65
    4d68:	d1 f4       	brne	.+52     	; 0x4d9e <PHY_DataInd+0x4e>
    4d6a:	12 96       	adiw	r26, 0x02	; 2
    4d6c:	2c 91       	ld	r18, X
    4d6e:	20 31       	cpi	r18, 0x10	; 16
    4d70:	b0 f0       	brcs	.+44     	; 0x4d9e <PHY_DataInd+0x4e>
    4d72:	ec 01       	movw	r28, r24
    4d74:	89 dd       	rcall	.-1262   	; 0x4888 <nwkFrameAlloc>
    4d76:	00 97       	sbiw	r24, 0x00	; 0
    4d78:	91 f0       	breq	.+36     	; 0x4d9e <PHY_DataInd+0x4e>
    4d7a:	20 e2       	ldi	r18, 0x20	; 32
    4d7c:	fc 01       	movw	r30, r24
    4d7e:	20 83       	st	Z, r18
    4d80:	2a 81       	ldd	r18, Y+2	; 0x02
    4d82:	21 83       	std	Z+1, r18	; 0x01
    4d84:	2b 81       	ldd	r18, Y+3	; 0x03
    4d86:	ed 57       	subi	r30, 0x7D	; 125
    4d88:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8a:	20 83       	st	Z, r18
    4d8c:	2c 81       	ldd	r18, Y+4	; 0x04
    4d8e:	31 96       	adiw	r30, 0x01	; 1
    4d90:	20 83       	st	Z, r18
    4d92:	4a 81       	ldd	r20, Y+2	; 0x02
    4d94:	50 e0       	ldi	r21, 0x00	; 0
    4d96:	68 81       	ld	r22, Y
    4d98:	79 81       	ldd	r23, Y+1	; 0x01
    4d9a:	02 96       	adiw	r24, 0x02	; 2
    4d9c:	2e d7       	rcall	.+3676   	; 0x5bfa <memcpy>
    4d9e:	df 91       	pop	r29
    4da0:	cf 91       	pop	r28
    4da2:	08 95       	ret

00004da4 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    4da4:	2f 92       	push	r2
    4da6:	3f 92       	push	r3
    4da8:	4f 92       	push	r4
    4daa:	5f 92       	push	r5
    4dac:	6f 92       	push	r6
    4dae:	7f 92       	push	r7
    4db0:	8f 92       	push	r8
    4db2:	9f 92       	push	r9
    4db4:	af 92       	push	r10
    4db6:	bf 92       	push	r11
    4db8:	cf 92       	push	r12
    4dba:	df 92       	push	r13
    4dbc:	ef 92       	push	r14
    4dbe:	ff 92       	push	r15
    4dc0:	0f 93       	push	r16
    4dc2:	1f 93       	push	r17
    4dc4:	cf 93       	push	r28
    4dc6:	df 93       	push	r29
    4dc8:	cd b7       	in	r28, 0x3d	; 61
    4dca:	de b7       	in	r29, 0x3e	; 62
    4dcc:	2c 97       	sbiw	r28, 0x0c	; 12
    4dce:	0f b6       	in	r0, 0x3f	; 63
    4dd0:	f8 94       	cli
    4dd2:	de bf       	out	0x3e, r29	; 62
    4dd4:	0f be       	out	0x3f, r0	; 63
    4dd6:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
    4dd8:	00 e0       	ldi	r16, 0x00	; 0
    4dda:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    4ddc:	0f 2e       	mov	r0, r31
    4dde:	f4 e2       	ldi	r31, 0x24	; 36
    4de0:	bf 2e       	mov	r11, r31
    4de2:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    4de4:	0f 2e       	mov	r0, r31
    4de6:	f1 ea       	ldi	r31, 0xA1	; 161
    4de8:	ef 2e       	mov	r14, r31
    4dea:	f3 e2       	ldi	r31, 0x23	; 35
    4dec:	ff 2e       	mov	r15, r31
    4dee:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    4df0:	55 24       	eor	r5, r5
    4df2:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    4df4:	68 94       	set
    4df6:	aa 24       	eor	r10, r10
    4df8:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    4dfa:	68 94       	set
    4dfc:	77 24       	eor	r7, r7
    4dfe:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    4e00:	68 94       	set
    4e02:	66 24       	eor	r6, r6
    4e04:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    4e06:	31 2c       	mov	r3, r1
    4e08:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    4e0a:	0f 2e       	mov	r0, r31
    4e0c:	ff e1       	ldi	r31, 0x1F	; 31
    4e0e:	4f 2e       	mov	r4, r31
    4e10:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    4e12:	cc 24       	eor	r12, r12
    4e14:	c3 94       	inc	r12
    4e16:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    4e18:	da c1       	rjmp	.+948    	; 0x51ce <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
    4e1a:	d8 01       	movw	r26, r16
    4e1c:	8c 91       	ld	r24, X
    4e1e:	82 32       	cpi	r24, 0x22	; 34
    4e20:	09 f4       	brne	.+2      	; 0x4e24 <nwkRxTaskHandler+0x80>
    4e22:	05 c1       	rjmp	.+522    	; 0x502e <nwkRxTaskHandler+0x28a>
    4e24:	18 f4       	brcc	.+6      	; 0x4e2c <nwkRxTaskHandler+0x88>
    4e26:	80 32       	cpi	r24, 0x20	; 32
    4e28:	41 f0       	breq	.+16     	; 0x4e3a <nwkRxTaskHandler+0x96>
    4e2a:	d1 c1       	rjmp	.+930    	; 0x51ce <nwkRxTaskHandler+0x42a>
    4e2c:	83 32       	cpi	r24, 0x23	; 35
    4e2e:	09 f4       	brne	.+2      	; 0x4e32 <nwkRxTaskHandler+0x8e>
    4e30:	c9 c1       	rjmp	.+914    	; 0x51c4 <nwkRxTaskHandler+0x420>
    4e32:	84 32       	cpi	r24, 0x24	; 36
    4e34:	09 f4       	brne	.+2      	; 0x4e38 <nwkRxTaskHandler+0x94>
    4e36:	c9 c1       	rjmp	.+914    	; 0x51ca <nwkRxTaskHandler+0x426>
    4e38:	ca c1       	rjmp	.+916    	; 0x51ce <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
    4e3a:	f8 01       	movw	r30, r16
    4e3c:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
    4e3e:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    4e40:	98 2f       	mov	r25, r24
    4e42:	9a 70       	andi	r25, 0x0A	; 10
    4e44:	09 f0       	breq	.+2      	; 0x4e48 <nwkRxTaskHandler+0xa4>
    4e46:	c3 c1       	rjmp	.+902    	; 0x51ce <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    4e48:	25 81       	ldd	r18, Z+5	; 0x05
    4e4a:	36 81       	ldd	r19, Z+6	; 0x06
    4e4c:	2f 3f       	cpi	r18, 0xFF	; 255
    4e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e50:	91 f4       	brne	.+36     	; 0x4e76 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    4e52:	d8 01       	movw	r26, r16
    4e54:	1f 96       	adiw	r26, 0x0f	; 15
    4e56:	8d 91       	ld	r24, X+
    4e58:	9c 91       	ld	r25, X
    4e5a:	50 97       	sbiw	r26, 0x10	; 16
    4e5c:	f7 01       	movw	r30, r14
    4e5e:	20 81       	ld	r18, Z
    4e60:	31 81       	ldd	r19, Z+1	; 0x01
    4e62:	28 17       	cp	r18, r24
    4e64:	39 07       	cpc	r19, r25
    4e66:	19 f0       	breq	.+6      	; 0x4e6e <nwkRxTaskHandler+0xca>
    4e68:	01 96       	adiw	r24, 0x01	; 1
    4e6a:	09 f0       	breq	.+2      	; 0x4e6e <nwkRxTaskHandler+0xca>
    4e6c:	b0 c1       	rjmp	.+864    	; 0x51ce <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    4e6e:	e2 e2       	ldi	r30, 0x22	; 34
    4e70:	d8 01       	movw	r26, r16
    4e72:	ec 93       	st	X, r30
    4e74:	ac c1       	rjmp	.+856    	; 0x51ce <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    4e76:	d8 01       	movw	r26, r16
    4e78:	1f 96       	adiw	r26, 0x0f	; 15
    4e7a:	2d 91       	ld	r18, X+
    4e7c:	3c 91       	ld	r19, X
    4e7e:	50 97       	sbiw	r26, 0x10	; 16
    4e80:	2f 3f       	cpi	r18, 0xFF	; 255
    4e82:	3f 4f       	sbci	r19, 0xFF	; 255
    4e84:	11 f4       	brne	.+4      	; 0x4e8a <nwkRxTaskHandler+0xe6>
    4e86:	80 fd       	sbrc	r24, 0
    4e88:	a2 c1       	rjmp	.+836    	; 0x51ce <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    4e8a:	f7 01       	movw	r30, r14
    4e8c:	20 81       	ld	r18, Z
    4e8e:	31 81       	ldd	r19, Z+1	; 0x01
    4e90:	d8 01       	movw	r26, r16
    4e92:	1d 96       	adiw	r26, 0x0d	; 13
    4e94:	8d 91       	ld	r24, X+
    4e96:	9c 91       	ld	r25, X
    4e98:	1e 97       	sbiw	r26, 0x0e	; 14
    4e9a:	28 17       	cp	r18, r24
    4e9c:	39 07       	cpc	r19, r25
    4e9e:	09 f4       	brne	.+2      	; 0x4ea2 <nwkRxTaskHandler+0xfe>
    4ea0:	96 c1       	rjmp	.+812    	; 0x51ce <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    4ea2:	c8 01       	movw	r24, r16
    4ea4:	fa dd       	rcall	.-1036   	; 0x4a9a <nwkRouteFrameReceived>
    4ea6:	e6 ec       	ldi	r30, 0xC6	; 198
    4ea8:	fc e1       	ldi	r31, 0x1C	; 28
    4eaa:	80 e0       	ldi	r24, 0x00	; 0
    4eac:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    4eae:	83 2c       	mov	r8, r3
    4eb0:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    4eb2:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    4eb4:	44 81       	ldd	r20, Z+4	; 0x04
    4eb6:	44 23       	and	r20, r20
    4eb8:	09 f4       	brne	.+2      	; 0x4ebc <nwkRxTaskHandler+0x118>
    4eba:	74 c0       	rjmp	.+232    	; 0x4fa4 <nwkRxTaskHandler+0x200>
    4ebc:	d8 01       	movw	r26, r16
    4ebe:	1d 96       	adiw	r26, 0x0d	; 13
    4ec0:	6d 91       	ld	r22, X+
    4ec2:	7c 91       	ld	r23, X
    4ec4:	1e 97       	sbiw	r26, 0x0e	; 14
    4ec6:	40 81       	ld	r20, Z
    4ec8:	51 81       	ldd	r21, Z+1	; 0x01
    4eca:	64 17       	cp	r22, r20
    4ecc:	75 07       	cpc	r23, r21
    4ece:	09 f0       	breq	.+2      	; 0x4ed2 <nwkRxTaskHandler+0x12e>
    4ed0:	6a c0       	rjmp	.+212    	; 0x4fa6 <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    4ed2:	1c 96       	adiw	r26, 0x0c	; 12
    4ed4:	8c 91       	ld	r24, X
    4ed6:	1c 97       	sbiw	r26, 0x0c	; 12
    4ed8:	f9 01       	movw	r30, r18
    4eda:	ee 0f       	add	r30, r30
    4edc:	ff 1f       	adc	r31, r31
    4ede:	ee 0f       	add	r30, r30
    4ee0:	ff 1f       	adc	r31, r31
    4ee2:	e2 0f       	add	r30, r18
    4ee4:	f3 1f       	adc	r31, r19
    4ee6:	ea 53       	subi	r30, 0x3A	; 58
    4ee8:	f3 4e       	sbci	r31, 0xE3	; 227
    4eea:	92 81       	ldd	r25, Z+2	; 0x02
    4eec:	98 1b       	sub	r25, r24

      if (diff < 8)
    4eee:	98 30       	cpi	r25, 0x08	; 8
    4ef0:	08 f0       	brcs	.+2      	; 0x4ef4 <nwkRxTaskHandler+0x150>
    4ef2:	3e c0       	rjmp	.+124    	; 0x4f70 <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
    4ef4:	f9 01       	movw	r30, r18
    4ef6:	ee 0f       	add	r30, r30
    4ef8:	ff 1f       	adc	r31, r31
    4efa:	ee 0f       	add	r30, r30
    4efc:	ff 1f       	adc	r31, r31
    4efe:	e2 0f       	add	r30, r18
    4f00:	f3 1f       	adc	r31, r19
    4f02:	ea 53       	subi	r30, 0x3A	; 58
    4f04:	f3 4e       	sbci	r31, 0xE3	; 227
    4f06:	83 81       	ldd	r24, Z+3	; 0x03
    4f08:	48 2f       	mov	r20, r24
    4f0a:	50 e0       	ldi	r21, 0x00	; 0
    4f0c:	09 2e       	mov	r0, r25
    4f0e:	02 c0       	rjmp	.+4      	; 0x4f14 <nwkRxTaskHandler+0x170>
    4f10:	55 95       	asr	r21
    4f12:	47 95       	ror	r20
    4f14:	0a 94       	dec	r0
    4f16:	e2 f7       	brpl	.-8      	; 0x4f10 <nwkRxTaskHandler+0x16c>
    4f18:	40 ff       	sbrs	r20, 0
    4f1a:	17 c0       	rjmp	.+46     	; 0x4f4a <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    4f1c:	f7 01       	movw	r30, r14
    4f1e:	20 81       	ld	r18, Z
    4f20:	31 81       	ldd	r19, Z+1	; 0x01
    4f22:	17 96       	adiw	r26, 0x07	; 7
    4f24:	8d 91       	ld	r24, X+
    4f26:	9c 91       	ld	r25, X
    4f28:	18 97       	sbiw	r26, 0x08	; 8
    4f2a:	28 17       	cp	r18, r24
    4f2c:	39 07       	cpc	r19, r25
    4f2e:	09 f0       	breq	.+2      	; 0x4f32 <nwkRxTaskHandler+0x18e>
    4f30:	4e c1       	rjmp	.+668    	; 0x51ce <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    4f32:	1b 96       	adiw	r26, 0x0b	; 11
    4f34:	6c 91       	ld	r22, X
    4f36:	1b 97       	sbiw	r26, 0x0b	; 11
    4f38:	63 fb       	bst	r22, 3
    4f3a:	66 27       	eor	r22, r22
    4f3c:	60 f9       	bld	r22, 0
    4f3e:	1f 96       	adiw	r26, 0x0f	; 15
    4f40:	8d 91       	ld	r24, X+
    4f42:	9c 91       	ld	r25, X
    4f44:	50 97       	sbiw	r26, 0x10	; 16
    4f46:	a4 dd       	rcall	.-1208   	; 0x4a90 <nwkRouteRemove>
    4f48:	42 c1       	rjmp	.+644    	; 0x51ce <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    4f4a:	f9 01       	movw	r30, r18
    4f4c:	ee 0f       	add	r30, r30
    4f4e:	ff 1f       	adc	r31, r31
    4f50:	ee 0f       	add	r30, r30
    4f52:	ff 1f       	adc	r31, r31
    4f54:	2e 0f       	add	r18, r30
    4f56:	3f 1f       	adc	r19, r31
    4f58:	f9 01       	movw	r30, r18
    4f5a:	ea 53       	subi	r30, 0x3A	; 58
    4f5c:	f3 4e       	sbci	r31, 0xE3	; 227
    4f5e:	96 01       	movw	r18, r12
    4f60:	02 c0       	rjmp	.+4      	; 0x4f66 <nwkRxTaskHandler+0x1c2>
    4f62:	22 0f       	add	r18, r18
    4f64:	33 1f       	adc	r19, r19
    4f66:	9a 95       	dec	r25
    4f68:	e2 f7       	brpl	.-8      	; 0x4f62 <nwkRxTaskHandler+0x1be>
    4f6a:	82 2b       	or	r24, r18
    4f6c:	83 83       	std	Z+3, r24	; 0x03
    4f6e:	36 c1       	rjmp	.+620    	; 0x51dc <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    4f70:	f9 01       	movw	r30, r18
    4f72:	ee 0f       	add	r30, r30
    4f74:	ff 1f       	adc	r31, r31
    4f76:	ee 0f       	add	r30, r30
    4f78:	ff 1f       	adc	r31, r31
    4f7a:	2e 0f       	add	r18, r30
    4f7c:	3f 1f       	adc	r19, r31
    4f7e:	f9 01       	movw	r30, r18
    4f80:	ea 53       	subi	r30, 0x3A	; 58
    4f82:	f3 4e       	sbci	r31, 0xE3	; 227
    4f84:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    4f86:	83 81       	ldd	r24, Z+3	; 0x03
    4f88:	28 2f       	mov	r18, r24
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	91 95       	neg	r25
    4f8e:	a9 01       	movw	r20, r18
    4f90:	02 c0       	rjmp	.+4      	; 0x4f96 <nwkRxTaskHandler+0x1f2>
    4f92:	44 0f       	add	r20, r20
    4f94:	55 1f       	adc	r21, r21
    4f96:	9a 95       	dec	r25
    4f98:	e2 f7       	brpl	.-8      	; 0x4f92 <nwkRxTaskHandler+0x1ee>
    4f9a:	ca 01       	movw	r24, r20
    4f9c:	81 60       	ori	r24, 0x01	; 1
    4f9e:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    4fa0:	44 82       	std	Z+4, r4	; 0x04
    4fa2:	1c c1       	rjmp	.+568    	; 0x51dc <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
    4fa4:	4f 01       	movw	r8, r30
    4fa6:	01 96       	adiw	r24, 0x01	; 1
    4fa8:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    4faa:	8a 30       	cpi	r24, 0x0A	; 10
    4fac:	91 05       	cpc	r25, r1
    4fae:	09 f0       	breq	.+2      	; 0x4fb2 <nwkRxTaskHandler+0x20e>
    4fb0:	80 cf       	rjmp	.-256    	; 0x4eb2 <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    4fb2:	81 14       	cp	r8, r1
    4fb4:	91 04       	cpc	r9, r1
    4fb6:	09 f4       	brne	.+2      	; 0x4fba <nwkRxTaskHandler+0x216>
    4fb8:	0a c1       	rjmp	.+532    	; 0x51ce <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    4fba:	d8 01       	movw	r26, r16
    4fbc:	1d 96       	adiw	r26, 0x0d	; 13
    4fbe:	8d 91       	ld	r24, X+
    4fc0:	9c 91       	ld	r25, X
    4fc2:	1e 97       	sbiw	r26, 0x0e	; 14
    4fc4:	f4 01       	movw	r30, r8
    4fc6:	91 83       	std	Z+1, r25	; 0x01
    4fc8:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    4fca:	1c 96       	adiw	r26, 0x0c	; 12
    4fcc:	8c 91       	ld	r24, X
    4fce:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    4fd0:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    4fd2:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    4fd4:	88 eb       	ldi	r24, 0xB8	; 184
    4fd6:	9c e1       	ldi	r25, 0x1C	; 28
    4fd8:	0a d5       	rcall	.+2580   	; 0x59ee <SYS_TimerStart>
    4fda:	00 c1       	rjmp	.+512    	; 0x51dc <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    4fdc:	d7 01       	movw	r26, r14
    4fde:	2d 91       	ld	r18, X+
    4fe0:	3c 91       	ld	r19, X
    4fe2:	f8 01       	movw	r30, r16
    4fe4:	87 85       	ldd	r24, Z+15	; 0x0f
    4fe6:	90 89       	ldd	r25, Z+16	; 0x10
    4fe8:	28 17       	cp	r18, r24
    4fea:	39 07       	cpc	r19, r25
    4fec:	81 f0       	breq	.+32     	; 0x500e <nwkRxTaskHandler+0x26a>
    4fee:	43 85       	ldd	r20, Z+11	; 0x0b
    4ff0:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    4ff2:	0b c0       	rjmp	.+22     	; 0x500a <nwkRxTaskHandler+0x266>
    4ff4:	c8 01       	movw	r24, r16
    4ff6:	e1 d1       	rcall	.+962    	; 0x53ba <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    4ff8:	d7 01       	movw	r26, r14
    4ffa:	2d 91       	ld	r18, X+
    4ffc:	3c 91       	ld	r19, X
    4ffe:	f8 01       	movw	r30, r16
    5000:	87 85       	ldd	r24, Z+15	; 0x0f
    5002:	90 89       	ldd	r25, Z+16	; 0x10
    5004:	28 17       	cp	r18, r24
    5006:	39 07       	cpc	r19, r25
    5008:	11 f0       	breq	.+4      	; 0x500e <nwkRxTaskHandler+0x26a>
    500a:	01 96       	adiw	r24, 0x01	; 1
    500c:	21 f4       	brne	.+8      	; 0x5016 <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    500e:	e2 e2       	ldi	r30, 0x22	; 34
    5010:	d8 01       	movw	r26, r16
    5012:	ec 93       	st	X, r30
    5014:	dc c0       	rjmp	.+440    	; 0x51ce <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    5016:	d8 01       	movw	r26, r16
    5018:	17 96       	adiw	r26, 0x07	; 7
    501a:	8d 91       	ld	r24, X+
    501c:	9c 91       	ld	r25, X
    501e:	18 97       	sbiw	r26, 0x08	; 8
    5020:	82 17       	cp	r24, r18
    5022:	93 07       	cpc	r25, r19
    5024:	09 f0       	breq	.+2      	; 0x5028 <nwkRxTaskHandler+0x284>
    5026:	d3 c0       	rjmp	.+422    	; 0x51ce <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    5028:	e3 e2       	ldi	r30, 0x23	; 35
    502a:	ec 93       	st	X, r30
    502c:	d0 c0       	rjmp	.+416    	; 0x51ce <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    502e:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    5032:	d8 01       	movw	r26, r16
    5034:	51 96       	adiw	r26, 0x11	; 17
    5036:	8c 91       	ld	r24, X
    5038:	51 97       	sbiw	r26, 0x11	; 17
    503a:	82 95       	swap	r24
    503c:	8f 70       	andi	r24, 0x0F	; 15
    503e:	e8 2f       	mov	r30, r24
    5040:	f0 e0       	ldi	r31, 0x00	; 0
    5042:	ee 0f       	add	r30, r30
    5044:	ff 1f       	adc	r31, r31
    5046:	e9 55       	subi	r30, 0x59	; 89
    5048:	fc 4d       	sbci	r31, 0xDC	; 220
    504a:	01 90       	ld	r0, Z+
    504c:	f0 81       	ld	r31, Z
    504e:	e0 2d       	mov	r30, r0
    5050:	30 97       	sbiw	r30, 0x00	; 0
    5052:	09 f4       	brne	.+2      	; 0x5056 <nwkRxTaskHandler+0x2b2>
    5054:	60 c0       	rjmp	.+192    	; 0x5116 <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    5056:	1d 96       	adiw	r26, 0x0d	; 13
    5058:	2d 91       	ld	r18, X+
    505a:	3c 91       	ld	r19, X
    505c:	1e 97       	sbiw	r26, 0x0e	; 14
    505e:	3a 83       	std	Y+2, r19	; 0x02
    5060:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    5062:	1f 96       	adiw	r26, 0x0f	; 15
    5064:	4d 91       	ld	r20, X+
    5066:	5c 91       	ld	r21, X
    5068:	50 97       	sbiw	r26, 0x10	; 16
    506a:	5c 83       	std	Y+4, r21	; 0x04
    506c:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    506e:	51 96       	adiw	r26, 0x11	; 17
    5070:	9c 91       	ld	r25, X
    5072:	51 97       	sbiw	r26, 0x11	; 17
    5074:	9f 70       	andi	r25, 0x0F	; 15
    5076:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    5078:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    507a:	af 57       	subi	r26, 0x7F	; 127
    507c:	bf 4f       	sbci	r27, 0xFF	; 255
    507e:	8d 91       	ld	r24, X+
    5080:	9c 91       	ld	r25, X
    5082:	99 87       	std	Y+9, r25	; 0x09
    5084:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    5086:	b8 01       	movw	r22, r16
    5088:	6e 5f       	subi	r22, 0xFE	; 254
    508a:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    508c:	86 1b       	sub	r24, r22
    508e:	97 0b       	sbc	r25, r23
    5090:	d8 01       	movw	r26, r16
    5092:	11 96       	adiw	r26, 0x01	; 1
    5094:	9c 91       	ld	r25, X
    5096:	11 97       	sbiw	r26, 0x01	; 1
    5098:	98 1b       	sub	r25, r24
    509a:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    509c:	ad 57       	subi	r26, 0x7D	; 125
    509e:	bf 4f       	sbci	r27, 0xFF	; 255
    50a0:	8c 91       	ld	r24, X
    50a2:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    50a4:	11 96       	adiw	r26, 0x01	; 1
    50a6:	8c 91       	ld	r24, X
    50a8:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    50aa:	d8 01       	movw	r26, r16
    50ac:	1b 96       	adiw	r26, 0x0b	; 11
    50ae:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    50b0:	69 2f       	mov	r22, r25
    50b2:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    50b4:	92 fd       	sbrc	r25, 2
    50b6:	02 c0       	rjmp	.+4      	; 0x50bc <nwkRxTaskHandler+0x318>
    50b8:	80 e0       	ldi	r24, 0x00	; 0
    50ba:	01 c0       	rjmp	.+2      	; 0x50be <nwkRxTaskHandler+0x31a>
    50bc:	80 e2       	ldi	r24, 0x20	; 32
    50be:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    50c0:	93 fd       	sbrc	r25, 3
    50c2:	02 c0       	rjmp	.+4      	; 0x50c8 <nwkRxTaskHandler+0x324>
    50c4:	90 e0       	ldi	r25, 0x00	; 0
    50c6:	01 c0       	rjmp	.+2      	; 0x50ca <nwkRxTaskHandler+0x326>
    50c8:	90 e4       	ldi	r25, 0x40	; 64
    50ca:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    50cc:	4f 3f       	cpi	r20, 0xFF	; 255
    50ce:	5f 4f       	sbci	r21, 0xFF	; 255
    50d0:	11 f0       	breq	.+4      	; 0x50d6 <nwkRxTaskHandler+0x332>
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	01 c0       	rjmp	.+2      	; 0x50d8 <nwkRxTaskHandler+0x334>
    50d6:	96 2d       	mov	r25, r6
    50d8:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    50da:	d8 01       	movw	r26, r16
    50dc:	19 96       	adiw	r26, 0x09	; 9
    50de:	4d 91       	ld	r20, X+
    50e0:	5c 91       	ld	r21, X
    50e2:	1a 97       	sbiw	r26, 0x0a	; 10
    50e4:	24 17       	cp	r18, r20
    50e6:	35 07       	cpc	r19, r21
    50e8:	11 f0       	breq	.+4      	; 0x50ee <nwkRxTaskHandler+0x34a>
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	01 c0       	rjmp	.+2      	; 0x50f0 <nwkRxTaskHandler+0x34c>
    50ee:	97 2d       	mov	r25, r7
    50f0:	89 2b       	or	r24, r25
    50f2:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    50f4:	d8 01       	movw	r26, r16
    50f6:	15 96       	adiw	r26, 0x05	; 5
    50f8:	2d 91       	ld	r18, X+
    50fa:	3c 91       	ld	r19, X
    50fc:	16 97       	sbiw	r26, 0x06	; 6
    50fe:	2f 3f       	cpi	r18, 0xFF	; 255
    5100:	3f 4f       	sbci	r19, 0xFF	; 255
    5102:	11 f0       	breq	.+4      	; 0x5108 <nwkRxTaskHandler+0x364>
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	01 c0       	rjmp	.+2      	; 0x510a <nwkRxTaskHandler+0x366>
    5108:	9a 2d       	mov	r25, r10
    510a:	89 2b       	or	r24, r25
    510c:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    510e:	ce 01       	movw	r24, r28
    5110:	01 96       	adiw	r24, 0x01	; 1
    5112:	19 95       	eicall
    5114:	01 c0       	rjmp	.+2      	; 0x5118 <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    5116:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    5118:	f8 01       	movw	r30, r16
    511a:	93 85       	ldd	r25, Z+11	; 0x0b
    511c:	90 ff       	sbrs	r25, 0
    ack = false;
    511e:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    5120:	d8 01       	movw	r26, r16
    5122:	17 96       	adiw	r26, 0x07	; 7
    5124:	2d 91       	ld	r18, X+
    5126:	3c 91       	ld	r19, X
    5128:	18 97       	sbiw	r26, 0x08	; 8
    512a:	2f 3f       	cpi	r18, 0xFF	; 255
    512c:	3f 4f       	sbci	r19, 0xFF	; 255
    512e:	69 f4       	brne	.+26     	; 0x514a <nwkRxTaskHandler+0x3a6>
    5130:	f7 01       	movw	r30, r14
    5132:	40 81       	ld	r20, Z
    5134:	51 81       	ldd	r21, Z+1	; 0x01
    5136:	d8 01       	movw	r26, r16
    5138:	1f 96       	adiw	r26, 0x0f	; 15
    513a:	2d 91       	ld	r18, X+
    513c:	3c 91       	ld	r19, X
    513e:	50 97       	sbiw	r26, 0x10	; 16
    5140:	42 17       	cp	r20, r18
    5142:	53 07       	cpc	r21, r19
    5144:	11 f4       	brne	.+4      	; 0x514a <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    5146:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    5148:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    514a:	f8 01       	movw	r30, r16
    514c:	25 81       	ldd	r18, Z+5	; 0x05
    514e:	36 81       	ldd	r19, Z+6	; 0x06
    5150:	2f 3f       	cpi	r18, 0xFF	; 255
    5152:	3f 4f       	sbci	r19, 0xFF	; 255
    5154:	a1 f1       	breq	.+104    	; 0x51be <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    5156:	d7 01       	movw	r26, r14
    5158:	2d 91       	ld	r18, X+
    515a:	3c 91       	ld	r19, X
    515c:	2f 3f       	cpi	r18, 0xFF	; 255
    515e:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    5160:	71 f1       	breq	.+92     	; 0x51be <nwkRxTaskHandler+0x41a>
    5162:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    5164:	61 f1       	breq	.+88     	; 0x51be <nwkRxTaskHandler+0x41a>
    5166:	90 db       	rcall	.-2272   	; 0x4888 <nwkFrameAlloc>
    5168:	4c 01       	movw	r8, r24
    516a:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    516c:	41 f1       	breq	.+80     	; 0x51be <nwkRxTaskHandler+0x41a>
    516e:	f4 db       	rcall	.-2072   	; 0x4958 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    5170:	f4 01       	movw	r30, r8
    5172:	81 81       	ldd	r24, Z+1	; 0x01
    5174:	8d 5f       	subi	r24, 0xFD	; 253
    5176:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    5178:	e9 57       	subi	r30, 0x79	; 121
    517a:	ff 4f       	sbci	r31, 0xFF	; 255
    517c:	11 82       	std	Z+1, r1	; 0x01
    517e:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    5180:	d8 01       	movw	r26, r16
    5182:	1b 96       	adiw	r26, 0x0b	; 11
    5184:	8c 91       	ld	r24, X
    5186:	1b 97       	sbiw	r26, 0x0b	; 11
    5188:	86 95       	lsr	r24
    518a:	81 70       	andi	r24, 0x01	; 1
    518c:	f4 01       	movw	r30, r8
    518e:	93 85       	ldd	r25, Z+11	; 0x0b
    5190:	80 fb       	bst	r24, 0
    5192:	91 f9       	bld	r25, 1
    5194:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    5196:	1d 96       	adiw	r26, 0x0d	; 13
    5198:	8d 91       	ld	r24, X+
    519a:	9c 91       	ld	r25, X
    519c:	1e 97       	sbiw	r26, 0x0e	; 14
    519e:	90 8b       	std	Z+16, r25	; 0x10
    51a0:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    51a2:	ef 57       	subi	r30, 0x7F	; 127
    51a4:	ff 4f       	sbci	r31, 0xFF	; 255
    51a6:	01 90       	ld	r0, Z+
    51a8:	f0 81       	ld	r31, Z
    51aa:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    51ac:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    51ae:	80 91 c5 1c 	lds	r24, 0x1CC5	; 0x801cc5 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    51b2:	82 83       	std	Z+2, r24	; 0x02
    51b4:	1c 96       	adiw	r26, 0x0c	; 12
    51b6:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    51b8:	81 83       	std	Z+1, r24	; 0x01
    51ba:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    51bc:	b0 d0       	rcall	.+352    	; 0x531e <nwkTxFrame>
    51be:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    51c0:	bc 92       	st	X, r11
    51c2:	05 c0       	rjmp	.+10     	; 0x51ce <nwkRxTaskHandler+0x42a>
    51c4:	c8 01       	movw	r24, r16
      } break;
    51c6:	1e dd       	rcall	.-1476   	; 0x4c04 <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    51c8:	02 c0       	rjmp	.+4      	; 0x51ce <nwkRxTaskHandler+0x42a>
    51ca:	c8 01       	movw	r24, r16
    51cc:	96 db       	rcall	.-2260   	; 0x48fa <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    51ce:	c8 01       	movw	r24, r16
    51d0:	9e db       	rcall	.-2244   	; 0x490e <nwkFrameNext>
    51d2:	8c 01       	movw	r16, r24
    51d4:	89 2b       	or	r24, r25
    51d6:	09 f0       	breq	.+2      	; 0x51da <nwkRxTaskHandler+0x436>
    51d8:	20 ce       	rjmp	.-960    	; 0x4e1a <nwkRxTaskHandler+0x76>
    51da:	07 c0       	rjmp	.+14     	; 0x51ea <nwkRxTaskHandler+0x446>
    51dc:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    51de:	87 81       	ldd	r24, Z+7	; 0x07
    51e0:	90 85       	ldd	r25, Z+8	; 0x08
    51e2:	01 96       	adiw	r24, 0x01	; 1
    51e4:	09 f0       	breq	.+2      	; 0x51e8 <nwkRxTaskHandler+0x444>
    51e6:	08 cf       	rjmp	.-496    	; 0x4ff8 <nwkRxTaskHandler+0x254>
    51e8:	f9 ce       	rjmp	.-526    	; 0x4fdc <nwkRxTaskHandler+0x238>
    51ea:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    51ec:	0f b6       	in	r0, 0x3f	; 63
    51ee:	f8 94       	cli
    51f0:	de bf       	out	0x3e, r29	; 62
    51f2:	0f be       	out	0x3f, r0	; 63
    51f4:	cd bf       	out	0x3d, r28	; 61
    51f6:	df 91       	pop	r29
    51f8:	cf 91       	pop	r28
    51fa:	1f 91       	pop	r17
    51fc:	0f 91       	pop	r16
    51fe:	ff 90       	pop	r15
    5200:	ef 90       	pop	r14
    5202:	df 90       	pop	r13
    5204:	cf 90       	pop	r12
    5206:	bf 90       	pop	r11
    5208:	af 90       	pop	r10
    520a:	9f 90       	pop	r9
    520c:	8f 90       	pop	r8
    520e:	7f 90       	pop	r7
    5210:	6f 90       	pop	r6
    5212:	5f 90       	pop	r5
    5214:	4f 90       	pop	r4
    5216:	3f 90       	pop	r3
    5218:	2f 90       	pop	r2
    521a:	08 95       	ret

0000521c <nwkTxDelayTimerHandler>:
    521c:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    521e:	ff 92       	push	r15
    5220:	0f 93       	push	r16
    5222:	1f 93       	push	r17
    5224:	cf 93       	push	r28
    5226:	7c 01       	movw	r14, r24
    5228:	10 e0       	ldi	r17, 0x00	; 0
    522a:	80 e0       	ldi	r24, 0x00	; 0
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	01 e0       	ldi	r16, 0x01	; 1
    5230:	c3 e1       	ldi	r28, 0x13	; 19
    5232:	13 c0       	rjmp	.+38     	; 0x525a <nwkTxDelayTimerHandler+0x3e>
    5234:	fc 01       	movw	r30, r24
    5236:	20 81       	ld	r18, Z
    5238:	21 31       	cpi	r18, 0x11	; 17
    523a:	79 f4       	brne	.+30     	; 0x525a <nwkTxDelayTimerHandler+0x3e>
    523c:	ec 57       	subi	r30, 0x7C	; 124
    523e:	ff 4f       	sbci	r31, 0xFF	; 255
    5240:	20 81       	ld	r18, Z
    5242:	31 81       	ldd	r19, Z+1	; 0x01
    5244:	21 50       	subi	r18, 0x01	; 1
    5246:	31 09       	sbc	r19, r1
    5248:	31 83       	std	Z+1, r19	; 0x01
    524a:	20 83       	st	Z, r18
    524c:	23 2b       	or	r18, r19
    524e:	21 f4       	brne	.+8      	; 0x5258 <nwkTxDelayTimerHandler+0x3c>
    5250:	fc 01       	movw	r30, r24
    5252:	c0 83       	st	Z, r28
    5254:	10 2f       	mov	r17, r16
    5256:	01 c0       	rjmp	.+2      	; 0x525a <nwkTxDelayTimerHandler+0x3e>
    5258:	10 2f       	mov	r17, r16
    525a:	59 db       	rcall	.-2382   	; 0x490e <nwkFrameNext>
    525c:	00 97       	sbiw	r24, 0x00	; 0
    525e:	51 f7       	brne	.-44     	; 0x5234 <nwkTxDelayTimerHandler+0x18>
    5260:	11 23       	and	r17, r17
    5262:	11 f0       	breq	.+4      	; 0x5268 <nwkTxDelayTimerHandler+0x4c>
    5264:	c7 01       	movw	r24, r14
    5266:	c3 d3       	rcall	.+1926   	; 0x59ee <SYS_TimerStart>
    5268:	cf 91       	pop	r28
    526a:	1f 91       	pop	r17
    526c:	0f 91       	pop	r16
    526e:	ff 90       	pop	r15
    5270:	ef 90       	pop	r14
    5272:	08 95       	ret

00005274 <nwkTxAckWaitTimerHandler>:
    5274:	ef 92       	push	r14
    5276:	ff 92       	push	r15
    5278:	0f 93       	push	r16
    527a:	1f 93       	push	r17
    527c:	cf 93       	push	r28
    527e:	df 93       	push	r29
    5280:	7c 01       	movw	r14, r24
    5282:	10 e0       	ldi	r17, 0x00	; 0
    5284:	80 e0       	ldi	r24, 0x00	; 0
    5286:	90 e0       	ldi	r25, 0x00	; 0
    5288:	01 e0       	ldi	r16, 0x01	; 1
    528a:	d7 e1       	ldi	r29, 0x17	; 23
    528c:	c0 e1       	ldi	r28, 0x10	; 16
    528e:	16 c0       	rjmp	.+44     	; 0x52bc <nwkTxAckWaitTimerHandler+0x48>
    5290:	fc 01       	movw	r30, r24
    5292:	20 81       	ld	r18, Z
    5294:	26 31       	cpi	r18, 0x16	; 22
    5296:	91 f4       	brne	.+36     	; 0x52bc <nwkTxAckWaitTimerHandler+0x48>
    5298:	ec 57       	subi	r30, 0x7C	; 124
    529a:	ff 4f       	sbci	r31, 0xFF	; 255
    529c:	20 81       	ld	r18, Z
    529e:	31 81       	ldd	r19, Z+1	; 0x01
    52a0:	21 50       	subi	r18, 0x01	; 1
    52a2:	31 09       	sbc	r19, r1
    52a4:	31 83       	std	Z+1, r19	; 0x01
    52a6:	20 83       	st	Z, r18
    52a8:	23 2b       	or	r18, r19
    52aa:	39 f4       	brne	.+14     	; 0x52ba <nwkTxAckWaitTimerHandler+0x46>
    52ac:	fc 01       	movw	r30, r24
    52ae:	d0 83       	st	Z, r29
    52b0:	ed 57       	subi	r30, 0x7D	; 125
    52b2:	ff 4f       	sbci	r31, 0xFF	; 255
    52b4:	c0 83       	st	Z, r28
    52b6:	10 2f       	mov	r17, r16
    52b8:	01 c0       	rjmp	.+2      	; 0x52bc <nwkTxAckWaitTimerHandler+0x48>
    52ba:	10 2f       	mov	r17, r16
    52bc:	28 db       	rcall	.-2480   	; 0x490e <nwkFrameNext>
    52be:	00 97       	sbiw	r24, 0x00	; 0
    52c0:	39 f7       	brne	.-50     	; 0x5290 <nwkTxAckWaitTimerHandler+0x1c>
    52c2:	11 23       	and	r17, r17
    52c4:	11 f0       	breq	.+4      	; 0x52ca <nwkTxAckWaitTimerHandler+0x56>
    52c6:	c7 01       	movw	r24, r14
    52c8:	92 d3       	rcall	.+1828   	; 0x59ee <SYS_TimerStart>
    52ca:	df 91       	pop	r29
    52cc:	cf 91       	pop	r28
    52ce:	1f 91       	pop	r17
    52d0:	0f 91       	pop	r16
    52d2:	ff 90       	pop	r15
    52d4:	ef 90       	pop	r14
    52d6:	08 95       	ret

000052d8 <nwkTxInit>:
    52d8:	10 92 13 1d 	sts	0x1D13, r1	; 0x801d13 <nwkTxPhyActiveFrame+0x1>
    52dc:	10 92 12 1d 	sts	0x1D12, r1	; 0x801d12 <nwkTxPhyActiveFrame>
    52e0:	e5 e0       	ldi	r30, 0x05	; 5
    52e2:	fd e1       	ldi	r31, 0x1D	; 29
    52e4:	82 e3       	ldi	r24, 0x32	; 50
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	a0 e0       	ldi	r26, 0x00	; 0
    52ea:	b0 e0       	ldi	r27, 0x00	; 0
    52ec:	86 83       	std	Z+6, r24	; 0x06
    52ee:	97 83       	std	Z+7, r25	; 0x07
    52f0:	a0 87       	std	Z+8, r26	; 0x08
    52f2:	b1 87       	std	Z+9, r27	; 0x09
    52f4:	12 86       	std	Z+10, r1	; 0x0a
    52f6:	8a e3       	ldi	r24, 0x3A	; 58
    52f8:	99 e2       	ldi	r25, 0x29	; 41
    52fa:	94 87       	std	Z+12, r25	; 0x0c
    52fc:	83 87       	std	Z+11, r24	; 0x0b
    52fe:	e8 ef       	ldi	r30, 0xF8	; 248
    5300:	fc e1       	ldi	r31, 0x1C	; 28
    5302:	8a e0       	ldi	r24, 0x0A	; 10
    5304:	90 e0       	ldi	r25, 0x00	; 0
    5306:	a0 e0       	ldi	r26, 0x00	; 0
    5308:	b0 e0       	ldi	r27, 0x00	; 0
    530a:	86 83       	std	Z+6, r24	; 0x06
    530c:	97 83       	std	Z+7, r25	; 0x07
    530e:	a0 87       	std	Z+8, r26	; 0x08
    5310:	b1 87       	std	Z+9, r27	; 0x09
    5312:	12 86       	std	Z+10, r1	; 0x0a
    5314:	8e e0       	ldi	r24, 0x0E	; 14
    5316:	99 e2       	ldi	r25, 0x29	; 41
    5318:	94 87       	std	Z+12, r25	; 0x0c
    531a:	83 87       	std	Z+11, r24	; 0x0b
    531c:	08 95       	ret

0000531e <nwkTxFrame>:
    531e:	cf 93       	push	r28
    5320:	df 93       	push	r29
    5322:	ec 01       	movw	r28, r24
    5324:	fc 01       	movw	r30, r24
    5326:	ea 57       	subi	r30, 0x7A	; 122
    5328:	ff 4f       	sbci	r31, 0xFF	; 255
    532a:	80 81       	ld	r24, Z
    532c:	81 ff       	sbrs	r24, 1
    532e:	03 c0       	rjmp	.+6      	; 0x5336 <nwkTxFrame+0x18>
    5330:	92 e1       	ldi	r25, 0x12	; 18
    5332:	98 83       	st	Y, r25
    5334:	02 c0       	rjmp	.+4      	; 0x533a <nwkTxFrame+0x1c>
    5336:	92 e1       	ldi	r25, 0x12	; 18
    5338:	98 83       	st	Y, r25
    533a:	fe 01       	movw	r30, r28
    533c:	ed 57       	subi	r30, 0x7D	; 125
    533e:	ff 4f       	sbci	r31, 0xFF	; 255
    5340:	10 82       	st	Z, r1
    5342:	80 ff       	sbrs	r24, 0
    5344:	05 c0       	rjmp	.+10     	; 0x5350 <nwkTxFrame+0x32>
    5346:	2f ef       	ldi	r18, 0xFF	; 255
    5348:	3f ef       	ldi	r19, 0xFF	; 255
    534a:	3e 83       	std	Y+6, r19	; 0x06
    534c:	2d 83       	std	Y+5, r18	; 0x05
    534e:	06 c0       	rjmp	.+12     	; 0x535c <nwkTxFrame+0x3e>
    5350:	20 91 a3 23 	lds	r18, 0x23A3	; 0x8023a3 <nwkIb+0x2>
    5354:	30 91 a4 23 	lds	r19, 0x23A4	; 0x8023a4 <nwkIb+0x3>
    5358:	3e 83       	std	Y+6, r19	; 0x06
    535a:	2d 83       	std	Y+5, r18	; 0x05
    535c:	85 70       	andi	r24, 0x05	; 5
    535e:	19 f4       	brne	.+6      	; 0x5366 <nwkTxFrame+0x48>
    5360:	ce 01       	movw	r24, r28
    5362:	31 dc       	rcall	.-1950   	; 0x4bc6 <nwkRoutePrepareTx>
    5364:	04 c0       	rjmp	.+8      	; 0x536e <nwkTxFrame+0x50>
    5366:	8f 85       	ldd	r24, Y+15	; 0x0f
    5368:	98 89       	ldd	r25, Y+16	; 0x10
    536a:	98 87       	std	Y+8, r25	; 0x08
    536c:	8f 83       	std	Y+7, r24	; 0x07
    536e:	e1 ea       	ldi	r30, 0xA1	; 161
    5370:	f3 e2       	ldi	r31, 0x23	; 35
    5372:	80 81       	ld	r24, Z
    5374:	91 81       	ldd	r25, Z+1	; 0x01
    5376:	9a 87       	std	Y+10, r25	; 0x0a
    5378:	89 87       	std	Y+9, r24	; 0x09
    537a:	85 81       	ldd	r24, Z+5	; 0x05
    537c:	8f 5f       	subi	r24, 0xFF	; 255
    537e:	85 83       	std	Z+5, r24	; 0x05
    5380:	8c 83       	std	Y+4, r24	; 0x04
    5382:	8f 81       	ldd	r24, Y+7	; 0x07
    5384:	98 85       	ldd	r25, Y+8	; 0x08
    5386:	01 96       	adiw	r24, 0x01	; 1
    5388:	69 f4       	brne	.+26     	; 0x53a4 <nwkTxFrame+0x86>
    538a:	81 e4       	ldi	r24, 0x41	; 65
    538c:	98 e8       	ldi	r25, 0x88	; 136
    538e:	9b 83       	std	Y+3, r25	; 0x03
    5390:	8a 83       	std	Y+2, r24	; 0x02
    5392:	25 d4       	rcall	.+2122   	; 0x5bde <rand>
    5394:	cc 57       	subi	r28, 0x7C	; 124
    5396:	df 4f       	sbci	r29, 0xFF	; 255
    5398:	87 70       	andi	r24, 0x07	; 7
    539a:	99 27       	eor	r25, r25
    539c:	01 96       	adiw	r24, 0x01	; 1
    539e:	99 83       	std	Y+1, r25	; 0x01
    53a0:	88 83       	st	Y, r24
    53a2:	08 c0       	rjmp	.+16     	; 0x53b4 <nwkTxFrame+0x96>
    53a4:	81 e6       	ldi	r24, 0x61	; 97
    53a6:	98 e8       	ldi	r25, 0x88	; 136
    53a8:	9b 83       	std	Y+3, r25	; 0x03
    53aa:	8a 83       	std	Y+2, r24	; 0x02
    53ac:	cc 57       	subi	r28, 0x7C	; 124
    53ae:	df 4f       	sbci	r29, 0xFF	; 255
    53b0:	19 82       	std	Y+1, r1	; 0x01
    53b2:	18 82       	st	Y, r1
    53b4:	df 91       	pop	r29
    53b6:	cf 91       	pop	r28
    53b8:	08 95       	ret

000053ba <nwkTxBroadcastFrame>:
    53ba:	0f 93       	push	r16
    53bc:	1f 93       	push	r17
    53be:	cf 93       	push	r28
    53c0:	df 93       	push	r29
    53c2:	8c 01       	movw	r16, r24
    53c4:	61 da       	rcall	.-2878   	; 0x4888 <nwkFrameAlloc>
    53c6:	ec 01       	movw	r28, r24
    53c8:	89 2b       	or	r24, r25
    53ca:	a9 f1       	breq	.+106    	; 0x5436 <nwkTxBroadcastFrame+0x7c>
    53cc:	82 e1       	ldi	r24, 0x12	; 18
    53ce:	88 83       	st	Y, r24
    53d0:	f8 01       	movw	r30, r16
    53d2:	81 81       	ldd	r24, Z+1	; 0x01
    53d4:	89 83       	std	Y+1, r24	; 0x01
    53d6:	fe 01       	movw	r30, r28
    53d8:	ed 57       	subi	r30, 0x7D	; 125
    53da:	ff 4f       	sbci	r31, 0xFF	; 255
    53dc:	10 82       	st	Z, r1
    53de:	ff d3       	rcall	.+2046   	; 0x5bde <rand>
    53e0:	fe 01       	movw	r30, r28
    53e2:	ec 57       	subi	r30, 0x7C	; 124
    53e4:	ff 4f       	sbci	r31, 0xFF	; 255
    53e6:	87 70       	andi	r24, 0x07	; 7
    53e8:	99 27       	eor	r25, r25
    53ea:	01 96       	adiw	r24, 0x01	; 1
    53ec:	91 83       	std	Z+1, r25	; 0x01
    53ee:	80 83       	st	Z, r24
    53f0:	33 96       	adiw	r30, 0x03	; 3
    53f2:	11 82       	std	Z+1, r1	; 0x01
    53f4:	10 82       	st	Z, r1
    53f6:	f8 01       	movw	r30, r16
    53f8:	41 81       	ldd	r20, Z+1	; 0x01
    53fa:	50 e0       	ldi	r21, 0x00	; 0
    53fc:	b8 01       	movw	r22, r16
    53fe:	6e 5f       	subi	r22, 0xFE	; 254
    5400:	7f 4f       	sbci	r23, 0xFF	; 255
    5402:	ce 01       	movw	r24, r28
    5404:	02 96       	adiw	r24, 0x02	; 2
    5406:	f9 d3       	rcall	.+2034   	; 0x5bfa <memcpy>
    5408:	81 e4       	ldi	r24, 0x41	; 65
    540a:	98 e8       	ldi	r25, 0x88	; 136
    540c:	9b 83       	std	Y+3, r25	; 0x03
    540e:	8a 83       	std	Y+2, r24	; 0x02
    5410:	8f ef       	ldi	r24, 0xFF	; 255
    5412:	9f ef       	ldi	r25, 0xFF	; 255
    5414:	98 87       	std	Y+8, r25	; 0x08
    5416:	8f 83       	std	Y+7, r24	; 0x07
    5418:	f8 01       	movw	r30, r16
    541a:	85 81       	ldd	r24, Z+5	; 0x05
    541c:	96 81       	ldd	r25, Z+6	; 0x06
    541e:	9e 83       	std	Y+6, r25	; 0x06
    5420:	8d 83       	std	Y+5, r24	; 0x05
    5422:	e1 ea       	ldi	r30, 0xA1	; 161
    5424:	f3 e2       	ldi	r31, 0x23	; 35
    5426:	80 81       	ld	r24, Z
    5428:	91 81       	ldd	r25, Z+1	; 0x01
    542a:	9a 87       	std	Y+10, r25	; 0x0a
    542c:	89 87       	std	Y+9, r24	; 0x09
    542e:	85 81       	ldd	r24, Z+5	; 0x05
    5430:	8f 5f       	subi	r24, 0xFF	; 255
    5432:	85 83       	std	Z+5, r24	; 0x05
    5434:	8c 83       	std	Y+4, r24	; 0x04
    5436:	df 91       	pop	r29
    5438:	cf 91       	pop	r28
    543a:	1f 91       	pop	r17
    543c:	0f 91       	pop	r16
    543e:	08 95       	ret

00005440 <nwkTxAckReceived>:
    5440:	cf 93       	push	r28
    5442:	df 93       	push	r29
    5444:	fc 01       	movw	r30, r24
    5446:	21 85       	ldd	r18, Z+9	; 0x09
    5448:	23 30       	cpi	r18, 0x03	; 3
    544a:	d9 f4       	brne	.+54     	; 0x5482 <nwkTxAckReceived+0x42>
    544c:	10 c0       	rjmp	.+32     	; 0x546e <nwkTxAckReceived+0x2e>
    544e:	fc 01       	movw	r30, r24
    5450:	20 81       	ld	r18, Z
    5452:	26 31       	cpi	r18, 0x16	; 22
    5454:	89 f4       	brne	.+34     	; 0x5478 <nwkTxAckReceived+0x38>
    5456:	34 85       	ldd	r19, Z+12	; 0x0c
    5458:	29 81       	ldd	r18, Y+1	; 0x01
    545a:	32 13       	cpse	r19, r18
    545c:	0d c0       	rjmp	.+26     	; 0x5478 <nwkTxAckReceived+0x38>
    545e:	27 e1       	ldi	r18, 0x17	; 23
    5460:	20 83       	st	Z, r18
    5462:	2a 81       	ldd	r18, Y+2	; 0x02
    5464:	ea 57       	subi	r30, 0x7A	; 122
    5466:	ff 4f       	sbci	r31, 0xFF	; 255
    5468:	20 83       	st	Z, r18
    546a:	81 e0       	ldi	r24, 0x01	; 1
    546c:	0b c0       	rjmp	.+22     	; 0x5484 <nwkTxAckReceived+0x44>
    546e:	fc 01       	movw	r30, r24
    5470:	c7 81       	ldd	r28, Z+7	; 0x07
    5472:	d0 85       	ldd	r29, Z+8	; 0x08
    5474:	80 e0       	ldi	r24, 0x00	; 0
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	4a da       	rcall	.-2924   	; 0x490e <nwkFrameNext>
    547a:	00 97       	sbiw	r24, 0x00	; 0
    547c:	41 f7       	brne	.-48     	; 0x544e <nwkTxAckReceived+0xe>
    547e:	80 e0       	ldi	r24, 0x00	; 0
    5480:	01 c0       	rjmp	.+2      	; 0x5484 <nwkTxAckReceived+0x44>
    5482:	80 e0       	ldi	r24, 0x00	; 0
    5484:	df 91       	pop	r29
    5486:	cf 91       	pop	r28
    5488:	08 95       	ret

0000548a <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    548a:	e0 91 12 1d 	lds	r30, 0x1D12	; 0x801d12 <nwkTxPhyActiveFrame>
    548e:	f0 91 13 1d 	lds	r31, 0x1D13	; 0x801d13 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    5492:	81 30       	cpi	r24, 0x01	; 1
    5494:	21 f0       	breq	.+8      	; 0x549e <PHY_DataConf+0x14>
    5496:	48 f0       	brcs	.+18     	; 0x54aa <PHY_DataConf+0x20>
    5498:	82 30       	cpi	r24, 0x02	; 2
    549a:	19 f0       	breq	.+6      	; 0x54a2 <PHY_DataConf+0x18>
    549c:	04 c0       	rjmp	.+8      	; 0x54a6 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    549e:	80 e2       	ldi	r24, 0x20	; 32
    54a0:	05 c0       	rjmp	.+10     	; 0x54ac <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    54a2:	81 e2       	ldi	r24, 0x21	; 33
    54a4:	03 c0       	rjmp	.+6      	; 0x54ac <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    54a6:	81 e0       	ldi	r24, 0x01	; 1
    54a8:	01 c0       	rjmp	.+2      	; 0x54ac <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    54aa:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    54ac:	df 01       	movw	r26, r30
    54ae:	ad 57       	subi	r26, 0x7D	; 125
    54b0:	bf 4f       	sbci	r27, 0xFF	; 255
    54b2:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    54b4:	85 e1       	ldi	r24, 0x15	; 21
    54b6:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    54b8:	10 92 13 1d 	sts	0x1D13, r1	; 0x801d13 <nwkTxPhyActiveFrame+0x1>
    54bc:	10 92 12 1d 	sts	0x1D12, r1	; 0x801d12 <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    54c0:	e1 ea       	ldi	r30, 0xA1	; 161
    54c2:	f3 e2       	ldi	r31, 0x23	; 35
    54c4:	86 a1       	ldd	r24, Z+38	; 0x26
    54c6:	97 a1       	ldd	r25, Z+39	; 0x27
    54c8:	01 97       	sbiw	r24, 0x01	; 1
    54ca:	97 a3       	std	Z+39, r25	; 0x27
    54cc:	86 a3       	std	Z+38, r24	; 0x26
    54ce:	08 95       	ret

000054d0 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    54d0:	9f 92       	push	r9
    54d2:	af 92       	push	r10
    54d4:	bf 92       	push	r11
    54d6:	cf 92       	push	r12
    54d8:	df 92       	push	r13
    54da:	ef 92       	push	r14
    54dc:	ff 92       	push	r15
    54de:	0f 93       	push	r16
    54e0:	1f 93       	push	r17
    54e2:	cf 93       	push	r28
    54e4:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    54e6:	c0 e0       	ldi	r28, 0x00	; 0
    54e8:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    54ea:	0f 2e       	mov	r0, r31
    54ec:	f4 e1       	ldi	r31, 0x14	; 20
    54ee:	af 2e       	mov	r10, r31
    54f0:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    54f2:	01 ea       	ldi	r16, 0xA1	; 161
    54f4:	13 e2       	ldi	r17, 0x23	; 35
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    54f6:	0f 2e       	mov	r0, r31
    54f8:	f7 e1       	ldi	r31, 0x17	; 23
    54fa:	df 2e       	mov	r13, r31
    54fc:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    54fe:	0f 2e       	mov	r0, r31
    5500:	f6 e1       	ldi	r31, 0x16	; 22
    5502:	9f 2e       	mov	r9, r31
    5504:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    5506:	0f 2e       	mov	r0, r31
    5508:	f9 e2       	ldi	r31, 0x29	; 41
    550a:	ef 2e       	mov	r14, r31
    550c:	f1 2c       	mov	r15, r1
    550e:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    5510:	0f 2e       	mov	r0, r31
    5512:	f3 e1       	ldi	r31, 0x13	; 19
    5514:	cf 2e       	mov	r12, r31
    5516:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    5518:	0f 2e       	mov	r0, r31
    551a:	f1 e1       	ldi	r31, 0x11	; 17
    551c:	bf 2e       	mov	r11, r31
    551e:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    5520:	60 c0       	rjmp	.+192    	; 0x55e2 <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    5522:	88 81       	ld	r24, Y
    5524:	83 31       	cpi	r24, 0x13	; 19
    5526:	c1 f0       	breq	.+48     	; 0x5558 <nwkTxTaskHandler+0x88>
    5528:	18 f4       	brcc	.+6      	; 0x5530 <nwkTxTaskHandler+0x60>
    552a:	82 31       	cpi	r24, 0x12	; 18
    552c:	39 f0       	breq	.+14     	; 0x553c <nwkTxTaskHandler+0x6c>
    552e:	59 c0       	rjmp	.+178    	; 0x55e2 <nwkTxTaskHandler+0x112>
    5530:	85 31       	cpi	r24, 0x15	; 21
    5532:	49 f1       	breq	.+82     	; 0x5586 <nwkTxTaskHandler+0xb6>
    5534:	87 31       	cpi	r24, 0x17	; 23
    5536:	09 f4       	brne	.+2      	; 0x553a <nwkTxTaskHandler+0x6a>
    5538:	45 c0       	rjmp	.+138    	; 0x55c4 <nwkTxTaskHandler+0xf4>
    553a:	53 c0       	rjmp	.+166    	; 0x55e2 <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    553c:	fe 01       	movw	r30, r28
    553e:	ec 57       	subi	r30, 0x7C	; 124
    5540:	ff 4f       	sbci	r31, 0xFF	; 255
    5542:	80 81       	ld	r24, Z
    5544:	91 81       	ldd	r25, Z+1	; 0x01
    5546:	89 2b       	or	r24, r25
    5548:	29 f0       	breq	.+10     	; 0x5554 <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    554a:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    554c:	88 ef       	ldi	r24, 0xF8	; 248
    554e:	9c e1       	ldi	r25, 0x1C	; 28
    5550:	4e d2       	rcall	.+1180   	; 0x59ee <SYS_TimerStart>
    5552:	47 c0       	rjmp	.+142    	; 0x55e2 <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    5554:	c8 82       	st	Y, r12
    5556:	45 c0       	rjmp	.+138    	; 0x55e2 <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    5558:	80 91 12 1d 	lds	r24, 0x1D12	; 0x801d12 <nwkTxPhyActiveFrame>
    555c:	90 91 13 1d 	lds	r25, 0x1D13	; 0x801d13 <nwkTxPhyActiveFrame+0x1>
    5560:	89 2b       	or	r24, r25
    5562:	09 f0       	breq	.+2      	; 0x5566 <nwkTxTaskHandler+0x96>
    5564:	3e c0       	rjmp	.+124    	; 0x55e2 <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    5566:	d0 93 13 1d 	sts	0x1D13, r29	; 0x801d13 <nwkTxPhyActiveFrame+0x1>
    556a:	c0 93 12 1d 	sts	0x1D12, r28	; 0x801d12 <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    556e:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    5570:	69 81       	ldd	r22, Y+1	; 0x01
    5572:	ce 01       	movw	r24, r28
    5574:	02 96       	adiw	r24, 0x02	; 2
    5576:	cb d0       	rcall	.+406    	; 0x570e <PHY_DataReq>
          nwkIb.lock++;
    5578:	f8 01       	movw	r30, r16
    557a:	86 a1       	ldd	r24, Z+38	; 0x26
    557c:	97 a1       	ldd	r25, Z+39	; 0x27
    557e:	01 96       	adiw	r24, 0x01	; 1
    5580:	97 a3       	std	Z+39, r25	; 0x27
    5582:	86 a3       	std	Z+38, r24	; 0x26
    5584:	2e c0       	rjmp	.+92     	; 0x55e2 <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    5586:	fe 01       	movw	r30, r28
    5588:	ed 57       	subi	r30, 0x7D	; 125
    558a:	ff 4f       	sbci	r31, 0xFF	; 255
    558c:	80 81       	ld	r24, Z
    558e:	81 11       	cpse	r24, r1
    5590:	17 c0       	rjmp	.+46     	; 0x55c0 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    5592:	2d 85       	ldd	r18, Y+13	; 0x0d
    5594:	3e 85       	ldd	r19, Y+14	; 0x0e
    5596:	f8 01       	movw	r30, r16
    5598:	80 81       	ld	r24, Z
    559a:	91 81       	ldd	r25, Z+1	; 0x01
    559c:	28 17       	cp	r18, r24
    559e:	39 07       	cpc	r19, r25
    55a0:	69 f4       	brne	.+26     	; 0x55bc <nwkTxTaskHandler+0xec>
    55a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    55a4:	80 ff       	sbrs	r24, 0
    55a6:	0a c0       	rjmp	.+20     	; 0x55bc <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    55a8:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    55aa:	fe 01       	movw	r30, r28
    55ac:	ec 57       	subi	r30, 0x7C	; 124
    55ae:	ff 4f       	sbci	r31, 0xFF	; 255
    55b0:	f1 82       	std	Z+1, r15	; 0x01
    55b2:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    55b4:	85 e0       	ldi	r24, 0x05	; 5
    55b6:	9d e1       	ldi	r25, 0x1D	; 29
    55b8:	1a d2       	rcall	.+1076   	; 0x59ee <SYS_TimerStart>
    55ba:	13 c0       	rjmp	.+38     	; 0x55e2 <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    55bc:	d8 82       	st	Y, r13
    55be:	11 c0       	rjmp	.+34     	; 0x55e2 <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    55c0:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    55c2:	0f c0       	rjmp	.+30     	; 0x55e2 <nwkTxTaskHandler+0x112>
    55c4:	ce 01       	movw	r24, r28
    55c6:	b8 da       	rcall	.-2704   	; 0x4b38 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    55c8:	fe 01       	movw	r30, r28
    55ca:	e9 57       	subi	r30, 0x79	; 121
    55cc:	ff 4f       	sbci	r31, 0xFF	; 255
    55ce:	01 90       	ld	r0, Z+
    55d0:	f0 81       	ld	r31, Z
    55d2:	e0 2d       	mov	r30, r0
    55d4:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    55d6:	19 f4       	brne	.+6      	; 0x55de <nwkTxTaskHandler+0x10e>
    55d8:	ce 01       	movw	r24, r28
    55da:	8f d9       	rcall	.-3298   	; 0x48fa <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    55dc:	02 c0       	rjmp	.+4      	; 0x55e2 <nwkTxTaskHandler+0x112>
    55de:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    55e0:	19 95       	eicall
    55e2:	ce 01       	movw	r24, r28
    55e4:	94 d9       	rcall	.-3288   	; 0x490e <nwkFrameNext>
    55e6:	ec 01       	movw	r28, r24
    55e8:	89 2b       	or	r24, r25
    55ea:	09 f0       	breq	.+2      	; 0x55ee <nwkTxTaskHandler+0x11e>
    55ec:	9a cf       	rjmp	.-204    	; 0x5522 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    55ee:	df 91       	pop	r29
    55f0:	cf 91       	pop	r28
    55f2:	1f 91       	pop	r17
    55f4:	0f 91       	pop	r16
    55f6:	ff 90       	pop	r15
    55f8:	ef 90       	pop	r14
    55fa:	df 90       	pop	r13
    55fc:	cf 90       	pop	r12
    55fe:	bf 90       	pop	r11
    5600:	af 90       	pop	r10
    5602:	9f 90       	pop	r9
    5604:	08 95       	ret

00005606 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    5606:	80 91 14 1d 	lds	r24, 0x1D14	; 0x801d14 <phyBand>
    560a:	98 2f       	mov	r25, r24
    560c:	9f 70       	andi	r25, 0x0F	; 15
    560e:	e4 e5       	ldi	r30, 0x54	; 84
    5610:	f1 e0       	ldi	r31, 0x01	; 1
    5612:	80 81       	ld	r24, Z
    5614:	80 7f       	andi	r24, 0xF0	; 240
    5616:	89 2b       	or	r24, r25
    5618:	80 83       	st	Z, r24
    561a:	80 91 14 1d 	lds	r24, 0x1D14	; 0x801d14 <phyBand>
    561e:	88 23       	and	r24, r24
    5620:	29 f0       	breq	.+10     	; 0x562c <phySetChannel+0x26>
    5622:	80 91 15 1d 	lds	r24, 0x1D15	; 0x801d15 <phyChannel>
    5626:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    562a:	08 95       	ret
    562c:	80 91 15 1d 	lds	r24, 0x1D15	; 0x801d15 <phyChannel>
    5630:	98 2f       	mov	r25, r24
    5632:	9f 71       	andi	r25, 0x1F	; 31
    5634:	e8 e4       	ldi	r30, 0x48	; 72
    5636:	f1 e0       	ldi	r31, 0x01	; 1
    5638:	80 81       	ld	r24, Z
    563a:	80 7e       	andi	r24, 0xE0	; 224
    563c:	89 2b       	or	r24, r25
    563e:	80 83       	st	Z, r24
    5640:	08 95       	ret

00005642 <phyTrxSetState>:
    5642:	93 e0       	ldi	r25, 0x03	; 3
    5644:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    5648:	e1 e4       	ldi	r30, 0x41	; 65
    564a:	f1 e0       	ldi	r31, 0x01	; 1
    564c:	90 81       	ld	r25, Z
    564e:	9f 71       	andi	r25, 0x1F	; 31
    5650:	98 30       	cpi	r25, 0x08	; 8
    5652:	e1 f7       	brne	.-8      	; 0x564c <phyTrxSetState+0xa>
    5654:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    5658:	e1 e4       	ldi	r30, 0x41	; 65
    565a:	f1 e0       	ldi	r31, 0x01	; 1
    565c:	90 81       	ld	r25, Z
    565e:	9f 71       	andi	r25, 0x1F	; 31
    5660:	89 13       	cpse	r24, r25
    5662:	fc cf       	rjmp	.-8      	; 0x565c <phyTrxSetState+0x1a>
    5664:	08 95       	ret

00005666 <phySetRxState>:
    5666:	88 e0       	ldi	r24, 0x08	; 8
    5668:	ec df       	rcall	.-40     	; 0x5642 <phyTrxSetState>
    566a:	8f ef       	ldi	r24, 0xFF	; 255
    566c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    5670:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <phyRxState>
    5674:	88 23       	and	r24, r24
    5676:	11 f0       	breq	.+4      	; 0x567c <phySetRxState+0x16>
    5678:	86 e1       	ldi	r24, 0x16	; 22
    567a:	e3 cf       	rjmp	.-58     	; 0x5642 <phyTrxSetState>
    567c:	08 95       	ret

0000567e <PHY_Init>:
    567e:	e9 e3       	ldi	r30, 0x39	; 57
    5680:	f1 e0       	ldi	r31, 0x01	; 1
    5682:	80 81       	ld	r24, Z
    5684:	81 60       	ori	r24, 0x01	; 1
    5686:	80 83       	st	Z, r24
    5688:	10 92 16 1d 	sts	0x1D16, r1	; 0x801d16 <phyRxState>
    568c:	10 92 14 1d 	sts	0x1D14, r1	; 0x801d14 <phyBand>
    5690:	81 e0       	ldi	r24, 0x01	; 1
    5692:	80 93 97 1d 	sts	0x1D97, r24	; 0x801d97 <phyState>
    5696:	88 e0       	ldi	r24, 0x08	; 8
    5698:	d4 df       	rcall	.-88     	; 0x5642 <phyTrxSetState>
    569a:	8b ee       	ldi	r24, 0xEB	; 235
    569c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    56a0:	ec e4       	ldi	r30, 0x4C	; 76
    56a2:	f1 e0       	ldi	r31, 0x01	; 1
    56a4:	80 81       	ld	r24, Z
    56a6:	80 68       	ori	r24, 0x80	; 128
    56a8:	80 83       	st	Z, r24
    56aa:	08 95       	ret

000056ac <PHY_SetRxState>:
    56ac:	80 93 16 1d 	sts	0x1D16, r24	; 0x801d16 <phyRxState>
    56b0:	da cf       	rjmp	.-76     	; 0x5666 <phySetRxState>
    56b2:	08 95       	ret

000056b4 <PHY_SetChannel>:
    56b4:	80 93 15 1d 	sts	0x1D15, r24	; 0x801d15 <phyChannel>
    56b8:	a6 cf       	rjmp	.-180    	; 0x5606 <phySetChannel>
    56ba:	08 95       	ret

000056bc <PHY_SetPanId>:
    56bc:	cf 93       	push	r28
    56be:	df 93       	push	r29
    56c0:	1f 92       	push	r1
    56c2:	1f 92       	push	r1
    56c4:	cd b7       	in	r28, 0x3d	; 61
    56c6:	de b7       	in	r29, 0x3e	; 62
    56c8:	9a 83       	std	Y+2, r25	; 0x02
    56ca:	89 83       	std	Y+1, r24	; 0x01
    56cc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    56d0:	8a 81       	ldd	r24, Y+2	; 0x02
    56d2:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    56d6:	0f 90       	pop	r0
    56d8:	0f 90       	pop	r0
    56da:	df 91       	pop	r29
    56dc:	cf 91       	pop	r28
    56de:	08 95       	ret

000056e0 <PHY_SetShortAddr>:
    56e0:	cf 93       	push	r28
    56e2:	df 93       	push	r29
    56e4:	1f 92       	push	r1
    56e6:	1f 92       	push	r1
    56e8:	cd b7       	in	r28, 0x3d	; 61
    56ea:	de b7       	in	r29, 0x3e	; 62
    56ec:	9a 83       	std	Y+2, r25	; 0x02
    56ee:	89 83       	std	Y+1, r24	; 0x01
    56f0:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    56f4:	8a 81       	ldd	r24, Y+2	; 0x02
    56f6:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    56fa:	99 81       	ldd	r25, Y+1	; 0x01
    56fc:	8a 81       	ldd	r24, Y+2	; 0x02
    56fe:	89 0f       	add	r24, r25
    5700:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    5704:	0f 90       	pop	r0
    5706:	0f 90       	pop	r0
    5708:	df 91       	pop	r29
    570a:	cf 91       	pop	r28
    570c:	08 95       	ret

0000570e <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    570e:	1f 93       	push	r17
    5710:	cf 93       	push	r28
    5712:	df 93       	push	r29
    5714:	18 2f       	mov	r17, r24
    5716:	d9 2f       	mov	r29, r25
    5718:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    571a:	89 e1       	ldi	r24, 0x19	; 25
    571c:	92 df       	rcall	.-220    	; 0x5642 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    571e:	8f ef       	ldi	r24, 0xFF	; 255
    5720:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    5724:	82 e0       	ldi	r24, 0x02	; 2
    5726:	8c 0f       	add	r24, r28
    5728:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    572c:	cc 23       	and	r28, r28
    572e:	71 f0       	breq	.+28     	; 0x574c <PHY_DataReq+0x3e>
    5730:	a1 2f       	mov	r26, r17
    5732:	bd 2f       	mov	r27, r29
    5734:	c1 50       	subi	r28, 0x01	; 1
    5736:	6c 2f       	mov	r22, r28
    5738:	70 e0       	ldi	r23, 0x00	; 0
    573a:	6e 57       	subi	r22, 0x7E	; 126
    573c:	7e 4f       	sbci	r23, 0xFE	; 254
    573e:	e1 e8       	ldi	r30, 0x81	; 129
    5740:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    5742:	8d 91       	ld	r24, X+
    5744:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    5746:	e6 17       	cp	r30, r22
    5748:	f7 07       	cpc	r31, r23
    574a:	d9 f7       	brne	.-10     	; 0x5742 <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    574c:	83 e0       	ldi	r24, 0x03	; 3
    574e:	80 93 97 1d 	sts	0x1D97, r24	; 0x801d97 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    5752:	82 e0       	ldi	r24, 0x02	; 2
    5754:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    5758:	df 91       	pop	r29
    575a:	cf 91       	pop	r28
    575c:	1f 91       	pop	r17
    575e:	08 95       	ret

00005760 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    5760:	1f 93       	push	r17
    5762:	cf 93       	push	r28
    5764:	df 93       	push	r29
    5766:	00 d0       	rcall	.+0      	; 0x5768 <PHY_TaskHandler+0x8>
    5768:	1f 92       	push	r1
    576a:	1f 92       	push	r1
    576c:	cd b7       	in	r28, 0x3d	; 61
    576e:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    5770:	80 91 97 1d 	lds	r24, 0x1D97	; 0x801d97 <phyState>
    5774:	82 30       	cpi	r24, 0x02	; 2
    5776:	09 f4       	brne	.+2      	; 0x577a <PHY_TaskHandler+0x1a>
    5778:	65 c0       	rjmp	.+202    	; 0x5844 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    577a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    577e:	83 ff       	sbrs	r24, 3
    5780:	3e c0       	rjmp	.+124    	; 0x57fe <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    5782:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    5786:	6a 2f       	mov	r22, r26
    5788:	70 e0       	ldi	r23, 0x00	; 0
    578a:	ab 01       	movw	r20, r22
    578c:	4f 5f       	subi	r20, 0xFF	; 255
    578e:	5f 4f       	sbci	r21, 0xFF	; 255
    5790:	80 e0       	ldi	r24, 0x00	; 0
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    5796:	fc 01       	movw	r30, r24
    5798:	e0 58       	subi	r30, 0x80	; 128
    579a:	fe 4f       	sbci	r31, 0xFE	; 254
    579c:	30 81       	ld	r19, Z
    579e:	fc 01       	movw	r30, r24
    57a0:	e9 5e       	subi	r30, 0xE9	; 233
    57a2:	f2 4e       	sbci	r31, 0xE2	; 226
    57a4:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    57a6:	2f 5f       	subi	r18, 0xFF	; 255
    57a8:	82 2f       	mov	r24, r18
    57aa:	90 e0       	ldi	r25, 0x00	; 0
    57ac:	84 17       	cp	r24, r20
    57ae:	95 07       	cpc	r25, r21
    57b0:	94 f3       	brlt	.-28     	; 0x5796 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    57b2:	87 e1       	ldi	r24, 0x17	; 23
    57b4:	9d e1       	ldi	r25, 0x1D	; 29
    57b6:	9a 83       	std	Y+2, r25	; 0x02
    57b8:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    57ba:	a2 50       	subi	r26, 0x02	; 2
    57bc:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    57be:	fb 01       	movw	r30, r22
    57c0:	e9 5e       	subi	r30, 0xE9	; 233
    57c2:	f2 4e       	sbci	r31, 0xE2	; 226
    57c4:	80 81       	ld	r24, Z
    57c6:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    57c8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    57cc:	8a 55       	subi	r24, 0x5A	; 90
    57ce:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    57d0:	ce 01       	movw	r24, r28
    57d2:	01 96       	adiw	r24, 0x01	; 1
    57d4:	bd da       	rcall	.-2694   	; 0x4d50 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    57d6:	e1 e4       	ldi	r30, 0x41	; 65
    57d8:	f1 e0       	ldi	r31, 0x01	; 1
    57da:	80 81       	ld	r24, Z
    57dc:	8f 71       	andi	r24, 0x1F	; 31
    57de:	86 31       	cpi	r24, 0x16	; 22
    57e0:	e1 f7       	brne	.-8      	; 0x57da <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    57e2:	ef e4       	ldi	r30, 0x4F	; 79
    57e4:	f1 e0       	ldi	r31, 0x01	; 1
    57e6:	80 81       	ld	r24, Z
    57e8:	88 60       	ori	r24, 0x08	; 8
    57ea:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    57ec:	ec e4       	ldi	r30, 0x4C	; 76
    57ee:	f1 e0       	ldi	r31, 0x01	; 1
    57f0:	80 81       	ld	r24, Z
    57f2:	8f 77       	andi	r24, 0x7F	; 127
    57f4:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    57f6:	80 81       	ld	r24, Z
    57f8:	80 68       	ori	r24, 0x80	; 128
    57fa:	80 83       	st	Z, r24
    57fc:	23 c0       	rjmp	.+70     	; 0x5844 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    57fe:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    5802:	86 ff       	sbrs	r24, 6
    5804:	1f c0       	rjmp	.+62     	; 0x5844 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    5806:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    580a:	8f 71       	andi	r24, 0x1F	; 31
    580c:	89 31       	cpi	r24, 0x19	; 25
    580e:	a9 f4       	brne	.+42     	; 0x583a <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    5810:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    5814:	12 95       	swap	r17
    5816:	16 95       	lsr	r17
    5818:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    581a:	49 f0       	breq	.+18     	; 0x582e <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    581c:	13 30       	cpi	r17, 0x03	; 3
    581e:	21 f0       	breq	.+8      	; 0x5828 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    5820:	15 30       	cpi	r17, 0x05	; 5
    5822:	21 f0       	breq	.+8      	; 0x582c <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    5824:	13 e0       	ldi	r17, 0x03	; 3
    5826:	03 c0       	rjmp	.+6      	; 0x582e <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    5828:	11 e0       	ldi	r17, 0x01	; 1
    582a:	01 c0       	rjmp	.+2      	; 0x582e <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    582c:	12 e0       	ldi	r17, 0x02	; 2
    582e:	1b df       	rcall	.-458    	; 0x5666 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    5830:	81 e0       	ldi	r24, 0x01	; 1
    5832:	80 93 97 1d 	sts	0x1D97, r24	; 0x801d97 <phyState>

      PHY_DataConf(status);
    5836:	81 2f       	mov	r24, r17
    5838:	28 de       	rcall	.-944    	; 0x548a <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    583a:	ef e4       	ldi	r30, 0x4F	; 79
    583c:	f1 e0       	ldi	r31, 0x01	; 1
    583e:	80 81       	ld	r24, Z
    5840:	80 64       	ori	r24, 0x40	; 64
    5842:	80 83       	st	Z, r24
  }
}
    5844:	0f 90       	pop	r0
    5846:	0f 90       	pop	r0
    5848:	0f 90       	pop	r0
    584a:	0f 90       	pop	r0
    584c:	0f 90       	pop	r0
    584e:	df 91       	pop	r29
    5850:	cf 91       	pop	r28
    5852:	1f 91       	pop	r17
    5854:	08 95       	ret

00005856 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    5856:	0e 94 77 21 	call	0x42ee	; 0x42ee <HAL_Init>
  SYS_TimerInit();
    585a:	6d d0       	rcall	.+218    	; 0x5936 <SYS_TimerInit>
  PHY_Init();
    585c:	10 df       	rcall	.-480    	; 0x567e <PHY_Init>
    585e:	0c 94 18 23 	jmp	0x4630	; 0x4630 <NWK_Init>
  NWK_Init();
    5862:	08 95       	ret

00005864 <SYS_TaskHandler>:
    5864:	7d df       	rcall	.-262    	; 0x5760 <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    5866:	0e 94 46 23 	call	0x468c	; 0x468c <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    586a:	cc c0       	rjmp	.+408    	; 0x5a04 <SYS_TimerTaskHandler>
    586c:	08 95       	ret

0000586e <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    586e:	0f 93       	push	r16
    5870:	1f 93       	push	r17
    5872:	cf 93       	push	r28
    5874:	df 93       	push	r29
    5876:	ec 01       	movw	r28, r24
  if (timers)
    5878:	80 91 98 1d 	lds	r24, 0x1D98	; 0x801d98 <timers>
    587c:	90 91 99 1d 	lds	r25, 0x1D99	; 0x801d99 <timers+0x1>
    5880:	00 97       	sbiw	r24, 0x00	; 0
    5882:	09 f4       	brne	.+2      	; 0x5886 <placeTimer+0x18>
    5884:	45 c0       	rjmp	.+138    	; 0x5910 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    5886:	4e 81       	ldd	r20, Y+6	; 0x06
    5888:	5f 81       	ldd	r21, Y+7	; 0x07
    588a:	68 85       	ldd	r22, Y+8	; 0x08
    588c:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    588e:	fc 01       	movw	r30, r24
    5890:	02 81       	ldd	r16, Z+2	; 0x02
    5892:	13 81       	ldd	r17, Z+3	; 0x03
    5894:	24 81       	ldd	r18, Z+4	; 0x04
    5896:	35 81       	ldd	r19, Z+5	; 0x05
    5898:	40 17       	cp	r20, r16
    589a:	51 07       	cpc	r21, r17
    589c:	62 07       	cpc	r22, r18
    589e:	73 07       	cpc	r23, r19
    58a0:	60 f0       	brcs	.+24     	; 0x58ba <placeTimer+0x4c>
    58a2:	dc 01       	movw	r26, r24
    58a4:	17 c0       	rjmp	.+46     	; 0x58d4 <placeTimer+0x66>
    58a6:	02 81       	ldd	r16, Z+2	; 0x02
    58a8:	13 81       	ldd	r17, Z+3	; 0x03
    58aa:	24 81       	ldd	r18, Z+4	; 0x04
    58ac:	35 81       	ldd	r19, Z+5	; 0x05
    58ae:	40 17       	cp	r20, r16
    58b0:	51 07       	cpc	r21, r17
    58b2:	62 07       	cpc	r22, r18
    58b4:	73 07       	cpc	r23, r19
    58b6:	68 f4       	brcc	.+26     	; 0x58d2 <placeTimer+0x64>
    58b8:	03 c0       	rjmp	.+6      	; 0x58c0 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    58ba:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    58bc:	a0 e0       	ldi	r26, 0x00	; 0
    58be:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    58c0:	04 1b       	sub	r16, r20
    58c2:	15 0b       	sbc	r17, r21
    58c4:	26 0b       	sbc	r18, r22
    58c6:	37 0b       	sbc	r19, r23
    58c8:	02 83       	std	Z+2, r16	; 0x02
    58ca:	13 83       	std	Z+3, r17	; 0x03
    58cc:	24 83       	std	Z+4, r18	; 0x04
    58ce:	35 83       	std	Z+5, r19	; 0x05
         break;
    58d0:	0a c0       	rjmp	.+20     	; 0x58e6 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    58d2:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    58d4:	40 1b       	sub	r20, r16
    58d6:	51 0b       	sbc	r21, r17
    58d8:	62 0b       	sbc	r22, r18
    58da:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    58dc:	ed 91       	ld	r30, X+
    58de:	fc 91       	ld	r31, X
    58e0:	11 97       	sbiw	r26, 0x01	; 1
    58e2:	30 97       	sbiw	r30, 0x00	; 0
    58e4:	01 f7       	brne	.-64     	; 0x58a6 <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    58e6:	4a 83       	std	Y+2, r20	; 0x02
    58e8:	5b 83       	std	Y+3, r21	; 0x03
    58ea:	6c 83       	std	Y+4, r22	; 0x04
    58ec:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    58ee:	10 97       	sbiw	r26, 0x00	; 0
    58f0:	41 f0       	breq	.+16     	; 0x5902 <placeTimer+0x94>
    {
      timer->next = prev->next;
    58f2:	8d 91       	ld	r24, X+
    58f4:	9c 91       	ld	r25, X
    58f6:	11 97       	sbiw	r26, 0x01	; 1
    58f8:	99 83       	std	Y+1, r25	; 0x01
    58fa:	88 83       	st	Y, r24
      prev->next = timer;
    58fc:	cd 93       	st	X+, r28
    58fe:	dc 93       	st	X, r29
    5900:	15 c0       	rjmp	.+42     	; 0x592c <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    5902:	99 83       	std	Y+1, r25	; 0x01
    5904:	88 83       	st	Y, r24
      timers = timer;
    5906:	d0 93 99 1d 	sts	0x1D99, r29	; 0x801d99 <timers+0x1>
    590a:	c0 93 98 1d 	sts	0x1D98, r28	; 0x801d98 <timers>
    590e:	0e c0       	rjmp	.+28     	; 0x592c <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    5910:	19 82       	std	Y+1, r1	; 0x01
    5912:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    5914:	8e 81       	ldd	r24, Y+6	; 0x06
    5916:	9f 81       	ldd	r25, Y+7	; 0x07
    5918:	a8 85       	ldd	r26, Y+8	; 0x08
    591a:	b9 85       	ldd	r27, Y+9	; 0x09
    591c:	8a 83       	std	Y+2, r24	; 0x02
    591e:	9b 83       	std	Y+3, r25	; 0x03
    5920:	ac 83       	std	Y+4, r26	; 0x04
    5922:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    5924:	d0 93 99 1d 	sts	0x1D99, r29	; 0x801d99 <timers+0x1>
    5928:	c0 93 98 1d 	sts	0x1D98, r28	; 0x801d98 <timers>
  }
}
    592c:	df 91       	pop	r29
    592e:	cf 91       	pop	r28
    5930:	1f 91       	pop	r17
    5932:	0f 91       	pop	r16
    5934:	08 95       	ret

00005936 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    5936:	10 92 99 1d 	sts	0x1D99, r1	; 0x801d99 <timers+0x1>
    593a:	10 92 98 1d 	sts	0x1D98, r1	; 0x801d98 <timers>
    593e:	08 95       	ret

00005940 <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    5940:	cf 93       	push	r28
    5942:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    5944:	a0 91 98 1d 	lds	r26, 0x1D98	; 0x801d98 <timers>
    5948:	b0 91 99 1d 	lds	r27, 0x1D99	; 0x801d99 <timers+0x1>
    594c:	10 97       	sbiw	r26, 0x00	; 0
    594e:	91 f1       	breq	.+100    	; 0x59b4 <SYS_TimerStop+0x74>
  {
    if (t == timer)
    5950:	a8 17       	cp	r26, r24
    5952:	b9 07       	cpc	r27, r25
    5954:	51 f5       	brne	.+84     	; 0x59aa <SYS_TimerStop+0x6a>
    5956:	0a c0       	rjmp	.+20     	; 0x596c <SYS_TimerStop+0x2c>
    5958:	8e 17       	cp	r24, r30
    595a:	9f 07       	cpc	r25, r31
    595c:	29 f5       	brne	.+74     	; 0x59a8 <SYS_TimerStop+0x68>
    {
      if (prev)
    595e:	10 97       	sbiw	r26, 0x00	; 0
    5960:	31 f0       	breq	.+12     	; 0x596e <SYS_TimerStop+0x2e>
        prev->next = t->next;
    5962:	20 81       	ld	r18, Z
    5964:	31 81       	ldd	r19, Z+1	; 0x01
    5966:	2d 93       	st	X+, r18
    5968:	3c 93       	st	X, r19
    596a:	07 c0       	rjmp	.+14     	; 0x597a <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    596c:	fc 01       	movw	r30, r24
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    596e:	20 81       	ld	r18, Z
    5970:	31 81       	ldd	r19, Z+1	; 0x01
    5972:	30 93 99 1d 	sts	0x1D99, r19	; 0x801d99 <timers+0x1>
    5976:	20 93 98 1d 	sts	0x1D98, r18	; 0x801d98 <timers>

      if (t->next)
    597a:	01 90       	ld	r0, Z+
    597c:	f0 81       	ld	r31, Z
    597e:	e0 2d       	mov	r30, r0
    5980:	30 97       	sbiw	r30, 0x00	; 0
    5982:	c1 f0       	breq	.+48     	; 0x59b4 <SYS_TimerStop+0x74>
        t->next->timeout += timer->timeout;
    5984:	42 81       	ldd	r20, Z+2	; 0x02
    5986:	53 81       	ldd	r21, Z+3	; 0x03
    5988:	64 81       	ldd	r22, Z+4	; 0x04
    598a:	75 81       	ldd	r23, Z+5	; 0x05
    598c:	ec 01       	movw	r28, r24
    598e:	8a 81       	ldd	r24, Y+2	; 0x02
    5990:	9b 81       	ldd	r25, Y+3	; 0x03
    5992:	ac 81       	ldd	r26, Y+4	; 0x04
    5994:	bd 81       	ldd	r27, Y+5	; 0x05
    5996:	84 0f       	add	r24, r20
    5998:	95 1f       	adc	r25, r21
    599a:	a6 1f       	adc	r26, r22
    599c:	b7 1f       	adc	r27, r23
    599e:	82 83       	std	Z+2, r24	; 0x02
    59a0:	93 83       	std	Z+3, r25	; 0x03
    59a2:	a4 83       	std	Z+4, r26	; 0x04
    59a4:	b5 83       	std	Z+5, r27	; 0x05
    59a6:	06 c0       	rjmp	.+12     	; 0x59b4 <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    59a8:	df 01       	movw	r26, r30
    59aa:	ed 91       	ld	r30, X+
    59ac:	fc 91       	ld	r31, X
    59ae:	11 97       	sbiw	r26, 0x01	; 1
    59b0:	30 97       	sbiw	r30, 0x00	; 0
    59b2:	91 f6       	brne	.-92     	; 0x5958 <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    59b4:	df 91       	pop	r29
    59b6:	cf 91       	pop	r28
    59b8:	08 95       	ret

000059ba <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    59ba:	e0 91 98 1d 	lds	r30, 0x1D98	; 0x801d98 <timers>
    59be:	f0 91 99 1d 	lds	r31, 0x1D99	; 0x801d99 <timers+0x1>
    59c2:	30 97       	sbiw	r30, 0x00	; 0
    59c4:	71 f0       	breq	.+28     	; 0x59e2 <SYS_TimerStarted+0x28>
    if (t == timer)
    59c6:	e8 17       	cp	r30, r24
    59c8:	f9 07       	cpc	r31, r25
    59ca:	21 f4       	brne	.+8      	; 0x59d4 <SYS_TimerStarted+0x1a>
    59cc:	0c c0       	rjmp	.+24     	; 0x59e6 <SYS_TimerStarted+0x2c>
    59ce:	8e 17       	cp	r24, r30
    59d0:	9f 07       	cpc	r25, r31
    59d2:	59 f0       	breq	.+22     	; 0x59ea <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    59d4:	01 90       	ld	r0, Z+
    59d6:	f0 81       	ld	r31, Z
    59d8:	e0 2d       	mov	r30, r0
    59da:	30 97       	sbiw	r30, 0x00	; 0
    59dc:	c1 f7       	brne	.-16     	; 0x59ce <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    59de:	80 e0       	ldi	r24, 0x00	; 0
    59e0:	08 95       	ret
    59e2:	80 e0       	ldi	r24, 0x00	; 0
    59e4:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    59e6:	81 e0       	ldi	r24, 0x01	; 1
    59e8:	08 95       	ret
    59ea:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    59ec:	08 95       	ret

000059ee <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    59ee:	cf 93       	push	r28
    59f0:	df 93       	push	r29
    59f2:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    59f4:	e2 df       	rcall	.-60     	; 0x59ba <SYS_TimerStarted>
    59f6:	81 11       	cpse	r24, r1
    59f8:	02 c0       	rjmp	.+4      	; 0x59fe <SYS_TimerStart+0x10>
    placeTimer(timer);
    59fa:	ce 01       	movw	r24, r28
    59fc:	38 df       	rcall	.-400    	; 0x586e <placeTimer>
}
    59fe:	df 91       	pop	r29
    5a00:	cf 91       	pop	r28
    5a02:	08 95       	ret

00005a04 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    5a04:	cf 92       	push	r12
    5a06:	df 92       	push	r13
    5a08:	ef 92       	push	r14
    5a0a:	ff 92       	push	r15
    5a0c:	cf 93       	push	r28
    5a0e:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    5a10:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <halTimerIrqCount>
    5a14:	88 23       	and	r24, r24
    5a16:	09 f4       	brne	.+2      	; 0x5a1a <SYS_TimerTaskHandler+0x16>
    5a18:	59 c0       	rjmp	.+178    	; 0x5acc <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    5a1a:	8f b7       	in	r24, 0x3f	; 63
    5a1c:	f8 94       	cli
    cnt = halTimerIrqCount;
    5a1e:	c0 90 a0 23 	lds	r12, 0x23A0	; 0x8023a0 <halTimerIrqCount>
    halTimerIrqCount = 0;
    5a22:	10 92 a0 23 	sts	0x23A0, r1	; 0x8023a0 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    5a26:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    5a28:	d1 2c       	mov	r13, r1
    5a2a:	e1 2c       	mov	r14, r1
    5a2c:	f1 2c       	mov	r15, r1
    5a2e:	cc 0c       	add	r12, r12
    5a30:	dd 1c       	adc	r13, r13
    5a32:	ee 1c       	adc	r14, r14
    5a34:	ff 1c       	adc	r15, r15
    5a36:	d7 01       	movw	r26, r14
    5a38:	c6 01       	movw	r24, r12
    5a3a:	88 0f       	add	r24, r24
    5a3c:	99 1f       	adc	r25, r25
    5a3e:	aa 1f       	adc	r26, r26
    5a40:	bb 1f       	adc	r27, r27
    5a42:	88 0f       	add	r24, r24
    5a44:	99 1f       	adc	r25, r25
    5a46:	aa 1f       	adc	r26, r26
    5a48:	bb 1f       	adc	r27, r27
    5a4a:	c8 0e       	add	r12, r24
    5a4c:	d9 1e       	adc	r13, r25
    5a4e:	ea 1e       	adc	r14, r26
    5a50:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    5a52:	c0 91 98 1d 	lds	r28, 0x1D98	; 0x801d98 <timers>
    5a56:	d0 91 99 1d 	lds	r29, 0x1D99	; 0x801d99 <timers+0x1>
    5a5a:	20 97       	sbiw	r28, 0x00	; 0
    5a5c:	b9 f1       	breq	.+110    	; 0x5acc <SYS_TimerTaskHandler+0xc8>
    5a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a60:	9b 81       	ldd	r25, Y+3	; 0x03
    5a62:	ac 81       	ldd	r26, Y+4	; 0x04
    5a64:	bd 81       	ldd	r27, Y+5	; 0x05
    5a66:	c8 16       	cp	r12, r24
    5a68:	d9 06       	cpc	r13, r25
    5a6a:	ea 06       	cpc	r14, r26
    5a6c:	fb 06       	cpc	r15, r27
    5a6e:	10 f1       	brcs	.+68     	; 0x5ab4 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    5a70:	c8 1a       	sub	r12, r24
    5a72:	d9 0a       	sbc	r13, r25
    5a74:	ea 0a       	sbc	r14, r26
    5a76:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    5a78:	88 81       	ld	r24, Y
    5a7a:	99 81       	ldd	r25, Y+1	; 0x01
    5a7c:	90 93 99 1d 	sts	0x1D99, r25	; 0x801d99 <timers+0x1>
    5a80:	80 93 98 1d 	sts	0x1D98, r24	; 0x801d98 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    5a84:	8a 85       	ldd	r24, Y+10	; 0x0a
    5a86:	81 30       	cpi	r24, 0x01	; 1
    5a88:	11 f4       	brne	.+4      	; 0x5a8e <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    5a8a:	ce 01       	movw	r24, r28
    5a8c:	f0 de       	rcall	.-544    	; 0x586e <placeTimer>
    timer->handler(timer);
    5a8e:	eb 85       	ldd	r30, Y+11	; 0x0b
    5a90:	fc 85       	ldd	r31, Y+12	; 0x0c
    5a92:	ce 01       	movw	r24, r28
    5a94:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    5a96:	c0 91 98 1d 	lds	r28, 0x1D98	; 0x801d98 <timers>
    5a9a:	d0 91 99 1d 	lds	r29, 0x1D99	; 0x801d99 <timers+0x1>
    5a9e:	20 97       	sbiw	r28, 0x00	; 0
    5aa0:	a9 f0       	breq	.+42     	; 0x5acc <SYS_TimerTaskHandler+0xc8>
    5aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    5aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    5aa6:	ac 81       	ldd	r26, Y+4	; 0x04
    5aa8:	bd 81       	ldd	r27, Y+5	; 0x05
    5aaa:	c8 16       	cp	r12, r24
    5aac:	d9 06       	cpc	r13, r25
    5aae:	ea 06       	cpc	r14, r26
    5ab0:	fb 06       	cpc	r15, r27
    5ab2:	f0 f6       	brcc	.-68     	; 0x5a70 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    5ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    5ab8:	ac 81       	ldd	r26, Y+4	; 0x04
    5aba:	bd 81       	ldd	r27, Y+5	; 0x05
    5abc:	8c 19       	sub	r24, r12
    5abe:	9d 09       	sbc	r25, r13
    5ac0:	ae 09       	sbc	r26, r14
    5ac2:	bf 09       	sbc	r27, r15
    5ac4:	8a 83       	std	Y+2, r24	; 0x02
    5ac6:	9b 83       	std	Y+3, r25	; 0x03
    5ac8:	ac 83       	std	Y+4, r26	; 0x04
    5aca:	bd 83       	std	Y+5, r27	; 0x05
}
    5acc:	df 91       	pop	r29
    5ace:	cf 91       	pop	r28
    5ad0:	ff 90       	pop	r15
    5ad2:	ef 90       	pop	r14
    5ad4:	df 90       	pop	r13
    5ad6:	cf 90       	pop	r12
    5ad8:	08 95       	ret

00005ada <__udivmodsi4>:
    5ada:	a1 e2       	ldi	r26, 0x21	; 33
    5adc:	1a 2e       	mov	r1, r26
    5ade:	aa 1b       	sub	r26, r26
    5ae0:	bb 1b       	sub	r27, r27
    5ae2:	fd 01       	movw	r30, r26
    5ae4:	0d c0       	rjmp	.+26     	; 0x5b00 <__udivmodsi4_ep>

00005ae6 <__udivmodsi4_loop>:
    5ae6:	aa 1f       	adc	r26, r26
    5ae8:	bb 1f       	adc	r27, r27
    5aea:	ee 1f       	adc	r30, r30
    5aec:	ff 1f       	adc	r31, r31
    5aee:	a2 17       	cp	r26, r18
    5af0:	b3 07       	cpc	r27, r19
    5af2:	e4 07       	cpc	r30, r20
    5af4:	f5 07       	cpc	r31, r21
    5af6:	20 f0       	brcs	.+8      	; 0x5b00 <__udivmodsi4_ep>
    5af8:	a2 1b       	sub	r26, r18
    5afa:	b3 0b       	sbc	r27, r19
    5afc:	e4 0b       	sbc	r30, r20
    5afe:	f5 0b       	sbc	r31, r21

00005b00 <__udivmodsi4_ep>:
    5b00:	66 1f       	adc	r22, r22
    5b02:	77 1f       	adc	r23, r23
    5b04:	88 1f       	adc	r24, r24
    5b06:	99 1f       	adc	r25, r25
    5b08:	1a 94       	dec	r1
    5b0a:	69 f7       	brne	.-38     	; 0x5ae6 <__udivmodsi4_loop>
    5b0c:	60 95       	com	r22
    5b0e:	70 95       	com	r23
    5b10:	80 95       	com	r24
    5b12:	90 95       	com	r25
    5b14:	9b 01       	movw	r18, r22
    5b16:	ac 01       	movw	r20, r24
    5b18:	bd 01       	movw	r22, r26
    5b1a:	cf 01       	movw	r24, r30
    5b1c:	08 95       	ret

00005b1e <__muluhisi3>:
    5b1e:	09 d0       	rcall	.+18     	; 0x5b32 <__umulhisi3>
    5b20:	a5 9f       	mul	r26, r21
    5b22:	90 0d       	add	r25, r0
    5b24:	b4 9f       	mul	r27, r20
    5b26:	90 0d       	add	r25, r0
    5b28:	a4 9f       	mul	r26, r20
    5b2a:	80 0d       	add	r24, r0
    5b2c:	91 1d       	adc	r25, r1
    5b2e:	11 24       	eor	r1, r1
    5b30:	08 95       	ret

00005b32 <__umulhisi3>:
    5b32:	a2 9f       	mul	r26, r18
    5b34:	b0 01       	movw	r22, r0
    5b36:	b3 9f       	mul	r27, r19
    5b38:	c0 01       	movw	r24, r0
    5b3a:	a3 9f       	mul	r26, r19
    5b3c:	70 0d       	add	r23, r0
    5b3e:	81 1d       	adc	r24, r1
    5b40:	11 24       	eor	r1, r1
    5b42:	91 1d       	adc	r25, r1
    5b44:	b2 9f       	mul	r27, r18
    5b46:	70 0d       	add	r23, r0
    5b48:	81 1d       	adc	r24, r1
    5b4a:	11 24       	eor	r1, r1
    5b4c:	91 1d       	adc	r25, r1
    5b4e:	08 95       	ret

00005b50 <do_rand>:
    5b50:	8f 92       	push	r8
    5b52:	9f 92       	push	r9
    5b54:	af 92       	push	r10
    5b56:	bf 92       	push	r11
    5b58:	cf 92       	push	r12
    5b5a:	df 92       	push	r13
    5b5c:	ef 92       	push	r14
    5b5e:	ff 92       	push	r15
    5b60:	cf 93       	push	r28
    5b62:	df 93       	push	r29
    5b64:	ec 01       	movw	r28, r24
    5b66:	68 81       	ld	r22, Y
    5b68:	79 81       	ldd	r23, Y+1	; 0x01
    5b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b6c:	9b 81       	ldd	r25, Y+3	; 0x03
    5b6e:	61 15       	cp	r22, r1
    5b70:	71 05       	cpc	r23, r1
    5b72:	81 05       	cpc	r24, r1
    5b74:	91 05       	cpc	r25, r1
    5b76:	21 f4       	brne	.+8      	; 0x5b80 <do_rand+0x30>
    5b78:	64 e2       	ldi	r22, 0x24	; 36
    5b7a:	79 ed       	ldi	r23, 0xD9	; 217
    5b7c:	8b e5       	ldi	r24, 0x5B	; 91
    5b7e:	97 e0       	ldi	r25, 0x07	; 7
    5b80:	2d e1       	ldi	r18, 0x1D	; 29
    5b82:	33 ef       	ldi	r19, 0xF3	; 243
    5b84:	41 e0       	ldi	r20, 0x01	; 1
    5b86:	50 e0       	ldi	r21, 0x00	; 0
    5b88:	d1 d6       	rcall	.+3490   	; 0x692c <__divmodsi4>
    5b8a:	49 01       	movw	r8, r18
    5b8c:	5a 01       	movw	r10, r20
    5b8e:	9b 01       	movw	r18, r22
    5b90:	ac 01       	movw	r20, r24
    5b92:	a7 ea       	ldi	r26, 0xA7	; 167
    5b94:	b1 e4       	ldi	r27, 0x41	; 65
    5b96:	c3 df       	rcall	.-122    	; 0x5b1e <__muluhisi3>
    5b98:	6b 01       	movw	r12, r22
    5b9a:	7c 01       	movw	r14, r24
    5b9c:	ac ee       	ldi	r26, 0xEC	; 236
    5b9e:	b4 ef       	ldi	r27, 0xF4	; 244
    5ba0:	a5 01       	movw	r20, r10
    5ba2:	94 01       	movw	r18, r8
    5ba4:	e1 d6       	rcall	.+3522   	; 0x6968 <__mulohisi3>
    5ba6:	dc 01       	movw	r26, r24
    5ba8:	cb 01       	movw	r24, r22
    5baa:	8c 0d       	add	r24, r12
    5bac:	9d 1d       	adc	r25, r13
    5bae:	ae 1d       	adc	r26, r14
    5bb0:	bf 1d       	adc	r27, r15
    5bb2:	b7 ff       	sbrs	r27, 7
    5bb4:	03 c0       	rjmp	.+6      	; 0x5bbc <do_rand+0x6c>
    5bb6:	01 97       	sbiw	r24, 0x01	; 1
    5bb8:	a1 09       	sbc	r26, r1
    5bba:	b0 48       	sbci	r27, 0x80	; 128
    5bbc:	88 83       	st	Y, r24
    5bbe:	99 83       	std	Y+1, r25	; 0x01
    5bc0:	aa 83       	std	Y+2, r26	; 0x02
    5bc2:	bb 83       	std	Y+3, r27	; 0x03
    5bc4:	9f 77       	andi	r25, 0x7F	; 127
    5bc6:	df 91       	pop	r29
    5bc8:	cf 91       	pop	r28
    5bca:	ff 90       	pop	r15
    5bcc:	ef 90       	pop	r14
    5bce:	df 90       	pop	r13
    5bd0:	cf 90       	pop	r12
    5bd2:	bf 90       	pop	r11
    5bd4:	af 90       	pop	r10
    5bd6:	9f 90       	pop	r9
    5bd8:	8f 90       	pop	r8
    5bda:	08 95       	ret

00005bdc <rand_r>:
    5bdc:	b9 cf       	rjmp	.-142    	; 0x5b50 <do_rand>

00005bde <rand>:
    5bde:	80 e0       	ldi	r24, 0x00	; 0
    5be0:	92 e0       	ldi	r25, 0x02	; 2
    5be2:	b6 cf       	rjmp	.-148    	; 0x5b50 <do_rand>

00005be4 <srand>:
    5be4:	a0 e0       	ldi	r26, 0x00	; 0
    5be6:	b0 e0       	ldi	r27, 0x00	; 0
    5be8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    5bec:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5bf0:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    5bf4:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    5bf8:	08 95       	ret

00005bfa <memcpy>:
    5bfa:	fb 01       	movw	r30, r22
    5bfc:	dc 01       	movw	r26, r24
    5bfe:	02 c0       	rjmp	.+4      	; 0x5c04 <memcpy+0xa>
    5c00:	01 90       	ld	r0, Z+
    5c02:	0d 92       	st	X+, r0
    5c04:	41 50       	subi	r20, 0x01	; 1
    5c06:	50 40       	sbci	r21, 0x00	; 0
    5c08:	d8 f7       	brcc	.-10     	; 0x5c00 <memcpy+0x6>
    5c0a:	08 95       	ret

00005c0c <strncmp>:
    5c0c:	fb 01       	movw	r30, r22
    5c0e:	dc 01       	movw	r26, r24
    5c10:	41 50       	subi	r20, 0x01	; 1
    5c12:	50 40       	sbci	r21, 0x00	; 0
    5c14:	30 f0       	brcs	.+12     	; 0x5c22 <strncmp+0x16>
    5c16:	8d 91       	ld	r24, X+
    5c18:	01 90       	ld	r0, Z+
    5c1a:	80 19       	sub	r24, r0
    5c1c:	19 f4       	brne	.+6      	; 0x5c24 <strncmp+0x18>
    5c1e:	00 20       	and	r0, r0
    5c20:	b9 f7       	brne	.-18     	; 0x5c10 <strncmp+0x4>
    5c22:	88 1b       	sub	r24, r24
    5c24:	99 0b       	sbc	r25, r25
    5c26:	08 95       	ret

00005c28 <strncpy>:
    5c28:	fb 01       	movw	r30, r22
    5c2a:	dc 01       	movw	r26, r24
    5c2c:	41 50       	subi	r20, 0x01	; 1
    5c2e:	50 40       	sbci	r21, 0x00	; 0
    5c30:	48 f0       	brcs	.+18     	; 0x5c44 <strncpy+0x1c>
    5c32:	01 90       	ld	r0, Z+
    5c34:	0d 92       	st	X+, r0
    5c36:	00 20       	and	r0, r0
    5c38:	c9 f7       	brne	.-14     	; 0x5c2c <strncpy+0x4>
    5c3a:	01 c0       	rjmp	.+2      	; 0x5c3e <strncpy+0x16>
    5c3c:	1d 92       	st	X+, r1
    5c3e:	41 50       	subi	r20, 0x01	; 1
    5c40:	50 40       	sbci	r21, 0x00	; 0
    5c42:	e0 f7       	brcc	.-8      	; 0x5c3c <strncpy+0x14>
    5c44:	08 95       	ret

00005c46 <strstr>:
    5c46:	fb 01       	movw	r30, r22
    5c48:	51 91       	ld	r21, Z+
    5c4a:	55 23       	and	r21, r21
    5c4c:	a9 f0       	breq	.+42     	; 0x5c78 <strstr+0x32>
    5c4e:	bf 01       	movw	r22, r30
    5c50:	dc 01       	movw	r26, r24
    5c52:	4d 91       	ld	r20, X+
    5c54:	45 17       	cp	r20, r21
    5c56:	41 11       	cpse	r20, r1
    5c58:	e1 f7       	brne	.-8      	; 0x5c52 <strstr+0xc>
    5c5a:	59 f4       	brne	.+22     	; 0x5c72 <strstr+0x2c>
    5c5c:	cd 01       	movw	r24, r26
    5c5e:	01 90       	ld	r0, Z+
    5c60:	00 20       	and	r0, r0
    5c62:	49 f0       	breq	.+18     	; 0x5c76 <strstr+0x30>
    5c64:	4d 91       	ld	r20, X+
    5c66:	40 15       	cp	r20, r0
    5c68:	41 11       	cpse	r20, r1
    5c6a:	c9 f3       	breq	.-14     	; 0x5c5e <strstr+0x18>
    5c6c:	fb 01       	movw	r30, r22
    5c6e:	41 11       	cpse	r20, r1
    5c70:	ef cf       	rjmp	.-34     	; 0x5c50 <strstr+0xa>
    5c72:	81 e0       	ldi	r24, 0x01	; 1
    5c74:	90 e0       	ldi	r25, 0x00	; 0
    5c76:	01 97       	sbiw	r24, 0x01	; 1
    5c78:	08 95       	ret

00005c7a <printf_P>:
    5c7a:	0f 93       	push	r16
    5c7c:	1f 93       	push	r17
    5c7e:	cf 93       	push	r28
    5c80:	df 93       	push	r29
    5c82:	cd b7       	in	r28, 0x3d	; 61
    5c84:	de b7       	in	r29, 0x3e	; 62
    5c86:	ae 01       	movw	r20, r28
    5c88:	48 5f       	subi	r20, 0xF8	; 248
    5c8a:	5f 4f       	sbci	r21, 0xFF	; 255
    5c8c:	da 01       	movw	r26, r20
    5c8e:	6d 91       	ld	r22, X+
    5c90:	7d 91       	ld	r23, X+
    5c92:	ad 01       	movw	r20, r26
    5c94:	0d ec       	ldi	r16, 0xCD	; 205
    5c96:	13 e2       	ldi	r17, 0x23	; 35
    5c98:	f8 01       	movw	r30, r16
    5c9a:	82 81       	ldd	r24, Z+2	; 0x02
    5c9c:	93 81       	ldd	r25, Z+3	; 0x03
    5c9e:	dc 01       	movw	r26, r24
    5ca0:	13 96       	adiw	r26, 0x03	; 3
    5ca2:	2c 91       	ld	r18, X
    5ca4:	13 97       	sbiw	r26, 0x03	; 3
    5ca6:	28 60       	ori	r18, 0x08	; 8
    5ca8:	13 96       	adiw	r26, 0x03	; 3
    5caa:	2c 93       	st	X, r18
    5cac:	5c d0       	rcall	.+184    	; 0x5d66 <vfprintf>
    5cae:	d8 01       	movw	r26, r16
    5cb0:	12 96       	adiw	r26, 0x02	; 2
    5cb2:	ed 91       	ld	r30, X+
    5cb4:	fc 91       	ld	r31, X
    5cb6:	13 97       	sbiw	r26, 0x03	; 3
    5cb8:	23 81       	ldd	r18, Z+3	; 0x03
    5cba:	27 7f       	andi	r18, 0xF7	; 247
    5cbc:	23 83       	std	Z+3, r18	; 0x03
    5cbe:	df 91       	pop	r29
    5cc0:	cf 91       	pop	r28
    5cc2:	1f 91       	pop	r17
    5cc4:	0f 91       	pop	r16
    5cc6:	08 95       	ret

00005cc8 <sprintf_P>:
    5cc8:	0f 93       	push	r16
    5cca:	1f 93       	push	r17
    5ccc:	cf 93       	push	r28
    5cce:	df 93       	push	r29
    5cd0:	cd b7       	in	r28, 0x3d	; 61
    5cd2:	de b7       	in	r29, 0x3e	; 62
    5cd4:	2e 97       	sbiw	r28, 0x0e	; 14
    5cd6:	0f b6       	in	r0, 0x3f	; 63
    5cd8:	f8 94       	cli
    5cda:	de bf       	out	0x3e, r29	; 62
    5cdc:	0f be       	out	0x3f, r0	; 63
    5cde:	cd bf       	out	0x3d, r28	; 61
    5ce0:	0e 89       	ldd	r16, Y+22	; 0x16
    5ce2:	1f 89       	ldd	r17, Y+23	; 0x17
    5ce4:	8e e0       	ldi	r24, 0x0E	; 14
    5ce6:	8c 83       	std	Y+4, r24	; 0x04
    5ce8:	1a 83       	std	Y+2, r17	; 0x02
    5cea:	09 83       	std	Y+1, r16	; 0x01
    5cec:	8f ef       	ldi	r24, 0xFF	; 255
    5cee:	9f e7       	ldi	r25, 0x7F	; 127
    5cf0:	9e 83       	std	Y+6, r25	; 0x06
    5cf2:	8d 83       	std	Y+5, r24	; 0x05
    5cf4:	ae 01       	movw	r20, r28
    5cf6:	46 5e       	subi	r20, 0xE6	; 230
    5cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    5cfa:	68 8d       	ldd	r22, Y+24	; 0x18
    5cfc:	79 8d       	ldd	r23, Y+25	; 0x19
    5cfe:	ce 01       	movw	r24, r28
    5d00:	01 96       	adiw	r24, 0x01	; 1
    5d02:	31 d0       	rcall	.+98     	; 0x5d66 <vfprintf>
    5d04:	ef 81       	ldd	r30, Y+7	; 0x07
    5d06:	f8 85       	ldd	r31, Y+8	; 0x08
    5d08:	e0 0f       	add	r30, r16
    5d0a:	f1 1f       	adc	r31, r17
    5d0c:	10 82       	st	Z, r1
    5d0e:	2e 96       	adiw	r28, 0x0e	; 14
    5d10:	0f b6       	in	r0, 0x3f	; 63
    5d12:	f8 94       	cli
    5d14:	de bf       	out	0x3e, r29	; 62
    5d16:	0f be       	out	0x3f, r0	; 63
    5d18:	cd bf       	out	0x3d, r28	; 61
    5d1a:	df 91       	pop	r29
    5d1c:	cf 91       	pop	r28
    5d1e:	1f 91       	pop	r17
    5d20:	0f 91       	pop	r16
    5d22:	08 95       	ret

00005d24 <sscanf>:
    5d24:	cf 93       	push	r28
    5d26:	df 93       	push	r29
    5d28:	cd b7       	in	r28, 0x3d	; 61
    5d2a:	de b7       	in	r29, 0x3e	; 62
    5d2c:	2e 97       	sbiw	r28, 0x0e	; 14
    5d2e:	0f b6       	in	r0, 0x3f	; 63
    5d30:	f8 94       	cli
    5d32:	de bf       	out	0x3e, r29	; 62
    5d34:	0f be       	out	0x3f, r0	; 63
    5d36:	cd bf       	out	0x3d, r28	; 61
    5d38:	85 e0       	ldi	r24, 0x05	; 5
    5d3a:	8c 83       	std	Y+4, r24	; 0x04
    5d3c:	8c 89       	ldd	r24, Y+20	; 0x14
    5d3e:	9d 89       	ldd	r25, Y+21	; 0x15
    5d40:	9a 83       	std	Y+2, r25	; 0x02
    5d42:	89 83       	std	Y+1, r24	; 0x01
    5d44:	ae 01       	movw	r20, r28
    5d46:	48 5e       	subi	r20, 0xE8	; 232
    5d48:	5f 4f       	sbci	r21, 0xFF	; 255
    5d4a:	6e 89       	ldd	r22, Y+22	; 0x16
    5d4c:	7f 89       	ldd	r23, Y+23	; 0x17
    5d4e:	ce 01       	movw	r24, r28
    5d50:	01 96       	adiw	r24, 0x01	; 1
    5d52:	b8 d3       	rcall	.+1904   	; 0x64c4 <vfscanf>
    5d54:	2e 96       	adiw	r28, 0x0e	; 14
    5d56:	0f b6       	in	r0, 0x3f	; 63
    5d58:	f8 94       	cli
    5d5a:	de bf       	out	0x3e, r29	; 62
    5d5c:	0f be       	out	0x3f, r0	; 63
    5d5e:	cd bf       	out	0x3d, r28	; 61
    5d60:	df 91       	pop	r29
    5d62:	cf 91       	pop	r28
    5d64:	08 95       	ret

00005d66 <vfprintf>:
    5d66:	2f 92       	push	r2
    5d68:	3f 92       	push	r3
    5d6a:	4f 92       	push	r4
    5d6c:	5f 92       	push	r5
    5d6e:	6f 92       	push	r6
    5d70:	7f 92       	push	r7
    5d72:	8f 92       	push	r8
    5d74:	9f 92       	push	r9
    5d76:	af 92       	push	r10
    5d78:	bf 92       	push	r11
    5d7a:	cf 92       	push	r12
    5d7c:	df 92       	push	r13
    5d7e:	ef 92       	push	r14
    5d80:	ff 92       	push	r15
    5d82:	0f 93       	push	r16
    5d84:	1f 93       	push	r17
    5d86:	cf 93       	push	r28
    5d88:	df 93       	push	r29
    5d8a:	cd b7       	in	r28, 0x3d	; 61
    5d8c:	de b7       	in	r29, 0x3e	; 62
    5d8e:	2b 97       	sbiw	r28, 0x0b	; 11
    5d90:	0f b6       	in	r0, 0x3f	; 63
    5d92:	f8 94       	cli
    5d94:	de bf       	out	0x3e, r29	; 62
    5d96:	0f be       	out	0x3f, r0	; 63
    5d98:	cd bf       	out	0x3d, r28	; 61
    5d9a:	6c 01       	movw	r12, r24
    5d9c:	7b 01       	movw	r14, r22
    5d9e:	8a 01       	movw	r16, r20
    5da0:	fc 01       	movw	r30, r24
    5da2:	17 82       	std	Z+7, r1	; 0x07
    5da4:	16 82       	std	Z+6, r1	; 0x06
    5da6:	83 81       	ldd	r24, Z+3	; 0x03
    5da8:	81 ff       	sbrs	r24, 1
    5daa:	bf c1       	rjmp	.+894    	; 0x612a <vfprintf+0x3c4>
    5dac:	ce 01       	movw	r24, r28
    5dae:	01 96       	adiw	r24, 0x01	; 1
    5db0:	3c 01       	movw	r6, r24
    5db2:	f6 01       	movw	r30, r12
    5db4:	93 81       	ldd	r25, Z+3	; 0x03
    5db6:	f7 01       	movw	r30, r14
    5db8:	93 fd       	sbrc	r25, 3
    5dba:	85 91       	lpm	r24, Z+
    5dbc:	93 ff       	sbrs	r25, 3
    5dbe:	81 91       	ld	r24, Z+
    5dc0:	7f 01       	movw	r14, r30
    5dc2:	88 23       	and	r24, r24
    5dc4:	09 f4       	brne	.+2      	; 0x5dc8 <vfprintf+0x62>
    5dc6:	ad c1       	rjmp	.+858    	; 0x6122 <vfprintf+0x3bc>
    5dc8:	85 32       	cpi	r24, 0x25	; 37
    5dca:	39 f4       	brne	.+14     	; 0x5dda <vfprintf+0x74>
    5dcc:	93 fd       	sbrc	r25, 3
    5dce:	85 91       	lpm	r24, Z+
    5dd0:	93 ff       	sbrs	r25, 3
    5dd2:	81 91       	ld	r24, Z+
    5dd4:	7f 01       	movw	r14, r30
    5dd6:	85 32       	cpi	r24, 0x25	; 37
    5dd8:	21 f4       	brne	.+8      	; 0x5de2 <vfprintf+0x7c>
    5dda:	b6 01       	movw	r22, r12
    5ddc:	90 e0       	ldi	r25, 0x00	; 0
    5dde:	f0 d4       	rcall	.+2528   	; 0x67c0 <fputc>
    5de0:	e8 cf       	rjmp	.-48     	; 0x5db2 <vfprintf+0x4c>
    5de2:	91 2c       	mov	r9, r1
    5de4:	21 2c       	mov	r2, r1
    5de6:	31 2c       	mov	r3, r1
    5de8:	ff e1       	ldi	r31, 0x1F	; 31
    5dea:	f3 15       	cp	r31, r3
    5dec:	d8 f0       	brcs	.+54     	; 0x5e24 <vfprintf+0xbe>
    5dee:	8b 32       	cpi	r24, 0x2B	; 43
    5df0:	79 f0       	breq	.+30     	; 0x5e10 <vfprintf+0xaa>
    5df2:	38 f4       	brcc	.+14     	; 0x5e02 <vfprintf+0x9c>
    5df4:	80 32       	cpi	r24, 0x20	; 32
    5df6:	79 f0       	breq	.+30     	; 0x5e16 <vfprintf+0xb0>
    5df8:	83 32       	cpi	r24, 0x23	; 35
    5dfa:	a1 f4       	brne	.+40     	; 0x5e24 <vfprintf+0xbe>
    5dfc:	23 2d       	mov	r18, r3
    5dfe:	20 61       	ori	r18, 0x10	; 16
    5e00:	1d c0       	rjmp	.+58     	; 0x5e3c <vfprintf+0xd6>
    5e02:	8d 32       	cpi	r24, 0x2D	; 45
    5e04:	61 f0       	breq	.+24     	; 0x5e1e <vfprintf+0xb8>
    5e06:	80 33       	cpi	r24, 0x30	; 48
    5e08:	69 f4       	brne	.+26     	; 0x5e24 <vfprintf+0xbe>
    5e0a:	23 2d       	mov	r18, r3
    5e0c:	21 60       	ori	r18, 0x01	; 1
    5e0e:	16 c0       	rjmp	.+44     	; 0x5e3c <vfprintf+0xd6>
    5e10:	83 2d       	mov	r24, r3
    5e12:	82 60       	ori	r24, 0x02	; 2
    5e14:	38 2e       	mov	r3, r24
    5e16:	e3 2d       	mov	r30, r3
    5e18:	e4 60       	ori	r30, 0x04	; 4
    5e1a:	3e 2e       	mov	r3, r30
    5e1c:	2a c0       	rjmp	.+84     	; 0x5e72 <vfprintf+0x10c>
    5e1e:	f3 2d       	mov	r31, r3
    5e20:	f8 60       	ori	r31, 0x08	; 8
    5e22:	1d c0       	rjmp	.+58     	; 0x5e5e <vfprintf+0xf8>
    5e24:	37 fc       	sbrc	r3, 7
    5e26:	2d c0       	rjmp	.+90     	; 0x5e82 <vfprintf+0x11c>
    5e28:	20 ed       	ldi	r18, 0xD0	; 208
    5e2a:	28 0f       	add	r18, r24
    5e2c:	2a 30       	cpi	r18, 0x0A	; 10
    5e2e:	40 f0       	brcs	.+16     	; 0x5e40 <vfprintf+0xda>
    5e30:	8e 32       	cpi	r24, 0x2E	; 46
    5e32:	b9 f4       	brne	.+46     	; 0x5e62 <vfprintf+0xfc>
    5e34:	36 fc       	sbrc	r3, 6
    5e36:	75 c1       	rjmp	.+746    	; 0x6122 <vfprintf+0x3bc>
    5e38:	23 2d       	mov	r18, r3
    5e3a:	20 64       	ori	r18, 0x40	; 64
    5e3c:	32 2e       	mov	r3, r18
    5e3e:	19 c0       	rjmp	.+50     	; 0x5e72 <vfprintf+0x10c>
    5e40:	36 fe       	sbrs	r3, 6
    5e42:	06 c0       	rjmp	.+12     	; 0x5e50 <vfprintf+0xea>
    5e44:	8a e0       	ldi	r24, 0x0A	; 10
    5e46:	98 9e       	mul	r9, r24
    5e48:	20 0d       	add	r18, r0
    5e4a:	11 24       	eor	r1, r1
    5e4c:	92 2e       	mov	r9, r18
    5e4e:	11 c0       	rjmp	.+34     	; 0x5e72 <vfprintf+0x10c>
    5e50:	ea e0       	ldi	r30, 0x0A	; 10
    5e52:	2e 9e       	mul	r2, r30
    5e54:	20 0d       	add	r18, r0
    5e56:	11 24       	eor	r1, r1
    5e58:	22 2e       	mov	r2, r18
    5e5a:	f3 2d       	mov	r31, r3
    5e5c:	f0 62       	ori	r31, 0x20	; 32
    5e5e:	3f 2e       	mov	r3, r31
    5e60:	08 c0       	rjmp	.+16     	; 0x5e72 <vfprintf+0x10c>
    5e62:	8c 36       	cpi	r24, 0x6C	; 108
    5e64:	21 f4       	brne	.+8      	; 0x5e6e <vfprintf+0x108>
    5e66:	83 2d       	mov	r24, r3
    5e68:	80 68       	ori	r24, 0x80	; 128
    5e6a:	38 2e       	mov	r3, r24
    5e6c:	02 c0       	rjmp	.+4      	; 0x5e72 <vfprintf+0x10c>
    5e6e:	88 36       	cpi	r24, 0x68	; 104
    5e70:	41 f4       	brne	.+16     	; 0x5e82 <vfprintf+0x11c>
    5e72:	f7 01       	movw	r30, r14
    5e74:	93 fd       	sbrc	r25, 3
    5e76:	85 91       	lpm	r24, Z+
    5e78:	93 ff       	sbrs	r25, 3
    5e7a:	81 91       	ld	r24, Z+
    5e7c:	7f 01       	movw	r14, r30
    5e7e:	81 11       	cpse	r24, r1
    5e80:	b3 cf       	rjmp	.-154    	; 0x5de8 <vfprintf+0x82>
    5e82:	98 2f       	mov	r25, r24
    5e84:	9f 7d       	andi	r25, 0xDF	; 223
    5e86:	95 54       	subi	r25, 0x45	; 69
    5e88:	93 30       	cpi	r25, 0x03	; 3
    5e8a:	28 f4       	brcc	.+10     	; 0x5e96 <vfprintf+0x130>
    5e8c:	0c 5f       	subi	r16, 0xFC	; 252
    5e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    5e90:	9f e3       	ldi	r25, 0x3F	; 63
    5e92:	99 83       	std	Y+1, r25	; 0x01
    5e94:	0d c0       	rjmp	.+26     	; 0x5eb0 <vfprintf+0x14a>
    5e96:	83 36       	cpi	r24, 0x63	; 99
    5e98:	31 f0       	breq	.+12     	; 0x5ea6 <vfprintf+0x140>
    5e9a:	83 37       	cpi	r24, 0x73	; 115
    5e9c:	71 f0       	breq	.+28     	; 0x5eba <vfprintf+0x154>
    5e9e:	83 35       	cpi	r24, 0x53	; 83
    5ea0:	09 f0       	breq	.+2      	; 0x5ea4 <vfprintf+0x13e>
    5ea2:	55 c0       	rjmp	.+170    	; 0x5f4e <vfprintf+0x1e8>
    5ea4:	20 c0       	rjmp	.+64     	; 0x5ee6 <vfprintf+0x180>
    5ea6:	f8 01       	movw	r30, r16
    5ea8:	80 81       	ld	r24, Z
    5eaa:	89 83       	std	Y+1, r24	; 0x01
    5eac:	0e 5f       	subi	r16, 0xFE	; 254
    5eae:	1f 4f       	sbci	r17, 0xFF	; 255
    5eb0:	88 24       	eor	r8, r8
    5eb2:	83 94       	inc	r8
    5eb4:	91 2c       	mov	r9, r1
    5eb6:	53 01       	movw	r10, r6
    5eb8:	12 c0       	rjmp	.+36     	; 0x5ede <vfprintf+0x178>
    5eba:	28 01       	movw	r4, r16
    5ebc:	f2 e0       	ldi	r31, 0x02	; 2
    5ebe:	4f 0e       	add	r4, r31
    5ec0:	51 1c       	adc	r5, r1
    5ec2:	f8 01       	movw	r30, r16
    5ec4:	a0 80       	ld	r10, Z
    5ec6:	b1 80       	ldd	r11, Z+1	; 0x01
    5ec8:	36 fe       	sbrs	r3, 6
    5eca:	03 c0       	rjmp	.+6      	; 0x5ed2 <vfprintf+0x16c>
    5ecc:	69 2d       	mov	r22, r9
    5ece:	70 e0       	ldi	r23, 0x00	; 0
    5ed0:	02 c0       	rjmp	.+4      	; 0x5ed6 <vfprintf+0x170>
    5ed2:	6f ef       	ldi	r22, 0xFF	; 255
    5ed4:	7f ef       	ldi	r23, 0xFF	; 255
    5ed6:	c5 01       	movw	r24, r10
    5ed8:	2a d4       	rcall	.+2132   	; 0x672e <strnlen>
    5eda:	4c 01       	movw	r8, r24
    5edc:	82 01       	movw	r16, r4
    5ede:	f3 2d       	mov	r31, r3
    5ee0:	ff 77       	andi	r31, 0x7F	; 127
    5ee2:	3f 2e       	mov	r3, r31
    5ee4:	15 c0       	rjmp	.+42     	; 0x5f10 <vfprintf+0x1aa>
    5ee6:	28 01       	movw	r4, r16
    5ee8:	22 e0       	ldi	r18, 0x02	; 2
    5eea:	42 0e       	add	r4, r18
    5eec:	51 1c       	adc	r5, r1
    5eee:	f8 01       	movw	r30, r16
    5ef0:	a0 80       	ld	r10, Z
    5ef2:	b1 80       	ldd	r11, Z+1	; 0x01
    5ef4:	36 fe       	sbrs	r3, 6
    5ef6:	03 c0       	rjmp	.+6      	; 0x5efe <vfprintf+0x198>
    5ef8:	69 2d       	mov	r22, r9
    5efa:	70 e0       	ldi	r23, 0x00	; 0
    5efc:	02 c0       	rjmp	.+4      	; 0x5f02 <vfprintf+0x19c>
    5efe:	6f ef       	ldi	r22, 0xFF	; 255
    5f00:	7f ef       	ldi	r23, 0xFF	; 255
    5f02:	c5 01       	movw	r24, r10
    5f04:	09 d4       	rcall	.+2066   	; 0x6718 <strnlen_P>
    5f06:	4c 01       	movw	r8, r24
    5f08:	f3 2d       	mov	r31, r3
    5f0a:	f0 68       	ori	r31, 0x80	; 128
    5f0c:	3f 2e       	mov	r3, r31
    5f0e:	82 01       	movw	r16, r4
    5f10:	33 fc       	sbrc	r3, 3
    5f12:	19 c0       	rjmp	.+50     	; 0x5f46 <vfprintf+0x1e0>
    5f14:	82 2d       	mov	r24, r2
    5f16:	90 e0       	ldi	r25, 0x00	; 0
    5f18:	88 16       	cp	r8, r24
    5f1a:	99 06       	cpc	r9, r25
    5f1c:	a0 f4       	brcc	.+40     	; 0x5f46 <vfprintf+0x1e0>
    5f1e:	b6 01       	movw	r22, r12
    5f20:	80 e2       	ldi	r24, 0x20	; 32
    5f22:	90 e0       	ldi	r25, 0x00	; 0
    5f24:	4d d4       	rcall	.+2202   	; 0x67c0 <fputc>
    5f26:	2a 94       	dec	r2
    5f28:	f5 cf       	rjmp	.-22     	; 0x5f14 <vfprintf+0x1ae>
    5f2a:	f5 01       	movw	r30, r10
    5f2c:	37 fc       	sbrc	r3, 7
    5f2e:	85 91       	lpm	r24, Z+
    5f30:	37 fe       	sbrs	r3, 7
    5f32:	81 91       	ld	r24, Z+
    5f34:	5f 01       	movw	r10, r30
    5f36:	b6 01       	movw	r22, r12
    5f38:	90 e0       	ldi	r25, 0x00	; 0
    5f3a:	42 d4       	rcall	.+2180   	; 0x67c0 <fputc>
    5f3c:	21 10       	cpse	r2, r1
    5f3e:	2a 94       	dec	r2
    5f40:	21 e0       	ldi	r18, 0x01	; 1
    5f42:	82 1a       	sub	r8, r18
    5f44:	91 08       	sbc	r9, r1
    5f46:	81 14       	cp	r8, r1
    5f48:	91 04       	cpc	r9, r1
    5f4a:	79 f7       	brne	.-34     	; 0x5f2a <vfprintf+0x1c4>
    5f4c:	e1 c0       	rjmp	.+450    	; 0x6110 <vfprintf+0x3aa>
    5f4e:	84 36       	cpi	r24, 0x64	; 100
    5f50:	11 f0       	breq	.+4      	; 0x5f56 <vfprintf+0x1f0>
    5f52:	89 36       	cpi	r24, 0x69	; 105
    5f54:	39 f5       	brne	.+78     	; 0x5fa4 <vfprintf+0x23e>
    5f56:	f8 01       	movw	r30, r16
    5f58:	37 fe       	sbrs	r3, 7
    5f5a:	07 c0       	rjmp	.+14     	; 0x5f6a <vfprintf+0x204>
    5f5c:	60 81       	ld	r22, Z
    5f5e:	71 81       	ldd	r23, Z+1	; 0x01
    5f60:	82 81       	ldd	r24, Z+2	; 0x02
    5f62:	93 81       	ldd	r25, Z+3	; 0x03
    5f64:	0c 5f       	subi	r16, 0xFC	; 252
    5f66:	1f 4f       	sbci	r17, 0xFF	; 255
    5f68:	08 c0       	rjmp	.+16     	; 0x5f7a <vfprintf+0x214>
    5f6a:	60 81       	ld	r22, Z
    5f6c:	71 81       	ldd	r23, Z+1	; 0x01
    5f6e:	07 2e       	mov	r0, r23
    5f70:	00 0c       	add	r0, r0
    5f72:	88 0b       	sbc	r24, r24
    5f74:	99 0b       	sbc	r25, r25
    5f76:	0e 5f       	subi	r16, 0xFE	; 254
    5f78:	1f 4f       	sbci	r17, 0xFF	; 255
    5f7a:	f3 2d       	mov	r31, r3
    5f7c:	ff 76       	andi	r31, 0x6F	; 111
    5f7e:	3f 2e       	mov	r3, r31
    5f80:	97 ff       	sbrs	r25, 7
    5f82:	09 c0       	rjmp	.+18     	; 0x5f96 <vfprintf+0x230>
    5f84:	90 95       	com	r25
    5f86:	80 95       	com	r24
    5f88:	70 95       	com	r23
    5f8a:	61 95       	neg	r22
    5f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    5f8e:	8f 4f       	sbci	r24, 0xFF	; 255
    5f90:	9f 4f       	sbci	r25, 0xFF	; 255
    5f92:	f0 68       	ori	r31, 0x80	; 128
    5f94:	3f 2e       	mov	r3, r31
    5f96:	2a e0       	ldi	r18, 0x0A	; 10
    5f98:	30 e0       	ldi	r19, 0x00	; 0
    5f9a:	a3 01       	movw	r20, r6
    5f9c:	66 d4       	rcall	.+2252   	; 0x686a <__ultoa_invert>
    5f9e:	88 2e       	mov	r8, r24
    5fa0:	86 18       	sub	r8, r6
    5fa2:	44 c0       	rjmp	.+136    	; 0x602c <vfprintf+0x2c6>
    5fa4:	85 37       	cpi	r24, 0x75	; 117
    5fa6:	31 f4       	brne	.+12     	; 0x5fb4 <vfprintf+0x24e>
    5fa8:	23 2d       	mov	r18, r3
    5faa:	2f 7e       	andi	r18, 0xEF	; 239
    5fac:	b2 2e       	mov	r11, r18
    5fae:	2a e0       	ldi	r18, 0x0A	; 10
    5fb0:	30 e0       	ldi	r19, 0x00	; 0
    5fb2:	25 c0       	rjmp	.+74     	; 0x5ffe <vfprintf+0x298>
    5fb4:	93 2d       	mov	r25, r3
    5fb6:	99 7f       	andi	r25, 0xF9	; 249
    5fb8:	b9 2e       	mov	r11, r25
    5fba:	8f 36       	cpi	r24, 0x6F	; 111
    5fbc:	c1 f0       	breq	.+48     	; 0x5fee <vfprintf+0x288>
    5fbe:	18 f4       	brcc	.+6      	; 0x5fc6 <vfprintf+0x260>
    5fc0:	88 35       	cpi	r24, 0x58	; 88
    5fc2:	79 f0       	breq	.+30     	; 0x5fe2 <vfprintf+0x27c>
    5fc4:	ae c0       	rjmp	.+348    	; 0x6122 <vfprintf+0x3bc>
    5fc6:	80 37       	cpi	r24, 0x70	; 112
    5fc8:	19 f0       	breq	.+6      	; 0x5fd0 <vfprintf+0x26a>
    5fca:	88 37       	cpi	r24, 0x78	; 120
    5fcc:	21 f0       	breq	.+8      	; 0x5fd6 <vfprintf+0x270>
    5fce:	a9 c0       	rjmp	.+338    	; 0x6122 <vfprintf+0x3bc>
    5fd0:	e9 2f       	mov	r30, r25
    5fd2:	e0 61       	ori	r30, 0x10	; 16
    5fd4:	be 2e       	mov	r11, r30
    5fd6:	b4 fe       	sbrs	r11, 4
    5fd8:	0d c0       	rjmp	.+26     	; 0x5ff4 <vfprintf+0x28e>
    5fda:	fb 2d       	mov	r31, r11
    5fdc:	f4 60       	ori	r31, 0x04	; 4
    5fde:	bf 2e       	mov	r11, r31
    5fe0:	09 c0       	rjmp	.+18     	; 0x5ff4 <vfprintf+0x28e>
    5fe2:	34 fe       	sbrs	r3, 4
    5fe4:	0a c0       	rjmp	.+20     	; 0x5ffa <vfprintf+0x294>
    5fe6:	29 2f       	mov	r18, r25
    5fe8:	26 60       	ori	r18, 0x06	; 6
    5fea:	b2 2e       	mov	r11, r18
    5fec:	06 c0       	rjmp	.+12     	; 0x5ffa <vfprintf+0x294>
    5fee:	28 e0       	ldi	r18, 0x08	; 8
    5ff0:	30 e0       	ldi	r19, 0x00	; 0
    5ff2:	05 c0       	rjmp	.+10     	; 0x5ffe <vfprintf+0x298>
    5ff4:	20 e1       	ldi	r18, 0x10	; 16
    5ff6:	30 e0       	ldi	r19, 0x00	; 0
    5ff8:	02 c0       	rjmp	.+4      	; 0x5ffe <vfprintf+0x298>
    5ffa:	20 e1       	ldi	r18, 0x10	; 16
    5ffc:	32 e0       	ldi	r19, 0x02	; 2
    5ffe:	f8 01       	movw	r30, r16
    6000:	b7 fe       	sbrs	r11, 7
    6002:	07 c0       	rjmp	.+14     	; 0x6012 <vfprintf+0x2ac>
    6004:	60 81       	ld	r22, Z
    6006:	71 81       	ldd	r23, Z+1	; 0x01
    6008:	82 81       	ldd	r24, Z+2	; 0x02
    600a:	93 81       	ldd	r25, Z+3	; 0x03
    600c:	0c 5f       	subi	r16, 0xFC	; 252
    600e:	1f 4f       	sbci	r17, 0xFF	; 255
    6010:	06 c0       	rjmp	.+12     	; 0x601e <vfprintf+0x2b8>
    6012:	60 81       	ld	r22, Z
    6014:	71 81       	ldd	r23, Z+1	; 0x01
    6016:	80 e0       	ldi	r24, 0x00	; 0
    6018:	90 e0       	ldi	r25, 0x00	; 0
    601a:	0e 5f       	subi	r16, 0xFE	; 254
    601c:	1f 4f       	sbci	r17, 0xFF	; 255
    601e:	a3 01       	movw	r20, r6
    6020:	24 d4       	rcall	.+2120   	; 0x686a <__ultoa_invert>
    6022:	88 2e       	mov	r8, r24
    6024:	86 18       	sub	r8, r6
    6026:	fb 2d       	mov	r31, r11
    6028:	ff 77       	andi	r31, 0x7F	; 127
    602a:	3f 2e       	mov	r3, r31
    602c:	36 fe       	sbrs	r3, 6
    602e:	0d c0       	rjmp	.+26     	; 0x604a <vfprintf+0x2e4>
    6030:	23 2d       	mov	r18, r3
    6032:	2e 7f       	andi	r18, 0xFE	; 254
    6034:	a2 2e       	mov	r10, r18
    6036:	89 14       	cp	r8, r9
    6038:	58 f4       	brcc	.+22     	; 0x6050 <vfprintf+0x2ea>
    603a:	34 fe       	sbrs	r3, 4
    603c:	0b c0       	rjmp	.+22     	; 0x6054 <vfprintf+0x2ee>
    603e:	32 fc       	sbrc	r3, 2
    6040:	09 c0       	rjmp	.+18     	; 0x6054 <vfprintf+0x2ee>
    6042:	83 2d       	mov	r24, r3
    6044:	8e 7e       	andi	r24, 0xEE	; 238
    6046:	a8 2e       	mov	r10, r24
    6048:	05 c0       	rjmp	.+10     	; 0x6054 <vfprintf+0x2ee>
    604a:	b8 2c       	mov	r11, r8
    604c:	a3 2c       	mov	r10, r3
    604e:	03 c0       	rjmp	.+6      	; 0x6056 <vfprintf+0x2f0>
    6050:	b8 2c       	mov	r11, r8
    6052:	01 c0       	rjmp	.+2      	; 0x6056 <vfprintf+0x2f0>
    6054:	b9 2c       	mov	r11, r9
    6056:	a4 fe       	sbrs	r10, 4
    6058:	0f c0       	rjmp	.+30     	; 0x6078 <vfprintf+0x312>
    605a:	fe 01       	movw	r30, r28
    605c:	e8 0d       	add	r30, r8
    605e:	f1 1d       	adc	r31, r1
    6060:	80 81       	ld	r24, Z
    6062:	80 33       	cpi	r24, 0x30	; 48
    6064:	21 f4       	brne	.+8      	; 0x606e <vfprintf+0x308>
    6066:	9a 2d       	mov	r25, r10
    6068:	99 7e       	andi	r25, 0xE9	; 233
    606a:	a9 2e       	mov	r10, r25
    606c:	09 c0       	rjmp	.+18     	; 0x6080 <vfprintf+0x31a>
    606e:	a2 fe       	sbrs	r10, 2
    6070:	06 c0       	rjmp	.+12     	; 0x607e <vfprintf+0x318>
    6072:	b3 94       	inc	r11
    6074:	b3 94       	inc	r11
    6076:	04 c0       	rjmp	.+8      	; 0x6080 <vfprintf+0x31a>
    6078:	8a 2d       	mov	r24, r10
    607a:	86 78       	andi	r24, 0x86	; 134
    607c:	09 f0       	breq	.+2      	; 0x6080 <vfprintf+0x31a>
    607e:	b3 94       	inc	r11
    6080:	a3 fc       	sbrc	r10, 3
    6082:	10 c0       	rjmp	.+32     	; 0x60a4 <vfprintf+0x33e>
    6084:	a0 fe       	sbrs	r10, 0
    6086:	06 c0       	rjmp	.+12     	; 0x6094 <vfprintf+0x32e>
    6088:	b2 14       	cp	r11, r2
    608a:	80 f4       	brcc	.+32     	; 0x60ac <vfprintf+0x346>
    608c:	28 0c       	add	r2, r8
    608e:	92 2c       	mov	r9, r2
    6090:	9b 18       	sub	r9, r11
    6092:	0d c0       	rjmp	.+26     	; 0x60ae <vfprintf+0x348>
    6094:	b2 14       	cp	r11, r2
    6096:	58 f4       	brcc	.+22     	; 0x60ae <vfprintf+0x348>
    6098:	b6 01       	movw	r22, r12
    609a:	80 e2       	ldi	r24, 0x20	; 32
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	90 d3       	rcall	.+1824   	; 0x67c0 <fputc>
    60a0:	b3 94       	inc	r11
    60a2:	f8 cf       	rjmp	.-16     	; 0x6094 <vfprintf+0x32e>
    60a4:	b2 14       	cp	r11, r2
    60a6:	18 f4       	brcc	.+6      	; 0x60ae <vfprintf+0x348>
    60a8:	2b 18       	sub	r2, r11
    60aa:	02 c0       	rjmp	.+4      	; 0x60b0 <vfprintf+0x34a>
    60ac:	98 2c       	mov	r9, r8
    60ae:	21 2c       	mov	r2, r1
    60b0:	a4 fe       	sbrs	r10, 4
    60b2:	0f c0       	rjmp	.+30     	; 0x60d2 <vfprintf+0x36c>
    60b4:	b6 01       	movw	r22, r12
    60b6:	80 e3       	ldi	r24, 0x30	; 48
    60b8:	90 e0       	ldi	r25, 0x00	; 0
    60ba:	82 d3       	rcall	.+1796   	; 0x67c0 <fputc>
    60bc:	a2 fe       	sbrs	r10, 2
    60be:	16 c0       	rjmp	.+44     	; 0x60ec <vfprintf+0x386>
    60c0:	a1 fc       	sbrc	r10, 1
    60c2:	03 c0       	rjmp	.+6      	; 0x60ca <vfprintf+0x364>
    60c4:	88 e7       	ldi	r24, 0x78	; 120
    60c6:	90 e0       	ldi	r25, 0x00	; 0
    60c8:	02 c0       	rjmp	.+4      	; 0x60ce <vfprintf+0x368>
    60ca:	88 e5       	ldi	r24, 0x58	; 88
    60cc:	90 e0       	ldi	r25, 0x00	; 0
    60ce:	b6 01       	movw	r22, r12
    60d0:	0c c0       	rjmp	.+24     	; 0x60ea <vfprintf+0x384>
    60d2:	8a 2d       	mov	r24, r10
    60d4:	86 78       	andi	r24, 0x86	; 134
    60d6:	51 f0       	breq	.+20     	; 0x60ec <vfprintf+0x386>
    60d8:	a1 fe       	sbrs	r10, 1
    60da:	02 c0       	rjmp	.+4      	; 0x60e0 <vfprintf+0x37a>
    60dc:	8b e2       	ldi	r24, 0x2B	; 43
    60de:	01 c0       	rjmp	.+2      	; 0x60e2 <vfprintf+0x37c>
    60e0:	80 e2       	ldi	r24, 0x20	; 32
    60e2:	a7 fc       	sbrc	r10, 7
    60e4:	8d e2       	ldi	r24, 0x2D	; 45
    60e6:	b6 01       	movw	r22, r12
    60e8:	90 e0       	ldi	r25, 0x00	; 0
    60ea:	6a d3       	rcall	.+1748   	; 0x67c0 <fputc>
    60ec:	89 14       	cp	r8, r9
    60ee:	30 f4       	brcc	.+12     	; 0x60fc <vfprintf+0x396>
    60f0:	b6 01       	movw	r22, r12
    60f2:	80 e3       	ldi	r24, 0x30	; 48
    60f4:	90 e0       	ldi	r25, 0x00	; 0
    60f6:	64 d3       	rcall	.+1736   	; 0x67c0 <fputc>
    60f8:	9a 94       	dec	r9
    60fa:	f8 cf       	rjmp	.-16     	; 0x60ec <vfprintf+0x386>
    60fc:	8a 94       	dec	r8
    60fe:	f3 01       	movw	r30, r6
    6100:	e8 0d       	add	r30, r8
    6102:	f1 1d       	adc	r31, r1
    6104:	80 81       	ld	r24, Z
    6106:	b6 01       	movw	r22, r12
    6108:	90 e0       	ldi	r25, 0x00	; 0
    610a:	5a d3       	rcall	.+1716   	; 0x67c0 <fputc>
    610c:	81 10       	cpse	r8, r1
    610e:	f6 cf       	rjmp	.-20     	; 0x60fc <vfprintf+0x396>
    6110:	22 20       	and	r2, r2
    6112:	09 f4       	brne	.+2      	; 0x6116 <vfprintf+0x3b0>
    6114:	4e ce       	rjmp	.-868    	; 0x5db2 <vfprintf+0x4c>
    6116:	b6 01       	movw	r22, r12
    6118:	80 e2       	ldi	r24, 0x20	; 32
    611a:	90 e0       	ldi	r25, 0x00	; 0
    611c:	51 d3       	rcall	.+1698   	; 0x67c0 <fputc>
    611e:	2a 94       	dec	r2
    6120:	f7 cf       	rjmp	.-18     	; 0x6110 <vfprintf+0x3aa>
    6122:	f6 01       	movw	r30, r12
    6124:	86 81       	ldd	r24, Z+6	; 0x06
    6126:	97 81       	ldd	r25, Z+7	; 0x07
    6128:	02 c0       	rjmp	.+4      	; 0x612e <vfprintf+0x3c8>
    612a:	8f ef       	ldi	r24, 0xFF	; 255
    612c:	9f ef       	ldi	r25, 0xFF	; 255
    612e:	2b 96       	adiw	r28, 0x0b	; 11
    6130:	0f b6       	in	r0, 0x3f	; 63
    6132:	f8 94       	cli
    6134:	de bf       	out	0x3e, r29	; 62
    6136:	0f be       	out	0x3f, r0	; 63
    6138:	cd bf       	out	0x3d, r28	; 61
    613a:	df 91       	pop	r29
    613c:	cf 91       	pop	r28
    613e:	1f 91       	pop	r17
    6140:	0f 91       	pop	r16
    6142:	ff 90       	pop	r15
    6144:	ef 90       	pop	r14
    6146:	df 90       	pop	r13
    6148:	cf 90       	pop	r12
    614a:	bf 90       	pop	r11
    614c:	af 90       	pop	r10
    614e:	9f 90       	pop	r9
    6150:	8f 90       	pop	r8
    6152:	7f 90       	pop	r7
    6154:	6f 90       	pop	r6
    6156:	5f 90       	pop	r5
    6158:	4f 90       	pop	r4
    615a:	3f 90       	pop	r3
    615c:	2f 90       	pop	r2
    615e:	08 95       	ret

00006160 <putval>:
    6160:	20 fd       	sbrc	r18, 0
    6162:	09 c0       	rjmp	.+18     	; 0x6176 <putval+0x16>
    6164:	fc 01       	movw	r30, r24
    6166:	23 fd       	sbrc	r18, 3
    6168:	05 c0       	rjmp	.+10     	; 0x6174 <putval+0x14>
    616a:	22 ff       	sbrs	r18, 2
    616c:	02 c0       	rjmp	.+4      	; 0x6172 <putval+0x12>
    616e:	73 83       	std	Z+3, r23	; 0x03
    6170:	62 83       	std	Z+2, r22	; 0x02
    6172:	51 83       	std	Z+1, r21	; 0x01
    6174:	40 83       	st	Z, r20
    6176:	08 95       	ret

00006178 <mulacc>:
    6178:	44 fd       	sbrc	r20, 4
    617a:	17 c0       	rjmp	.+46     	; 0x61aa <mulacc+0x32>
    617c:	46 fd       	sbrc	r20, 6
    617e:	17 c0       	rjmp	.+46     	; 0x61ae <mulacc+0x36>
    6180:	ab 01       	movw	r20, r22
    6182:	bc 01       	movw	r22, r24
    6184:	da 01       	movw	r26, r20
    6186:	fb 01       	movw	r30, r22
    6188:	aa 0f       	add	r26, r26
    618a:	bb 1f       	adc	r27, r27
    618c:	ee 1f       	adc	r30, r30
    618e:	ff 1f       	adc	r31, r31
    6190:	10 94       	com	r1
    6192:	d1 f7       	brne	.-12     	; 0x6188 <mulacc+0x10>
    6194:	4a 0f       	add	r20, r26
    6196:	5b 1f       	adc	r21, r27
    6198:	6e 1f       	adc	r22, r30
    619a:	7f 1f       	adc	r23, r31
    619c:	cb 01       	movw	r24, r22
    619e:	ba 01       	movw	r22, r20
    61a0:	66 0f       	add	r22, r22
    61a2:	77 1f       	adc	r23, r23
    61a4:	88 1f       	adc	r24, r24
    61a6:	99 1f       	adc	r25, r25
    61a8:	09 c0       	rjmp	.+18     	; 0x61bc <mulacc+0x44>
    61aa:	33 e0       	ldi	r19, 0x03	; 3
    61ac:	01 c0       	rjmp	.+2      	; 0x61b0 <mulacc+0x38>
    61ae:	34 e0       	ldi	r19, 0x04	; 4
    61b0:	66 0f       	add	r22, r22
    61b2:	77 1f       	adc	r23, r23
    61b4:	88 1f       	adc	r24, r24
    61b6:	99 1f       	adc	r25, r25
    61b8:	31 50       	subi	r19, 0x01	; 1
    61ba:	d1 f7       	brne	.-12     	; 0x61b0 <mulacc+0x38>
    61bc:	62 0f       	add	r22, r18
    61be:	71 1d       	adc	r23, r1
    61c0:	81 1d       	adc	r24, r1
    61c2:	91 1d       	adc	r25, r1
    61c4:	08 95       	ret

000061c6 <skip_spaces>:
    61c6:	0f 93       	push	r16
    61c8:	1f 93       	push	r17
    61ca:	cf 93       	push	r28
    61cc:	df 93       	push	r29
    61ce:	8c 01       	movw	r16, r24
    61d0:	c8 01       	movw	r24, r16
    61d2:	b8 d2       	rcall	.+1392   	; 0x6744 <fgetc>
    61d4:	ec 01       	movw	r28, r24
    61d6:	97 fd       	sbrc	r25, 7
    61d8:	06 c0       	rjmp	.+12     	; 0x61e6 <skip_spaces+0x20>
    61da:	8b d2       	rcall	.+1302   	; 0x66f2 <isspace>
    61dc:	89 2b       	or	r24, r25
    61de:	c1 f7       	brne	.-16     	; 0x61d0 <skip_spaces+0xa>
    61e0:	b8 01       	movw	r22, r16
    61e2:	ce 01       	movw	r24, r28
    61e4:	29 d3       	rcall	.+1618   	; 0x6838 <ungetc>
    61e6:	ce 01       	movw	r24, r28
    61e8:	df 91       	pop	r29
    61ea:	cf 91       	pop	r28
    61ec:	1f 91       	pop	r17
    61ee:	0f 91       	pop	r16
    61f0:	08 95       	ret

000061f2 <conv_int>:
    61f2:	8f 92       	push	r8
    61f4:	9f 92       	push	r9
    61f6:	af 92       	push	r10
    61f8:	bf 92       	push	r11
    61fa:	ef 92       	push	r14
    61fc:	ff 92       	push	r15
    61fe:	0f 93       	push	r16
    6200:	1f 93       	push	r17
    6202:	cf 93       	push	r28
    6204:	df 93       	push	r29
    6206:	8c 01       	movw	r16, r24
    6208:	d6 2f       	mov	r29, r22
    620a:	7a 01       	movw	r14, r20
    620c:	b2 2e       	mov	r11, r18
    620e:	9a d2       	rcall	.+1332   	; 0x6744 <fgetc>
    6210:	9c 01       	movw	r18, r24
    6212:	33 27       	eor	r19, r19
    6214:	2b 32       	cpi	r18, 0x2B	; 43
    6216:	31 05       	cpc	r19, r1
    6218:	31 f0       	breq	.+12     	; 0x6226 <conv_int+0x34>
    621a:	2d 32       	cpi	r18, 0x2D	; 45
    621c:	31 05       	cpc	r19, r1
    621e:	59 f4       	brne	.+22     	; 0x6236 <conv_int+0x44>
    6220:	8b 2d       	mov	r24, r11
    6222:	80 68       	ori	r24, 0x80	; 128
    6224:	b8 2e       	mov	r11, r24
    6226:	d1 50       	subi	r29, 0x01	; 1
    6228:	11 f4       	brne	.+4      	; 0x622e <conv_int+0x3c>
    622a:	80 e0       	ldi	r24, 0x00	; 0
    622c:	61 c0       	rjmp	.+194    	; 0x62f0 <conv_int+0xfe>
    622e:	c8 01       	movw	r24, r16
    6230:	89 d2       	rcall	.+1298   	; 0x6744 <fgetc>
    6232:	97 fd       	sbrc	r25, 7
    6234:	fa cf       	rjmp	.-12     	; 0x622a <conv_int+0x38>
    6236:	cb 2d       	mov	r28, r11
    6238:	cd 7f       	andi	r28, 0xFD	; 253
    623a:	2b 2d       	mov	r18, r11
    623c:	20 73       	andi	r18, 0x30	; 48
    623e:	f9 f4       	brne	.+62     	; 0x627e <conv_int+0x8c>
    6240:	80 33       	cpi	r24, 0x30	; 48
    6242:	e9 f4       	brne	.+58     	; 0x627e <conv_int+0x8c>
    6244:	aa 24       	eor	r10, r10
    6246:	aa 94       	dec	r10
    6248:	ad 0e       	add	r10, r29
    624a:	09 f4       	brne	.+2      	; 0x624e <conv_int+0x5c>
    624c:	3e c0       	rjmp	.+124    	; 0x62ca <conv_int+0xd8>
    624e:	c8 01       	movw	r24, r16
    6250:	79 d2       	rcall	.+1266   	; 0x6744 <fgetc>
    6252:	97 fd       	sbrc	r25, 7
    6254:	3a c0       	rjmp	.+116    	; 0x62ca <conv_int+0xd8>
    6256:	9c 01       	movw	r18, r24
    6258:	2f 7d       	andi	r18, 0xDF	; 223
    625a:	33 27       	eor	r19, r19
    625c:	28 35       	cpi	r18, 0x58	; 88
    625e:	31 05       	cpc	r19, r1
    6260:	41 f4       	brne	.+16     	; 0x6272 <conv_int+0x80>
    6262:	c2 64       	ori	r28, 0x42	; 66
    6264:	d2 50       	subi	r29, 0x02	; 2
    6266:	89 f1       	breq	.+98     	; 0x62ca <conv_int+0xd8>
    6268:	c8 01       	movw	r24, r16
    626a:	6c d2       	rcall	.+1240   	; 0x6744 <fgetc>
    626c:	97 ff       	sbrs	r25, 7
    626e:	07 c0       	rjmp	.+14     	; 0x627e <conv_int+0x8c>
    6270:	2c c0       	rjmp	.+88     	; 0x62ca <conv_int+0xd8>
    6272:	b6 fe       	sbrs	r11, 6
    6274:	02 c0       	rjmp	.+4      	; 0x627a <conv_int+0x88>
    6276:	c2 60       	ori	r28, 0x02	; 2
    6278:	01 c0       	rjmp	.+2      	; 0x627c <conv_int+0x8a>
    627a:	c2 61       	ori	r28, 0x12	; 18
    627c:	da 2d       	mov	r29, r10
    627e:	81 2c       	mov	r8, r1
    6280:	91 2c       	mov	r9, r1
    6282:	54 01       	movw	r10, r8
    6284:	20 ed       	ldi	r18, 0xD0	; 208
    6286:	28 0f       	add	r18, r24
    6288:	28 30       	cpi	r18, 0x08	; 8
    628a:	78 f0       	brcs	.+30     	; 0x62aa <conv_int+0xb8>
    628c:	c4 ff       	sbrs	r28, 4
    628e:	03 c0       	rjmp	.+6      	; 0x6296 <conv_int+0xa4>
    6290:	b8 01       	movw	r22, r16
    6292:	d2 d2       	rcall	.+1444   	; 0x6838 <ungetc>
    6294:	17 c0       	rjmp	.+46     	; 0x62c4 <conv_int+0xd2>
    6296:	2a 30       	cpi	r18, 0x0A	; 10
    6298:	40 f0       	brcs	.+16     	; 0x62aa <conv_int+0xb8>
    629a:	c6 ff       	sbrs	r28, 6
    629c:	f9 cf       	rjmp	.-14     	; 0x6290 <conv_int+0x9e>
    629e:	2f 7d       	andi	r18, 0xDF	; 223
    62a0:	3f ee       	ldi	r19, 0xEF	; 239
    62a2:	32 0f       	add	r19, r18
    62a4:	36 30       	cpi	r19, 0x06	; 6
    62a6:	a0 f7       	brcc	.-24     	; 0x6290 <conv_int+0x9e>
    62a8:	27 50       	subi	r18, 0x07	; 7
    62aa:	4c 2f       	mov	r20, r28
    62ac:	c5 01       	movw	r24, r10
    62ae:	b4 01       	movw	r22, r8
    62b0:	63 df       	rcall	.-314    	; 0x6178 <mulacc>
    62b2:	4b 01       	movw	r8, r22
    62b4:	5c 01       	movw	r10, r24
    62b6:	c2 60       	ori	r28, 0x02	; 2
    62b8:	d1 50       	subi	r29, 0x01	; 1
    62ba:	51 f0       	breq	.+20     	; 0x62d0 <conv_int+0xde>
    62bc:	c8 01       	movw	r24, r16
    62be:	42 d2       	rcall	.+1156   	; 0x6744 <fgetc>
    62c0:	97 ff       	sbrs	r25, 7
    62c2:	e0 cf       	rjmp	.-64     	; 0x6284 <conv_int+0x92>
    62c4:	c1 fd       	sbrc	r28, 1
    62c6:	04 c0       	rjmp	.+8      	; 0x62d0 <conv_int+0xde>
    62c8:	b0 cf       	rjmp	.-160    	; 0x622a <conv_int+0x38>
    62ca:	81 2c       	mov	r8, r1
    62cc:	91 2c       	mov	r9, r1
    62ce:	54 01       	movw	r10, r8
    62d0:	c7 ff       	sbrs	r28, 7
    62d2:	08 c0       	rjmp	.+16     	; 0x62e4 <conv_int+0xf2>
    62d4:	b0 94       	com	r11
    62d6:	a0 94       	com	r10
    62d8:	90 94       	com	r9
    62da:	80 94       	com	r8
    62dc:	81 1c       	adc	r8, r1
    62de:	91 1c       	adc	r9, r1
    62e0:	a1 1c       	adc	r10, r1
    62e2:	b1 1c       	adc	r11, r1
    62e4:	2c 2f       	mov	r18, r28
    62e6:	b5 01       	movw	r22, r10
    62e8:	a4 01       	movw	r20, r8
    62ea:	c7 01       	movw	r24, r14
    62ec:	39 df       	rcall	.-398    	; 0x6160 <putval>
    62ee:	81 e0       	ldi	r24, 0x01	; 1
    62f0:	df 91       	pop	r29
    62f2:	cf 91       	pop	r28
    62f4:	1f 91       	pop	r17
    62f6:	0f 91       	pop	r16
    62f8:	ff 90       	pop	r15
    62fa:	ef 90       	pop	r14
    62fc:	bf 90       	pop	r11
    62fe:	af 90       	pop	r10
    6300:	9f 90       	pop	r9
    6302:	8f 90       	pop	r8
    6304:	08 95       	ret

00006306 <conv_brk>:
    6306:	5f 92       	push	r5
    6308:	6f 92       	push	r6
    630a:	7f 92       	push	r7
    630c:	8f 92       	push	r8
    630e:	9f 92       	push	r9
    6310:	af 92       	push	r10
    6312:	bf 92       	push	r11
    6314:	cf 92       	push	r12
    6316:	df 92       	push	r13
    6318:	ef 92       	push	r14
    631a:	ff 92       	push	r15
    631c:	0f 93       	push	r16
    631e:	1f 93       	push	r17
    6320:	cf 93       	push	r28
    6322:	df 93       	push	r29
    6324:	cd b7       	in	r28, 0x3d	; 61
    6326:	de b7       	in	r29, 0x3e	; 62
    6328:	a0 97       	sbiw	r28, 0x20	; 32
    632a:	0f b6       	in	r0, 0x3f	; 63
    632c:	f8 94       	cli
    632e:	de bf       	out	0x3e, r29	; 62
    6330:	0f be       	out	0x3f, r0	; 63
    6332:	cd bf       	out	0x3d, r28	; 61
    6334:	5c 01       	movw	r10, r24
    6336:	96 2e       	mov	r9, r22
    6338:	7a 01       	movw	r14, r20
    633a:	f9 01       	movw	r30, r18
    633c:	8e 01       	movw	r16, r28
    633e:	0f 5f       	subi	r16, 0xFF	; 255
    6340:	1f 4f       	sbci	r17, 0xFF	; 255
    6342:	68 01       	movw	r12, r16
    6344:	80 e2       	ldi	r24, 0x20	; 32
    6346:	d8 01       	movw	r26, r16
    6348:	1d 92       	st	X+, r1
    634a:	8a 95       	dec	r24
    634c:	e9 f7       	brne	.-6      	; 0x6348 <conv_brk+0x42>
    634e:	d5 01       	movw	r26, r10
    6350:	13 96       	adiw	r26, 0x03	; 3
    6352:	8c 90       	ld	r8, X
    6354:	80 e0       	ldi	r24, 0x00	; 0
    6356:	90 e0       	ldi	r25, 0x00	; 0
    6358:	61 2c       	mov	r6, r1
    635a:	71 2c       	mov	r7, r1
    635c:	30 e0       	ldi	r19, 0x00	; 0
    635e:	61 e0       	ldi	r22, 0x01	; 1
    6360:	70 e0       	ldi	r23, 0x00	; 0
    6362:	83 fc       	sbrc	r8, 3
    6364:	25 91       	lpm	r18, Z+
    6366:	83 fe       	sbrs	r8, 3
    6368:	21 91       	ld	r18, Z+
    636a:	8f 01       	movw	r16, r30
    636c:	52 2e       	mov	r5, r18
    636e:	21 11       	cpse	r18, r1
    6370:	03 c0       	rjmp	.+6      	; 0x6378 <conv_brk+0x72>
    6372:	80 e0       	ldi	r24, 0x00	; 0
    6374:	90 e0       	ldi	r25, 0x00	; 0
    6376:	90 c0       	rjmp	.+288    	; 0x6498 <conv_brk+0x192>
    6378:	2e 35       	cpi	r18, 0x5E	; 94
    637a:	11 f4       	brne	.+4      	; 0x6380 <conv_brk+0x7a>
    637c:	00 97       	sbiw	r24, 0x00	; 0
    637e:	51 f1       	breq	.+84     	; 0x63d4 <conv_brk+0xce>
    6380:	43 2f       	mov	r20, r19
    6382:	50 e0       	ldi	r21, 0x00	; 0
    6384:	48 17       	cp	r20, r24
    6386:	59 07       	cpc	r21, r25
    6388:	3c f4       	brge	.+14     	; 0x6398 <conv_brk+0x92>
    638a:	2d 35       	cpi	r18, 0x5D	; 93
    638c:	59 f1       	breq	.+86     	; 0x63e4 <conv_brk+0xde>
    638e:	2d 32       	cpi	r18, 0x2D	; 45
    6390:	19 f4       	brne	.+6      	; 0x6398 <conv_brk+0x92>
    6392:	77 20       	and	r7, r7
    6394:	09 f1       	breq	.+66     	; 0x63d8 <conv_brk+0xd2>
    6396:	03 c0       	rjmp	.+6      	; 0x639e <conv_brk+0x98>
    6398:	77 20       	and	r7, r7
    639a:	09 f4       	brne	.+2      	; 0x639e <conv_brk+0x98>
    639c:	68 c0       	rjmp	.+208    	; 0x646e <conv_brk+0x168>
    639e:	45 2d       	mov	r20, r5
    63a0:	46 95       	lsr	r20
    63a2:	46 95       	lsr	r20
    63a4:	46 95       	lsr	r20
    63a6:	d6 01       	movw	r26, r12
    63a8:	a4 0f       	add	r26, r20
    63aa:	b1 1d       	adc	r27, r1
    63ac:	45 2d       	mov	r20, r5
    63ae:	47 70       	andi	r20, 0x07	; 7
    63b0:	8b 01       	movw	r16, r22
    63b2:	02 c0       	rjmp	.+4      	; 0x63b8 <conv_brk+0xb2>
    63b4:	00 0f       	add	r16, r16
    63b6:	11 1f       	adc	r17, r17
    63b8:	4a 95       	dec	r20
    63ba:	e2 f7       	brpl	.-8      	; 0x63b4 <conv_brk+0xae>
    63bc:	a8 01       	movw	r20, r16
    63be:	5c 91       	ld	r21, X
    63c0:	45 2b       	or	r20, r21
    63c2:	4c 93       	st	X, r20
    63c4:	65 14       	cp	r6, r5
    63c6:	59 f0       	breq	.+22     	; 0x63de <conv_brk+0xd8>
    63c8:	56 14       	cp	r5, r6
    63ca:	10 f4       	brcc	.+4      	; 0x63d0 <conv_brk+0xca>
    63cc:	53 94       	inc	r5
    63ce:	e7 cf       	rjmp	.-50     	; 0x639e <conv_brk+0x98>
    63d0:	5a 94       	dec	r5
    63d2:	e5 cf       	rjmp	.-54     	; 0x639e <conv_brk+0x98>
    63d4:	31 e0       	ldi	r19, 0x01	; 1
    63d6:	04 c0       	rjmp	.+8      	; 0x63e0 <conv_brk+0xda>
    63d8:	77 24       	eor	r7, r7
    63da:	73 94       	inc	r7
    63dc:	01 c0       	rjmp	.+2      	; 0x63e0 <conv_brk+0xda>
    63de:	71 2c       	mov	r7, r1
    63e0:	01 96       	adiw	r24, 0x01	; 1
    63e2:	bf cf       	rjmp	.-130    	; 0x6362 <conv_brk+0x5c>
    63e4:	77 20       	and	r7, r7
    63e6:	19 f0       	breq	.+6      	; 0x63ee <conv_brk+0xe8>
    63e8:	8e 81       	ldd	r24, Y+6	; 0x06
    63ea:	80 62       	ori	r24, 0x20	; 32
    63ec:	8e 83       	std	Y+6, r24	; 0x06
    63ee:	31 11       	cpse	r19, r1
    63f0:	03 c0       	rjmp	.+6      	; 0x63f8 <conv_brk+0xf2>
    63f2:	88 24       	eor	r8, r8
    63f4:	83 94       	inc	r8
    63f6:	17 c0       	rjmp	.+46     	; 0x6426 <conv_brk+0x120>
    63f8:	f6 01       	movw	r30, r12
    63fa:	9e 01       	movw	r18, r28
    63fc:	2f 5d       	subi	r18, 0xDF	; 223
    63fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6400:	80 81       	ld	r24, Z
    6402:	80 95       	com	r24
    6404:	81 93       	st	Z+, r24
    6406:	2e 17       	cp	r18, r30
    6408:	3f 07       	cpc	r19, r31
    640a:	d1 f7       	brne	.-12     	; 0x6400 <conv_brk+0xfa>
    640c:	f2 cf       	rjmp	.-28     	; 0x63f2 <conv_brk+0xec>
    640e:	e1 14       	cp	r14, r1
    6410:	f1 04       	cpc	r15, r1
    6412:	29 f0       	breq	.+10     	; 0x641e <conv_brk+0x118>
    6414:	d7 01       	movw	r26, r14
    6416:	8c 93       	st	X, r24
    6418:	f7 01       	movw	r30, r14
    641a:	31 96       	adiw	r30, 0x01	; 1
    641c:	7f 01       	movw	r14, r30
    641e:	9a 94       	dec	r9
    6420:	81 2c       	mov	r8, r1
    6422:	99 20       	and	r9, r9
    6424:	e9 f0       	breq	.+58     	; 0x6460 <conv_brk+0x15a>
    6426:	c5 01       	movw	r24, r10
    6428:	8d d1       	rcall	.+794    	; 0x6744 <fgetc>
    642a:	97 fd       	sbrc	r25, 7
    642c:	17 c0       	rjmp	.+46     	; 0x645c <conv_brk+0x156>
    642e:	fc 01       	movw	r30, r24
    6430:	ff 27       	eor	r31, r31
    6432:	23 e0       	ldi	r18, 0x03	; 3
    6434:	f5 95       	asr	r31
    6436:	e7 95       	ror	r30
    6438:	2a 95       	dec	r18
    643a:	e1 f7       	brne	.-8      	; 0x6434 <conv_brk+0x12e>
    643c:	ec 0d       	add	r30, r12
    643e:	fd 1d       	adc	r31, r13
    6440:	20 81       	ld	r18, Z
    6442:	30 e0       	ldi	r19, 0x00	; 0
    6444:	ac 01       	movw	r20, r24
    6446:	47 70       	andi	r20, 0x07	; 7
    6448:	55 27       	eor	r21, r21
    644a:	02 c0       	rjmp	.+4      	; 0x6450 <conv_brk+0x14a>
    644c:	35 95       	asr	r19
    644e:	27 95       	ror	r18
    6450:	4a 95       	dec	r20
    6452:	e2 f7       	brpl	.-8      	; 0x644c <conv_brk+0x146>
    6454:	20 fd       	sbrc	r18, 0
    6456:	db cf       	rjmp	.-74     	; 0x640e <conv_brk+0x108>
    6458:	b5 01       	movw	r22, r10
    645a:	ee d1       	rcall	.+988    	; 0x6838 <ungetc>
    645c:	81 10       	cpse	r8, r1
    645e:	89 cf       	rjmp	.-238    	; 0x6372 <conv_brk+0x6c>
    6460:	e1 14       	cp	r14, r1
    6462:	f1 04       	cpc	r15, r1
    6464:	11 f0       	breq	.+4      	; 0x646a <conv_brk+0x164>
    6466:	d7 01       	movw	r26, r14
    6468:	1c 92       	st	X, r1
    646a:	c8 01       	movw	r24, r16
    646c:	15 c0       	rjmp	.+42     	; 0x6498 <conv_brk+0x192>
    646e:	42 2f       	mov	r20, r18
    6470:	46 95       	lsr	r20
    6472:	46 95       	lsr	r20
    6474:	46 95       	lsr	r20
    6476:	d6 01       	movw	r26, r12
    6478:	a4 0f       	add	r26, r20
    647a:	b1 1d       	adc	r27, r1
    647c:	42 2f       	mov	r20, r18
    647e:	47 70       	andi	r20, 0x07	; 7
    6480:	8b 01       	movw	r16, r22
    6482:	02 c0       	rjmp	.+4      	; 0x6488 <conv_brk+0x182>
    6484:	00 0f       	add	r16, r16
    6486:	11 1f       	adc	r17, r17
    6488:	4a 95       	dec	r20
    648a:	e2 f7       	brpl	.-8      	; 0x6484 <conv_brk+0x17e>
    648c:	a8 01       	movw	r20, r16
    648e:	5c 91       	ld	r21, X
    6490:	45 2b       	or	r20, r21
    6492:	4c 93       	st	X, r20
    6494:	62 2e       	mov	r6, r18
    6496:	a4 cf       	rjmp	.-184    	; 0x63e0 <conv_brk+0xda>
    6498:	a0 96       	adiw	r28, 0x20	; 32
    649a:	0f b6       	in	r0, 0x3f	; 63
    649c:	f8 94       	cli
    649e:	de bf       	out	0x3e, r29	; 62
    64a0:	0f be       	out	0x3f, r0	; 63
    64a2:	cd bf       	out	0x3d, r28	; 61
    64a4:	df 91       	pop	r29
    64a6:	cf 91       	pop	r28
    64a8:	1f 91       	pop	r17
    64aa:	0f 91       	pop	r16
    64ac:	ff 90       	pop	r15
    64ae:	ef 90       	pop	r14
    64b0:	df 90       	pop	r13
    64b2:	cf 90       	pop	r12
    64b4:	bf 90       	pop	r11
    64b6:	af 90       	pop	r10
    64b8:	9f 90       	pop	r9
    64ba:	8f 90       	pop	r8
    64bc:	7f 90       	pop	r7
    64be:	6f 90       	pop	r6
    64c0:	5f 90       	pop	r5
    64c2:	08 95       	ret

000064c4 <vfscanf>:
    64c4:	5f 92       	push	r5
    64c6:	6f 92       	push	r6
    64c8:	7f 92       	push	r7
    64ca:	8f 92       	push	r8
    64cc:	9f 92       	push	r9
    64ce:	af 92       	push	r10
    64d0:	bf 92       	push	r11
    64d2:	cf 92       	push	r12
    64d4:	df 92       	push	r13
    64d6:	ef 92       	push	r14
    64d8:	ff 92       	push	r15
    64da:	0f 93       	push	r16
    64dc:	1f 93       	push	r17
    64de:	cf 93       	push	r28
    64e0:	df 93       	push	r29
    64e2:	6c 01       	movw	r12, r24
    64e4:	eb 01       	movw	r28, r22
    64e6:	5a 01       	movw	r10, r20
    64e8:	fc 01       	movw	r30, r24
    64ea:	17 82       	std	Z+7, r1	; 0x07
    64ec:	16 82       	std	Z+6, r1	; 0x06
    64ee:	51 2c       	mov	r5, r1
    64f0:	f6 01       	movw	r30, r12
    64f2:	e3 80       	ldd	r14, Z+3	; 0x03
    64f4:	fe 01       	movw	r30, r28
    64f6:	e3 fc       	sbrc	r14, 3
    64f8:	85 91       	lpm	r24, Z+
    64fa:	e3 fe       	sbrs	r14, 3
    64fc:	81 91       	ld	r24, Z+
    64fe:	18 2f       	mov	r17, r24
    6500:	ef 01       	movw	r28, r30
    6502:	88 23       	and	r24, r24
    6504:	09 f4       	brne	.+2      	; 0x6508 <vfscanf+0x44>
    6506:	e0 c0       	rjmp	.+448    	; 0x66c8 <vfscanf+0x204>
    6508:	90 e0       	ldi	r25, 0x00	; 0
    650a:	f3 d0       	rcall	.+486    	; 0x66f2 <isspace>
    650c:	89 2b       	or	r24, r25
    650e:	19 f0       	breq	.+6      	; 0x6516 <vfscanf+0x52>
    6510:	c6 01       	movw	r24, r12
    6512:	59 de       	rcall	.-846    	; 0x61c6 <skip_spaces>
    6514:	ed cf       	rjmp	.-38     	; 0x64f0 <vfscanf+0x2c>
    6516:	15 32       	cpi	r17, 0x25	; 37
    6518:	41 f4       	brne	.+16     	; 0x652a <vfscanf+0x66>
    651a:	fe 01       	movw	r30, r28
    651c:	e3 fc       	sbrc	r14, 3
    651e:	15 91       	lpm	r17, Z+
    6520:	e3 fe       	sbrs	r14, 3
    6522:	11 91       	ld	r17, Z+
    6524:	ef 01       	movw	r28, r30
    6526:	15 32       	cpi	r17, 0x25	; 37
    6528:	71 f4       	brne	.+28     	; 0x6546 <vfscanf+0x82>
    652a:	c6 01       	movw	r24, r12
    652c:	0b d1       	rcall	.+534    	; 0x6744 <fgetc>
    652e:	97 fd       	sbrc	r25, 7
    6530:	c9 c0       	rjmp	.+402    	; 0x66c4 <vfscanf+0x200>
    6532:	41 2f       	mov	r20, r17
    6534:	50 e0       	ldi	r21, 0x00	; 0
    6536:	9c 01       	movw	r18, r24
    6538:	33 27       	eor	r19, r19
    653a:	24 17       	cp	r18, r20
    653c:	35 07       	cpc	r19, r21
    653e:	c1 f2       	breq	.-80     	; 0x64f0 <vfscanf+0x2c>
    6540:	b6 01       	movw	r22, r12
    6542:	7a d1       	rcall	.+756    	; 0x6838 <ungetc>
    6544:	c1 c0       	rjmp	.+386    	; 0x66c8 <vfscanf+0x204>
    6546:	1a 32       	cpi	r17, 0x2A	; 42
    6548:	39 f4       	brne	.+14     	; 0x6558 <vfscanf+0x94>
    654a:	e3 fc       	sbrc	r14, 3
    654c:	15 91       	lpm	r17, Z+
    654e:	e3 fe       	sbrs	r14, 3
    6550:	11 91       	ld	r17, Z+
    6552:	ef 01       	movw	r28, r30
    6554:	01 e0       	ldi	r16, 0x01	; 1
    6556:	01 c0       	rjmp	.+2      	; 0x655a <vfscanf+0x96>
    6558:	00 e0       	ldi	r16, 0x00	; 0
    655a:	f1 2c       	mov	r15, r1
    655c:	20 ed       	ldi	r18, 0xD0	; 208
    655e:	21 0f       	add	r18, r17
    6560:	2a 30       	cpi	r18, 0x0A	; 10
    6562:	78 f4       	brcc	.+30     	; 0x6582 <vfscanf+0xbe>
    6564:	02 60       	ori	r16, 0x02	; 2
    6566:	6f 2d       	mov	r22, r15
    6568:	70 e0       	ldi	r23, 0x00	; 0
    656a:	80 e0       	ldi	r24, 0x00	; 0
    656c:	90 e0       	ldi	r25, 0x00	; 0
    656e:	40 e2       	ldi	r20, 0x20	; 32
    6570:	03 de       	rcall	.-1018   	; 0x6178 <mulacc>
    6572:	f6 2e       	mov	r15, r22
    6574:	fe 01       	movw	r30, r28
    6576:	e3 fc       	sbrc	r14, 3
    6578:	15 91       	lpm	r17, Z+
    657a:	e3 fe       	sbrs	r14, 3
    657c:	11 91       	ld	r17, Z+
    657e:	ef 01       	movw	r28, r30
    6580:	ed cf       	rjmp	.-38     	; 0x655c <vfscanf+0x98>
    6582:	01 ff       	sbrs	r16, 1
    6584:	03 c0       	rjmp	.+6      	; 0x658c <vfscanf+0xc8>
    6586:	f1 10       	cpse	r15, r1
    6588:	03 c0       	rjmp	.+6      	; 0x6590 <vfscanf+0xcc>
    658a:	9e c0       	rjmp	.+316    	; 0x66c8 <vfscanf+0x204>
    658c:	ff 24       	eor	r15, r15
    658e:	fa 94       	dec	r15
    6590:	18 36       	cpi	r17, 0x68	; 104
    6592:	19 f0       	breq	.+6      	; 0x659a <vfscanf+0xd6>
    6594:	1c 36       	cpi	r17, 0x6C	; 108
    6596:	51 f0       	breq	.+20     	; 0x65ac <vfscanf+0xe8>
    6598:	10 c0       	rjmp	.+32     	; 0x65ba <vfscanf+0xf6>
    659a:	fe 01       	movw	r30, r28
    659c:	e3 fc       	sbrc	r14, 3
    659e:	15 91       	lpm	r17, Z+
    65a0:	e3 fe       	sbrs	r14, 3
    65a2:	11 91       	ld	r17, Z+
    65a4:	ef 01       	movw	r28, r30
    65a6:	18 36       	cpi	r17, 0x68	; 104
    65a8:	41 f4       	brne	.+16     	; 0x65ba <vfscanf+0xf6>
    65aa:	08 60       	ori	r16, 0x08	; 8
    65ac:	04 60       	ori	r16, 0x04	; 4
    65ae:	fe 01       	movw	r30, r28
    65b0:	e3 fc       	sbrc	r14, 3
    65b2:	15 91       	lpm	r17, Z+
    65b4:	e3 fe       	sbrs	r14, 3
    65b6:	11 91       	ld	r17, Z+
    65b8:	ef 01       	movw	r28, r30
    65ba:	11 23       	and	r17, r17
    65bc:	09 f4       	brne	.+2      	; 0x65c0 <vfscanf+0xfc>
    65be:	84 c0       	rjmp	.+264    	; 0x66c8 <vfscanf+0x204>
    65c0:	61 2f       	mov	r22, r17
    65c2:	70 e0       	ldi	r23, 0x00	; 0
    65c4:	84 e3       	ldi	r24, 0x34	; 52
    65c6:	91 e0       	ldi	r25, 0x01	; 1
    65c8:	9c d0       	rcall	.+312    	; 0x6702 <strchr_P>
    65ca:	89 2b       	or	r24, r25
    65cc:	09 f4       	brne	.+2      	; 0x65d0 <vfscanf+0x10c>
    65ce:	7c c0       	rjmp	.+248    	; 0x66c8 <vfscanf+0x204>
    65d0:	00 fd       	sbrc	r16, 0
    65d2:	07 c0       	rjmp	.+14     	; 0x65e2 <vfscanf+0x11e>
    65d4:	f5 01       	movw	r30, r10
    65d6:	80 80       	ld	r8, Z
    65d8:	91 80       	ldd	r9, Z+1	; 0x01
    65da:	c5 01       	movw	r24, r10
    65dc:	02 96       	adiw	r24, 0x02	; 2
    65de:	5c 01       	movw	r10, r24
    65e0:	02 c0       	rjmp	.+4      	; 0x65e6 <vfscanf+0x122>
    65e2:	81 2c       	mov	r8, r1
    65e4:	91 2c       	mov	r9, r1
    65e6:	1e 36       	cpi	r17, 0x6E	; 110
    65e8:	49 f4       	brne	.+18     	; 0x65fc <vfscanf+0x138>
    65ea:	f6 01       	movw	r30, r12
    65ec:	46 81       	ldd	r20, Z+6	; 0x06
    65ee:	57 81       	ldd	r21, Z+7	; 0x07
    65f0:	60 e0       	ldi	r22, 0x00	; 0
    65f2:	70 e0       	ldi	r23, 0x00	; 0
    65f4:	20 2f       	mov	r18, r16
    65f6:	c4 01       	movw	r24, r8
    65f8:	b3 dd       	rcall	.-1178   	; 0x6160 <putval>
    65fa:	7a cf       	rjmp	.-268    	; 0x64f0 <vfscanf+0x2c>
    65fc:	13 36       	cpi	r17, 0x63	; 99
    65fe:	a1 f4       	brne	.+40     	; 0x6628 <vfscanf+0x164>
    6600:	01 fd       	sbrc	r16, 1
    6602:	02 c0       	rjmp	.+4      	; 0x6608 <vfscanf+0x144>
    6604:	ff 24       	eor	r15, r15
    6606:	f3 94       	inc	r15
    6608:	c6 01       	movw	r24, r12
    660a:	9c d0       	rcall	.+312    	; 0x6744 <fgetc>
    660c:	97 fd       	sbrc	r25, 7
    660e:	5a c0       	rjmp	.+180    	; 0x66c4 <vfscanf+0x200>
    6610:	81 14       	cp	r8, r1
    6612:	91 04       	cpc	r9, r1
    6614:	29 f0       	breq	.+10     	; 0x6620 <vfscanf+0x15c>
    6616:	f4 01       	movw	r30, r8
    6618:	80 83       	st	Z, r24
    661a:	c4 01       	movw	r24, r8
    661c:	01 96       	adiw	r24, 0x01	; 1
    661e:	4c 01       	movw	r8, r24
    6620:	fa 94       	dec	r15
    6622:	f1 10       	cpse	r15, r1
    6624:	f1 cf       	rjmp	.-30     	; 0x6608 <vfscanf+0x144>
    6626:	4a c0       	rjmp	.+148    	; 0x66bc <vfscanf+0x1f8>
    6628:	1b 35       	cpi	r17, 0x5B	; 91
    662a:	51 f4       	brne	.+20     	; 0x6640 <vfscanf+0x17c>
    662c:	9e 01       	movw	r18, r28
    662e:	a4 01       	movw	r20, r8
    6630:	6f 2d       	mov	r22, r15
    6632:	c6 01       	movw	r24, r12
    6634:	68 de       	rcall	.-816    	; 0x6306 <conv_brk>
    6636:	ec 01       	movw	r28, r24
    6638:	89 2b       	or	r24, r25
    663a:	09 f0       	breq	.+2      	; 0x663e <vfscanf+0x17a>
    663c:	3f c0       	rjmp	.+126    	; 0x66bc <vfscanf+0x1f8>
    663e:	39 c0       	rjmp	.+114    	; 0x66b2 <vfscanf+0x1ee>
    6640:	c6 01       	movw	r24, r12
    6642:	c1 dd       	rcall	.-1150   	; 0x61c6 <skip_spaces>
    6644:	97 fd       	sbrc	r25, 7
    6646:	3e c0       	rjmp	.+124    	; 0x66c4 <vfscanf+0x200>
    6648:	1f 36       	cpi	r17, 0x6F	; 111
    664a:	49 f1       	breq	.+82     	; 0x669e <vfscanf+0x1da>
    664c:	28 f4       	brcc	.+10     	; 0x6658 <vfscanf+0x194>
    664e:	14 36       	cpi	r17, 0x64	; 100
    6650:	21 f1       	breq	.+72     	; 0x669a <vfscanf+0x1d6>
    6652:	19 36       	cpi	r17, 0x69	; 105
    6654:	39 f1       	breq	.+78     	; 0x66a4 <vfscanf+0x1e0>
    6656:	25 c0       	rjmp	.+74     	; 0x66a2 <vfscanf+0x1de>
    6658:	13 37       	cpi	r17, 0x73	; 115
    665a:	71 f0       	breq	.+28     	; 0x6678 <vfscanf+0x1b4>
    665c:	15 37       	cpi	r17, 0x75	; 117
    665e:	e9 f0       	breq	.+58     	; 0x669a <vfscanf+0x1d6>
    6660:	20 c0       	rjmp	.+64     	; 0x66a2 <vfscanf+0x1de>
    6662:	81 14       	cp	r8, r1
    6664:	91 04       	cpc	r9, r1
    6666:	29 f0       	breq	.+10     	; 0x6672 <vfscanf+0x1ae>
    6668:	f4 01       	movw	r30, r8
    666a:	60 82       	st	Z, r6
    666c:	c4 01       	movw	r24, r8
    666e:	01 96       	adiw	r24, 0x01	; 1
    6670:	4c 01       	movw	r8, r24
    6672:	fa 94       	dec	r15
    6674:	ff 20       	and	r15, r15
    6676:	59 f0       	breq	.+22     	; 0x668e <vfscanf+0x1ca>
    6678:	c6 01       	movw	r24, r12
    667a:	64 d0       	rcall	.+200    	; 0x6744 <fgetc>
    667c:	3c 01       	movw	r6, r24
    667e:	97 fd       	sbrc	r25, 7
    6680:	06 c0       	rjmp	.+12     	; 0x668e <vfscanf+0x1ca>
    6682:	37 d0       	rcall	.+110    	; 0x66f2 <isspace>
    6684:	89 2b       	or	r24, r25
    6686:	69 f3       	breq	.-38     	; 0x6662 <vfscanf+0x19e>
    6688:	b6 01       	movw	r22, r12
    668a:	c3 01       	movw	r24, r6
    668c:	d5 d0       	rcall	.+426    	; 0x6838 <ungetc>
    668e:	81 14       	cp	r8, r1
    6690:	91 04       	cpc	r9, r1
    6692:	a1 f0       	breq	.+40     	; 0x66bc <vfscanf+0x1f8>
    6694:	f4 01       	movw	r30, r8
    6696:	10 82       	st	Z, r1
    6698:	11 c0       	rjmp	.+34     	; 0x66bc <vfscanf+0x1f8>
    669a:	00 62       	ori	r16, 0x20	; 32
    669c:	03 c0       	rjmp	.+6      	; 0x66a4 <vfscanf+0x1e0>
    669e:	00 61       	ori	r16, 0x10	; 16
    66a0:	01 c0       	rjmp	.+2      	; 0x66a4 <vfscanf+0x1e0>
    66a2:	00 64       	ori	r16, 0x40	; 64
    66a4:	20 2f       	mov	r18, r16
    66a6:	a4 01       	movw	r20, r8
    66a8:	6f 2d       	mov	r22, r15
    66aa:	c6 01       	movw	r24, r12
    66ac:	a2 dd       	rcall	.-1212   	; 0x61f2 <conv_int>
    66ae:	81 11       	cpse	r24, r1
    66b0:	05 c0       	rjmp	.+10     	; 0x66bc <vfscanf+0x1f8>
    66b2:	f6 01       	movw	r30, r12
    66b4:	83 81       	ldd	r24, Z+3	; 0x03
    66b6:	80 73       	andi	r24, 0x30	; 48
    66b8:	29 f4       	brne	.+10     	; 0x66c4 <vfscanf+0x200>
    66ba:	06 c0       	rjmp	.+12     	; 0x66c8 <vfscanf+0x204>
    66bc:	00 fd       	sbrc	r16, 0
    66be:	18 cf       	rjmp	.-464    	; 0x64f0 <vfscanf+0x2c>
    66c0:	53 94       	inc	r5
    66c2:	16 cf       	rjmp	.-468    	; 0x64f0 <vfscanf+0x2c>
    66c4:	55 20       	and	r5, r5
    66c6:	19 f0       	breq	.+6      	; 0x66ce <vfscanf+0x20a>
    66c8:	85 2d       	mov	r24, r5
    66ca:	90 e0       	ldi	r25, 0x00	; 0
    66cc:	02 c0       	rjmp	.+4      	; 0x66d2 <vfscanf+0x20e>
    66ce:	8f ef       	ldi	r24, 0xFF	; 255
    66d0:	9f ef       	ldi	r25, 0xFF	; 255
    66d2:	df 91       	pop	r29
    66d4:	cf 91       	pop	r28
    66d6:	1f 91       	pop	r17
    66d8:	0f 91       	pop	r16
    66da:	ff 90       	pop	r15
    66dc:	ef 90       	pop	r14
    66de:	df 90       	pop	r13
    66e0:	cf 90       	pop	r12
    66e2:	bf 90       	pop	r11
    66e4:	af 90       	pop	r10
    66e6:	9f 90       	pop	r9
    66e8:	8f 90       	pop	r8
    66ea:	7f 90       	pop	r7
    66ec:	6f 90       	pop	r6
    66ee:	5f 90       	pop	r5
    66f0:	08 95       	ret

000066f2 <isspace>:
    66f2:	91 11       	cpse	r25, r1
    66f4:	18 c1       	rjmp	.+560    	; 0x6926 <__ctype_isfalse>
    66f6:	80 32       	cpi	r24, 0x20	; 32
    66f8:	19 f0       	breq	.+6      	; 0x6700 <isspace+0xe>
    66fa:	89 50       	subi	r24, 0x09	; 9
    66fc:	85 50       	subi	r24, 0x05	; 5
    66fe:	d0 f7       	brcc	.-12     	; 0x66f4 <isspace+0x2>
    6700:	08 95       	ret

00006702 <strchr_P>:
    6702:	fc 01       	movw	r30, r24
    6704:	05 90       	lpm	r0, Z+
    6706:	06 16       	cp	r0, r22
    6708:	21 f0       	breq	.+8      	; 0x6712 <strchr_P+0x10>
    670a:	00 20       	and	r0, r0
    670c:	d9 f7       	brne	.-10     	; 0x6704 <strchr_P+0x2>
    670e:	c0 01       	movw	r24, r0
    6710:	08 95       	ret
    6712:	31 97       	sbiw	r30, 0x01	; 1
    6714:	cf 01       	movw	r24, r30
    6716:	08 95       	ret

00006718 <strnlen_P>:
    6718:	fc 01       	movw	r30, r24
    671a:	05 90       	lpm	r0, Z+
    671c:	61 50       	subi	r22, 0x01	; 1
    671e:	70 40       	sbci	r23, 0x00	; 0
    6720:	01 10       	cpse	r0, r1
    6722:	d8 f7       	brcc	.-10     	; 0x671a <strnlen_P+0x2>
    6724:	80 95       	com	r24
    6726:	90 95       	com	r25
    6728:	8e 0f       	add	r24, r30
    672a:	9f 1f       	adc	r25, r31
    672c:	08 95       	ret

0000672e <strnlen>:
    672e:	fc 01       	movw	r30, r24
    6730:	61 50       	subi	r22, 0x01	; 1
    6732:	70 40       	sbci	r23, 0x00	; 0
    6734:	01 90       	ld	r0, Z+
    6736:	01 10       	cpse	r0, r1
    6738:	d8 f7       	brcc	.-10     	; 0x6730 <strnlen+0x2>
    673a:	80 95       	com	r24
    673c:	90 95       	com	r25
    673e:	8e 0f       	add	r24, r30
    6740:	9f 1f       	adc	r25, r31
    6742:	08 95       	ret

00006744 <fgetc>:
    6744:	cf 93       	push	r28
    6746:	df 93       	push	r29
    6748:	ec 01       	movw	r28, r24
    674a:	2b 81       	ldd	r18, Y+3	; 0x03
    674c:	20 ff       	sbrs	r18, 0
    674e:	33 c0       	rjmp	.+102    	; 0x67b6 <fgetc+0x72>
    6750:	26 ff       	sbrs	r18, 6
    6752:	0a c0       	rjmp	.+20     	; 0x6768 <fgetc+0x24>
    6754:	2f 7b       	andi	r18, 0xBF	; 191
    6756:	2b 83       	std	Y+3, r18	; 0x03
    6758:	8e 81       	ldd	r24, Y+6	; 0x06
    675a:	9f 81       	ldd	r25, Y+7	; 0x07
    675c:	01 96       	adiw	r24, 0x01	; 1
    675e:	9f 83       	std	Y+7, r25	; 0x07
    6760:	8e 83       	std	Y+6, r24	; 0x06
    6762:	8a 81       	ldd	r24, Y+2	; 0x02
    6764:	90 e0       	ldi	r25, 0x00	; 0
    6766:	29 c0       	rjmp	.+82     	; 0x67ba <fgetc+0x76>
    6768:	22 ff       	sbrs	r18, 2
    676a:	0f c0       	rjmp	.+30     	; 0x678a <fgetc+0x46>
    676c:	e8 81       	ld	r30, Y
    676e:	f9 81       	ldd	r31, Y+1	; 0x01
    6770:	80 81       	ld	r24, Z
    6772:	08 2e       	mov	r0, r24
    6774:	00 0c       	add	r0, r0
    6776:	99 0b       	sbc	r25, r25
    6778:	00 97       	sbiw	r24, 0x00	; 0
    677a:	19 f4       	brne	.+6      	; 0x6782 <fgetc+0x3e>
    677c:	20 62       	ori	r18, 0x20	; 32
    677e:	2b 83       	std	Y+3, r18	; 0x03
    6780:	1a c0       	rjmp	.+52     	; 0x67b6 <fgetc+0x72>
    6782:	31 96       	adiw	r30, 0x01	; 1
    6784:	f9 83       	std	Y+1, r31	; 0x01
    6786:	e8 83       	st	Y, r30
    6788:	0e c0       	rjmp	.+28     	; 0x67a6 <fgetc+0x62>
    678a:	ea 85       	ldd	r30, Y+10	; 0x0a
    678c:	fb 85       	ldd	r31, Y+11	; 0x0b
    678e:	19 95       	eicall
    6790:	97 ff       	sbrs	r25, 7
    6792:	09 c0       	rjmp	.+18     	; 0x67a6 <fgetc+0x62>
    6794:	2b 81       	ldd	r18, Y+3	; 0x03
    6796:	01 96       	adiw	r24, 0x01	; 1
    6798:	11 f0       	breq	.+4      	; 0x679e <fgetc+0x5a>
    679a:	80 e2       	ldi	r24, 0x20	; 32
    679c:	01 c0       	rjmp	.+2      	; 0x67a0 <fgetc+0x5c>
    679e:	80 e1       	ldi	r24, 0x10	; 16
    67a0:	82 2b       	or	r24, r18
    67a2:	8b 83       	std	Y+3, r24	; 0x03
    67a4:	08 c0       	rjmp	.+16     	; 0x67b6 <fgetc+0x72>
    67a6:	2e 81       	ldd	r18, Y+6	; 0x06
    67a8:	3f 81       	ldd	r19, Y+7	; 0x07
    67aa:	2f 5f       	subi	r18, 0xFF	; 255
    67ac:	3f 4f       	sbci	r19, 0xFF	; 255
    67ae:	3f 83       	std	Y+7, r19	; 0x07
    67b0:	2e 83       	std	Y+6, r18	; 0x06
    67b2:	99 27       	eor	r25, r25
    67b4:	02 c0       	rjmp	.+4      	; 0x67ba <fgetc+0x76>
    67b6:	8f ef       	ldi	r24, 0xFF	; 255
    67b8:	9f ef       	ldi	r25, 0xFF	; 255
    67ba:	df 91       	pop	r29
    67bc:	cf 91       	pop	r28
    67be:	08 95       	ret

000067c0 <fputc>:
    67c0:	0f 93       	push	r16
    67c2:	1f 93       	push	r17
    67c4:	cf 93       	push	r28
    67c6:	df 93       	push	r29
    67c8:	fb 01       	movw	r30, r22
    67ca:	23 81       	ldd	r18, Z+3	; 0x03
    67cc:	21 fd       	sbrc	r18, 1
    67ce:	03 c0       	rjmp	.+6      	; 0x67d6 <fputc+0x16>
    67d0:	8f ef       	ldi	r24, 0xFF	; 255
    67d2:	9f ef       	ldi	r25, 0xFF	; 255
    67d4:	2c c0       	rjmp	.+88     	; 0x682e <fputc+0x6e>
    67d6:	22 ff       	sbrs	r18, 2
    67d8:	16 c0       	rjmp	.+44     	; 0x6806 <fputc+0x46>
    67da:	46 81       	ldd	r20, Z+6	; 0x06
    67dc:	57 81       	ldd	r21, Z+7	; 0x07
    67de:	24 81       	ldd	r18, Z+4	; 0x04
    67e0:	35 81       	ldd	r19, Z+5	; 0x05
    67e2:	42 17       	cp	r20, r18
    67e4:	53 07       	cpc	r21, r19
    67e6:	44 f4       	brge	.+16     	; 0x67f8 <fputc+0x38>
    67e8:	a0 81       	ld	r26, Z
    67ea:	b1 81       	ldd	r27, Z+1	; 0x01
    67ec:	9d 01       	movw	r18, r26
    67ee:	2f 5f       	subi	r18, 0xFF	; 255
    67f0:	3f 4f       	sbci	r19, 0xFF	; 255
    67f2:	31 83       	std	Z+1, r19	; 0x01
    67f4:	20 83       	st	Z, r18
    67f6:	8c 93       	st	X, r24
    67f8:	26 81       	ldd	r18, Z+6	; 0x06
    67fa:	37 81       	ldd	r19, Z+7	; 0x07
    67fc:	2f 5f       	subi	r18, 0xFF	; 255
    67fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6800:	37 83       	std	Z+7, r19	; 0x07
    6802:	26 83       	std	Z+6, r18	; 0x06
    6804:	14 c0       	rjmp	.+40     	; 0x682e <fputc+0x6e>
    6806:	8b 01       	movw	r16, r22
    6808:	ec 01       	movw	r28, r24
    680a:	fb 01       	movw	r30, r22
    680c:	00 84       	ldd	r0, Z+8	; 0x08
    680e:	f1 85       	ldd	r31, Z+9	; 0x09
    6810:	e0 2d       	mov	r30, r0
    6812:	19 95       	eicall
    6814:	89 2b       	or	r24, r25
    6816:	e1 f6       	brne	.-72     	; 0x67d0 <fputc+0x10>
    6818:	d8 01       	movw	r26, r16
    681a:	16 96       	adiw	r26, 0x06	; 6
    681c:	8d 91       	ld	r24, X+
    681e:	9c 91       	ld	r25, X
    6820:	17 97       	sbiw	r26, 0x07	; 7
    6822:	01 96       	adiw	r24, 0x01	; 1
    6824:	17 96       	adiw	r26, 0x07	; 7
    6826:	9c 93       	st	X, r25
    6828:	8e 93       	st	-X, r24
    682a:	16 97       	sbiw	r26, 0x06	; 6
    682c:	ce 01       	movw	r24, r28
    682e:	df 91       	pop	r29
    6830:	cf 91       	pop	r28
    6832:	1f 91       	pop	r17
    6834:	0f 91       	pop	r16
    6836:	08 95       	ret

00006838 <ungetc>:
    6838:	fb 01       	movw	r30, r22
    683a:	23 81       	ldd	r18, Z+3	; 0x03
    683c:	20 ff       	sbrs	r18, 0
    683e:	12 c0       	rjmp	.+36     	; 0x6864 <ungetc+0x2c>
    6840:	26 fd       	sbrc	r18, 6
    6842:	10 c0       	rjmp	.+32     	; 0x6864 <ungetc+0x2c>
    6844:	8f 3f       	cpi	r24, 0xFF	; 255
    6846:	3f ef       	ldi	r19, 0xFF	; 255
    6848:	93 07       	cpc	r25, r19
    684a:	61 f0       	breq	.+24     	; 0x6864 <ungetc+0x2c>
    684c:	82 83       	std	Z+2, r24	; 0x02
    684e:	2f 7d       	andi	r18, 0xDF	; 223
    6850:	20 64       	ori	r18, 0x40	; 64
    6852:	23 83       	std	Z+3, r18	; 0x03
    6854:	26 81       	ldd	r18, Z+6	; 0x06
    6856:	37 81       	ldd	r19, Z+7	; 0x07
    6858:	21 50       	subi	r18, 0x01	; 1
    685a:	31 09       	sbc	r19, r1
    685c:	37 83       	std	Z+7, r19	; 0x07
    685e:	26 83       	std	Z+6, r18	; 0x06
    6860:	99 27       	eor	r25, r25
    6862:	08 95       	ret
    6864:	8f ef       	ldi	r24, 0xFF	; 255
    6866:	9f ef       	ldi	r25, 0xFF	; 255
    6868:	08 95       	ret

0000686a <__ultoa_invert>:
    686a:	fa 01       	movw	r30, r20
    686c:	aa 27       	eor	r26, r26
    686e:	28 30       	cpi	r18, 0x08	; 8
    6870:	51 f1       	breq	.+84     	; 0x68c6 <__ultoa_invert+0x5c>
    6872:	20 31       	cpi	r18, 0x10	; 16
    6874:	81 f1       	breq	.+96     	; 0x68d6 <__ultoa_invert+0x6c>
    6876:	e8 94       	clt
    6878:	6f 93       	push	r22
    687a:	6e 7f       	andi	r22, 0xFE	; 254
    687c:	6e 5f       	subi	r22, 0xFE	; 254
    687e:	7f 4f       	sbci	r23, 0xFF	; 255
    6880:	8f 4f       	sbci	r24, 0xFF	; 255
    6882:	9f 4f       	sbci	r25, 0xFF	; 255
    6884:	af 4f       	sbci	r26, 0xFF	; 255
    6886:	b1 e0       	ldi	r27, 0x01	; 1
    6888:	3e d0       	rcall	.+124    	; 0x6906 <__ultoa_invert+0x9c>
    688a:	b4 e0       	ldi	r27, 0x04	; 4
    688c:	3c d0       	rcall	.+120    	; 0x6906 <__ultoa_invert+0x9c>
    688e:	67 0f       	add	r22, r23
    6890:	78 1f       	adc	r23, r24
    6892:	89 1f       	adc	r24, r25
    6894:	9a 1f       	adc	r25, r26
    6896:	a1 1d       	adc	r26, r1
    6898:	68 0f       	add	r22, r24
    689a:	79 1f       	adc	r23, r25
    689c:	8a 1f       	adc	r24, r26
    689e:	91 1d       	adc	r25, r1
    68a0:	a1 1d       	adc	r26, r1
    68a2:	6a 0f       	add	r22, r26
    68a4:	71 1d       	adc	r23, r1
    68a6:	81 1d       	adc	r24, r1
    68a8:	91 1d       	adc	r25, r1
    68aa:	a1 1d       	adc	r26, r1
    68ac:	20 d0       	rcall	.+64     	; 0x68ee <__ultoa_invert+0x84>
    68ae:	09 f4       	brne	.+2      	; 0x68b2 <__ultoa_invert+0x48>
    68b0:	68 94       	set
    68b2:	3f 91       	pop	r19
    68b4:	2a e0       	ldi	r18, 0x0A	; 10
    68b6:	26 9f       	mul	r18, r22
    68b8:	11 24       	eor	r1, r1
    68ba:	30 19       	sub	r19, r0
    68bc:	30 5d       	subi	r19, 0xD0	; 208
    68be:	31 93       	st	Z+, r19
    68c0:	de f6       	brtc	.-74     	; 0x6878 <__ultoa_invert+0xe>
    68c2:	cf 01       	movw	r24, r30
    68c4:	08 95       	ret
    68c6:	46 2f       	mov	r20, r22
    68c8:	47 70       	andi	r20, 0x07	; 7
    68ca:	40 5d       	subi	r20, 0xD0	; 208
    68cc:	41 93       	st	Z+, r20
    68ce:	b3 e0       	ldi	r27, 0x03	; 3
    68d0:	0f d0       	rcall	.+30     	; 0x68f0 <__ultoa_invert+0x86>
    68d2:	c9 f7       	brne	.-14     	; 0x68c6 <__ultoa_invert+0x5c>
    68d4:	f6 cf       	rjmp	.-20     	; 0x68c2 <__ultoa_invert+0x58>
    68d6:	46 2f       	mov	r20, r22
    68d8:	4f 70       	andi	r20, 0x0F	; 15
    68da:	40 5d       	subi	r20, 0xD0	; 208
    68dc:	4a 33       	cpi	r20, 0x3A	; 58
    68de:	18 f0       	brcs	.+6      	; 0x68e6 <__ultoa_invert+0x7c>
    68e0:	49 5d       	subi	r20, 0xD9	; 217
    68e2:	31 fd       	sbrc	r19, 1
    68e4:	40 52       	subi	r20, 0x20	; 32
    68e6:	41 93       	st	Z+, r20
    68e8:	02 d0       	rcall	.+4      	; 0x68ee <__ultoa_invert+0x84>
    68ea:	a9 f7       	brne	.-22     	; 0x68d6 <__ultoa_invert+0x6c>
    68ec:	ea cf       	rjmp	.-44     	; 0x68c2 <__ultoa_invert+0x58>
    68ee:	b4 e0       	ldi	r27, 0x04	; 4
    68f0:	a6 95       	lsr	r26
    68f2:	97 95       	ror	r25
    68f4:	87 95       	ror	r24
    68f6:	77 95       	ror	r23
    68f8:	67 95       	ror	r22
    68fa:	ba 95       	dec	r27
    68fc:	c9 f7       	brne	.-14     	; 0x68f0 <__ultoa_invert+0x86>
    68fe:	00 97       	sbiw	r24, 0x00	; 0
    6900:	61 05       	cpc	r22, r1
    6902:	71 05       	cpc	r23, r1
    6904:	08 95       	ret
    6906:	9b 01       	movw	r18, r22
    6908:	ac 01       	movw	r20, r24
    690a:	0a 2e       	mov	r0, r26
    690c:	06 94       	lsr	r0
    690e:	57 95       	ror	r21
    6910:	47 95       	ror	r20
    6912:	37 95       	ror	r19
    6914:	27 95       	ror	r18
    6916:	ba 95       	dec	r27
    6918:	c9 f7       	brne	.-14     	; 0x690c <__ultoa_invert+0xa2>
    691a:	62 0f       	add	r22, r18
    691c:	73 1f       	adc	r23, r19
    691e:	84 1f       	adc	r24, r20
    6920:	95 1f       	adc	r25, r21
    6922:	a0 1d       	adc	r26, r0
    6924:	08 95       	ret

00006926 <__ctype_isfalse>:
    6926:	99 27       	eor	r25, r25
    6928:	88 27       	eor	r24, r24

0000692a <__ctype_istrue>:
    692a:	08 95       	ret

0000692c <__divmodsi4>:
    692c:	05 2e       	mov	r0, r21
    692e:	97 fb       	bst	r25, 7
    6930:	16 f4       	brtc	.+4      	; 0x6936 <__divmodsi4+0xa>
    6932:	00 94       	com	r0
    6934:	0f d0       	rcall	.+30     	; 0x6954 <__negsi2>
    6936:	57 fd       	sbrc	r21, 7
    6938:	05 d0       	rcall	.+10     	; 0x6944 <__divmodsi4_neg2>
    693a:	cf d8       	rcall	.-3682   	; 0x5ada <__udivmodsi4>
    693c:	07 fc       	sbrc	r0, 7
    693e:	02 d0       	rcall	.+4      	; 0x6944 <__divmodsi4_neg2>
    6940:	46 f4       	brtc	.+16     	; 0x6952 <__divmodsi4_exit>
    6942:	08 c0       	rjmp	.+16     	; 0x6954 <__negsi2>

00006944 <__divmodsi4_neg2>:
    6944:	50 95       	com	r21
    6946:	40 95       	com	r20
    6948:	30 95       	com	r19
    694a:	21 95       	neg	r18
    694c:	3f 4f       	sbci	r19, 0xFF	; 255
    694e:	4f 4f       	sbci	r20, 0xFF	; 255
    6950:	5f 4f       	sbci	r21, 0xFF	; 255

00006952 <__divmodsi4_exit>:
    6952:	08 95       	ret

00006954 <__negsi2>:
    6954:	90 95       	com	r25
    6956:	80 95       	com	r24
    6958:	70 95       	com	r23
    695a:	61 95       	neg	r22
    695c:	7f 4f       	sbci	r23, 0xFF	; 255
    695e:	8f 4f       	sbci	r24, 0xFF	; 255
    6960:	9f 4f       	sbci	r25, 0xFF	; 255
    6962:	08 95       	ret

00006964 <__mulshisi3>:
    6964:	b7 ff       	sbrs	r27, 7
    6966:	db c8       	rjmp	.-3658   	; 0x5b1e <__muluhisi3>

00006968 <__mulohisi3>:
    6968:	da d8       	rcall	.-3660   	; 0x5b1e <__muluhisi3>
    696a:	82 1b       	sub	r24, r18
    696c:	93 0b       	sbc	r25, r19
    696e:	08 95       	ret

00006970 <_exit>:
    6970:	f8 94       	cli

00006972 <__stop_program>:
    6972:	ff cf       	rjmp	.-2      	; 0x6972 <__stop_program>
