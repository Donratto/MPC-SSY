
Ping.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000234  00800200  000078fa  0000798e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000078fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000216f  00800434  00800434  00007bc2  2**0
                  ALLOC
  3 .noinit       00000001  008025a3  008025a3  00007bc2  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00007bc2  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007c20  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000a40  00000000  00000000  00007c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001006b  00000000  00000000  000086a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000045af  00000000  00000000  0001870b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006d50  00000000  00000000  0001ccba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000027a4  00000000  00000000  00023a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000369e  00000000  00000000  000261b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000cfb3  00000000  00000000  0002984e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a10  00000000  00000000  00036801  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e0 c1       	rjmp	.+960    	; 0x3c2 <__ctors_end>
       2:	00 00       	nop
       4:	0e c2       	rjmp	.+1052   	; 0x422 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c c2       	rjmp	.+1048   	; 0x422 <__bad_interrupt>
       a:	00 00       	nop
       c:	0a c2       	rjmp	.+1044   	; 0x422 <__bad_interrupt>
       e:	00 00       	nop
      10:	08 c2       	rjmp	.+1040   	; 0x422 <__bad_interrupt>
      12:	00 00       	nop
      14:	06 c2       	rjmp	.+1036   	; 0x422 <__bad_interrupt>
      16:	00 00       	nop
      18:	04 c2       	rjmp	.+1032   	; 0x422 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	02 c2       	rjmp	.+1028   	; 0x422 <__bad_interrupt>
      1e:	00 00       	nop
      20:	00 c2       	rjmp	.+1024   	; 0x422 <__bad_interrupt>
      22:	00 00       	nop
      24:	fe c1       	rjmp	.+1020   	; 0x422 <__bad_interrupt>
      26:	00 00       	nop
      28:	fc c1       	rjmp	.+1016   	; 0x422 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fa c1       	rjmp	.+1012   	; 0x422 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f8 c1       	rjmp	.+1008   	; 0x422 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 75 29 	jmp	0x52ea	; 0x52ea <__vector_13>
      38:	f4 c1       	rjmp	.+1000   	; 0x422 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f2 c1       	rjmp	.+996    	; 0x422 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f0 c1       	rjmp	.+992    	; 0x422 <__bad_interrupt>
      42:	00 00       	nop
      44:	ee c1       	rjmp	.+988    	; 0x422 <__bad_interrupt>
      46:	00 00       	nop
      48:	ec c1       	rjmp	.+984    	; 0x422 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ea c1       	rjmp	.+980    	; 0x422 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e8 c1       	rjmp	.+976    	; 0x422 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 54 26 	jmp	0x4ca8	; 0x4ca8 <__vector_21>
      58:	e4 c1       	rjmp	.+968    	; 0x422 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e2 c1       	rjmp	.+964    	; 0x422 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e0 c1       	rjmp	.+960    	; 0x422 <__bad_interrupt>
      62:	00 00       	nop
      64:	de c1       	rjmp	.+956    	; 0x422 <__bad_interrupt>
      66:	00 00       	nop
      68:	dc c1       	rjmp	.+952    	; 0x422 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	da c1       	rjmp	.+948    	; 0x422 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d8 c1       	rjmp	.+944    	; 0x422 <__bad_interrupt>
      72:	00 00       	nop
      74:	d6 c1       	rjmp	.+940    	; 0x422 <__bad_interrupt>
      76:	00 00       	nop
      78:	d4 c1       	rjmp	.+936    	; 0x422 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d2 c1       	rjmp	.+932    	; 0x422 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d0 c1       	rjmp	.+928    	; 0x422 <__bad_interrupt>
      82:	00 00       	nop
      84:	ce c1       	rjmp	.+924    	; 0x422 <__bad_interrupt>
      86:	00 00       	nop
      88:	cc c1       	rjmp	.+920    	; 0x422 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ca c1       	rjmp	.+916    	; 0x422 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 4e 2a 	jmp	0x549c	; 0x549c <__vector_36>
      94:	0c 94 32 2a 	jmp	0x5464	; 0x5464 <__vector_37>
      98:	c4 c1       	rjmp	.+904    	; 0x422 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c2 c1       	rjmp	.+900    	; 0x422 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c0 c1       	rjmp	.+896    	; 0x422 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	be c1       	rjmp	.+892    	; 0x422 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__vector_42>
      ac:	ba c1       	rjmp	.+884    	; 0x422 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b8 c1       	rjmp	.+880    	; 0x422 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b6 c1       	rjmp	.+876    	; 0x422 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b4 c1       	rjmp	.+872    	; 0x422 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b2 c1       	rjmp	.+868    	; 0x422 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b0 c1       	rjmp	.+864    	; 0x422 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ae c1       	rjmp	.+860    	; 0x422 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ac c1       	rjmp	.+856    	; 0x422 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	aa c1       	rjmp	.+852    	; 0x422 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a8 c1       	rjmp	.+848    	; 0x422 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a6 c1       	rjmp	.+844    	; 0x422 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a4 c1       	rjmp	.+840    	; 0x422 <__bad_interrupt>
      da:	00 00       	nop
      dc:	a2 c1       	rjmp	.+836    	; 0x422 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a0 c1       	rjmp	.+832    	; 0x422 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9e c1       	rjmp	.+828    	; 0x422 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	9c c1       	rjmp	.+824    	; 0x422 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	9a c1       	rjmp	.+820    	; 0x422 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	98 c1       	rjmp	.+816    	; 0x422 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	96 c1       	rjmp	.+812    	; 0x422 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	94 c1       	rjmp	.+808    	; 0x422 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	92 c1       	rjmp	.+804    	; 0x422 <__bad_interrupt>
      fe:	00 00       	nop
     100:	90 c1       	rjmp	.+800    	; 0x422 <__bad_interrupt>
     102:	00 00       	nop
     104:	8e c1       	rjmp	.+796    	; 0x422 <__bad_interrupt>
     106:	00 00       	nop
     108:	8c c1       	rjmp	.+792    	; 0x422 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	8a c1       	rjmp	.+788    	; 0x422 <__bad_interrupt>
     10e:	00 00       	nop
     110:	88 c1       	rjmp	.+784    	; 0x422 <__bad_interrupt>
     112:	00 00       	nop
     114:	86 c1       	rjmp	.+780    	; 0x422 <__bad_interrupt>
     116:	00 00       	nop
     118:	84 c1       	rjmp	.+776    	; 0x422 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	82 c1       	rjmp	.+772    	; 0x422 <__bad_interrupt>
     11e:	00 00       	nop
     120:	80 c1       	rjmp	.+768    	; 0x422 <__bad_interrupt>
     122:	00 00       	nop
     124:	7e c1       	rjmp	.+764    	; 0x422 <__bad_interrupt>
     126:	00 00       	nop
     128:	7c c1       	rjmp	.+760    	; 0x422 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	7a c1       	rjmp	.+756    	; 0x422 <__bad_interrupt>
     12e:	00 00       	nop
     130:	78 c1       	rjmp	.+752    	; 0x422 <__bad_interrupt>
     132:	00 00       	nop
     134:	e4 0f       	add	r30, r20
     136:	f7 0f       	add	r31, r23
     138:	49 10       	cpse	r4, r9
     13a:	49 10       	cpse	r4, r9
     13c:	f7 0f       	add	r31, r23
     13e:	28 10       	cpse	r2, r8
     140:	f7 0f       	add	r31, r23
     142:	f7 0f       	add	r31, r23
     144:	f7 0f       	add	r31, r23
     146:	49 10       	cpse	r4, r9
     148:	49 10       	cpse	r4, r9
     14a:	f7 0f       	add	r31, r23
     14c:	07 10       	cpse	r0, r7
     14e:	49 10       	cpse	r4, r9
     150:	17 10       	cpse	r1, r7

00000152 <__trampolines_end>:
     152:	63 64       	ori	r22, 0x43	; 67
     154:	69 6e       	ori	r22, 0xE9	; 233
     156:	6f 70       	andi	r22, 0x0F	; 15
     158:	73 75       	andi	r23, 0x53	; 83
     15a:	78 58       	subi	r23, 0x88	; 136
     15c:	5b 00       	.word	0x005b	; ????

0000015e <__c.3572>:
     15e:	25 73 00                                            %s.

00000161 <__c.3749>:
     161:	55 70 74 69 6d 65 3a 20 25 6c 75 20 73 65 63 3b     Uptime: %lu sec;
     171:	20 46 72 65 65 20 52 41 4d 3a 20 25 64 20 62 79      Free RAM: %d by
     181:	74 65 73 0d 0a 00                                   tes...

00000187 <__c.3733>:
     187:	2d 2d 4d 51 54 54 20 43 6f 6e 6e 65 63 74 65 64     --MQTT Connected
     197:	20 45 52 52 4f 52 3a 20 25 6c 64 0d 0a 00            ERROR: %ld...

000001a5 <__c.3737>:
     1a5:	53 75 62 73 63 72 69 62 65 64 20 28 25 73 29 20     Subscribed (%s) 
     1b5:	25 64 0d 0a 00                                      %d...

000001ba <__c.3731>:
     1ba:	2b 2b 4d 51 54 54 20 43 6f 6e 6e 65 63 74 65 64     ++MQTT Connected
     1ca:	20 53 55 43 43 45 53 53 3a 20 25 6c 64 0d 0a 00      SUCCESS: %ld...

000001da <__c.3728>:
     1da:	3e 3e 54 72 79 69 6e 67 20 63 6f 6e 6e 65 63 74     >>Trying connect
     1ea:	20 74 6f 20 4d 51 54 54 20 62 72 6f 6b 65 72 3a      to MQTT broker:
     1fa:	20 25 64 2e 25 64 2e 25 64 2e 25 64 20 2e 2e 0d      %d.%d.%d.%d ...
     20a:	0a 00                                               ..

0000020c <__c.3723>:
     20c:	3e 20 54 72 61 6e 73 6c 61 74 65 64 20 25 73 20     > Translated %s 
     21c:	74 6f 20 5b 25 64 2e 25 64 2e 25 64 2e 25 64 5d     to [%d.%d.%d.%d]
     22c:	0d 0a 0d 0a 00                                      .....

00000231 <__c.3721>:
     231:	3e 20 44 4e 53 20 46 61 69 6c 65 64 0d 0a 00        > DNS Failed...

00000240 <__c.3719>:
     240:	3e 20 4d 41 58 5f 44 4f 4d 41 49 4e 5f 4e 41 4d     > MAX_DOMAIN_NAM
     250:	45 20 69 73 20 74 6f 6f 20 73 6d 61 6c 6c 2e 20     E is too small. 
     260:	53 68 6f 75 6c 64 20 62 65 20 72 65 64 65 66 69     Should be redefi
     270:	6e 65 64 20 69 74 2e 0d 0a 00                       ned it....

0000027a <__c.3717>:
     27a:	3e 20 32 6e 64 20 44 4e 53 20 52 65 73 70 6f 6e     > 2nd DNS Respon
     28a:	64 0d 0a 00                                         d...

0000028e <__c.3715>:
     28e:	3e 20 31 73 74 20 44 4e 53 20 52 65 73 70 6f 6e     > 1st DNS Respon
     29e:	64 0d 0a 00                                         d...

000002a2 <__c.3712>:
     2a2:	3e 20 54 61 72 67 65 74 20 44 6f 6d 61 69 6e 20     > Target Domain 
     2b2:	4e 61 6d 65 20 3a 20 25 73 0d 0a 00                 Name : %s...

000002be <__c.3710>:
     2be:	25 53 00                                            %S.

000002c1 <__c.3632>:
     2c1:	43 6f 6e 6e 65 63 74 69 6f 6e 20 77 69 74 68 20     Connection with 
     2d1:	4d 51 54 54 20 42 72 6f 6b 65 72 20 77 61 73 20     MQTT Broker was 
     2e1:	6c 6f 73 74 21 21 0d 0a 52 65 62 6f 6f 74 20 74     lost!!..Reboot t
     2f1:	68 65 20 62 6f 61 72 64 2e 2e 0d 0a 00              he board.....

000002fe <__c.3630>:
     2fe:	20 2d 20 45 52 52 4f 52 0d 0a 00                     - ERROR...

00000309 <__c.3628>:
     309:	20 2d 20 4f 4b 0d 0a 00                              - OK...

00000311 <__c.3625>:
     311:	3e 3e 4d 51 54 54 20 70 75 62 20 6d 73 67 20 25     >>MQTT pub msg %
     321:	6c 75 20 00                                         lu .

00000325 <__c.3614>:
     325:	0d 0a 48 6f 64 6e 6f 74 61 20 70 72 6f 6d 65 6e     ..Hodnota promen
     335:	6e 65 20 6d 71 74 74 5f 74 69 6d 65 72 20 6a 65     ne mqtt_timer je
     345:	3a 20 25 64 0d 0a 00                                : %d...

0000034c <__c.3612>:
     34c:	0d 0a 48 6f 64 6e 6f 74 61 20 70 72 6f 6d 65 6e     ..Hodnota promen
     35c:	6e 65 20 6d 71 74 74 5f 74 69 6d 65 72 20 6a 65     ne mqtt_timer je
     36c:	3a 20 25 64 0d 0a 00                                : %d...

00000373 <__c.3602>:
     373:	3c 3c 4d 51 54 54 20 53 75 62 3a 20 5b 25 73 5d     <<MQTT Sub: [%s]
     383:	20 25 73 00                                          %s.

00000387 <str_prog_name>:
     387:	0d 0a 41 74 4d 65 67 61 32 35 36 52 46 52 32 20     ..AtMega256RFR2 
     397:	4c 57 4d 20 2d 3e 20 4d 51 54 54 20 47 61 74 65     LWM -> MQTT Gate
     3a7:	77 61 79 20 57 49 5a 4e 45 54 5f 35 35 30 30 20     way WIZNET_5500 
     3b7:	45 54 48 45 52 4e 45 54 0d 0a 00                    ETHERNET...

000003c2 <__ctors_end>:
     3c2:	11 24       	eor	r1, r1
     3c4:	1f be       	out	0x3f, r1	; 63
     3c6:	cf ef       	ldi	r28, 0xFF	; 255
     3c8:	d1 e8       	ldi	r29, 0x81	; 129
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	00 e0       	ldi	r16, 0x00	; 0
     3d0:	0c bf       	out	0x3c, r16	; 60

000003d2 <get_mcusr>:
			(int16_t) ip_query[2],\
			(int16_t) ip_query[3],\
			id_query,\
			seq_query,\
			len_query);
}
     3d2:	84 b7       	in	r24, 0x34	; 52
     3d4:	80 93 a3 25 	sts	0x25A3, r24	; 0x8025a3 <__bss_end>
     3d8:	14 be       	out	0x34, r1	; 52
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	a8 95       	wdr
     3e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3e4:	88 61       	ori	r24, 0x18	; 24
     3e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3ea:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3ee:	0f be       	out	0x3f, r0	; 63

000003f0 <__do_copy_data>:
     3f0:	14 e0       	ldi	r17, 0x04	; 4
     3f2:	a0 e0       	ldi	r26, 0x00	; 0
     3f4:	b2 e0       	ldi	r27, 0x02	; 2
     3f6:	ea ef       	ldi	r30, 0xFA	; 250
     3f8:	f8 e7       	ldi	r31, 0x78	; 120
     3fa:	00 e0       	ldi	r16, 0x00	; 0
     3fc:	0b bf       	out	0x3b, r16	; 59
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     400:	07 90       	elpm	r0, Z+
     402:	0d 92       	st	X+, r0
     404:	a4 33       	cpi	r26, 0x34	; 52
     406:	b1 07       	cpc	r27, r17
     408:	d9 f7       	brne	.-10     	; 0x400 <__LOCK_REGION_LENGTH__>

0000040a <__do_clear_bss>:
     40a:	25 e2       	ldi	r18, 0x25	; 37
     40c:	a4 e3       	ldi	r26, 0x34	; 52
     40e:	b4 e0       	ldi	r27, 0x04	; 4
     410:	01 c0       	rjmp	.+2      	; 0x414 <.do_clear_bss_start>

00000412 <.do_clear_bss_loop>:
     412:	1d 92       	st	X+, r1

00000414 <.do_clear_bss_start>:
     414:	a3 3a       	cpi	r26, 0xA3	; 163
     416:	b2 07       	cpc	r27, r18
     418:	e1 f7       	brne	.-8      	; 0x412 <.do_clear_bss_loop>
     41a:	0e 94 d6 26 	call	0x4dac	; 0x4dac <main>
     41e:	0c 94 7b 3c 	jmp	0x78f6	; 0x78f6 <_exit>

00000422 <__bad_interrupt>:
     422:	ee cd       	rjmp	.-1060   	; 0x0 <__vectors>

00000424 <close>:
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
}
     424:	bf 92       	push	r11
     426:	cf 92       	push	r12
     428:	df 92       	push	r13
     42a:	ef 92       	push	r14
     42c:	ff 92       	push	r15
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	89 30       	cpi	r24, 0x09	; 9
     438:	08 f0       	brcs	.+2      	; 0x43c <close+0x18>
     43a:	59 c0       	rjmp	.+178    	; 0x4ee <close+0xca>
     43c:	b8 2e       	mov	r11, r24
     43e:	08 2f       	mov	r16, r24
     440:	10 e0       	ldi	r17, 0x00	; 0
     442:	e8 01       	movw	r28, r16
     444:	cc 0f       	add	r28, r28
     446:	dd 1f       	adc	r29, r29
     448:	cc 0f       	add	r28, r28
     44a:	dd 1f       	adc	r29, r29
     44c:	21 96       	adiw	r28, 0x01	; 1
     44e:	cc 0f       	add	r28, r28
     450:	dd 1f       	adc	r29, r29
     452:	cc 0f       	add	r28, r28
     454:	dd 1f       	adc	r29, r29
     456:	cc 0f       	add	r28, r28
     458:	dd 1f       	adc	r29, r29
     45a:	6e 01       	movw	r12, r28
     45c:	d3 94       	inc	r13
     45e:	0d 2c       	mov	r0, r13
     460:	00 0c       	add	r0, r0
     462:	ee 08       	sbc	r14, r14
     464:	ff 08       	sbc	r15, r15
     466:	40 e1       	ldi	r20, 0x10	; 16
     468:	c7 01       	movw	r24, r14
     46a:	b6 01       	movw	r22, r12
     46c:	d4 d7       	rcall	.+4008   	; 0x1416 <WIZCHIP_WRITE>
     46e:	c7 01       	movw	r24, r14
     470:	b6 01       	movw	r22, r12
     472:	6a d7       	rcall	.+3796   	; 0x1348 <WIZCHIP_READ>
     474:	81 11       	cpse	r24, r1
     476:	fb cf       	rjmp	.-10     	; 0x46e <close+0x4a>
     478:	be 01       	movw	r22, r28
     47a:	7e 5f       	subi	r23, 0xFE	; 254
     47c:	07 2e       	mov	r0, r23
     47e:	00 0c       	add	r0, r0
     480:	88 0b       	sbc	r24, r24
     482:	99 0b       	sbc	r25, r25
     484:	4f e1       	ldi	r20, 0x1F	; 31
     486:	c7 d7       	rcall	.+3982   	; 0x1416 <WIZCHIP_WRITE>
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	02 c0       	rjmp	.+4      	; 0x492 <close+0x6e>
     48e:	88 0f       	add	r24, r24
     490:	99 1f       	adc	r25, r25
     492:	ba 94       	dec	r11
     494:	e2 f7       	brpl	.-8      	; 0x48e <close+0x6a>
     496:	80 95       	com	r24
     498:	90 95       	com	r25
     49a:	20 91 4e 04 	lds	r18, 0x044E	; 0x80044e <sock_io_mode>
     49e:	30 91 4f 04 	lds	r19, 0x044F	; 0x80044f <sock_io_mode+0x1>
     4a2:	28 23       	and	r18, r24
     4a4:	39 23       	and	r19, r25
     4a6:	30 93 4f 04 	sts	0x044F, r19	; 0x80044f <sock_io_mode+0x1>
     4aa:	20 93 4e 04 	sts	0x044E, r18	; 0x80044e <sock_io_mode>
     4ae:	20 91 4c 04 	lds	r18, 0x044C	; 0x80044c <sock_is_sending>
     4b2:	30 91 4d 04 	lds	r19, 0x044D	; 0x80044d <sock_is_sending+0x1>
     4b6:	82 23       	and	r24, r18
     4b8:	93 23       	and	r25, r19
     4ba:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <sock_is_sending+0x1>
     4be:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <sock_is_sending>
     4c2:	f8 01       	movw	r30, r16
     4c4:	ee 0f       	add	r30, r30
     4c6:	ff 1f       	adc	r31, r31
     4c8:	e4 5c       	subi	r30, 0xC4	; 196
     4ca:	fb 4f       	sbci	r31, 0xFB	; 251
     4cc:	11 82       	std	Z+1, r1	; 0x01
     4ce:	10 82       	st	Z, r1
     4d0:	f8 01       	movw	r30, r16
     4d2:	ec 5c       	subi	r30, 0xCC	; 204
     4d4:	fb 4f       	sbci	r31, 0xFB	; 251
     4d6:	10 82       	st	Z, r1
     4d8:	be 01       	movw	r22, r28
     4da:	7d 5f       	subi	r23, 0xFD	; 253
     4dc:	07 2e       	mov	r0, r23
     4de:	00 0c       	add	r0, r0
     4e0:	88 0b       	sbc	r24, r24
     4e2:	99 0b       	sbc	r25, r25
     4e4:	31 d7       	rcall	.+3682   	; 0x1348 <WIZCHIP_READ>
     4e6:	81 11       	cpse	r24, r1
     4e8:	f7 cf       	rjmp	.-18     	; 0x4d8 <close+0xb4>
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <close+0xcc>
     4ee:	8f ef       	ldi	r24, 0xFF	; 255
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	ff 90       	pop	r15
     4fa:	ef 90       	pop	r14
     4fc:	df 90       	pop	r13
     4fe:	cf 90       	pop	r12
     500:	bf 90       	pop	r11
     502:	08 95       	ret

00000504 <socket>:
     504:	4f 92       	push	r4
     506:	5f 92       	push	r5
     508:	6f 92       	push	r6
     50a:	7f 92       	push	r7
     50c:	af 92       	push	r10
     50e:	bf 92       	push	r11
     510:	cf 92       	push	r12
     512:	df 92       	push	r13
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	00 d0       	rcall	.+0      	; 0x522 <socket+0x1e>
     522:	1f 92       	push	r1
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	f8 2e       	mov	r15, r24
     52a:	56 2e       	mov	r5, r22
     52c:	3a 01       	movw	r6, r20
     52e:	e2 2e       	mov	r14, r18
     530:	28 e0       	ldi	r18, 0x08	; 8
     532:	28 17       	cp	r18, r24
     534:	08 f4       	brcc	.+2      	; 0x538 <socket+0x34>
     536:	c5 c0       	rjmp	.+394    	; 0x6c2 <socket+0x1be>
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	68 17       	cp	r22, r24
     53c:	39 f0       	breq	.+14     	; 0x54c <socket+0x48>
     53e:	68 17       	cp	r22, r24
     540:	08 f4       	brcc	.+2      	; 0x544 <socket+0x40>
     542:	c1 c0       	rjmp	.+386    	; 0x6c6 <socket+0x1c2>
     544:	24 e0       	ldi	r18, 0x04	; 4
     546:	26 17       	cp	r18, r22
     548:	a8 f4       	brcc	.+42     	; 0x574 <socket+0x70>
     54a:	bd c0       	rjmp	.+378    	; 0x6c6 <socket+0x1c2>
     54c:	24 e0       	ldi	r18, 0x04	; 4
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	ae 01       	movw	r20, r28
     552:	4f 5f       	subi	r20, 0xFF	; 255
     554:	5f 4f       	sbci	r21, 0xFF	; 255
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	7f e0       	ldi	r23, 0x0F	; 15
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	cd d7       	rcall	.+3994   	; 0x14fa <WIZCHIP_READ_BUF>
     560:	89 81       	ldd	r24, Y+1	; 0x01
     562:	9a 81       	ldd	r25, Y+2	; 0x02
     564:	ab 81       	ldd	r26, Y+3	; 0x03
     566:	bc 81       	ldd	r27, Y+4	; 0x04
     568:	89 2b       	or	r24, r25
     56a:	8a 2b       	or	r24, r26
     56c:	8b 2b       	or	r24, r27
     56e:	11 f4       	brne	.+4      	; 0x574 <socket+0x70>
     570:	8d ef       	ldi	r24, 0xFD	; 253
     572:	b2 c0       	rjmp	.+356    	; 0x6d8 <socket+0x1d4>
     574:	e2 fc       	sbrc	r14, 2
     576:	a9 c0       	rjmp	.+338    	; 0x6ca <socket+0x1c6>
     578:	ee 20       	and	r14, r14
     57a:	a9 f0       	breq	.+42     	; 0x5a6 <socket+0xa2>
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	58 16       	cp	r5, r24
     580:	21 f0       	breq	.+8      	; 0x58a <socket+0x86>
     582:	22 e0       	ldi	r18, 0x02	; 2
     584:	52 16       	cp	r5, r18
     586:	29 f0       	breq	.+10     	; 0x592 <socket+0x8e>
     588:	0e c0       	rjmp	.+28     	; 0x5a6 <socket+0xa2>
     58a:	8e 2d       	mov	r24, r14
     58c:	81 72       	andi	r24, 0x21	; 33
     58e:	59 f4       	brne	.+22     	; 0x5a6 <socket+0xa2>
     590:	9e c0       	rjmp	.+316    	; 0x6ce <socket+0x1ca>
     592:	e5 fe       	sbrs	r14, 5
     594:	03 c0       	rjmp	.+6      	; 0x59c <socket+0x98>
     596:	ee 20       	and	r14, r14
     598:	0c f0       	brlt	.+2      	; 0x59c <socket+0x98>
     59a:	9b c0       	rjmp	.+310    	; 0x6d2 <socket+0x1ce>
     59c:	e4 fe       	sbrs	r14, 4
     59e:	03 c0       	rjmp	.+6      	; 0x5a6 <socket+0xa2>
     5a0:	ee 20       	and	r14, r14
     5a2:	0c f0       	brlt	.+2      	; 0x5a6 <socket+0xa2>
     5a4:	98 c0       	rjmp	.+304    	; 0x6d6 <socket+0x1d2>
     5a6:	8f 2d       	mov	r24, r15
     5a8:	3d df       	rcall	.-390    	; 0x424 <close>
     5aa:	cf 2c       	mov	r12, r15
     5ac:	d1 2c       	mov	r13, r1
     5ae:	86 01       	movw	r16, r12
     5b0:	00 0f       	add	r16, r16
     5b2:	11 1f       	adc	r17, r17
     5b4:	00 0f       	add	r16, r16
     5b6:	11 1f       	adc	r17, r17
     5b8:	0f 5f       	subi	r16, 0xFF	; 255
     5ba:	1f 4f       	sbci	r17, 0xFF	; 255
     5bc:	00 0f       	add	r16, r16
     5be:	11 1f       	adc	r17, r17
     5c0:	00 0f       	add	r16, r16
     5c2:	11 1f       	adc	r17, r17
     5c4:	00 0f       	add	r16, r16
     5c6:	11 1f       	adc	r17, r17
     5c8:	4e 2d       	mov	r20, r14
     5ca:	40 7f       	andi	r20, 0xF0	; 240
     5cc:	45 29       	or	r20, r5
     5ce:	b8 01       	movw	r22, r16
     5d0:	01 2e       	mov	r0, r17
     5d2:	00 0c       	add	r0, r0
     5d4:	88 0b       	sbc	r24, r24
     5d6:	99 0b       	sbc	r25, r25
     5d8:	1e d7       	rcall	.+3644   	; 0x1416 <WIZCHIP_WRITE>
     5da:	61 14       	cp	r6, r1
     5dc:	71 04       	cpc	r7, r1
     5de:	91 f4       	brne	.+36     	; 0x604 <socket+0x100>
     5e0:	60 90 04 02 	lds	r6, 0x0204	; 0x800204 <sock_any_port>
     5e4:	70 90 05 02 	lds	r7, 0x0205	; 0x800205 <sock_any_port+0x1>
     5e8:	c3 01       	movw	r24, r6
     5ea:	01 96       	adiw	r24, 0x01	; 1
     5ec:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sock_any_port+0x1>
     5f0:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sock_any_port>
     5f4:	40 96       	adiw	r24, 0x10	; 16
     5f6:	31 f4       	brne	.+12     	; 0x604 <socket+0x100>
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 ec       	ldi	r25, 0xC0	; 192
     5fc:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sock_any_port+0x1>
     600:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sock_any_port>
     604:	b8 01       	movw	r22, r16
     606:	7c 5f       	subi	r23, 0xFC	; 252
     608:	07 2e       	mov	r0, r23
     60a:	00 0c       	add	r0, r0
     60c:	88 0b       	sbc	r24, r24
     60e:	99 0b       	sbc	r25, r25
     610:	47 2d       	mov	r20, r7
     612:	01 d7       	rcall	.+3586   	; 0x1416 <WIZCHIP_WRITE>
     614:	b8 01       	movw	r22, r16
     616:	7b 5f       	subi	r23, 0xFB	; 251
     618:	07 2e       	mov	r0, r23
     61a:	00 0c       	add	r0, r0
     61c:	88 0b       	sbc	r24, r24
     61e:	99 0b       	sbc	r25, r25
     620:	46 2d       	mov	r20, r6
     622:	f9 d6       	rcall	.+3570   	; 0x1416 <WIZCHIP_WRITE>
     624:	28 01       	movw	r4, r16
     626:	53 94       	inc	r5
     628:	05 2c       	mov	r0, r5
     62a:	00 0c       	add	r0, r0
     62c:	66 08       	sbc	r6, r6
     62e:	77 08       	sbc	r7, r7
     630:	41 e0       	ldi	r20, 0x01	; 1
     632:	c3 01       	movw	r24, r6
     634:	b2 01       	movw	r22, r4
     636:	ef d6       	rcall	.+3550   	; 0x1416 <WIZCHIP_WRITE>
     638:	c3 01       	movw	r24, r6
     63a:	b2 01       	movw	r22, r4
     63c:	85 d6       	rcall	.+3338   	; 0x1348 <WIZCHIP_READ>
     63e:	81 11       	cpse	r24, r1
     640:	fb cf       	rjmp	.-10     	; 0x638 <socket+0x134>
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0f 2c       	mov	r0, r15
     648:	02 c0       	rjmp	.+4      	; 0x64e <socket+0x14a>
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	0a 94       	dec	r0
     650:	e2 f7       	brpl	.-8      	; 0x64a <socket+0x146>
     652:	80 95       	com	r24
     654:	90 95       	com	r25
     656:	20 91 4e 04 	lds	r18, 0x044E	; 0x80044e <sock_io_mode>
     65a:	30 91 4f 04 	lds	r19, 0x044F	; 0x80044f <sock_io_mode+0x1>
     65e:	28 23       	and	r18, r24
     660:	39 23       	and	r19, r25
     662:	e0 fa       	bst	r14, 0
     664:	aa 24       	eor	r10, r10
     666:	a0 f8       	bld	r10, 0
     668:	b1 2c       	mov	r11, r1
     66a:	0f 2c       	mov	r0, r15
     66c:	02 c0       	rjmp	.+4      	; 0x672 <socket+0x16e>
     66e:	aa 0c       	add	r10, r10
     670:	bb 1c       	adc	r11, r11
     672:	0a 94       	dec	r0
     674:	e2 f7       	brpl	.-8      	; 0x66e <socket+0x16a>
     676:	a2 2a       	or	r10, r18
     678:	b3 2a       	or	r11, r19
     67a:	b0 92 4f 04 	sts	0x044F, r11	; 0x80044f <sock_io_mode+0x1>
     67e:	a0 92 4e 04 	sts	0x044E, r10	; 0x80044e <sock_io_mode>
     682:	20 91 4c 04 	lds	r18, 0x044C	; 0x80044c <sock_is_sending>
     686:	30 91 4d 04 	lds	r19, 0x044D	; 0x80044d <sock_is_sending+0x1>
     68a:	82 23       	and	r24, r18
     68c:	93 23       	and	r25, r19
     68e:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <sock_is_sending+0x1>
     692:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <sock_is_sending>
     696:	f6 01       	movw	r30, r12
     698:	ee 0f       	add	r30, r30
     69a:	ff 1f       	adc	r31, r31
     69c:	e4 5c       	subi	r30, 0xC4	; 196
     69e:	fb 4f       	sbci	r31, 0xFB	; 251
     6a0:	11 82       	std	Z+1, r1	; 0x01
     6a2:	10 82       	st	Z, r1
     6a4:	f6 01       	movw	r30, r12
     6a6:	ec 5c       	subi	r30, 0xCC	; 204
     6a8:	fb 4f       	sbci	r31, 0xFB	; 251
     6aa:	10 82       	st	Z, r1
     6ac:	b8 01       	movw	r22, r16
     6ae:	7d 5f       	subi	r23, 0xFD	; 253
     6b0:	07 2e       	mov	r0, r23
     6b2:	00 0c       	add	r0, r0
     6b4:	88 0b       	sbc	r24, r24
     6b6:	99 0b       	sbc	r25, r25
     6b8:	47 d6       	rcall	.+3214   	; 0x1348 <WIZCHIP_READ>
     6ba:	88 23       	and	r24, r24
     6bc:	b9 f3       	breq	.-18     	; 0x6ac <socket+0x1a8>
     6be:	8f 2d       	mov	r24, r15
     6c0:	0b c0       	rjmp	.+22     	; 0x6d8 <socket+0x1d4>
     6c2:	8f ef       	ldi	r24, 0xFF	; 255
     6c4:	09 c0       	rjmp	.+18     	; 0x6d8 <socket+0x1d4>
     6c6:	8b ef       	ldi	r24, 0xFB	; 251
     6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <socket+0x1d4>
     6ca:	8a ef       	ldi	r24, 0xFA	; 250
     6cc:	05 c0       	rjmp	.+10     	; 0x6d8 <socket+0x1d4>
     6ce:	8a ef       	ldi	r24, 0xFA	; 250
     6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <socket+0x1d4>
     6d2:	8a ef       	ldi	r24, 0xFA	; 250
     6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <socket+0x1d4>
     6d6:	8a ef       	ldi	r24, 0xFA	; 250
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
     6de:	0f 90       	pop	r0
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	df 90       	pop	r13
     6ee:	cf 90       	pop	r12
     6f0:	bf 90       	pop	r11
     6f2:	af 90       	pop	r10
     6f4:	7f 90       	pop	r7
     6f6:	6f 90       	pop	r6
     6f8:	5f 90       	pop	r5
     6fa:	4f 90       	pop	r4
     6fc:	08 95       	ret

000006fe <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
     6fe:	8f 92       	push	r8
     700:	9f 92       	push	r9
     702:	af 92       	push	r10
     704:	bf 92       	push	r11
     706:	cf 92       	push	r12
     708:	df 92       	push	r13
     70a:	ef 92       	push	r14
     70c:	ff 92       	push	r15
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
   CHECK_SOCKNUM();
     714:	89 30       	cpi	r24, 0x09	; 9
     716:	08 f0       	brcs	.+2      	; 0x71a <connect+0x1c>
     718:	ac c0       	rjmp	.+344    	; 0x872 <connect+0x174>
     71a:	6a 01       	movw	r12, r20
     71c:	7b 01       	movw	r14, r22
     71e:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     720:	c8 2f       	mov	r28, r24
     722:	d0 e0       	ldi	r29, 0x00	; 0
     724:	cc 0f       	add	r28, r28
     726:	dd 1f       	adc	r29, r29
     728:	cc 0f       	add	r28, r28
     72a:	dd 1f       	adc	r29, r29
     72c:	21 96       	adiw	r28, 0x01	; 1
     72e:	cc 0f       	add	r28, r28
     730:	dd 1f       	adc	r29, r29
     732:	cc 0f       	add	r28, r28
     734:	dd 1f       	adc	r29, r29
     736:	cc 0f       	add	r28, r28
     738:	dd 1f       	adc	r29, r29
     73a:	be 01       	movw	r22, r28
     73c:	0d 2e       	mov	r0, r29
     73e:	00 0c       	add	r0, r0
     740:	88 0b       	sbc	r24, r24
     742:	99 0b       	sbc	r25, r25
     744:	01 d6       	rcall	.+3074   	; 0x1348 <WIZCHIP_READ>
     746:	8f 70       	andi	r24, 0x0F	; 15
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	09 f0       	breq	.+2      	; 0x74e <connect+0x50>
     74c:	94 c0       	rjmp	.+296    	; 0x876 <connect+0x178>
   CHECK_SOCKINIT();
     74e:	4e 01       	movw	r8, r28
     750:	8d ef       	ldi	r24, 0xFD	; 253
     752:	98 1a       	sub	r9, r24
     754:	09 2c       	mov	r0, r9
     756:	00 0c       	add	r0, r0
     758:	aa 08       	sbc	r10, r10
     75a:	bb 08       	sbc	r11, r11
     75c:	c5 01       	movw	r24, r10
     75e:	b4 01       	movw	r22, r8
     760:	f3 d5       	rcall	.+3046   	; 0x1348 <WIZCHIP_READ>
     762:	83 31       	cpi	r24, 0x13	; 19
     764:	09 f0       	breq	.+2      	; 0x768 <connect+0x6a>
     766:	89 c0       	rjmp	.+274    	; 0x87a <connect+0x17c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
     768:	f7 01       	movw	r30, r14
     76a:	40 81       	ld	r20, Z
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
     772:	76 2f       	mov	r23, r22
     774:	65 2f       	mov	r22, r21
     776:	54 2f       	mov	r21, r20
     778:	44 27       	eor	r20, r20
     77a:	81 81       	ldd	r24, Z+1	; 0x01
     77c:	48 0f       	add	r20, r24
     77e:	51 1d       	adc	r21, r1
     780:	61 1d       	adc	r22, r1
     782:	71 1d       	adc	r23, r1
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
     784:	76 2f       	mov	r23, r22
     786:	65 2f       	mov	r22, r21
     788:	54 2f       	mov	r21, r20
     78a:	44 27       	eor	r20, r20
     78c:	82 81       	ldd	r24, Z+2	; 0x02
     78e:	48 0f       	add	r20, r24
     790:	51 1d       	adc	r21, r1
     792:	61 1d       	adc	r22, r1
     794:	71 1d       	adc	r23, r1
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
     796:	76 2f       	mov	r23, r22
     798:	65 2f       	mov	r22, r21
     79a:	54 2f       	mov	r21, r20
     79c:	44 27       	eor	r20, r20
     79e:	83 81       	ldd	r24, Z+3	; 0x03
     7a0:	48 0f       	add	r20, r24
     7a2:	51 1d       	adc	r21, r1
     7a4:	61 1d       	adc	r22, r1
     7a6:	71 1d       	adc	r23, r1
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
     7a8:	41 50       	subi	r20, 0x01	; 1
     7aa:	51 09       	sbc	r21, r1
     7ac:	61 09       	sbc	r22, r1
     7ae:	71 09       	sbc	r23, r1
     7b0:	4e 3f       	cpi	r20, 0xFE	; 254
     7b2:	5f 4f       	sbci	r21, 0xFF	; 255
     7b4:	6f 4f       	sbci	r22, 0xFF	; 255
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	08 f0       	brcs	.+2      	; 0x7bc <connect+0xbe>
     7ba:	61 c0       	rjmp	.+194    	; 0x87e <connect+0x180>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
     7bc:	c1 14       	cp	r12, r1
     7be:	d1 04       	cpc	r13, r1
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <connect+0xc6>
     7c2:	5f c0       	rjmp	.+190    	; 0x882 <connect+0x184>
	setSn_DIPR(sn,addr);
     7c4:	be 01       	movw	r22, r28
     7c6:	74 5f       	subi	r23, 0xF4	; 244
     7c8:	07 2e       	mov	r0, r23
     7ca:	00 0c       	add	r0, r0
     7cc:	88 0b       	sbc	r24, r24
     7ce:	99 0b       	sbc	r25, r25
     7d0:	24 e0       	ldi	r18, 0x04	; 4
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	a7 01       	movw	r20, r14
     7d6:	13 d7       	rcall	.+3622   	; 0x15fe <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
     7d8:	be 01       	movw	r22, r28
     7da:	70 5f       	subi	r23, 0xF0	; 240
     7dc:	07 2e       	mov	r0, r23
     7de:	00 0c       	add	r0, r0
     7e0:	88 0b       	sbc	r24, r24
     7e2:	99 0b       	sbc	r25, r25
     7e4:	4d 2d       	mov	r20, r13
     7e6:	17 d6       	rcall	.+3118   	; 0x1416 <WIZCHIP_WRITE>
     7e8:	be 01       	movw	r22, r28
     7ea:	7f 5e       	subi	r23, 0xEF	; 239
     7ec:	07 2e       	mov	r0, r23
     7ee:	00 0c       	add	r0, r0
     7f0:	88 0b       	sbc	r24, r24
     7f2:	99 0b       	sbc	r25, r25
     7f4:	4c 2d       	mov	r20, r12
     7f6:	0f d6       	rcall	.+3102   	; 0x1416 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
     7f8:	6e 01       	movw	r12, r28
     7fa:	d3 94       	inc	r13
     7fc:	0d 2c       	mov	r0, r13
     7fe:	00 0c       	add	r0, r0
     800:	ee 08       	sbc	r14, r14
     802:	ff 08       	sbc	r15, r15
     804:	44 e0       	ldi	r20, 0x04	; 4
     806:	c7 01       	movw	r24, r14
     808:	b6 01       	movw	r22, r12
   while(getSn_CR(sn));
     80a:	05 d6       	rcall	.+3082   	; 0x1416 <WIZCHIP_WRITE>
     80c:	c7 01       	movw	r24, r14
     80e:	b6 01       	movw	r22, r12
     810:	9b d5       	rcall	.+2870   	; 0x1348 <WIZCHIP_READ>
     812:	81 11       	cpse	r24, r1
     814:	fb cf       	rjmp	.-10     	; 0x80c <connect+0x10e>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	02 c0       	rjmp	.+4      	; 0x820 <connect+0x122>
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	1a 95       	dec	r17
     822:	e2 f7       	brpl	.-8      	; 0x81c <connect+0x11e>
     824:	20 91 4e 04 	lds	r18, 0x044E	; 0x80044e <sock_io_mode>
     828:	30 91 4f 04 	lds	r19, 0x044F	; 0x80044f <sock_io_mode+0x1>
     82c:	82 23       	and	r24, r18
     82e:	93 23       	and	r25, r19
     830:	89 2b       	or	r24, r25
     832:	c1 f0       	breq	.+48     	; 0x864 <connect+0x166>
     834:	28 c0       	rjmp	.+80     	; 0x886 <connect+0x188>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
     836:	6e 01       	movw	r12, r28
     838:	ee ef       	ldi	r30, 0xFE	; 254
     83a:	de 1a       	sub	r13, r30
     83c:	0d 2c       	mov	r0, r13
     83e:	00 0c       	add	r0, r0
     840:	ee 08       	sbc	r14, r14
     842:	ff 08       	sbc	r15, r15
     844:	c7 01       	movw	r24, r14
     846:	b6 01       	movw	r22, r12
     848:	7f d5       	rcall	.+2814   	; 0x1348 <WIZCHIP_READ>
     84a:	83 ff       	sbrs	r24, 3
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
     84c:	06 c0       	rjmp	.+12     	; 0x85a <connect+0x15c>
     84e:	48 e0       	ldi	r20, 0x08	; 8
     850:	c7 01       	movw	r24, r14
     852:	b6 01       	movw	r22, r12
            return SOCKERR_TIMEOUT;
     854:	e0 d5       	rcall	.+3008   	; 0x1416 <WIZCHIP_WRITE>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
     856:	83 ef       	ldi	r24, 0xF3	; 243
     858:	19 c0       	rjmp	.+50     	; 0x88c <connect+0x18e>
     85a:	c5 01       	movw	r24, r10
     85c:	b4 01       	movw	r22, r8
     85e:	74 d5       	rcall	.+2792   	; 0x1348 <WIZCHIP_READ>
     860:	88 23       	and	r24, r24
	setSn_DIPR(sn,addr);
	setSn_DPORT(sn,port);
	setSn_CR(sn,Sn_CR_CONNECT);
   while(getSn_CR(sn));
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
     862:	99 f0       	breq	.+38     	; 0x88a <connect+0x18c>
     864:	c5 01       	movw	r24, r10
     866:	b4 01       	movw	r22, r8
     868:	6f d5       	rcall	.+2782   	; 0x1348 <WIZCHIP_READ>
     86a:	87 31       	cpi	r24, 0x17	; 23
     86c:	21 f7       	brne	.-56     	; 0x836 <connect+0x138>
		{
			return SOCKERR_SOCKCLOSED;
		}
	}
   
   return SOCK_OK;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	0d c0       	rjmp	.+26     	; 0x88c <connect+0x18e>
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
   CHECK_SOCKNUM();
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	0b c0       	rjmp	.+22     	; 0x88c <connect+0x18e>
   CHECK_SOCKMODE(Sn_MR_TCP);
     876:	8b ef       	ldi	r24, 0xFB	; 251
     878:	09 c0       	rjmp	.+18     	; 0x88c <connect+0x18e>
   CHECK_SOCKINIT();
     87a:	8d ef       	ldi	r24, 0xFD	; 253
     87c:	07 c0       	rjmp	.+14     	; 0x88c <connect+0x18e>
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
     87e:	84 ef       	ldi	r24, 0xF4	; 244
     880:	05 c0       	rjmp	.+10     	; 0x88c <connect+0x18e>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
     882:	85 ef       	ldi	r24, 0xF5	; 245
     884:	03 c0       	rjmp	.+6      	; 0x88c <connect+0x18e>
	setSn_DIPR(sn,addr);
	setSn_DPORT(sn,port);
	setSn_CR(sn,Sn_CR_CONNECT);
   while(getSn_CR(sn));
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	01 c0       	rjmp	.+2      	; 0x88c <connect+0x18e>
            return SOCKERR_TIMEOUT;
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
		{
			return SOCKERR_SOCKCLOSED;
     88a:	8c ef       	ldi	r24, 0xFC	; 252
		}
	}
   
   return SOCK_OK;
}
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	df 90       	pop	r13
     898:	cf 90       	pop	r12
     89a:	bf 90       	pop	r11
     89c:	af 90       	pop	r10
     89e:	9f 90       	pop	r9
     8a0:	8f 90       	pop	r8
     8a2:	08 95       	ret

000008a4 <disconnect>:

int8_t disconnect(uint8_t sn)
{
     8a4:	cf 92       	push	r12
     8a6:	df 92       	push	r13
     8a8:	ef 92       	push	r14
     8aa:	ff 92       	push	r15
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
   CHECK_SOCKNUM();
     8b2:	89 30       	cpi	r24, 0x09	; 9
     8b4:	08 f0       	brcs	.+2      	; 0x8b8 <disconnect+0x14>
     8b6:	5d c0       	rjmp	.+186    	; 0x972 <disconnect+0xce>
     8b8:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     8ba:	c8 2f       	mov	r28, r24
     8bc:	d0 e0       	ldi	r29, 0x00	; 0
     8be:	cc 0f       	add	r28, r28
     8c0:	dd 1f       	adc	r29, r29
     8c2:	cc 0f       	add	r28, r28
     8c4:	dd 1f       	adc	r29, r29
     8c6:	21 96       	adiw	r28, 0x01	; 1
     8c8:	cc 0f       	add	r28, r28
     8ca:	dd 1f       	adc	r29, r29
     8cc:	cc 0f       	add	r28, r28
     8ce:	dd 1f       	adc	r29, r29
     8d0:	cc 0f       	add	r28, r28
     8d2:	dd 1f       	adc	r29, r29
     8d4:	be 01       	movw	r22, r28
     8d6:	0d 2e       	mov	r0, r29
     8d8:	00 0c       	add	r0, r0
     8da:	88 0b       	sbc	r24, r24
     8dc:	99 0b       	sbc	r25, r25
     8de:	34 d5       	rcall	.+2664   	; 0x1348 <WIZCHIP_READ>
     8e0:	8f 70       	andi	r24, 0x0F	; 15
     8e2:	81 30       	cpi	r24, 0x01	; 1
     8e4:	09 f0       	breq	.+2      	; 0x8e8 <disconnect+0x44>
     8e6:	47 c0       	rjmp	.+142    	; 0x976 <disconnect+0xd2>
	setSn_CR(sn,Sn_CR_DISCON);
     8e8:	6e 01       	movw	r12, r28
     8ea:	d3 94       	inc	r13
     8ec:	0d 2c       	mov	r0, r13
     8ee:	00 0c       	add	r0, r0
     8f0:	ee 08       	sbc	r14, r14
     8f2:	ff 08       	sbc	r15, r15
     8f4:	48 e0       	ldi	r20, 0x08	; 8
     8f6:	c7 01       	movw	r24, r14
     8f8:	b6 01       	movw	r22, r12
     8fa:	8d d5       	rcall	.+2842   	; 0x1416 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
     8fc:	c7 01       	movw	r24, r14
     8fe:	b6 01       	movw	r22, r12
     900:	23 d5       	rcall	.+2630   	; 0x1348 <WIZCHIP_READ>
     902:	81 11       	cpse	r24, r1
     904:	fb cf       	rjmp	.-10     	; 0x8fc <disconnect+0x58>
	sock_is_sending &= ~(1<<sn);
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	01 2e       	mov	r0, r17
     90c:	02 c0       	rjmp	.+4      	; 0x912 <disconnect+0x6e>
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	0a 94       	dec	r0
     914:	e2 f7       	brpl	.-8      	; 0x90e <disconnect+0x6a>
     916:	9c 01       	movw	r18, r24
     918:	20 95       	com	r18
     91a:	30 95       	com	r19
     91c:	40 91 4c 04 	lds	r20, 0x044C	; 0x80044c <sock_is_sending>
     920:	50 91 4d 04 	lds	r21, 0x044D	; 0x80044d <sock_is_sending+0x1>
     924:	24 23       	and	r18, r20
     926:	35 23       	and	r19, r21
     928:	30 93 4d 04 	sts	0x044D, r19	; 0x80044d <sock_is_sending+0x1>
     92c:	20 93 4c 04 	sts	0x044C, r18	; 0x80044c <sock_is_sending>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     930:	20 91 4e 04 	lds	r18, 0x044E	; 0x80044e <sock_io_mode>
     934:	30 91 4f 04 	lds	r19, 0x044F	; 0x80044f <sock_io_mode+0x1>
     938:	82 23       	and	r24, r18
     93a:	93 23       	and	r25, r19
     93c:	89 2b       	or	r24, r25
     93e:	71 f0       	breq	.+28     	; 0x95c <disconnect+0xb8>
     940:	1c c0       	rjmp	.+56     	; 0x97a <disconnect+0xd6>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
     942:	be 01       	movw	r22, r28
     944:	7e 5f       	subi	r23, 0xFE	; 254
     946:	07 2e       	mov	r0, r23
     948:	00 0c       	add	r0, r0
     94a:	88 0b       	sbc	r24, r24
     94c:	99 0b       	sbc	r25, r25
     94e:	fc d4       	rcall	.+2552   	; 0x1348 <WIZCHIP_READ>
     950:	83 ff       	sbrs	r24, 3
	   {
	      close(sn);
     952:	04 c0       	rjmp	.+8      	; 0x95c <disconnect+0xb8>
     954:	81 2f       	mov	r24, r17
     956:	66 dd       	rcall	.-1332   	; 0x424 <close>
	      return SOCKERR_TIMEOUT;
     958:	83 ef       	ldi	r24, 0xF3	; 243
     95a:	10 c0       	rjmp	.+32     	; 0x97c <disconnect+0xd8>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
	while(getSn_SR(sn) != SOCK_CLOSED)
     95c:	be 01       	movw	r22, r28
     95e:	7d 5f       	subi	r23, 0xFD	; 253
     960:	07 2e       	mov	r0, r23
     962:	00 0c       	add	r0, r0
     964:	88 0b       	sbc	r24, r24
     966:	99 0b       	sbc	r25, r25
     968:	ef d4       	rcall	.+2526   	; 0x1348 <WIZCHIP_READ>
     96a:	81 11       	cpse	r24, r1
     96c:	ea cf       	rjmp	.-44     	; 0x942 <disconnect+0x9e>
	   {
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	05 c0       	rjmp	.+10     	; 0x97c <disconnect+0xd8>
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
     972:	8f ef       	ldi	r24, 0xFF	; 255
     974:	03 c0       	rjmp	.+6      	; 0x97c <disconnect+0xd8>
   CHECK_SOCKMODE(Sn_MR_TCP);
     976:	8b ef       	ldi	r24, 0xFB	; 251
     978:	01 c0       	rjmp	.+2      	; 0x97c <disconnect+0xd8>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     97a:	80 e0       	ldi	r24, 0x00	; 0
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
}
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	08 95       	ret

0000098c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
     98c:	2f 92       	push	r2
     98e:	3f 92       	push	r3
     990:	4f 92       	push	r4
     992:	5f 92       	push	r5
     994:	6f 92       	push	r6
     996:	7f 92       	push	r7
     998:	8f 92       	push	r8
     99a:	9f 92       	push	r9
     99c:	af 92       	push	r10
     99e:	bf 92       	push	r11
     9a0:	cf 92       	push	r12
     9a2:	df 92       	push	r13
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	00 d0       	rcall	.+0      	; 0x9b2 <send+0x26>
     9b2:	00 d0       	rcall	.+0      	; 0x9b4 <send+0x28>
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
     9b8:	89 30       	cpi	r24, 0x09	; 9
     9ba:	08 f0       	brcs	.+2      	; 0x9be <send+0x32>
     9bc:	c7 c0       	rjmp	.+398    	; 0xb4c <send+0x1c0>
     9be:	5e 83       	std	Y+6, r21	; 0x06
     9c0:	4d 83       	std	Y+5, r20	; 0x05
     9c2:	1b 01       	movw	r2, r22
     9c4:	f8 2e       	mov	r15, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     9c6:	c8 2e       	mov	r12, r24
     9c8:	d1 2c       	mov	r13, r1
     9ca:	cc 0c       	add	r12, r12
     9cc:	dd 1c       	adc	r13, r13
     9ce:	cc 0c       	add	r12, r12
     9d0:	dd 1c       	adc	r13, r13
     9d2:	2f ef       	ldi	r18, 0xFF	; 255
     9d4:	c2 1a       	sub	r12, r18
     9d6:	d2 0a       	sbc	r13, r18
     9d8:	cc 0c       	add	r12, r12
     9da:	dd 1c       	adc	r13, r13
     9dc:	cc 0c       	add	r12, r12
     9de:	dd 1c       	adc	r13, r13
     9e0:	cc 0c       	add	r12, r12
     9e2:	dd 1c       	adc	r13, r13
     9e4:	b6 01       	movw	r22, r12
     9e6:	0d 2c       	mov	r0, r13
     9e8:	00 0c       	add	r0, r0
     9ea:	88 0b       	sbc	r24, r24
     9ec:	99 0b       	sbc	r25, r25
     9ee:	ac d4       	rcall	.+2392   	; 0x1348 <WIZCHIP_READ>
     9f0:	8f 70       	andi	r24, 0x0F	; 15
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <send+0x6c>
     9f6:	ae c0       	rjmp	.+348    	; 0xb54 <send+0x1c8>
   CHECK_SOCKDATA();
     9f8:	4d 81       	ldd	r20, Y+5	; 0x05
     9fa:	5e 81       	ldd	r21, Y+6	; 0x06
     9fc:	45 2b       	or	r20, r21
     9fe:	09 f4       	brne	.+2      	; 0xa02 <send+0x76>
     a00:	ae c0       	rjmp	.+348    	; 0xb5e <send+0x1d2>
   tmp = getSn_SR(sn);
     a02:	26 01       	movw	r4, r12
     a04:	5d ef       	ldi	r21, 0xFD	; 253
     a06:	55 1a       	sub	r5, r21
     a08:	05 2c       	mov	r0, r5
     a0a:	00 0c       	add	r0, r0
     a0c:	66 08       	sbc	r6, r6
     a0e:	77 08       	sbc	r7, r7
     a10:	c3 01       	movw	r24, r6
     a12:	b2 01       	movw	r22, r4
     a14:	99 d4       	rcall	.+2354   	; 0x1348 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
     a16:	87 31       	cpi	r24, 0x17	; 23
     a18:	19 f0       	breq	.+6      	; 0xa20 <send+0x94>
     a1a:	8c 31       	cpi	r24, 0x1C	; 28
     a1c:	09 f0       	breq	.+2      	; 0xa20 <send+0x94>
     a1e:	a4 c0       	rjmp	.+328    	; 0xb68 <send+0x1dc>
   if( sock_is_sending & (1<<sn) )
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	4c 01       	movw	r8, r24
     a26:	0f 2c       	mov	r0, r15
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <send+0xa2>
     a2a:	88 0c       	add	r8, r8
     a2c:	99 1c       	adc	r9, r9
     a2e:	0a 94       	dec	r0
     a30:	e2 f7       	brpl	.-8      	; 0xa2a <send+0x9e>
     a32:	54 01       	movw	r10, r8
     a34:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <sock_is_sending>
     a38:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <sock_is_sending+0x1>
     a3c:	88 21       	and	r24, r8
     a3e:	99 21       	and	r25, r9
     a40:	89 2b       	or	r24, r25
     a42:	61 f1       	breq	.+88     	; 0xa9c <send+0x110>
   {
      tmp = getSn_IR(sn);
     a44:	c6 01       	movw	r24, r12
     a46:	9e 5f       	subi	r25, 0xFE	; 254
     a48:	9c 01       	movw	r18, r24
     a4a:	99 0f       	add	r25, r25
     a4c:	44 0b       	sbc	r20, r20
     a4e:	55 0b       	sbc	r21, r21
     a50:	29 83       	std	Y+1, r18	; 0x01
     a52:	3a 83       	std	Y+2, r19	; 0x02
     a54:	4b 83       	std	Y+3, r20	; 0x03
     a56:	5c 83       	std	Y+4, r21	; 0x04
     a58:	ca 01       	movw	r24, r20
     a5a:	b9 01       	movw	r22, r18
     a5c:	75 d4       	rcall	.+2282   	; 0x1348 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
     a5e:	84 ff       	sbrs	r24, 4
     a60:	14 c0       	rjmp	.+40     	; 0xa8a <send+0xfe>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
     a62:	40 e1       	ldi	r20, 0x10	; 16
     a64:	69 81       	ldd	r22, Y+1	; 0x01
     a66:	7a 81       	ldd	r23, Y+2	; 0x02
     a68:	8b 81       	ldd	r24, Y+3	; 0x03
     a6a:	9c 81       	ldd	r25, Y+4	; 0x04
     a6c:	d4 d4       	rcall	.+2472   	; 0x1416 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
     a6e:	20 91 4c 04 	lds	r18, 0x044C	; 0x80044c <sock_is_sending>
     a72:	30 91 4d 04 	lds	r19, 0x044D	; 0x80044d <sock_is_sending+0x1>
     a76:	c4 01       	movw	r24, r8
     a78:	80 95       	com	r24
     a7a:	90 95       	com	r25
     a7c:	82 23       	and	r24, r18
     a7e:	93 23       	and	r25, r19
     a80:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <sock_is_sending+0x1>
     a84:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <sock_is_sending>
      }
      else if(tmp & Sn_IR_TIMEOUT)
     a88:	09 c0       	rjmp	.+18     	; 0xa9c <send+0x110>
     a8a:	83 ff       	sbrs	r24, 3
      {
         close(sn);
     a8c:	72 c0       	rjmp	.+228    	; 0xb72 <send+0x1e6>
     a8e:	8f 2d       	mov	r24, r15
     a90:	c9 dc       	rcall	.-1646   	; 0x424 <close>
         return SOCKERR_TIMEOUT;
     a92:	63 ef       	ldi	r22, 0xF3	; 243
     a94:	7f ef       	ldi	r23, 0xFF	; 255
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	9f ef       	ldi	r25, 0xFF	; 255
     a9a:	72 c0       	rjmp	.+228    	; 0xb80 <send+0x1f4>
      }
      else return SOCK_BUSY;
   }
   freesize = getSn_TxMAX(sn);
     a9c:	b6 01       	movw	r22, r12
     a9e:	71 5e       	subi	r23, 0xE1	; 225
     aa0:	07 2e       	mov	r0, r23
     aa2:	00 0c       	add	r0, r0
     aa4:	88 0b       	sbc	r24, r24
     aa6:	99 0b       	sbc	r25, r25
     aa8:	4f d4       	rcall	.+2206   	; 0x1348 <WIZCHIP_READ>
     aaa:	08 2f       	mov	r16, r24
     aac:	10 e0       	ldi	r17, 0x00	; 0
     aae:	10 2f       	mov	r17, r16
     ab0:	00 27       	eor	r16, r16
     ab2:	11 0f       	add	r17, r17
     ab4:	11 0f       	add	r17, r17
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
     ab6:	4d 81       	ldd	r20, Y+5	; 0x05
     ab8:	5e 81       	ldd	r21, Y+6	; 0x06
     aba:	04 17       	cp	r16, r20
     abc:	15 07       	cpc	r17, r21
     abe:	08 f0       	brcs	.+2      	; 0xac2 <send+0x136>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
     ac0:	8a 01       	movw	r16, r20
     ac2:	8f 2d       	mov	r24, r15
     ac4:	23 d6       	rcall	.+3142   	; 0x170c <getSn_TX_FSR>
     ac6:	9a 83       	std	Y+2, r25	; 0x02
      tmp = getSn_SR(sn);
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	c3 01       	movw	r24, r6
     acc:	b2 01       	movw	r22, r4
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
     ace:	3c d4       	rcall	.+2168   	; 0x1348 <WIZCHIP_READ>
     ad0:	87 31       	cpi	r24, 0x17	; 23
     ad2:	49 f0       	breq	.+18     	; 0xae6 <send+0x15a>
     ad4:	8c 31       	cpi	r24, 0x1C	; 28
      {
         close(sn);
     ad6:	39 f0       	breq	.+14     	; 0xae6 <send+0x15a>
     ad8:	8f 2d       	mov	r24, r15
     ada:	a4 dc       	rcall	.-1720   	; 0x424 <close>
         return SOCKERR_SOCKSTATUS;
     adc:	69 ef       	ldi	r22, 0xF9	; 249
     ade:	7f ef       	ldi	r23, 0xFF	; 255
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
     ae2:	9f ef       	ldi	r25, 0xFF	; 255
     ae4:	4d c0       	rjmp	.+154    	; 0xb80 <send+0x1f4>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     ae6:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <sock_io_mode>
     aea:	90 91 4f 04 	lds	r25, 0x044F	; 0x80044f <sock_io_mode+0x1>
     aee:	8a 21       	and	r24, r10
     af0:	9b 21       	and	r25, r11
     af2:	89 2b       	or	r24, r25
     af4:	31 f0       	breq	.+12     	; 0xb02 <send+0x176>
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	80 17       	cp	r24, r16
     afc:	91 07       	cpc	r25, r17
     afe:	08 f4       	brcc	.+2      	; 0xb02 <send+0x176>
      if(len <= freesize) break;
     b00:	3c c0       	rjmp	.+120    	; 0xb7a <send+0x1ee>
     b02:	29 81       	ldd	r18, Y+1	; 0x01
     b04:	3a 81       	ldd	r19, Y+2	; 0x02
     b06:	20 17       	cp	r18, r16
     b08:	31 07       	cpc	r19, r17
   }
   wiz_send_data(sn, buf, len);
     b0a:	d8 f2       	brcs	.-74     	; 0xac2 <send+0x136>
     b0c:	a8 01       	movw	r20, r16
     b0e:	b1 01       	movw	r22, r2
     b10:	8f 2d       	mov	r24, r15

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
     b12:	ac d6       	rcall	.+3416   	; 0x186c <wiz_send_data>
     b14:	d3 94       	inc	r13
     b16:	0d 2c       	mov	r0, r13
     b18:	00 0c       	add	r0, r0
     b1a:	ee 08       	sbc	r14, r14
     b1c:	ff 08       	sbc	r15, r15
     b1e:	40 e2       	ldi	r20, 0x20	; 32
     b20:	c7 01       	movw	r24, r14
     b22:	b6 01       	movw	r22, r12
   /* wait to process the command... */
   while(getSn_CR(sn));
     b24:	78 d4       	rcall	.+2288   	; 0x1416 <WIZCHIP_WRITE>
     b26:	c7 01       	movw	r24, r14
     b28:	b6 01       	movw	r22, r12
     b2a:	0e d4       	rcall	.+2076   	; 0x1348 <WIZCHIP_READ>
     b2c:	81 11       	cpse	r24, r1
     b2e:	fb cf       	rjmp	.-10     	; 0xb26 <send+0x19a>
   sock_is_sending |= (1 << sn);
     b30:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <sock_is_sending>
     b34:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <sock_is_sending+0x1>
     b38:	88 2a       	or	r8, r24
     b3a:	99 2a       	or	r9, r25
     b3c:	90 92 4d 04 	sts	0x044D, r9	; 0x80044d <sock_is_sending+0x1>
     b40:	80 92 4c 04 	sts	0x044C, r8	; 0x80044c <sock_is_sending>
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
     b44:	b8 01       	movw	r22, r16
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	1a c0       	rjmp	.+52     	; 0xb80 <send+0x1f4>
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
     b4c:	6f ef       	ldi	r22, 0xFF	; 255
     b4e:	7f ef       	ldi	r23, 0xFF	; 255
     b50:	cb 01       	movw	r24, r22
     b52:	16 c0       	rjmp	.+44     	; 0xb80 <send+0x1f4>
   CHECK_SOCKMODE(Sn_MR_TCP);
     b54:	6b ef       	ldi	r22, 0xFB	; 251
     b56:	7f ef       	ldi	r23, 0xFF	; 255
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	9f ef       	ldi	r25, 0xFF	; 255
     b5c:	11 c0       	rjmp	.+34     	; 0xb80 <send+0x1f4>
   CHECK_SOCKDATA();
     b5e:	62 ef       	ldi	r22, 0xF2	; 242
     b60:	7f ef       	ldi	r23, 0xFF	; 255
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	9f ef       	ldi	r25, 0xFF	; 255
     b66:	0c c0       	rjmp	.+24     	; 0xb80 <send+0x1f4>
   tmp = getSn_SR(sn);
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
     b68:	69 ef       	ldi	r22, 0xF9	; 249
     b6a:	7f ef       	ldi	r23, 0xFF	; 255
     b6c:	8f ef       	ldi	r24, 0xFF	; 255
     b6e:	9f ef       	ldi	r25, 0xFF	; 255
     b70:	07 c0       	rjmp	.+14     	; 0xb80 <send+0x1f4>
      else if(tmp & Sn_IR_TIMEOUT)
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	cb 01       	movw	r24, r22
     b78:	03 c0       	rjmp	.+6      	; 0xb80 <send+0x1f4>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
      {
         close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	cb 01       	movw	r24, r22
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     b80:	26 96       	adiw	r28, 0x06	; 6
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	bf 90       	pop	r11
     b9e:	af 90       	pop	r10
     ba0:	9f 90       	pop	r9
     ba2:	8f 90       	pop	r8
     ba4:	7f 90       	pop	r7
     ba6:	6f 90       	pop	r6
     ba8:	5f 90       	pop	r5
     baa:	4f 90       	pop	r4
     bac:	3f 90       	pop	r3
     bae:	2f 90       	pop	r2
     bb0:	08 95       	ret

00000bb2 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
     bb2:	7f 92       	push	r7
     bb4:	8f 92       	push	r8
     bb6:	9f 92       	push	r9
     bb8:	af 92       	push	r10
     bba:	bf 92       	push	r11
     bbc:	cf 92       	push	r12
     bbe:	df 92       	push	r13
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
     bcc:	89 30       	cpi	r24, 0x09	; 9
     bce:	08 f0       	brcs	.+2      	; 0xbd2 <recv+0x20>
     bd0:	90 c0       	rjmp	.+288    	; 0xcf2 <recv+0x140>
     bd2:	ea 01       	movw	r28, r20
     bd4:	4b 01       	movw	r8, r22
     bd6:	78 2e       	mov	r7, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     bd8:	c8 2e       	mov	r12, r24
     bda:	d1 2c       	mov	r13, r1
     bdc:	86 01       	movw	r16, r12
     bde:	00 0f       	add	r16, r16
     be0:	11 1f       	adc	r17, r17
     be2:	00 0f       	add	r16, r16
     be4:	11 1f       	adc	r17, r17
     be6:	0f 5f       	subi	r16, 0xFF	; 255
     be8:	1f 4f       	sbci	r17, 0xFF	; 255
     bea:	00 0f       	add	r16, r16
     bec:	11 1f       	adc	r17, r17
     bee:	00 0f       	add	r16, r16
     bf0:	11 1f       	adc	r17, r17
     bf2:	00 0f       	add	r16, r16
     bf4:	11 1f       	adc	r17, r17
     bf6:	b8 01       	movw	r22, r16
     bf8:	01 2e       	mov	r0, r17
     bfa:	00 0c       	add	r0, r0
     bfc:	88 0b       	sbc	r24, r24
     bfe:	99 0b       	sbc	r25, r25
     c00:	a3 d3       	rcall	.+1862   	; 0x1348 <WIZCHIP_READ>
     c02:	8f 70       	andi	r24, 0x0F	; 15
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	09 f0       	breq	.+2      	; 0xc0a <recv+0x58>
     c08:	78 c0       	rjmp	.+240    	; 0xcfa <recv+0x148>
   CHECK_SOCKDATA();
     c0a:	20 97       	sbiw	r28, 0x00	; 0
     c0c:	09 f4       	brne	.+2      	; 0xc10 <recv+0x5e>
     c0e:	7a c0       	rjmp	.+244    	; 0xd04 <recv+0x152>
   
   recvsize = getSn_RxMAX(sn);
     c10:	b8 01       	movw	r22, r16
     c12:	72 5e       	subi	r23, 0xE2	; 226
     c14:	07 2e       	mov	r0, r23
     c16:	00 0c       	add	r0, r0
     c18:	88 0b       	sbc	r24, r24
     c1a:	99 0b       	sbc	r25, r25
     c1c:	95 d3       	rcall	.+1834   	; 0x1348 <WIZCHIP_READ>
     c1e:	a8 2e       	mov	r10, r24
     c20:	b1 2c       	mov	r11, r1
     c22:	ba 2c       	mov	r11, r10
     c24:	aa 24       	eor	r10, r10
     c26:	bb 0c       	add	r11, r11
     c28:	bb 0c       	add	r11, r11
   if(recvsize < len) len = recvsize;
     c2a:	ac 16       	cp	r10, r28
     c2c:	bd 06       	cpc	r11, r29
     c2e:	08 f0       	brcs	.+2      	; 0xc32 <recv+0x80>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
     c30:	5e 01       	movw	r10, r28
     c32:	87 2d       	mov	r24, r7
     c34:	c3 d5       	rcall	.+2950   	; 0x17bc <getSn_RX_RSR>
     c36:	ec 01       	movw	r28, r24
         tmp = getSn_SR(sn);
     c38:	b8 01       	movw	r22, r16
     c3a:	7d 5f       	subi	r23, 0xFD	; 253
     c3c:	07 2e       	mov	r0, r23
     c3e:	00 0c       	add	r0, r0
     c40:	88 0b       	sbc	r24, r24
     c42:	99 0b       	sbc	r25, r25
     c44:	81 d3       	rcall	.+1794   	; 0x1348 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
     c46:	87 31       	cpi	r24, 0x17	; 23
     c48:	21 f1       	breq	.+72     	; 0xc92 <recv+0xe0>
         {
            if(tmp == SOCK_CLOSE_WAIT)
     c4a:	8c 31       	cpi	r24, 0x1C	; 28
            {
               if(recvsize != 0) break;
     c4c:	d9 f4       	brne	.+54     	; 0xc84 <recv+0xd2>
     c4e:	20 97       	sbiw	r28, 0x00	; 0
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
     c50:	a9 f5       	brne	.+106    	; 0xcbc <recv+0x10a>
     c52:	87 2d       	mov	r24, r7
     c54:	5b d5       	rcall	.+2742   	; 0x170c <getSn_TX_FSR>
     c56:	7c 01       	movw	r14, r24
     c58:	b8 01       	movw	r22, r16
     c5a:	71 5e       	subi	r23, 0xE1	; 225
     c5c:	07 2e       	mov	r0, r23
     c5e:	00 0c       	add	r0, r0
     c60:	88 0b       	sbc	r24, r24
     c62:	99 0b       	sbc	r25, r25
     c64:	71 d3       	rcall	.+1762   	; 0x1348 <WIZCHIP_READ>
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	98 2f       	mov	r25, r24
     c6a:	88 27       	eor	r24, r24
     c6c:	99 0f       	add	r25, r25
     c6e:	99 0f       	add	r25, r25
     c70:	e8 16       	cp	r14, r24
     c72:	f9 06       	cpc	r15, r25
               {
                  close(sn);
     c74:	71 f4       	brne	.+28     	; 0xc92 <recv+0xe0>
     c76:	87 2d       	mov	r24, r7
                  return SOCKERR_SOCKSTATUS;
     c78:	d5 db       	rcall	.-2134   	; 0x424 <close>
     c7a:	69 ef       	ldi	r22, 0xF9	; 249
     c7c:	7f ef       	ldi	r23, 0xFF	; 255
     c7e:	8f ef       	ldi	r24, 0xFF	; 255
     c80:	9f ef       	ldi	r25, 0xFF	; 255
               }
            }
            else
            {
               close(sn);
     c82:	48 c0       	rjmp	.+144    	; 0xd14 <recv+0x162>
     c84:	87 2d       	mov	r24, r7
     c86:	ce db       	rcall	.-2148   	; 0x424 <close>
               return SOCKERR_SOCKSTATUS;
     c88:	69 ef       	ldi	r22, 0xF9	; 249
     c8a:	7f ef       	ldi	r23, 0xFF	; 255
     c8c:	8f ef       	ldi	r24, 0xFF	; 255
     c8e:	9f ef       	ldi	r25, 0xFF	; 255
     c90:	41 c0       	rjmp	.+130    	; 0xd14 <recv+0x162>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0c 2c       	mov	r0, r12
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <recv+0xec>
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	0a 94       	dec	r0
     ca0:	e2 f7       	brpl	.-8      	; 0xc9a <recv+0xe8>
     ca2:	20 91 4e 04 	lds	r18, 0x044E	; 0x80044e <sock_io_mode>
     ca6:	30 91 4f 04 	lds	r19, 0x044F	; 0x80044f <sock_io_mode+0x1>
     caa:	82 23       	and	r24, r18
     cac:	93 23       	and	r25, r19
     cae:	89 2b       	or	r24, r25
     cb0:	11 f0       	breq	.+4      	; 0xcb6 <recv+0x104>
     cb2:	20 97       	sbiw	r28, 0x00	; 0
     cb4:	61 f1       	breq	.+88     	; 0xd0e <recv+0x15c>
         if(recvsize != 0) break;
     cb6:	20 97       	sbiw	r28, 0x00	; 0
     cb8:	09 f4       	brne	.+2      	; 0xcbc <recv+0x10a>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
     cba:	bb cf       	rjmp	.-138    	; 0xc32 <recv+0x80>
     cbc:	ca 15       	cp	r28, r10
     cbe:	db 05       	cpc	r29, r11
     cc0:	08 f0       	brcs	.+2      	; 0xcc4 <recv+0x112>
   wiz_recv_data(sn, buf, len);
     cc2:	e5 01       	movw	r28, r10
     cc4:	ae 01       	movw	r20, r28
     cc6:	b4 01       	movw	r22, r8
     cc8:	87 2d       	mov	r24, r7
     cca:	57 d6       	rcall	.+3246   	; 0x197a <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
     ccc:	68 01       	movw	r12, r16
     cce:	d3 94       	inc	r13
     cd0:	0d 2c       	mov	r0, r13
     cd2:	00 0c       	add	r0, r0
     cd4:	ee 08       	sbc	r14, r14
     cd6:	ff 08       	sbc	r15, r15
     cd8:	40 e4       	ldi	r20, 0x40	; 64
     cda:	c7 01       	movw	r24, r14
     cdc:	b6 01       	movw	r22, r12
   while(getSn_CR(sn));
     cde:	9b d3       	rcall	.+1846   	; 0x1416 <WIZCHIP_WRITE>
     ce0:	c7 01       	movw	r24, r14
     ce2:	b6 01       	movw	r22, r12
     ce4:	31 d3       	rcall	.+1634   	; 0x1348 <WIZCHIP_READ>
     ce6:	81 11       	cpse	r24, r1
     ce8:	fb cf       	rjmp	.-10     	; 0xce0 <recv+0x12e>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
     cea:	be 01       	movw	r22, r28
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	11 c0       	rjmp	.+34     	; 0xd14 <recv+0x162>
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
     cf2:	6f ef       	ldi	r22, 0xFF	; 255
     cf4:	7f ef       	ldi	r23, 0xFF	; 255
     cf6:	cb 01       	movw	r24, r22
     cf8:	0d c0       	rjmp	.+26     	; 0xd14 <recv+0x162>
   CHECK_SOCKMODE(Sn_MR_TCP);
     cfa:	6b ef       	ldi	r22, 0xFB	; 251
     cfc:	7f ef       	ldi	r23, 0xFF	; 255
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	9f ef       	ldi	r25, 0xFF	; 255
     d02:	08 c0       	rjmp	.+16     	; 0xd14 <recv+0x162>
   CHECK_SOCKDATA();
     d04:	62 ef       	ldi	r22, 0xF2	; 242
     d06:	7f ef       	ldi	r23, 0xFF	; 255
     d08:	8f ef       	ldi	r24, 0xFF	; 255
     d0a:	9f ef       	ldi	r25, 0xFF	; 255
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <recv+0x162>
            {
               close(sn);
               return SOCKERR_SOCKSTATUS;
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	cb 01       	movw	r24, r22
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	df 90       	pop	r13
     d22:	cf 90       	pop	r12
     d24:	bf 90       	pop	r11
     d26:	af 90       	pop	r10
     d28:	9f 90       	pop	r9
     d2a:	8f 90       	pop	r8
     d2c:	7f 90       	pop	r7
     d2e:	08 95       	ret

00000d30 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
     d30:	2f 92       	push	r2
     d32:	3f 92       	push	r3
     d34:	5f 92       	push	r5
     d36:	6f 92       	push	r6
     d38:	7f 92       	push	r7
     d3a:	8f 92       	push	r8
     d3c:	9f 92       	push	r9
     d3e:	af 92       	push	r10
     d40:	bf 92       	push	r11
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
     d52:	89 30       	cpi	r24, 0x09	; 9
     d54:	08 f0       	brcs	.+2      	; 0xd58 <sendto+0x28>
     d56:	e3 c0       	rjmp	.+454    	; 0xf1e <sendto+0x1ee>
     d58:	e9 01       	movw	r28, r18
     d5a:	3a 01       	movw	r6, r20
     d5c:	1b 01       	movw	r2, r22
     d5e:	58 2e       	mov	r5, r24
   switch(getSn_MR(sn) & 0x0F)
     d60:	c8 2e       	mov	r12, r24
     d62:	d1 2c       	mov	r13, r1
     d64:	76 01       	movw	r14, r12
     d66:	ee 0c       	add	r14, r14
     d68:	ff 1c       	adc	r15, r15
     d6a:	ee 0c       	add	r14, r14
     d6c:	ff 1c       	adc	r15, r15
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	e8 1a       	sub	r14, r24
     d72:	f8 0a       	sbc	r15, r24
     d74:	ee 0c       	add	r14, r14
     d76:	ff 1c       	adc	r15, r15
     d78:	ee 0c       	add	r14, r14
     d7a:	ff 1c       	adc	r15, r15
     d7c:	ee 0c       	add	r14, r14
     d7e:	ff 1c       	adc	r15, r15
     d80:	47 01       	movw	r8, r14
     d82:	0f 2c       	mov	r0, r15
     d84:	00 0c       	add	r0, r0
     d86:	aa 08       	sbc	r10, r10
     d88:	bb 08       	sbc	r11, r11
     d8a:	c5 01       	movw	r24, r10
     d8c:	b4 01       	movw	r22, r8
     d8e:	dc d2       	rcall	.+1464   	; 0x1348 <WIZCHIP_READ>
     d90:	8f 70       	andi	r24, 0x0F	; 15
     d92:	82 50       	subi	r24, 0x02	; 2
     d94:	83 30       	cpi	r24, 0x03	; 3
     d96:	08 f0       	brcs	.+2      	; 0xd9a <sendto+0x6a>
     d98:	c6 c0       	rjmp	.+396    	; 0xf26 <sendto+0x1f6>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
     d9a:	61 14       	cp	r6, r1
     d9c:	71 04       	cpc	r7, r1
     d9e:	09 f4       	brne	.+2      	; 0xda2 <sendto+0x72>
     da0:	c7 c0       	rjmp	.+398    	; 0xf30 <sendto+0x200>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
     da2:	88 81       	ld	r24, Y
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	a0 e0       	ldi	r26, 0x00	; 0
     da8:	b0 e0       	ldi	r27, 0x00	; 0
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
     daa:	ba 2f       	mov	r27, r26
     dac:	a9 2f       	mov	r26, r25
     dae:	98 2f       	mov	r25, r24
     db0:	88 27       	eor	r24, r24
     db2:	29 81       	ldd	r18, Y+1	; 0x01
     db4:	82 0f       	add	r24, r18
     db6:	91 1d       	adc	r25, r1
     db8:	a1 1d       	adc	r26, r1
     dba:	b1 1d       	adc	r27, r1
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
     dbc:	ba 2f       	mov	r27, r26
     dbe:	a9 2f       	mov	r26, r25
     dc0:	98 2f       	mov	r25, r24
     dc2:	88 27       	eor	r24, r24
     dc4:	2a 81       	ldd	r18, Y+2	; 0x02
     dc6:	82 0f       	add	r24, r18
     dc8:	91 1d       	adc	r25, r1
     dca:	a1 1d       	adc	r26, r1
     dcc:	b1 1d       	adc	r27, r1
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
     dce:	ba 2f       	mov	r27, r26
     dd0:	a9 2f       	mov	r26, r25
     dd2:	98 2f       	mov	r25, r24
     dd4:	88 27       	eor	r24, r24
     dd6:	2b 81       	ldd	r18, Y+3	; 0x03
     dd8:	82 0f       	add	r24, r18
     dda:	91 1d       	adc	r25, r1
     ddc:	a1 1d       	adc	r26, r1
     dde:	b1 1d       	adc	r27, r1
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
     de0:	89 2b       	or	r24, r25
     de2:	8a 2b       	or	r24, r26
     de4:	8b 2b       	or	r24, r27
     de6:	29 f4       	brne	.+10     	; 0xdf2 <sendto+0xc2>
     de8:	c5 01       	movw	r24, r10
     dea:	b4 01       	movw	r22, r8
     dec:	ad d2       	rcall	.+1370   	; 0x1348 <WIZCHIP_READ>
     dee:	82 ff       	sbrs	r24, 2
     df0:	a4 c0       	rjmp	.+328    	; 0xf3a <sendto+0x20a>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
     df2:	01 15       	cp	r16, r1
     df4:	11 05       	cpc	r17, r1
     df6:	29 f4       	brne	.+10     	; 0xe02 <sendto+0xd2>
     df8:	c5 01       	movw	r24, r10
     dfa:	b4 01       	movw	r22, r8
     dfc:	a5 d2       	rcall	.+1354   	; 0x1348 <WIZCHIP_READ>
     dfe:	82 ff       	sbrs	r24, 2
     e00:	a1 c0       	rjmp	.+322    	; 0xf44 <sendto+0x214>
   tmp = getSn_SR(sn);
     e02:	47 01       	movw	r8, r14
     e04:	8d ef       	ldi	r24, 0xFD	; 253
     e06:	98 1a       	sub	r9, r24
     e08:	09 2c       	mov	r0, r9
     e0a:	00 0c       	add	r0, r0
     e0c:	aa 08       	sbc	r10, r10
     e0e:	bb 08       	sbc	r11, r11
     e10:	c5 01       	movw	r24, r10
     e12:	b4 01       	movw	r22, r8
     e14:	99 d2       	rcall	.+1330   	; 0x1348 <WIZCHIP_READ>
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
     e16:	82 34       	cpi	r24, 0x42	; 66
     e18:	29 f0       	breq	.+10     	; 0xe24 <sendto+0xf4>
     e1a:	82 32       	cpi	r24, 0x22	; 34
     e1c:	19 f0       	breq	.+6      	; 0xe24 <sendto+0xf4>
     e1e:	82 33       	cpi	r24, 0x32	; 50
     e20:	09 f0       	breq	.+2      	; 0xe24 <sendto+0xf4>
     e22:	95 c0       	rjmp	.+298    	; 0xf4e <sendto+0x21e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
     e24:	b7 01       	movw	r22, r14
     e26:	74 5f       	subi	r23, 0xF4	; 244
     e28:	07 2e       	mov	r0, r23
     e2a:	00 0c       	add	r0, r0
     e2c:	88 0b       	sbc	r24, r24
     e2e:	99 0b       	sbc	r25, r25
     e30:	24 e0       	ldi	r18, 0x04	; 4
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	ae 01       	movw	r20, r28
     e36:	e3 d3       	rcall	.+1990   	; 0x15fe <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
     e38:	b7 01       	movw	r22, r14
     e3a:	70 5f       	subi	r23, 0xF0	; 240
     e3c:	07 2e       	mov	r0, r23
     e3e:	00 0c       	add	r0, r0
     e40:	88 0b       	sbc	r24, r24
     e42:	99 0b       	sbc	r25, r25
     e44:	41 2f       	mov	r20, r17
     e46:	e7 d2       	rcall	.+1486   	; 0x1416 <WIZCHIP_WRITE>
     e48:	b7 01       	movw	r22, r14
     e4a:	7f 5e       	subi	r23, 0xEF	; 239
     e4c:	07 2e       	mov	r0, r23
     e4e:	00 0c       	add	r0, r0
     e50:	88 0b       	sbc	r24, r24
     e52:	99 0b       	sbc	r25, r25
     e54:	40 2f       	mov	r20, r16
     e56:	df d2       	rcall	.+1470   	; 0x1416 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
     e58:	b7 01       	movw	r22, r14
     e5a:	71 5e       	subi	r23, 0xE1	; 225
     e5c:	07 2e       	mov	r0, r23
     e5e:	00 0c       	add	r0, r0
     e60:	88 0b       	sbc	r24, r24
     e62:	99 0b       	sbc	r25, r25
     e64:	71 d2       	rcall	.+1250   	; 0x1348 <WIZCHIP_READ>
     e66:	08 2f       	mov	r16, r24
     e68:	10 e0       	ldi	r17, 0x00	; 0
     e6a:	10 2f       	mov	r17, r16
     e6c:	00 27       	eor	r16, r16
     e6e:	11 0f       	add	r17, r17
     e70:	11 0f       	add	r17, r17
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
     e72:	06 15       	cp	r16, r6
     e74:	17 05       	cpc	r17, r7
     e76:	08 f0       	brcs	.+2      	; 0xe7a <sendto+0x14a>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
     e78:	83 01       	movw	r16, r6
     e7a:	85 2d       	mov	r24, r5
     e7c:	47 d4       	rcall	.+2190   	; 0x170c <getSn_TX_FSR>
     e7e:	ec 01       	movw	r28, r24
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
     e80:	c5 01       	movw	r24, r10
     e82:	b4 01       	movw	r22, r8
     e84:	61 d2       	rcall	.+1218   	; 0x1348 <WIZCHIP_READ>
     e86:	88 23       	and	r24, r24
     e88:	09 f4       	brne	.+2      	; 0xe8c <sendto+0x15c>
     e8a:	66 c0       	rjmp	.+204    	; 0xf58 <sendto+0x228>
     e8c:	81 e0       	ldi	r24, 0x01	; 1
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0c 2c       	mov	r0, r12
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <sendto+0x168>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <sendto+0x164>
     e9c:	20 91 4e 04 	lds	r18, 0x044E	; 0x80044e <sock_io_mode>
     ea0:	30 91 4f 04 	lds	r19, 0x044F	; 0x80044f <sock_io_mode+0x1>
     ea4:	82 23       	and	r24, r18
     ea6:	93 23       	and	r25, r19
     ea8:	89 2b       	or	r24, r25
     eaa:	21 f0       	breq	.+8      	; 0xeb4 <sendto+0x184>
     eac:	c0 17       	cp	r28, r16
     eae:	d1 07       	cpc	r29, r17
     eb0:	08 f4       	brcc	.+2      	; 0xeb4 <sendto+0x184>
     eb2:	57 c0       	rjmp	.+174    	; 0xf62 <sendto+0x232>
      if(len <= freesize) break;
     eb4:	c0 17       	cp	r28, r16
     eb6:	d1 07       	cpc	r29, r17
     eb8:	00 f3       	brcs	.-64     	; 0xe7a <sendto+0x14a>
   };
	wiz_send_data(sn, buf, len);
     eba:	a8 01       	movw	r20, r16
     ebc:	b1 01       	movw	r22, r2
     ebe:	85 2d       	mov	r24, r5
     ec0:	d5 d4       	rcall	.+2474   	; 0x186c <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
     ec2:	47 01       	movw	r8, r14
     ec4:	93 94       	inc	r9
     ec6:	09 2c       	mov	r0, r9
     ec8:	00 0c       	add	r0, r0
     eca:	aa 08       	sbc	r10, r10
     ecc:	bb 08       	sbc	r11, r11
     ece:	40 e2       	ldi	r20, 0x20	; 32
     ed0:	c5 01       	movw	r24, r10
     ed2:	b4 01       	movw	r22, r8
     ed4:	a0 d2       	rcall	.+1344   	; 0x1416 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
     ed6:	c5 01       	movw	r24, r10
     ed8:	b4 01       	movw	r22, r8
     eda:	36 d2       	rcall	.+1132   	; 0x1348 <WIZCHIP_READ>
     edc:	81 11       	cpse	r24, r1
     ede:	fb cf       	rjmp	.-10     	; 0xed6 <sendto+0x1a6>
   while(1)
   {
      tmp = getSn_IR(sn);
     ee0:	47 01       	movw	r8, r14
     ee2:	8e ef       	ldi	r24, 0xFE	; 254
     ee4:	98 1a       	sub	r9, r24
     ee6:	09 2c       	mov	r0, r9
     ee8:	00 0c       	add	r0, r0
     eea:	aa 08       	sbc	r10, r10
     eec:	bb 08       	sbc	r11, r11
     eee:	c5 01       	movw	r24, r10
     ef0:	b4 01       	movw	r22, r8
     ef2:	2a d2       	rcall	.+1108   	; 0x1348 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
     ef4:	84 ff       	sbrs	r24, 4
      {
         setSn_IR(sn, Sn_IR_SENDOK);
     ef6:	08 c0       	rjmp	.+16     	; 0xf08 <sendto+0x1d8>
     ef8:	40 e1       	ldi	r20, 0x10	; 16
     efa:	c5 01       	movw	r24, r10
     efc:	b4 01       	movw	r22, r8
     efe:	8b d2       	rcall	.+1302   	; 0x1416 <WIZCHIP_WRITE>
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
     f00:	b8 01       	movw	r22, r16
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	30 c0       	rjmp	.+96     	; 0xf68 <sendto+0x238>
         setSn_IR(sn, Sn_IR_SENDOK);
         break;
      }
      //M:20131104
      //else if(tmp & Sn_IR_TIMEOUT) return SOCKERR_TIMEOUT;
      else if(tmp & Sn_IR_TIMEOUT)
     f08:	83 ff       	sbrs	r24, 3
     f0a:	ea cf       	rjmp	.-44     	; 0xee0 <sendto+0x1b0>
      {
         setSn_IR(sn, Sn_IR_TIMEOUT);
     f0c:	48 e0       	ldi	r20, 0x08	; 8
     f0e:	c5 01       	movw	r24, r10
     f10:	b4 01       	movw	r22, r8
     f12:	81 d2       	rcall	.+1282   	; 0x1416 <WIZCHIP_WRITE>
     f14:	63 ef       	ldi	r22, 0xF3	; 243
         //len = (uint16_t)SOCKERR_TIMEOUT;
         //break;
         #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
            if(taddr) setSUBR((uint8_t*)&taddr);
         #endif
         return SOCKERR_TIMEOUT;
     f16:	7f ef       	ldi	r23, 0xFF	; 255
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	9f ef       	ldi	r25, 0xFF	; 255
     f1c:	25 c0       	rjmp	.+74     	; 0xf68 <sendto+0x238>
     f1e:	6f ef       	ldi	r22, 0xFF	; 255
{
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
     f20:	7f ef       	ldi	r23, 0xFF	; 255
     f22:	cb 01       	movw	r24, r22
     f24:	21 c0       	rjmp	.+66     	; 0xf68 <sendto+0x238>
     f26:	6b ef       	ldi	r22, 0xFB	; 251
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
     f28:	7f ef       	ldi	r23, 0xFF	; 255
     f2a:	8f ef       	ldi	r24, 0xFF	; 255
     f2c:	9f ef       	ldi	r25, 0xFF	; 255
     f2e:	1c c0       	rjmp	.+56     	; 0xf68 <sendto+0x238>
     f30:	62 ef       	ldi	r22, 0xF2	; 242
   }
   CHECK_SOCKDATA();
     f32:	7f ef       	ldi	r23, 0xFF	; 255
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	9f ef       	ldi	r25, 0xFF	; 255
     f38:	17 c0       	rjmp	.+46     	; 0xf68 <sendto+0x238>
     f3a:	64 ef       	ldi	r22, 0xF4	; 244
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	9f ef       	ldi	r25, 0xFF	; 255
     f42:	12 c0       	rjmp	.+36     	; 0xf68 <sendto+0x238>
     f44:	65 ef       	ldi	r22, 0xF5	; 245
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
     f46:	7f ef       	ldi	r23, 0xFF	; 255
     f48:	8f ef       	ldi	r24, 0xFF	; 255
     f4a:	9f ef       	ldi	r25, 0xFF	; 255
     f4c:	0d c0       	rjmp	.+26     	; 0xf68 <sendto+0x238>
     f4e:	69 ef       	ldi	r22, 0xF9	; 249
   tmp = getSn_SR(sn);
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
     f50:	7f ef       	ldi	r23, 0xFF	; 255
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	9f ef       	ldi	r25, 0xFF	; 255
     f56:	08 c0       	rjmp	.+16     	; 0xf68 <sendto+0x238>
     f58:	6c ef       	ldi	r22, 0xFC	; 252
   freesize = getSn_TxMAX(sn);
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
     f5a:	7f ef       	ldi	r23, 0xFF	; 255
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	9f ef       	ldi	r25, 0xFF	; 255
     f60:	03 c0       	rjmp	.+6      	; 0xf68 <sendto+0x238>
     f62:	60 e0       	ldi	r22, 0x00	; 0
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	cb 01       	movw	r24, r22
     f68:	df 91       	pop	r29
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	bf 90       	pop	r11
     f7a:	af 90       	pop	r10
     f7c:	9f 90       	pop	r9
     f7e:	8f 90       	pop	r8
     f80:	7f 90       	pop	r7
     f82:	6f 90       	pop	r6
     f84:	5f 90       	pop	r5
     f86:	3f 90       	pop	r3
     f88:	2f 90       	pop	r2
     f8a:	08 95       	ret

00000f8c <recvfrom>:
     f8c:	2f 92       	push	r2



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
     f8e:	3f 92       	push	r3
     f90:	4f 92       	push	r4
     f92:	5f 92       	push	r5
     f94:	6f 92       	push	r6
     f96:	7f 92       	push	r7
     f98:	8f 92       	push	r8
     f9a:	9f 92       	push	r9
     f9c:	af 92       	push	r10
     f9e:	bf 92       	push	r11
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	2c 97       	sbiw	r28, 0x0c	; 12
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
     fc0:	89 30       	cpi	r24, 0x09	; 9
     fc2:	08 f0       	brcs	.+2      	; 0xfc6 <recvfrom+0x3a>
     fc4:	92 c1       	rjmp	.+804    	; 0x12ea <recvfrom+0x35e>
     fc6:	28 01       	movw	r4, r16
     fc8:	39 01       	movw	r6, r18
     fca:	5a 01       	movw	r10, r20
     fcc:	4b 01       	movw	r8, r22
     fce:	38 2e       	mov	r3, r24
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
     fd0:	c8 2e       	mov	r12, r24
     fd2:	d1 2c       	mov	r13, r1
     fd4:	86 01       	movw	r16, r12
     fd6:	00 0f       	add	r16, r16
     fd8:	11 1f       	adc	r17, r17
     fda:	00 0f       	add	r16, r16
     fdc:	11 1f       	adc	r17, r17
     fde:	0f 5f       	subi	r16, 0xFF	; 255
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255
     fe2:	00 0f       	add	r16, r16
     fe4:	11 1f       	adc	r17, r17
     fe6:	00 0f       	add	r16, r16
     fe8:	11 1f       	adc	r17, r17
     fea:	00 0f       	add	r16, r16
     fec:	11 1f       	adc	r17, r17
     fee:	b8 01       	movw	r22, r16
     ff0:	01 2e       	mov	r0, r17
     ff2:	00 0c       	add	r0, r0
     ff4:	88 0b       	sbc	r24, r24
     ff6:	99 0b       	sbc	r25, r25
     ff8:	a7 d1       	rcall	.+846    	; 0x1348 <WIZCHIP_READ>
     ffa:	28 2e       	mov	r2, r24
     ffc:	8f 70       	andi	r24, 0x0F	; 15
     ffe:	82 50       	subi	r24, 0x02	; 2
    1000:	83 30       	cpi	r24, 0x03	; 3
    1002:	08 f0       	brcs	.+2      	; 0x1006 <recvfrom+0x7a>
    1004:	76 c1       	rjmp	.+748    	; 0x12f2 <recvfrom+0x366>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    1006:	a1 14       	cp	r10, r1
    1008:	b1 04       	cpc	r11, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <recvfrom+0x82>
    100c:	77 c1       	rjmp	.+750    	; 0x12fc <recvfrom+0x370>
   if(sock_remained_size[sn] == 0)
    100e:	f6 01       	movw	r30, r12
    1010:	ee 0f       	add	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	e4 5c       	subi	r30, 0xC4	; 196
    1016:	fb 4f       	sbci	r31, 0xFB	; 251
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	89 2b       	or	r24, r25
    101e:	29 f5       	brne	.+74     	; 0x106a <recvfrom+0xde>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
    1020:	83 2d       	mov	r24, r3
    1022:	cc d3       	rcall	.+1944   	; 0x17bc <getSn_RX_RSR>
    1024:	7c 01       	movw	r14, r24
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    1026:	b8 01       	movw	r22, r16
    1028:	7d 5f       	subi	r23, 0xFD	; 253
    102a:	07 2e       	mov	r0, r23
    102c:	00 0c       	add	r0, r0
    102e:	88 0b       	sbc	r24, r24
    1030:	99 0b       	sbc	r25, r25
    1032:	8a d1       	rcall	.+788    	; 0x1348 <WIZCHIP_READ>
    1034:	88 23       	and	r24, r24
    1036:	09 f4       	brne	.+2      	; 0x103a <recvfrom+0xae>
    1038:	66 c1       	rjmp	.+716    	; 0x1306 <recvfrom+0x37a>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0c 2c       	mov	r0, r12
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <recvfrom+0xba>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <recvfrom+0xb6>
    104a:	20 91 4e 04 	lds	r18, 0x044E	; 0x80044e <sock_io_mode>
    104e:	30 91 4f 04 	lds	r19, 0x044F	; 0x80044f <sock_io_mode+0x1>
    1052:	82 23       	and	r24, r18
    1054:	93 23       	and	r25, r19
    1056:	89 2b       	or	r24, r25
    1058:	21 f0       	breq	.+8      	; 0x1062 <recvfrom+0xd6>
    105a:	e1 14       	cp	r14, r1
    105c:	f1 04       	cpc	r15, r1
    105e:	09 f4       	brne	.+2      	; 0x1062 <recvfrom+0xd6>
    1060:	57 c1       	rjmp	.+686    	; 0x1310 <recvfrom+0x384>
         if(pack_len != 0) break;
    1062:	e1 14       	cp	r14, r1
    1064:	f1 04       	cpc	r15, r1
    1066:	e1 f2       	breq	.-72     	; 0x1020 <recvfrom+0x94>
    1068:	02 c0       	rjmp	.+4      	; 0x106e <recvfrom+0xe2>
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
    106a:	e1 2c       	mov	r14, r1
    106c:	f1 2c       	mov	r15, r1
         if(pack_len != 0) break;
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
    106e:	82 2d       	mov	r24, r2
    1070:	87 70       	andi	r24, 0x07	; 7
    1072:	83 30       	cpi	r24, 0x03	; 3
    1074:	09 f4       	brne	.+2      	; 0x1078 <recvfrom+0xec>
    1076:	b1 c0       	rjmp	.+354    	; 0x11da <recvfrom+0x24e>
    1078:	84 30       	cpi	r24, 0x04	; 4
    107a:	09 f4       	brne	.+2      	; 0x107e <recvfrom+0xf2>
    107c:	61 c0       	rjmp	.+194    	; 0x1140 <recvfrom+0x1b4>
    107e:	82 30       	cpi	r24, 0x02	; 2
    1080:	09 f0       	breq	.+2      	; 0x1084 <recvfrom+0xf8>
    1082:	fe c0       	rjmp	.+508    	; 0x1280 <recvfrom+0x2f4>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
    1084:	f6 01       	movw	r30, r12
    1086:	ee 0f       	add	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	e4 5c       	subi	r30, 0xC4	; 196
    108c:	fb 4f       	sbci	r31, 0xFB	; 251
    108e:	80 81       	ld	r24, Z
    1090:	91 81       	ldd	r25, Z+1	; 0x01
    1092:	89 2b       	or	r24, r25
    1094:	09 f0       	breq	.+2      	; 0x1098 <recvfrom+0x10c>
    1096:	44 c0       	rjmp	.+136    	; 0x1120 <recvfrom+0x194>
	      {
   			wiz_recv_data(sn, head, 8);
    1098:	48 e0       	ldi	r20, 0x08	; 8
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	be 01       	movw	r22, r28
    109e:	6f 5f       	subi	r22, 0xFF	; 255
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	83 2d       	mov	r24, r3
    10a4:	6a d4       	rcall	.+2260   	; 0x197a <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
    10a6:	c8 01       	movw	r24, r16
    10a8:	93 95       	inc	r25
    10aa:	9c 01       	movw	r18, r24
    10ac:	99 0f       	add	r25, r25
    10ae:	44 0b       	sbc	r20, r20
    10b0:	55 0b       	sbc	r21, r21
    10b2:	29 87       	std	Y+9, r18	; 0x09
    10b4:	3a 87       	std	Y+10, r19	; 0x0a
    10b6:	4b 87       	std	Y+11, r20	; 0x0b
    10b8:	5c 87       	std	Y+12, r21	; 0x0c
    10ba:	40 e4       	ldi	r20, 0x40	; 64
    10bc:	69 85       	ldd	r22, Y+9	; 0x09
    10be:	7a 85       	ldd	r23, Y+10	; 0x0a
    10c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    10c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    10c4:	a8 d1       	rcall	.+848    	; 0x1416 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    10c6:	69 85       	ldd	r22, Y+9	; 0x09
    10c8:	7a 85       	ldd	r23, Y+10	; 0x0a
    10ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    10cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    10ce:	3c d1       	rcall	.+632    	; 0x1348 <WIZCHIP_READ>
    10d0:	81 11       	cpse	r24, r1
    10d2:	f9 cf       	rjmp	.-14     	; 0x10c6 <recvfrom+0x13a>
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
    10d6:	f3 01       	movw	r30, r6
    10d8:	80 83       	st	Z, r24
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
      			addr[1] = head[1];
    10dc:	81 83       	std	Z+1, r24	; 0x01
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
      			addr[2] = head[2];
    10e0:	82 83       	std	Z+2, r24	; 0x02
    10e2:	8c 81       	ldd	r24, Y+4	; 0x04
      			addr[3] = head[3];
    10e4:	83 83       	std	Z+3, r24	; 0x03
    10e6:	8d 81       	ldd	r24, Y+5	; 0x05
      			*port = head[4];
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	98 2f       	mov	r25, r24
      			*port = (*port << 8) + head[5];
    10ec:	88 27       	eor	r24, r24
    10ee:	2e 81       	ldd	r18, Y+6	; 0x06
    10f0:	82 0f       	add	r24, r18
    10f2:	91 1d       	adc	r25, r1
    10f4:	f2 01       	movw	r30, r4
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	80 83       	st	Z, r24
    10fa:	8f 81       	ldd	r24, Y+7	; 0x07
      			sock_remained_size[sn] = head[6];
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	f6 01       	movw	r30, r12
    1100:	ee 0f       	add	r30, r30
    1102:	ff 1f       	adc	r31, r31
    1104:	e4 5c       	subi	r30, 0xC4	; 196
    1106:	fb 4f       	sbci	r31, 0xFB	; 251
    1108:	98 2f       	mov	r25, r24
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
    110a:	88 27       	eor	r24, r24
    110c:	28 85       	ldd	r18, Y+8	; 0x08
    110e:	82 0f       	add	r24, r18
    1110:	91 1d       	adc	r25, r1
    1112:	91 83       	std	Z+1, r25	; 0x01
    1114:	80 83       	st	Z, r24
    1116:	80 e8       	ldi	r24, 0x80	; 128
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
    1118:	f6 01       	movw	r30, r12
    111a:	ec 5c       	subi	r30, 0xCC	; 204
    111c:	fb 4f       	sbci	r31, 0xFB	; 251
    111e:	80 83       	st	Z, r24
    1120:	f6 01       	movw	r30, r12
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
    1122:	ee 0f       	add	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	e4 5c       	subi	r30, 0xC4	; 196
    1128:	fb 4f       	sbci	r31, 0xFB	; 251
    112a:	e0 80       	ld	r14, Z
    112c:	f1 80       	ldd	r15, Z+1	; 0x01
    112e:	ae 14       	cp	r10, r14
    1130:	bf 04       	cpc	r11, r15
    1132:	08 f4       	brcc	.+2      	; 0x1136 <recvfrom+0x1aa>
    1134:	75 01       	movw	r14, r10
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    1136:	a7 01       	movw	r20, r14
    1138:	b4 01       	movw	r22, r8
    113a:	83 2d       	mov	r24, r3
    113c:	1e d4       	rcall	.+2108   	; 0x197a <wiz_recv_data>
    113e:	aa c0       	rjmp	.+340    	; 0x1294 <recvfrom+0x308>
			break;
    1140:	f6 01       	movw	r30, r12
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
    1142:	ee 0f       	add	r30, r30
    1144:	ff 1f       	adc	r31, r31
    1146:	e4 5c       	subi	r30, 0xC4	; 196
    1148:	fb 4f       	sbci	r31, 0xFB	; 251
    114a:	80 81       	ld	r24, Z
    114c:	91 81       	ldd	r25, Z+1	; 0x01
    114e:	89 2b       	or	r24, r25
    1150:	a1 f5       	brne	.+104    	; 0x11ba <recvfrom+0x22e>
	      {
   			wiz_recv_data(sn, head, 2);
    1152:	42 e0       	ldi	r20, 0x02	; 2
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	be 01       	movw	r22, r28
    1158:	6f 5f       	subi	r22, 0xFF	; 255
    115a:	7f 4f       	sbci	r23, 0xFF	; 255
    115c:	83 2d       	mov	r24, r3
    115e:	0d d4       	rcall	.+2074   	; 0x197a <wiz_recv_data>
    1160:	28 01       	movw	r4, r16
   			setSn_CR(sn,Sn_CR_RECV);
    1162:	53 94       	inc	r5
    1164:	05 2c       	mov	r0, r5
    1166:	00 0c       	add	r0, r0
    1168:	66 08       	sbc	r6, r6
    116a:	77 08       	sbc	r7, r7
    116c:	40 e4       	ldi	r20, 0x40	; 64
    116e:	c3 01       	movw	r24, r6
    1170:	b2 01       	movw	r22, r4
    1172:	51 d1       	rcall	.+674    	; 0x1416 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    1174:	c3 01       	movw	r24, r6
    1176:	b2 01       	movw	r22, r4
    1178:	e7 d0       	rcall	.+462    	; 0x1348 <WIZCHIP_READ>
    117a:	81 11       	cpse	r24, r1
    117c:	fb cf       	rjmp	.-10     	; 0x1174 <recvfrom+0x1e8>
    117e:	89 81       	ldd	r24, Y+1	; 0x01
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	f6 01       	movw	r30, r12
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	e4 5c       	subi	r30, 0xC4	; 196
    118a:	fb 4f       	sbci	r31, 0xFB	; 251
    118c:	98 2f       	mov	r25, r24
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
    118e:	88 27       	eor	r24, r24
    1190:	2a 81       	ldd	r18, Y+2	; 0x02
    1192:	82 0f       	add	r24, r18
    1194:	91 1d       	adc	r25, r1
    1196:	02 97       	sbiw	r24, 0x02	; 2
    1198:	91 83       	std	Z+1, r25	; 0x01
    119a:	80 83       	st	Z, r24
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
    119c:	8b 3e       	cpi	r24, 0xEB	; 235
    119e:	95 40       	sbci	r25, 0x05	; 5
    11a0:	38 f0       	brcs	.+14     	; 0x11b0 <recvfrom+0x224>
   			{
   			   close(sn);
    11a2:	83 2d       	mov	r24, r3
    11a4:	3f d9       	rcall	.-3458   	; 0x424 <close>
    11a6:	67 e1       	ldi	r22, 0x17	; 23
   			   return SOCKFATAL_PACKLEN;
    11a8:	7c ef       	ldi	r23, 0xFC	; 252
    11aa:	8f ef       	ldi	r24, 0xFF	; 255
    11ac:	9f ef       	ldi	r25, 0xFF	; 255
    11ae:	b3 c0       	rjmp	.+358    	; 0x1316 <recvfrom+0x38a>
    11b0:	80 e8       	ldi	r24, 0x80	; 128
   			}
   			sock_pack_info[sn] = PACK_FIRST;
    11b2:	f6 01       	movw	r30, r12
    11b4:	ec 5c       	subi	r30, 0xCC	; 204
    11b6:	fb 4f       	sbci	r31, 0xFB	; 251
    11b8:	80 83       	st	Z, r24
    11ba:	f6 01       	movw	r30, r12
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
    11bc:	ee 0f       	add	r30, r30
    11be:	ff 1f       	adc	r31, r31
    11c0:	e4 5c       	subi	r30, 0xC4	; 196
    11c2:	fb 4f       	sbci	r31, 0xFB	; 251
    11c4:	e0 80       	ld	r14, Z
    11c6:	f1 80       	ldd	r15, Z+1	; 0x01
    11c8:	ae 14       	cp	r10, r14
    11ca:	bf 04       	cpc	r11, r15
    11cc:	08 f4       	brcc	.+2      	; 0x11d0 <recvfrom+0x244>
    11ce:	75 01       	movw	r14, r10
			else pack_len = sock_remained_size[sn];
			wiz_recv_data(sn,buf,pack_len);
    11d0:	a7 01       	movw	r20, r14
    11d2:	b4 01       	movw	r22, r8
    11d4:	83 2d       	mov	r24, r3
    11d6:	d1 d3       	rcall	.+1954   	; 0x197a <wiz_recv_data>
    11d8:	5d c0       	rjmp	.+186    	; 0x1294 <recvfrom+0x308>
		   break;
    11da:	f6 01       	movw	r30, r12
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	e4 5c       	subi	r30, 0xC4	; 196
    11e2:	fb 4f       	sbci	r31, 0xFB	; 251
    11e4:	80 81       	ld	r24, Z
    11e6:	91 81       	ldd	r25, Z+1	; 0x01
    11e8:	89 2b       	or	r24, r25
    11ea:	d1 f5       	brne	.+116    	; 0x1260 <recvfrom+0x2d4>
		   {
   			wiz_recv_data(sn, head, 6);
    11ec:	46 e0       	ldi	r20, 0x06	; 6
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	be 01       	movw	r22, r28
    11f2:	6f 5f       	subi	r22, 0xFF	; 255
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	83 2d       	mov	r24, r3
    11f8:	c0 d3       	rcall	.+1920   	; 0x197a <wiz_recv_data>
    11fa:	c8 01       	movw	r24, r16
   			setSn_CR(sn,Sn_CR_RECV);
    11fc:	93 95       	inc	r25
    11fe:	9c 01       	movw	r18, r24
    1200:	99 0f       	add	r25, r25
    1202:	44 0b       	sbc	r20, r20
    1204:	55 0b       	sbc	r21, r21
    1206:	29 87       	std	Y+9, r18	; 0x09
    1208:	3a 87       	std	Y+10, r19	; 0x0a
    120a:	4b 87       	std	Y+11, r20	; 0x0b
    120c:	5c 87       	std	Y+12, r21	; 0x0c
    120e:	40 e4       	ldi	r20, 0x40	; 64
    1210:	69 85       	ldd	r22, Y+9	; 0x09
    1212:	7a 85       	ldd	r23, Y+10	; 0x0a
    1214:	8b 85       	ldd	r24, Y+11	; 0x0b
    1216:	9c 85       	ldd	r25, Y+12	; 0x0c
    1218:	fe d0       	rcall	.+508    	; 0x1416 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    121a:	69 85       	ldd	r22, Y+9	; 0x09
    121c:	7a 85       	ldd	r23, Y+10	; 0x0a
    121e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1220:	9c 85       	ldd	r25, Y+12	; 0x0c
    1222:	92 d0       	rcall	.+292    	; 0x1348 <WIZCHIP_READ>
    1224:	81 11       	cpse	r24, r1
    1226:	f9 cf       	rjmp	.-14     	; 0x121a <recvfrom+0x28e>
    1228:	89 81       	ldd	r24, Y+1	; 0x01
   			addr[0] = head[0];
    122a:	f3 01       	movw	r30, r6
    122c:	80 83       	st	Z, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
   			addr[1] = head[1];
    1230:	81 83       	std	Z+1, r24	; 0x01
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
   			addr[2] = head[2];
    1234:	82 83       	std	Z+2, r24	; 0x02
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
   			addr[3] = head[3];
    1238:	83 83       	std	Z+3, r24	; 0x03
    123a:	8d 81       	ldd	r24, Y+5	; 0x05
   			sock_remained_size[sn] = head[4];
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	f6 01       	movw	r30, r12
    1240:	ee 0f       	add	r30, r30
    1242:	ff 1f       	adc	r31, r31
    1244:	e4 5c       	subi	r30, 0xC4	; 196
    1246:	fb 4f       	sbci	r31, 0xFB	; 251
    1248:	98 2f       	mov	r25, r24
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
    124a:	88 27       	eor	r24, r24
    124c:	2e 81       	ldd	r18, Y+6	; 0x06
    124e:	82 0f       	add	r24, r18
    1250:	91 1d       	adc	r25, r1
    1252:	91 83       	std	Z+1, r25	; 0x01
    1254:	80 83       	st	Z, r24
    1256:	80 e8       	ldi	r24, 0x80	; 128
   			sock_pack_info[sn] = PACK_FIRST;
    1258:	f6 01       	movw	r30, r12
    125a:	ec 5c       	subi	r30, 0xCC	; 204
    125c:	fb 4f       	sbci	r31, 0xFB	; 251
    125e:	80 83       	st	Z, r24
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
    1260:	f6 01       	movw	r30, r12
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	e4 5c       	subi	r30, 0xC4	; 196
    1268:	fb 4f       	sbci	r31, 0xFB	; 251
    126a:	e0 80       	ld	r14, Z
    126c:	f1 80       	ldd	r15, Z+1	; 0x01
    126e:	ae 14       	cp	r10, r14
    1270:	bf 04       	cpc	r11, r15
    1272:	08 f4       	brcc	.+2      	; 0x1276 <recvfrom+0x2ea>
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    1274:	75 01       	movw	r14, r10
    1276:	a7 01       	movw	r20, r14
    1278:	b4 01       	movw	r22, r8
    127a:	83 2d       	mov	r24, r3
    127c:	7e d3       	rcall	.+1788   	; 0x197a <wiz_recv_data>
			break;
    127e:	0a c0       	rjmp	.+20     	; 0x1294 <recvfrom+0x308>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
    1280:	b7 01       	movw	r22, r14
    1282:	83 2d       	mov	r24, r3
    1284:	01 d4       	rcall	.+2050   	; 0x1a88 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
    1286:	f6 01       	movw	r30, r12
    1288:	ee 0f       	add	r30, r30
    128a:	ff 1f       	adc	r31, r31
    128c:	e4 5c       	subi	r30, 0xC4	; 196
    128e:	fb 4f       	sbci	r31, 0xFB	; 251
    1290:	f1 82       	std	Z+1, r15	; 0x01
         break;
   }
	setSn_CR(sn,Sn_CR_RECV);
    1292:	e0 82       	st	Z, r14
    1294:	48 01       	movw	r8, r16
    1296:	93 94       	inc	r9
    1298:	09 2c       	mov	r0, r9
    129a:	00 0c       	add	r0, r0
    129c:	aa 08       	sbc	r10, r10
    129e:	bb 08       	sbc	r11, r11
    12a0:	40 e4       	ldi	r20, 0x40	; 64
    12a2:	c5 01       	movw	r24, r10
    12a4:	b4 01       	movw	r22, r8
    12a6:	b7 d0       	rcall	.+366    	; 0x1416 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
    12a8:	c5 01       	movw	r24, r10
    12aa:	b4 01       	movw	r22, r8
    12ac:	4d d0       	rcall	.+154    	; 0x1348 <WIZCHIP_READ>
    12ae:	81 11       	cpse	r24, r1
    12b0:	fb cf       	rjmp	.-10     	; 0x12a8 <recvfrom+0x31c>
    12b2:	f6 01       	movw	r30, r12
	sock_remained_size[sn] -= pack_len;
    12b4:	ee 0f       	add	r30, r30
    12b6:	ff 1f       	adc	r31, r31
    12b8:	e4 5c       	subi	r30, 0xC4	; 196
    12ba:	fb 4f       	sbci	r31, 0xFB	; 251
    12bc:	80 81       	ld	r24, Z
    12be:	91 81       	ldd	r25, Z+1	; 0x01
    12c0:	8e 19       	sub	r24, r14
    12c2:	9f 09       	sbc	r25, r15
    12c4:	91 83       	std	Z+1, r25	; 0x01
    12c6:	80 83       	st	Z, r24
    12c8:	89 2b       	or	r24, r25
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
    12ca:	39 f0       	breq	.+14     	; 0x12da <recvfrom+0x34e>
    12cc:	f6 01       	movw	r30, r12
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
    12ce:	ec 5c       	subi	r30, 0xCC	; 204
    12d0:	fb 4f       	sbci	r31, 0xFB	; 251
    12d2:	80 81       	ld	r24, Z
    12d4:	81 60       	ori	r24, 0x01	; 1
    12d6:	80 83       	st	Z, r24
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <recvfrom+0x356>
    12da:	f6 01       	movw	r30, r12
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
    12dc:	ec 5c       	subi	r30, 0xCC	; 204
    12de:	fb 4f       	sbci	r31, 0xFB	; 251
    12e0:	10 82       	st	Z, r1
    12e2:	b7 01       	movw	r22, r14
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	16 c0       	rjmp	.+44     	; 0x1316 <recvfrom+0x38a>
    12ea:	6f ef       	ldi	r22, 0xFF	; 255
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
    12ec:	7f ef       	ldi	r23, 0xFF	; 255
    12ee:	cb 01       	movw	r24, r22
    12f0:	12 c0       	rjmp	.+36     	; 0x1316 <recvfrom+0x38a>
    12f2:	6b ef       	ldi	r22, 0xFB	; 251
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
    12f4:	7f ef       	ldi	r23, 0xFF	; 255
    12f6:	8f ef       	ldi	r24, 0xFF	; 255
    12f8:	9f ef       	ldi	r25, 0xFF	; 255
    12fa:	0d c0       	rjmp	.+26     	; 0x1316 <recvfrom+0x38a>
    12fc:	62 ef       	ldi	r22, 0xF2	; 242
   }
   CHECK_SOCKDATA();
    12fe:	7f ef       	ldi	r23, 0xFF	; 255
    1300:	8f ef       	ldi	r24, 0xFF	; 255
    1302:	9f ef       	ldi	r25, 0xFF	; 255
    1304:	08 c0       	rjmp	.+16     	; 0x1316 <recvfrom+0x38a>
    1306:	6c ef       	ldi	r22, 0xFC	; 252
   if(sock_remained_size[sn] == 0)
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    1308:	7f ef       	ldi	r23, 0xFF	; 255
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	9f ef       	ldi	r25, 0xFF	; 255
    130e:	03 c0       	rjmp	.+6      	; 0x1316 <recvfrom+0x38a>
    1310:	60 e0       	ldi	r22, 0x00	; 0
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	cb 01       	movw	r24, r22
    1316:	2c 96       	adiw	r28, 0x0c	; 12
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
}
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	df 90       	pop	r13
    1330:	cf 90       	pop	r12
    1332:	bf 90       	pop	r11
    1334:	af 90       	pop	r10
    1336:	9f 90       	pop	r9
    1338:	8f 90       	pop	r8
    133a:	7f 90       	pop	r7
    133c:	6f 90       	pop	r6
    133e:	5f 90       	pop	r5
    1340:	4f 90       	pop	r4
    1342:	3f 90       	pop	r3
    1344:	2f 90       	pop	r2
    1346:	08 95       	ret

00001348 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
    1348:	df 92       	push	r13
    134a:	ef 92       	push	r14
    134c:	ff 92       	push	r15
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	00 d0       	rcall	.+0      	; 0x1358 <WIZCHIP_READ+0x10>
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	f6 2e       	mov	r15, r22
    135e:	e7 2e       	mov	r14, r23
    1360:	d8 2e       	mov	r13, r24
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
    1362:	06 e0       	ldi	r16, 0x06	; 6
    1364:	12 e0       	ldi	r17, 0x02	; 2
    1366:	d8 01       	movw	r26, r16
    1368:	18 96       	adiw	r26, 0x08	; 8
    136a:	ed 91       	ld	r30, X+
    136c:	fc 91       	ld	r31, X
    136e:	19 97       	sbiw	r26, 0x09	; 9
    1370:	19 95       	eicall
   WIZCHIP.CS._select();
    1372:	d8 01       	movw	r26, r16
    1374:	1c 96       	adiw	r26, 0x0c	; 12
    1376:	ed 91       	ld	r30, X+
    1378:	fc 91       	ld	r31, X
    137a:	1d 97       	sbiw	r26, 0x0d	; 13
    137c:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    137e:	f8 01       	movw	r30, r16
    1380:	84 89       	ldd	r24, Z+20	; 0x14
    1382:	95 89       	ldd	r25, Z+21	; 0x15
    1384:	89 2b       	or	r24, r25
    1386:	31 f0       	breq	.+12     	; 0x1394 <WIZCHIP_READ+0x4c>
    1388:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
    138c:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
    1390:	30 97       	sbiw	r30, 0x00	; 0
    1392:	c1 f4       	brne	.+48     	; 0x13c4 <WIZCHIP_READ+0x7c>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1394:	06 e0       	ldi	r16, 0x06	; 6
    1396:	12 e0       	ldi	r17, 0x02	; 2
    1398:	d8 01       	movw	r26, r16
    139a:	52 96       	adiw	r26, 0x12	; 18
    139c:	ed 91       	ld	r30, X+
    139e:	fc 91       	ld	r31, X
    13a0:	53 97       	sbiw	r26, 0x13	; 19
    13a2:	8d 2d       	mov	r24, r13
    13a4:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    13a6:	d8 01       	movw	r26, r16
    13a8:	52 96       	adiw	r26, 0x12	; 18
    13aa:	ed 91       	ld	r30, X+
    13ac:	fc 91       	ld	r31, X
    13ae:	53 97       	sbiw	r26, 0x13	; 19
    13b0:	8e 2d       	mov	r24, r14
    13b2:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    13b4:	d8 01       	movw	r26, r16
    13b6:	52 96       	adiw	r26, 0x12	; 18
    13b8:	ed 91       	ld	r30, X+
    13ba:	fc 91       	ld	r31, X
    13bc:	53 97       	sbiw	r26, 0x13	; 19
    13be:	8f 2d       	mov	r24, r15
    13c0:	19 95       	eicall
    13c2:	08 c0       	rjmp	.+16     	; 0x13d4 <WIZCHIP_READ+0x8c>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    13c4:	d9 82       	std	Y+1, r13	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    13c6:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    13c8:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    13ca:	63 e0       	ldi	r22, 0x03	; 3
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	ce 01       	movw	r24, r28
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	19 95       	eicall
   }
   ret = WIZCHIP.IF.SPI._read_byte();
    13d4:	06 e0       	ldi	r16, 0x06	; 6
    13d6:	12 e0       	ldi	r17, 0x02	; 2
    13d8:	d8 01       	movw	r26, r16
    13da:	50 96       	adiw	r26, 0x10	; 16
    13dc:	ed 91       	ld	r30, X+
    13de:	fc 91       	ld	r31, X
    13e0:	51 97       	sbiw	r26, 0x11	; 17
    13e2:	19 95       	eicall
    13e4:	f8 2e       	mov	r15, r24

   WIZCHIP.CS._deselect();
    13e6:	d8 01       	movw	r26, r16
    13e8:	1e 96       	adiw	r26, 0x0e	; 14
    13ea:	ed 91       	ld	r30, X+
    13ec:	fc 91       	ld	r31, X
    13ee:	1f 97       	sbiw	r26, 0x0f	; 15
    13f0:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    13f2:	d8 01       	movw	r26, r16
    13f4:	1a 96       	adiw	r26, 0x0a	; 10
    13f6:	ed 91       	ld	r30, X+
    13f8:	fc 91       	ld	r31, X
    13fa:	1b 97       	sbiw	r26, 0x0b	; 11
    13fc:	19 95       	eicall
   return ret;
}
    13fe:	8f 2d       	mov	r24, r15
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	ff 90       	pop	r15
    1410:	ef 90       	pop	r14
    1412:	df 90       	pop	r13
    1414:	08 95       	ret

00001416 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
    1416:	4f 92       	push	r4
    1418:	5f 92       	push	r5
    141a:	6f 92       	push	r6
    141c:	7f 92       	push	r7
    141e:	bf 92       	push	r11
    1420:	cf 92       	push	r12
    1422:	df 92       	push	r13
    1424:	ef 92       	push	r14
    1426:	ff 92       	push	r15
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	00 d0       	rcall	.+0      	; 0x1432 <WIZCHIP_WRITE+0x1c>
    1432:	1f 92       	push	r1
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	6b 01       	movw	r12, r22
    143a:	7c 01       	movw	r14, r24
    143c:	b4 2e       	mov	r11, r20
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
    143e:	06 e0       	ldi	r16, 0x06	; 6
    1440:	12 e0       	ldi	r17, 0x02	; 2
    1442:	d8 01       	movw	r26, r16
    1444:	18 96       	adiw	r26, 0x08	; 8
    1446:	ed 91       	ld	r30, X+
    1448:	fc 91       	ld	r31, X
    144a:	19 97       	sbiw	r26, 0x09	; 9
    144c:	19 95       	eicall
   WIZCHIP.CS._select();
    144e:	d8 01       	movw	r26, r16
    1450:	1c 96       	adiw	r26, 0x0c	; 12
    1452:	ed 91       	ld	r30, X+
    1454:	fc 91       	ld	r31, X
    1456:	1d 97       	sbiw	r26, 0x0d	; 13
    1458:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    145a:	26 01       	movw	r4, r12
    145c:	37 01       	movw	r6, r14
    145e:	68 94       	set
    1460:	42 f8       	bld	r4, 2

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    1462:	d8 01       	movw	r26, r16
    1464:	56 96       	adiw	r26, 0x16	; 22
    1466:	ed 91       	ld	r30, X+
    1468:	fc 91       	ld	r31, X
    146a:	57 97       	sbiw	r26, 0x17	; 23
    146c:	30 97       	sbiw	r30, 0x00	; 0
    146e:	e1 f4       	brne	.+56     	; 0x14a8 <WIZCHIP_WRITE+0x92>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1470:	52 96       	adiw	r26, 0x12	; 18
    1472:	ed 91       	ld	r30, X+
    1474:	fc 91       	ld	r31, X
    1476:	53 97       	sbiw	r26, 0x13	; 19
    1478:	8e 2d       	mov	r24, r14
    147a:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    147c:	d8 01       	movw	r26, r16
    147e:	52 96       	adiw	r26, 0x12	; 18
    1480:	ed 91       	ld	r30, X+
    1482:	fc 91       	ld	r31, X
    1484:	53 97       	sbiw	r26, 0x13	; 19
    1486:	8d 2d       	mov	r24, r13
    1488:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    148a:	d8 01       	movw	r26, r16
    148c:	52 96       	adiw	r26, 0x12	; 18
    148e:	ed 91       	ld	r30, X+
    1490:	fc 91       	ld	r31, X
    1492:	53 97       	sbiw	r26, 0x13	; 19
    1494:	84 2d       	mov	r24, r4
    1496:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte(wb);
    1498:	d8 01       	movw	r26, r16
    149a:	52 96       	adiw	r26, 0x12	; 18
    149c:	ed 91       	ld	r30, X+
    149e:	fc 91       	ld	r31, X
    14a0:	53 97       	sbiw	r26, 0x13	; 19
    14a2:	8b 2d       	mov	r24, r11
    14a4:	19 95       	eicall
    14a6:	09 c0       	rjmp	.+18     	; 0x14ba <WIZCHIP_WRITE+0xa4>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    14a8:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    14aa:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    14ac:	4b 82       	std	Y+3, r4	; 0x03
		spi_data[3] = wb;
    14ae:	bc 82       	std	Y+4, r11	; 0x04
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
    14b0:	64 e0       	ldi	r22, 0x04	; 4
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	ce 01       	movw	r24, r28
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    14ba:	06 e0       	ldi	r16, 0x06	; 6
    14bc:	12 e0       	ldi	r17, 0x02	; 2
    14be:	d8 01       	movw	r26, r16
    14c0:	1e 96       	adiw	r26, 0x0e	; 14
    14c2:	ed 91       	ld	r30, X+
    14c4:	fc 91       	ld	r31, X
    14c6:	1f 97       	sbiw	r26, 0x0f	; 15
    14c8:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    14ca:	d8 01       	movw	r26, r16
    14cc:	1a 96       	adiw	r26, 0x0a	; 10
    14ce:	ed 91       	ld	r30, X+
    14d0:	fc 91       	ld	r31, X
    14d2:	1b 97       	sbiw	r26, 0x0b	; 11
    14d4:	19 95       	eicall
}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	df 90       	pop	r13
    14ec:	cf 90       	pop	r12
    14ee:	bf 90       	pop	r11
    14f0:	7f 90       	pop	r7
    14f2:	6f 90       	pop	r6
    14f4:	5f 90       	pop	r5
    14f6:	4f 90       	pop	r4
    14f8:	08 95       	ret

000014fa <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    14fa:	9f 92       	push	r9
    14fc:	af 92       	push	r10
    14fe:	bf 92       	push	r11
    1500:	cf 92       	push	r12
    1502:	df 92       	push	r13
    1504:	ef 92       	push	r14
    1506:	ff 92       	push	r15
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	00 d0       	rcall	.+0      	; 0x1512 <WIZCHIP_READ_BUF+0x18>
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	f6 2e       	mov	r15, r22
    1518:	e7 2e       	mov	r14, r23
    151a:	98 2e       	mov	r9, r24
    151c:	5a 01       	movw	r10, r20
    151e:	69 01       	movw	r12, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    1520:	06 e0       	ldi	r16, 0x06	; 6
    1522:	12 e0       	ldi	r17, 0x02	; 2
    1524:	d8 01       	movw	r26, r16
    1526:	18 96       	adiw	r26, 0x08	; 8
    1528:	ed 91       	ld	r30, X+
    152a:	fc 91       	ld	r31, X
    152c:	19 97       	sbiw	r26, 0x09	; 9
    152e:	19 95       	eicall
   WIZCHIP.CS._select();
    1530:	d8 01       	movw	r26, r16
    1532:	1c 96       	adiw	r26, 0x0c	; 12
    1534:	ed 91       	ld	r30, X+
    1536:	fc 91       	ld	r31, X
    1538:	1d 97       	sbiw	r26, 0x0d	; 13
    153a:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    153c:	f8 01       	movw	r30, r16
    153e:	84 89       	ldd	r24, Z+20	; 0x14
    1540:	95 89       	ldd	r25, Z+21	; 0x15
    1542:	89 2b       	or	r24, r25
    1544:	31 f0       	breq	.+12     	; 0x1552 <WIZCHIP_READ_BUF+0x58>
    1546:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
    154a:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
    154e:	30 97       	sbiw	r30, 0x00	; 0
    1550:	51 f5       	brne	.+84     	; 0x15a6 <WIZCHIP_READ_BUF+0xac>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1552:	06 e0       	ldi	r16, 0x06	; 6
    1554:	12 e0       	ldi	r17, 0x02	; 2
    1556:	d8 01       	movw	r26, r16
    1558:	52 96       	adiw	r26, 0x12	; 18
    155a:	ed 91       	ld	r30, X+
    155c:	fc 91       	ld	r31, X
    155e:	53 97       	sbiw	r26, 0x13	; 19
    1560:	89 2d       	mov	r24, r9
    1562:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    1564:	d8 01       	movw	r26, r16
    1566:	52 96       	adiw	r26, 0x12	; 18
    1568:	ed 91       	ld	r30, X+
    156a:	fc 91       	ld	r31, X
    156c:	53 97       	sbiw	r26, 0x13	; 19
    156e:	8e 2d       	mov	r24, r14
    1570:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    1572:	d8 01       	movw	r26, r16
    1574:	52 96       	adiw	r26, 0x12	; 18
    1576:	ed 91       	ld	r30, X+
    1578:	fc 91       	ld	r31, X
    157a:	53 97       	sbiw	r26, 0x13	; 19
    157c:	8f 2d       	mov	r24, r15
    157e:	19 95       	eicall
		for(i = 0; i < len; i++)
    1580:	00 e0       	ldi	r16, 0x00	; 0
    1582:	10 e0       	ldi	r17, 0x00	; 0
    1584:	0c c0       	rjmp	.+24     	; 0x159e <WIZCHIP_READ_BUF+0xa4>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
    1586:	75 01       	movw	r14, r10
    1588:	e0 0e       	add	r14, r16
    158a:	f1 1e       	adc	r15, r17
    158c:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <WIZCHIP+0x10>
    1590:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <WIZCHIP+0x11>
    1594:	19 95       	eicall
    1596:	f7 01       	movw	r30, r14
    1598:	80 83       	st	Z, r24
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    159a:	0f 5f       	subi	r16, 0xFF	; 255
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
    159e:	0c 15       	cp	r16, r12
    15a0:	1d 05       	cpc	r17, r13
    15a2:	88 f3       	brcs	.-30     	; 0x1586 <WIZCHIP_READ_BUF+0x8c>
    15a4:	0f c0       	rjmp	.+30     	; 0x15c4 <WIZCHIP_READ_BUF+0xca>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    15a6:	99 82       	std	Y+1, r9	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    15a8:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    15aa:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    15ac:	63 e0       	ldi	r22, 0x03	; 3
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	ce 01       	movw	r24, r28
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	19 95       	eicall
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
    15b6:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <WIZCHIP+0x14>
    15ba:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <WIZCHIP+0x15>
    15be:	b6 01       	movw	r22, r12
    15c0:	c5 01       	movw	r24, r10
    15c2:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    15c4:	06 e0       	ldi	r16, 0x06	; 6
    15c6:	12 e0       	ldi	r17, 0x02	; 2
    15c8:	d8 01       	movw	r26, r16
    15ca:	1e 96       	adiw	r26, 0x0e	; 14
    15cc:	ed 91       	ld	r30, X+
    15ce:	fc 91       	ld	r31, X
    15d0:	1f 97       	sbiw	r26, 0x0f	; 15
    15d2:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    15d4:	d8 01       	movw	r26, r16
    15d6:	1a 96       	adiw	r26, 0x0a	; 10
    15d8:	ed 91       	ld	r30, X+
    15da:	fc 91       	ld	r31, X
    15dc:	1b 97       	sbiw	r26, 0x0b	; 11
    15de:	19 95       	eicall
}
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	ff 90       	pop	r15
    15f0:	ef 90       	pop	r14
    15f2:	df 90       	pop	r13
    15f4:	cf 90       	pop	r12
    15f6:	bf 90       	pop	r11
    15f8:	af 90       	pop	r10
    15fa:	9f 90       	pop	r9
    15fc:	08 95       	ret

000015fe <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    15fe:	4f 92       	push	r4
    1600:	5f 92       	push	r5
    1602:	6f 92       	push	r6
    1604:	7f 92       	push	r7
    1606:	8f 92       	push	r8
    1608:	9f 92       	push	r9
    160a:	af 92       	push	r10
    160c:	bf 92       	push	r11
    160e:	cf 92       	push	r12
    1610:	df 92       	push	r13
    1612:	ef 92       	push	r14
    1614:	ff 92       	push	r15
    1616:	0f 93       	push	r16
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	00 d0       	rcall	.+0      	; 0x1620 <WIZCHIP_WRITE_BUF+0x22>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	6b 01       	movw	r12, r22
    1626:	7c 01       	movw	r14, r24
    1628:	4a 01       	movw	r8, r20
    162a:	59 01       	movw	r10, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    162c:	06 e0       	ldi	r16, 0x06	; 6
    162e:	12 e0       	ldi	r17, 0x02	; 2
    1630:	d8 01       	movw	r26, r16
    1632:	18 96       	adiw	r26, 0x08	; 8
    1634:	ed 91       	ld	r30, X+
    1636:	fc 91       	ld	r31, X
    1638:	19 97       	sbiw	r26, 0x09	; 9
    163a:	19 95       	eicall
   WIZCHIP.CS._select();
    163c:	d8 01       	movw	r26, r16
    163e:	1c 96       	adiw	r26, 0x0c	; 12
    1640:	ed 91       	ld	r30, X+
    1642:	fc 91       	ld	r31, X
    1644:	1d 97       	sbiw	r26, 0x0d	; 13
    1646:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    1648:	26 01       	movw	r4, r12
    164a:	37 01       	movw	r6, r14
    164c:	68 94       	set
    164e:	42 f8       	bld	r4, 2

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    1650:	d8 01       	movw	r26, r16
    1652:	56 96       	adiw	r26, 0x16	; 22
    1654:	ed 91       	ld	r30, X+
    1656:	fc 91       	ld	r31, X
    1658:	57 97       	sbiw	r26, 0x17	; 23
    165a:	30 97       	sbiw	r30, 0x00	; 0
    165c:	31 f5       	brne	.+76     	; 0x16aa <WIZCHIP_WRITE_BUF+0xac>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    165e:	52 96       	adiw	r26, 0x12	; 18
    1660:	ed 91       	ld	r30, X+
    1662:	fc 91       	ld	r31, X
    1664:	53 97       	sbiw	r26, 0x13	; 19
    1666:	8e 2d       	mov	r24, r14
    1668:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    166a:	d8 01       	movw	r26, r16
    166c:	52 96       	adiw	r26, 0x12	; 18
    166e:	ed 91       	ld	r30, X+
    1670:	fc 91       	ld	r31, X
    1672:	53 97       	sbiw	r26, 0x13	; 19
    1674:	8d 2d       	mov	r24, r13
    1676:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    1678:	d8 01       	movw	r26, r16
    167a:	52 96       	adiw	r26, 0x12	; 18
    167c:	ed 91       	ld	r30, X+
    167e:	fc 91       	ld	r31, X
    1680:	53 97       	sbiw	r26, 0x13	; 19
    1682:	84 2d       	mov	r24, r4
    1684:	19 95       	eicall
		for(i = 0; i < len; i++)
    1686:	00 e0       	ldi	r16, 0x00	; 0
    1688:	10 e0       	ldi	r17, 0x00	; 0
    168a:	0b c0       	rjmp	.+22     	; 0x16a2 <WIZCHIP_WRITE_BUF+0xa4>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
    168c:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <WIZCHIP+0x12>
    1690:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <WIZCHIP+0x13>
    1694:	d4 01       	movw	r26, r8
    1696:	a0 0f       	add	r26, r16
    1698:	b1 1f       	adc	r27, r17
    169a:	8c 91       	ld	r24, X
    169c:	19 95       	eicall
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    169e:	0f 5f       	subi	r16, 0xFF	; 255
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	0a 15       	cp	r16, r10
    16a4:	1b 05       	cpc	r17, r11
    16a6:	90 f3       	brcs	.-28     	; 0x168c <WIZCHIP_WRITE_BUF+0x8e>
    16a8:	0f c0       	rjmp	.+30     	; 0x16c8 <WIZCHIP_WRITE_BUF+0xca>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    16aa:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    16ac:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    16ae:	4b 82       	std	Y+3, r4	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    16b0:	63 e0       	ldi	r22, 0x03	; 3
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	ce 01       	movw	r24, r28
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	19 95       	eicall
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
    16ba:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
    16be:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
    16c2:	b5 01       	movw	r22, r10
    16c4:	c4 01       	movw	r24, r8
    16c6:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    16c8:	06 e0       	ldi	r16, 0x06	; 6
    16ca:	12 e0       	ldi	r17, 0x02	; 2
    16cc:	d8 01       	movw	r26, r16
    16ce:	1e 96       	adiw	r26, 0x0e	; 14
    16d0:	ed 91       	ld	r30, X+
    16d2:	fc 91       	ld	r31, X
    16d4:	1f 97       	sbiw	r26, 0x0f	; 15
    16d6:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    16d8:	d8 01       	movw	r26, r16
    16da:	1a 96       	adiw	r26, 0x0a	; 10
    16dc:	ed 91       	ld	r30, X+
    16de:	fc 91       	ld	r31, X
    16e0:	1b 97       	sbiw	r26, 0x0b	; 11
    16e2:	19 95       	eicall
}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	df 90       	pop	r13
    16f8:	cf 90       	pop	r12
    16fa:	bf 90       	pop	r11
    16fc:	af 90       	pop	r10
    16fe:	9f 90       	pop	r9
    1700:	8f 90       	pop	r8
    1702:	7f 90       	pop	r7
    1704:	6f 90       	pop	r6
    1706:	5f 90       	pop	r5
    1708:	4f 90       	pop	r4
    170a:	08 95       	ret

0000170c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
    170c:	7f 92       	push	r7
    170e:	8f 92       	push	r8
    1710:	9f 92       	push	r9
    1712:	af 92       	push	r10
    1714:	bf 92       	push	r11
    1716:	cf 92       	push	r12
    1718:	df 92       	push	r13
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	78 2e       	mov	r7, r24
   uint16_t val=0,val1=0;
    1728:	00 e0       	ldi	r16, 0x00	; 0
    172a:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    172c:	c7 2c       	mov	r12, r7
    172e:	d1 2c       	mov	r13, r1
    1730:	cc 0c       	add	r12, r12
    1732:	dd 1c       	adc	r13, r13
    1734:	cc 0c       	add	r12, r12
    1736:	dd 1c       	adc	r13, r13
    1738:	8f ef       	ldi	r24, 0xFF	; 255
    173a:	c8 1a       	sub	r12, r24
    173c:	d8 0a       	sbc	r13, r24
    173e:	cc 0c       	add	r12, r12
    1740:	dd 1c       	adc	r13, r13
    1742:	cc 0c       	add	r12, r12
    1744:	dd 1c       	adc	r13, r13
    1746:	cc 0c       	add	r12, r12
    1748:	dd 1c       	adc	r13, r13
    174a:	46 01       	movw	r8, r12
    174c:	80 ee       	ldi	r24, 0xE0	; 224
    174e:	98 1a       	sub	r9, r24
    1750:	09 2c       	mov	r0, r9
    1752:	00 0c       	add	r0, r0
    1754:	aa 08       	sbc	r10, r10
    1756:	bb 08       	sbc	r11, r11
    1758:	c5 01       	movw	r24, r10
    175a:	b4 01       	movw	r22, r8
    175c:	f5 dd       	rcall	.-1046   	; 0x1348 <WIZCHIP_READ>
    175e:	c8 2f       	mov	r28, r24
    1760:	d0 e0       	ldi	r29, 0x00	; 0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    1762:	dc 2f       	mov	r29, r28
    1764:	cc 27       	eor	r28, r28
    1766:	8f ed       	ldi	r24, 0xDF	; 223
    1768:	d8 1a       	sub	r13, r24
    176a:	0d 2c       	mov	r0, r13
    176c:	00 0c       	add	r0, r0
    176e:	ee 08       	sbc	r14, r14
    1770:	ff 08       	sbc	r15, r15
    1772:	c7 01       	movw	r24, r14
    1774:	b6 01       	movw	r22, r12
    1776:	e8 dd       	rcall	.-1072   	; 0x1348 <WIZCHIP_READ>
    1778:	c8 0f       	add	r28, r24
    177a:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    177c:	20 97       	sbiw	r28, 0x00	; 0
    177e:	61 f0       	breq	.+24     	; 0x1798 <getSn_TX_FSR+0x8c>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
    1780:	c5 01       	movw	r24, r10
    1782:	b4 01       	movw	r22, r8
    1784:	e1 dd       	rcall	.-1086   	; 0x1348 <WIZCHIP_READ>
    1786:	08 2f       	mov	r16, r24
    1788:	10 e0       	ldi	r17, 0x00	; 0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    178a:	10 2f       	mov	r17, r16
    178c:	00 27       	eor	r16, r16
    178e:	c7 01       	movw	r24, r14
    1790:	b6 01       	movw	r22, r12
    1792:	da dd       	rcall	.-1100   	; 0x1348 <WIZCHIP_READ>
    1794:	08 0f       	add	r16, r24
    1796:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    1798:	0c 17       	cp	r16, r28
    179a:	1d 07       	cpc	r17, r29
    179c:	39 f6       	brne	.-114    	; 0x172c <getSn_TX_FSR+0x20>
   return val;
}
    179e:	c8 01       	movw	r24, r16
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	df 90       	pop	r13
    17ae:	cf 90       	pop	r12
    17b0:	bf 90       	pop	r11
    17b2:	af 90       	pop	r10
    17b4:	9f 90       	pop	r9
    17b6:	8f 90       	pop	r8
    17b8:	7f 90       	pop	r7
    17ba:	08 95       	ret

000017bc <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
    17bc:	7f 92       	push	r7
    17be:	8f 92       	push	r8
    17c0:	9f 92       	push	r9
    17c2:	af 92       	push	r10
    17c4:	bf 92       	push	r11
    17c6:	cf 92       	push	r12
    17c8:	df 92       	push	r13
    17ca:	ef 92       	push	r14
    17cc:	ff 92       	push	r15
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	78 2e       	mov	r7, r24
   uint16_t val=0,val1=0;
    17d8:	00 e0       	ldi	r16, 0x00	; 0
    17da:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    17dc:	c7 2c       	mov	r12, r7
    17de:	d1 2c       	mov	r13, r1
    17e0:	cc 0c       	add	r12, r12
    17e2:	dd 1c       	adc	r13, r13
    17e4:	cc 0c       	add	r12, r12
    17e6:	dd 1c       	adc	r13, r13
    17e8:	8f ef       	ldi	r24, 0xFF	; 255
    17ea:	c8 1a       	sub	r12, r24
    17ec:	d8 0a       	sbc	r13, r24
    17ee:	cc 0c       	add	r12, r12
    17f0:	dd 1c       	adc	r13, r13
    17f2:	cc 0c       	add	r12, r12
    17f4:	dd 1c       	adc	r13, r13
    17f6:	cc 0c       	add	r12, r12
    17f8:	dd 1c       	adc	r13, r13
    17fa:	46 01       	movw	r8, r12
    17fc:	8a ed       	ldi	r24, 0xDA	; 218
    17fe:	98 1a       	sub	r9, r24
    1800:	09 2c       	mov	r0, r9
    1802:	00 0c       	add	r0, r0
    1804:	aa 08       	sbc	r10, r10
    1806:	bb 08       	sbc	r11, r11
    1808:	c5 01       	movw	r24, r10
    180a:	b4 01       	movw	r22, r8
    180c:	9d dd       	rcall	.-1222   	; 0x1348 <WIZCHIP_READ>
    180e:	c8 2f       	mov	r28, r24
    1810:	d0 e0       	ldi	r29, 0x00	; 0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    1812:	dc 2f       	mov	r29, r28
    1814:	cc 27       	eor	r28, r28
    1816:	89 ed       	ldi	r24, 0xD9	; 217
    1818:	d8 1a       	sub	r13, r24
    181a:	0d 2c       	mov	r0, r13
    181c:	00 0c       	add	r0, r0
    181e:	ee 08       	sbc	r14, r14
    1820:	ff 08       	sbc	r15, r15
    1822:	c7 01       	movw	r24, r14
    1824:	b6 01       	movw	r22, r12
    1826:	90 dd       	rcall	.-1248   	; 0x1348 <WIZCHIP_READ>
    1828:	c8 0f       	add	r28, r24
    182a:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    182c:	20 97       	sbiw	r28, 0x00	; 0
    182e:	61 f0       	breq	.+24     	; 0x1848 <getSn_RX_RSR+0x8c>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
    1830:	c5 01       	movw	r24, r10
    1832:	b4 01       	movw	r22, r8
    1834:	89 dd       	rcall	.-1262   	; 0x1348 <WIZCHIP_READ>
    1836:	08 2f       	mov	r16, r24
    1838:	10 e0       	ldi	r17, 0x00	; 0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    183a:	10 2f       	mov	r17, r16
    183c:	00 27       	eor	r16, r16
    183e:	c7 01       	movw	r24, r14
    1840:	b6 01       	movw	r22, r12
    1842:	82 dd       	rcall	.-1276   	; 0x1348 <WIZCHIP_READ>
    1844:	08 0f       	add	r16, r24
    1846:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    1848:	0c 17       	cp	r16, r28
    184a:	1d 07       	cpc	r17, r29
    184c:	39 f6       	brne	.-114    	; 0x17dc <getSn_RX_RSR+0x20>
   return val;
}
    184e:	c8 01       	movw	r24, r16
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	ff 90       	pop	r15
    185a:	ef 90       	pop	r14
    185c:	df 90       	pop	r13
    185e:	cf 90       	pop	r12
    1860:	bf 90       	pop	r11
    1862:	af 90       	pop	r10
    1864:	9f 90       	pop	r9
    1866:	8f 90       	pop	r8
    1868:	7f 90       	pop	r7
    186a:	08 95       	ret

0000186c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    186c:	2f 92       	push	r2
    186e:	3f 92       	push	r3
    1870:	4f 92       	push	r4
    1872:	5f 92       	push	r5
    1874:	6f 92       	push	r6
    1876:	7f 92       	push	r7
    1878:	8f 92       	push	r8
    187a:	9f 92       	push	r9
    187c:	af 92       	push	r10
    187e:	bf 92       	push	r11
    1880:	cf 92       	push	r12
    1882:	df 92       	push	r13
    1884:	ef 92       	push	r14
    1886:	ff 92       	push	r15
    1888:	0f 93       	push	r16
    188a:	1f 93       	push	r17
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	00 d0       	rcall	.+0      	; 0x1892 <wiz_send_data+0x26>
    1892:	1f 92       	push	r1
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
    1898:	41 15       	cp	r20, r1
    189a:	51 05       	cpc	r21, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <wiz_send_data+0x34>
    189e:	56 c0       	rjmp	.+172    	; 0x194c <wiz_send_data+0xe0>
    18a0:	3a 01       	movw	r6, r20
    18a2:	7a 83       	std	Y+2, r23	; 0x02
    18a4:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_TX_WR(sn);
    18a6:	28 2e       	mov	r2, r24
    18a8:	31 2c       	mov	r3, r1
    18aa:	22 0c       	add	r2, r2
    18ac:	33 1c       	adc	r3, r3
    18ae:	22 0c       	add	r2, r2
    18b0:	33 1c       	adc	r3, r3
    18b2:	61 01       	movw	r12, r2
    18b4:	2f ef       	ldi	r18, 0xFF	; 255
    18b6:	c2 1a       	sub	r12, r18
    18b8:	d2 0a       	sbc	r13, r18
    18ba:	cc 0c       	add	r12, r12
    18bc:	dd 1c       	adc	r13, r13
    18be:	cc 0c       	add	r12, r12
    18c0:	dd 1c       	adc	r13, r13
    18c2:	cc 0c       	add	r12, r12
    18c4:	dd 1c       	adc	r13, r13
    18c6:	46 01       	movw	r8, r12
    18c8:	3c ed       	ldi	r19, 0xDC	; 220
    18ca:	93 1a       	sub	r9, r19
    18cc:	09 2c       	mov	r0, r9
    18ce:	00 0c       	add	r0, r0
    18d0:	aa 08       	sbc	r10, r10
    18d2:	bb 08       	sbc	r11, r11
    18d4:	c5 01       	movw	r24, r10
    18d6:	b4 01       	movw	r22, r8
    18d8:	37 dd       	rcall	.-1426   	; 0x1348 <WIZCHIP_READ>
    18da:	08 2f       	mov	r16, r24
    18dc:	10 e0       	ldi	r17, 0x00	; 0
    18de:	10 2f       	mov	r17, r16
    18e0:	00 27       	eor	r16, r16
    18e2:	8b ed       	ldi	r24, 0xDB	; 219
    18e4:	d8 1a       	sub	r13, r24
    18e6:	0d 2c       	mov	r0, r13
    18e8:	00 0c       	add	r0, r0
    18ea:	ee 08       	sbc	r14, r14
    18ec:	ff 08       	sbc	r15, r15
    18ee:	c7 01       	movw	r24, r14
    18f0:	b6 01       	movw	r22, r12
    18f2:	2a dd       	rcall	.-1452   	; 0x1348 <WIZCHIP_READ>
    18f4:	08 0f       	add	r16, r24
    18f6:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
    18f8:	c8 01       	movw	r24, r16
    18fa:	a0 e0       	ldi	r26, 0x00	; 0
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	44 27       	eor	r20, r20
    1900:	58 2f       	mov	r21, r24
    1902:	69 2f       	mov	r22, r25
    1904:	7a 2f       	mov	r23, r26
    1906:	c1 01       	movw	r24, r2
    1908:	02 96       	adiw	r24, 0x02	; 2
    190a:	1c 01       	movw	r2, r24
    190c:	22 0c       	add	r2, r2
    190e:	33 1c       	adc	r3, r3
    1910:	22 0c       	add	r2, r2
    1912:	33 1c       	adc	r3, r3
    1914:	22 0c       	add	r2, r2
    1916:	33 1c       	adc	r3, r3
    1918:	c1 01       	movw	r24, r2
    191a:	33 0c       	add	r3, r3
    191c:	aa 0b       	sbc	r26, r26
    191e:	bb 0b       	sbc	r27, r27
    1920:	1a 01       	movw	r2, r20
    1922:	2b 01       	movw	r4, r22
    1924:	28 0e       	add	r2, r24
    1926:	39 1e       	adc	r3, r25
    1928:	4a 1e       	adc	r4, r26
    192a:	5b 1e       	adc	r5, r27
    192c:	c2 01       	movw	r24, r4
    192e:	b1 01       	movw	r22, r2
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    1930:	93 01       	movw	r18, r6
    1932:	49 81       	ldd	r20, Y+1	; 0x01
    1934:	5a 81       	ldd	r21, Y+2	; 0x02
    1936:	63 de       	rcall	.-826    	; 0x15fe <WIZCHIP_WRITE_BUF>
   
   ptr += len;
    1938:	06 0d       	add	r16, r6
    193a:	17 1d       	adc	r17, r7
   setSn_TX_WR(sn,ptr);
    193c:	41 2f       	mov	r20, r17
    193e:	c5 01       	movw	r24, r10
    1940:	b4 01       	movw	r22, r8
    1942:	69 dd       	rcall	.-1326   	; 0x1416 <WIZCHIP_WRITE>
    1944:	40 2f       	mov	r20, r16
    1946:	c7 01       	movw	r24, r14
    1948:	b6 01       	movw	r22, r12
    194a:	65 dd       	rcall	.-1334   	; 0x1416 <WIZCHIP_WRITE>
}
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	bf 90       	pop	r11
    1966:	af 90       	pop	r10
    1968:	9f 90       	pop	r9
    196a:	8f 90       	pop	r8
    196c:	7f 90       	pop	r7
    196e:	6f 90       	pop	r6
    1970:	5f 90       	pop	r5
    1972:	4f 90       	pop	r4
    1974:	3f 90       	pop	r3
    1976:	2f 90       	pop	r2
    1978:	08 95       	ret

0000197a <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    197a:	2f 92       	push	r2
    197c:	3f 92       	push	r3
    197e:	4f 92       	push	r4
    1980:	5f 92       	push	r5
    1982:	6f 92       	push	r6
    1984:	7f 92       	push	r7
    1986:	8f 92       	push	r8
    1988:	9f 92       	push	r9
    198a:	af 92       	push	r10
    198c:	bf 92       	push	r11
    198e:	cf 92       	push	r12
    1990:	df 92       	push	r13
    1992:	ef 92       	push	r14
    1994:	ff 92       	push	r15
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <wiz_recv_data+0x26>
    19a0:	1f 92       	push	r1
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
    19a6:	41 15       	cp	r20, r1
    19a8:	51 05       	cpc	r21, r1
    19aa:	09 f4       	brne	.+2      	; 0x19ae <wiz_recv_data+0x34>
    19ac:	56 c0       	rjmp	.+172    	; 0x1a5a <wiz_recv_data+0xe0>
    19ae:	3a 01       	movw	r6, r20
    19b0:	7a 83       	std	Y+2, r23	; 0x02
    19b2:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_RX_RD(sn);
    19b4:	28 2e       	mov	r2, r24
    19b6:	31 2c       	mov	r3, r1
    19b8:	22 0c       	add	r2, r2
    19ba:	33 1c       	adc	r3, r3
    19bc:	22 0c       	add	r2, r2
    19be:	33 1c       	adc	r3, r3
    19c0:	61 01       	movw	r12, r2
    19c2:	2f ef       	ldi	r18, 0xFF	; 255
    19c4:	c2 1a       	sub	r12, r18
    19c6:	d2 0a       	sbc	r13, r18
    19c8:	cc 0c       	add	r12, r12
    19ca:	dd 1c       	adc	r13, r13
    19cc:	cc 0c       	add	r12, r12
    19ce:	dd 1c       	adc	r13, r13
    19d0:	cc 0c       	add	r12, r12
    19d2:	dd 1c       	adc	r13, r13
    19d4:	46 01       	movw	r8, r12
    19d6:	38 ed       	ldi	r19, 0xD8	; 216
    19d8:	93 1a       	sub	r9, r19
    19da:	09 2c       	mov	r0, r9
    19dc:	00 0c       	add	r0, r0
    19de:	aa 08       	sbc	r10, r10
    19e0:	bb 08       	sbc	r11, r11
    19e2:	c5 01       	movw	r24, r10
    19e4:	b4 01       	movw	r22, r8
    19e6:	b0 dc       	rcall	.-1696   	; 0x1348 <WIZCHIP_READ>
    19e8:	08 2f       	mov	r16, r24
    19ea:	10 e0       	ldi	r17, 0x00	; 0
    19ec:	10 2f       	mov	r17, r16
    19ee:	00 27       	eor	r16, r16
    19f0:	87 ed       	ldi	r24, 0xD7	; 215
    19f2:	d8 1a       	sub	r13, r24
    19f4:	0d 2c       	mov	r0, r13
    19f6:	00 0c       	add	r0, r0
    19f8:	ee 08       	sbc	r14, r14
    19fa:	ff 08       	sbc	r15, r15
    19fc:	c7 01       	movw	r24, r14
    19fe:	b6 01       	movw	r22, r12
    1a00:	a3 dc       	rcall	.-1722   	; 0x1348 <WIZCHIP_READ>
    1a02:	08 0f       	add	r16, r24
    1a04:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
    1a06:	c8 01       	movw	r24, r16
    1a08:	a0 e0       	ldi	r26, 0x00	; 0
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	44 27       	eor	r20, r20
    1a0e:	58 2f       	mov	r21, r24
    1a10:	69 2f       	mov	r22, r25
    1a12:	7a 2f       	mov	r23, r26
    1a14:	c1 01       	movw	r24, r2
    1a16:	03 96       	adiw	r24, 0x03	; 3
    1a18:	1c 01       	movw	r2, r24
    1a1a:	22 0c       	add	r2, r2
    1a1c:	33 1c       	adc	r3, r3
    1a1e:	22 0c       	add	r2, r2
    1a20:	33 1c       	adc	r3, r3
    1a22:	22 0c       	add	r2, r2
    1a24:	33 1c       	adc	r3, r3
    1a26:	c1 01       	movw	r24, r2
    1a28:	33 0c       	add	r3, r3
    1a2a:	aa 0b       	sbc	r26, r26
    1a2c:	bb 0b       	sbc	r27, r27
    1a2e:	1a 01       	movw	r2, r20
    1a30:	2b 01       	movw	r4, r22
    1a32:	28 0e       	add	r2, r24
    1a34:	39 1e       	adc	r3, r25
    1a36:	4a 1e       	adc	r4, r26
    1a38:	5b 1e       	adc	r5, r27
    1a3a:	c2 01       	movw	r24, r4
    1a3c:	b1 01       	movw	r22, r2
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    1a3e:	93 01       	movw	r18, r6
    1a40:	49 81       	ldd	r20, Y+1	; 0x01
    1a42:	5a 81       	ldd	r21, Y+2	; 0x02
    1a44:	5a dd       	rcall	.-1356   	; 0x14fa <WIZCHIP_READ_BUF>
   ptr += len;
    1a46:	06 0d       	add	r16, r6
    1a48:	17 1d       	adc	r17, r7
   
   setSn_RX_RD(sn,ptr);
    1a4a:	41 2f       	mov	r20, r17
    1a4c:	c5 01       	movw	r24, r10
    1a4e:	b4 01       	movw	r22, r8
    1a50:	e2 dc       	rcall	.-1596   	; 0x1416 <WIZCHIP_WRITE>
    1a52:	40 2f       	mov	r20, r16
    1a54:	c7 01       	movw	r24, r14
    1a56:	b6 01       	movw	r22, r12
    1a58:	de dc       	rcall	.-1604   	; 0x1416 <WIZCHIP_WRITE>
}
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	ff 90       	pop	r15
    1a6c:	ef 90       	pop	r14
    1a6e:	df 90       	pop	r13
    1a70:	cf 90       	pop	r12
    1a72:	bf 90       	pop	r11
    1a74:	af 90       	pop	r10
    1a76:	9f 90       	pop	r9
    1a78:	8f 90       	pop	r8
    1a7a:	7f 90       	pop	r7
    1a7c:	6f 90       	pop	r6
    1a7e:	5f 90       	pop	r5
    1a80:	4f 90       	pop	r4
    1a82:	3f 90       	pop	r3
    1a84:	2f 90       	pop	r2
    1a86:	08 95       	ret

00001a88 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
    1a88:	8f 92       	push	r8
    1a8a:	9f 92       	push	r9
    1a8c:	af 92       	push	r10
    1a8e:	bf 92       	push	r11
    1a90:	cf 92       	push	r12
    1a92:	df 92       	push	r13
    1a94:	ef 92       	push	r14
    1a96:	ff 92       	push	r15
    1a98:	0f 93       	push	r16
    1a9a:	1f 93       	push	r17
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	eb 01       	movw	r28, r22
   uint16_t ptr = 0;

   ptr = getSn_RX_RD(sn);
    1aa2:	c8 2e       	mov	r12, r24
    1aa4:	d1 2c       	mov	r13, r1
    1aa6:	cc 0c       	add	r12, r12
    1aa8:	dd 1c       	adc	r13, r13
    1aaa:	cc 0c       	add	r12, r12
    1aac:	dd 1c       	adc	r13, r13
    1aae:	8f ef       	ldi	r24, 0xFF	; 255
    1ab0:	c8 1a       	sub	r12, r24
    1ab2:	d8 0a       	sbc	r13, r24
    1ab4:	cc 0c       	add	r12, r12
    1ab6:	dd 1c       	adc	r13, r13
    1ab8:	cc 0c       	add	r12, r12
    1aba:	dd 1c       	adc	r13, r13
    1abc:	cc 0c       	add	r12, r12
    1abe:	dd 1c       	adc	r13, r13
    1ac0:	46 01       	movw	r8, r12
    1ac2:	88 ed       	ldi	r24, 0xD8	; 216
    1ac4:	98 1a       	sub	r9, r24
    1ac6:	09 2c       	mov	r0, r9
    1ac8:	00 0c       	add	r0, r0
    1aca:	aa 08       	sbc	r10, r10
    1acc:	bb 08       	sbc	r11, r11
    1ace:	c5 01       	movw	r24, r10
    1ad0:	b4 01       	movw	r22, r8
    1ad2:	3a dc       	rcall	.-1932   	; 0x1348 <WIZCHIP_READ>
    1ad4:	08 2f       	mov	r16, r24
    1ad6:	10 e0       	ldi	r17, 0x00	; 0
    1ad8:	10 2f       	mov	r17, r16
    1ada:	00 27       	eor	r16, r16
    1adc:	87 ed       	ldi	r24, 0xD7	; 215
    1ade:	d8 1a       	sub	r13, r24
    1ae0:	0d 2c       	mov	r0, r13
    1ae2:	00 0c       	add	r0, r0
    1ae4:	ee 08       	sbc	r14, r14
    1ae6:	ff 08       	sbc	r15, r15
    1ae8:	c7 01       	movw	r24, r14
    1aea:	b6 01       	movw	r22, r12
    1aec:	2d dc       	rcall	.-1958   	; 0x1348 <WIZCHIP_READ>
    1aee:	08 0f       	add	r16, r24
    1af0:	11 1d       	adc	r17, r1
   ptr += len;
    1af2:	c0 0f       	add	r28, r16
    1af4:	d1 1f       	adc	r29, r17
   setSn_RX_RD(sn,ptr);
    1af6:	4d 2f       	mov	r20, r29
    1af8:	c5 01       	movw	r24, r10
    1afa:	b4 01       	movw	r22, r8
    1afc:	8c dc       	rcall	.-1768   	; 0x1416 <WIZCHIP_WRITE>
    1afe:	4c 2f       	mov	r20, r28
    1b00:	c7 01       	movw	r24, r14
    1b02:	b6 01       	movw	r22, r12
    1b04:	88 dc       	rcall	.-1776   	; 0x1416 <WIZCHIP_WRITE>
}
    1b06:	df 91       	pop	r29
    1b08:	cf 91       	pop	r28
    1b0a:	1f 91       	pop	r17
    1b0c:	0f 91       	pop	r16
    1b0e:	ff 90       	pop	r15
    1b10:	ef 90       	pop	r14
    1b12:	df 90       	pop	r13
    1b14:	cf 90       	pop	r12
    1b16:	bf 90       	pop	r11
    1b18:	af 90       	pop	r10
    1b1a:	9f 90       	pop	r9
    1b1c:	8f 90       	pop	r8
    1b1e:	08 95       	ret

00001b20 <wizchip_cris_enter>:
   #endif      
      default:
         return -1;
   }
   return 0;
}
    1b20:	08 95       	ret

00001b22 <wizchip_cris_exit>:
    1b22:	08 95       	ret

00001b24 <wizchip_cs_select>:
    1b24:	08 95       	ret

00001b26 <wizchip_cs_deselect>:
    1b26:	08 95       	ret

00001b28 <wizchip_bus_readdata>:
    1b28:	fb 01       	movw	r30, r22
    1b2a:	80 81       	ld	r24, Z
    1b2c:	08 95       	ret

00001b2e <wizchip_bus_writedata>:
    1b2e:	fb 01       	movw	r30, r22
    1b30:	40 83       	st	Z, r20
    1b32:	08 95       	ret

00001b34 <wizchip_spi_readbyte>:
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	08 95       	ret

00001b38 <wizchip_spi_writebyte>:
    1b38:	08 95       	ret

00001b3a <wizchip_spi_readburst>:
    1b3a:	08 95       	ret

00001b3c <wizchip_spi_writeburst>:
    1b3c:	08 95       	ret

00001b3e <reg_wizchip_cs_cbfunc>:
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	19 f0       	breq	.+6      	; 0x1b48 <reg_wizchip_cs_cbfunc+0xa>
    1b42:	61 15       	cp	r22, r1
    1b44:	71 05       	cpc	r23, r1
    1b46:	59 f4       	brne	.+22     	; 0x1b5e <reg_wizchip_cs_cbfunc+0x20>
    1b48:	e6 e0       	ldi	r30, 0x06	; 6
    1b4a:	f2 e0       	ldi	r31, 0x02	; 2
    1b4c:	82 e9       	ldi	r24, 0x92	; 146
    1b4e:	9d e0       	ldi	r25, 0x0D	; 13
    1b50:	95 87       	std	Z+13, r25	; 0x0d
    1b52:	84 87       	std	Z+12, r24	; 0x0c
    1b54:	83 e9       	ldi	r24, 0x93	; 147
    1b56:	9d e0       	ldi	r25, 0x0D	; 13
    1b58:	97 87       	std	Z+15, r25	; 0x0f
    1b5a:	86 87       	std	Z+14, r24	; 0x0e
    1b5c:	08 95       	ret
    1b5e:	e6 e0       	ldi	r30, 0x06	; 6
    1b60:	f2 e0       	ldi	r31, 0x02	; 2
    1b62:	95 87       	std	Z+13, r25	; 0x0d
    1b64:	84 87       	std	Z+12, r24	; 0x0c
    1b66:	77 87       	std	Z+15, r23	; 0x0f
    1b68:	66 87       	std	Z+14, r22	; 0x0e
    1b6a:	08 95       	ret

00001b6c <reg_wizchip_spi_cbfunc>:
    1b6c:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <WIZCHIP>
    1b70:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <WIZCHIP+0x1>
    1b74:	31 ff       	sbrs	r19, 1
    1b76:	fa cf       	rjmp	.-12     	; 0x1b6c <reg_wizchip_spi_cbfunc>
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	19 f0       	breq	.+6      	; 0x1b82 <reg_wizchip_spi_cbfunc+0x16>
    1b7c:	61 15       	cp	r22, r1
    1b7e:	71 05       	cpc	r23, r1
    1b80:	59 f4       	brne	.+22     	; 0x1b98 <reg_wizchip_spi_cbfunc+0x2c>
    1b82:	e6 e0       	ldi	r30, 0x06	; 6
    1b84:	f2 e0       	ldi	r31, 0x02	; 2
    1b86:	8a e9       	ldi	r24, 0x9A	; 154
    1b88:	9d e0       	ldi	r25, 0x0D	; 13
    1b8a:	91 8b       	std	Z+17, r25	; 0x11
    1b8c:	80 8b       	std	Z+16, r24	; 0x10
    1b8e:	8c e9       	ldi	r24, 0x9C	; 156
    1b90:	9d e0       	ldi	r25, 0x0D	; 13
    1b92:	93 8b       	std	Z+19, r25	; 0x13
    1b94:	82 8b       	std	Z+18, r24	; 0x12
    1b96:	08 95       	ret
    1b98:	e6 e0       	ldi	r30, 0x06	; 6
    1b9a:	f2 e0       	ldi	r31, 0x02	; 2
    1b9c:	91 8b       	std	Z+17, r25	; 0x11
    1b9e:	80 8b       	std	Z+16, r24	; 0x10
    1ba0:	73 8b       	std	Z+19, r23	; 0x13
    1ba2:	62 8b       	std	Z+18, r22	; 0x12
    1ba4:	08 95       	ret

00001ba6 <reg_wizchip_spiburst_cbfunc>:
    1ba6:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <WIZCHIP>
    1baa:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <WIZCHIP+0x1>
    1bae:	31 ff       	sbrs	r19, 1
    1bb0:	fa cf       	rjmp	.-12     	; 0x1ba6 <reg_wizchip_spiburst_cbfunc>
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	19 f0       	breq	.+6      	; 0x1bbc <reg_wizchip_spiburst_cbfunc+0x16>
    1bb6:	61 15       	cp	r22, r1
    1bb8:	71 05       	cpc	r23, r1
    1bba:	59 f4       	brne	.+22     	; 0x1bd2 <reg_wizchip_spiburst_cbfunc+0x2c>
    1bbc:	e6 e0       	ldi	r30, 0x06	; 6
    1bbe:	f2 e0       	ldi	r31, 0x02	; 2
    1bc0:	8d e9       	ldi	r24, 0x9D	; 157
    1bc2:	9d e0       	ldi	r25, 0x0D	; 13
    1bc4:	95 8b       	std	Z+21, r25	; 0x15
    1bc6:	84 8b       	std	Z+20, r24	; 0x14
    1bc8:	8e e9       	ldi	r24, 0x9E	; 158
    1bca:	9d e0       	ldi	r25, 0x0D	; 13
    1bcc:	97 8b       	std	Z+23, r25	; 0x17
    1bce:	86 8b       	std	Z+22, r24	; 0x16
    1bd0:	08 95       	ret
    1bd2:	e6 e0       	ldi	r30, 0x06	; 6
    1bd4:	f2 e0       	ldi	r31, 0x02	; 2
    1bd6:	95 8b       	std	Z+21, r25	; 0x15
    1bd8:	84 8b       	std	Z+20, r24	; 0x14
    1bda:	77 8b       	std	Z+23, r23	; 0x17
    1bdc:	66 8b       	std	Z+22, r22	; 0x16
    1bde:	08 95       	ret

00001be0 <wizchip_sw_reset>:
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	62 97       	sbiw	r28, 0x12	; 18
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61
    1bf4:	26 e0       	ldi	r18, 0x06	; 6
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	ae 01       	movw	r20, r28
    1bfa:	43 5f       	subi	r20, 0xF3	; 243
    1bfc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	79 e0       	ldi	r23, 0x09	; 9
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	79 dc       	rcall	.-1806   	; 0x14fa <WIZCHIP_READ_BUF>
    1c08:	24 e0       	ldi	r18, 0x04	; 4
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	ae 01       	movw	r20, r28
    1c0e:	4f 5f       	subi	r20, 0xFF	; 255
    1c10:	5f 4f       	sbci	r21, 0xFF	; 255
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	71 e0       	ldi	r23, 0x01	; 1
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	6f dc       	rcall	.-1826   	; 0x14fa <WIZCHIP_READ_BUF>
    1c1c:	24 e0       	ldi	r18, 0x04	; 4
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	ae 01       	movw	r20, r28
    1c22:	4b 5f       	subi	r20, 0xFB	; 251
    1c24:	5f 4f       	sbci	r21, 0xFF	; 255
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	75 e0       	ldi	r23, 0x05	; 5
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	65 dc       	rcall	.-1846   	; 0x14fa <WIZCHIP_READ_BUF>
    1c30:	24 e0       	ldi	r18, 0x04	; 4
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	ae 01       	movw	r20, r28
    1c36:	47 5f       	subi	r20, 0xF7	; 247
    1c38:	5f 4f       	sbci	r21, 0xFF	; 255
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	7f e0       	ldi	r23, 0x0F	; 15
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	5b dc       	rcall	.-1866   	; 0x14fa <WIZCHIP_READ_BUF>
    1c44:	40 e8       	ldi	r20, 0x80	; 128
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	e4 db       	rcall	.-2104   	; 0x1416 <WIZCHIP_WRITE>
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	cb 01       	movw	r24, r22
    1c54:	79 db       	rcall	.-2318   	; 0x1348 <WIZCHIP_READ>
    1c56:	26 e0       	ldi	r18, 0x06	; 6
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	ae 01       	movw	r20, r28
    1c5c:	43 5f       	subi	r20, 0xF3	; 243
    1c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	79 e0       	ldi	r23, 0x09	; 9
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	ca dc       	rcall	.-1644   	; 0x15fe <WIZCHIP_WRITE_BUF>
    1c6a:	24 e0       	ldi	r18, 0x04	; 4
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	ae 01       	movw	r20, r28
    1c70:	4f 5f       	subi	r20, 0xFF	; 255
    1c72:	5f 4f       	sbci	r21, 0xFF	; 255
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	71 e0       	ldi	r23, 0x01	; 1
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	c0 dc       	rcall	.-1664   	; 0x15fe <WIZCHIP_WRITE_BUF>
    1c7e:	24 e0       	ldi	r18, 0x04	; 4
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	ae 01       	movw	r20, r28
    1c84:	4b 5f       	subi	r20, 0xFB	; 251
    1c86:	5f 4f       	sbci	r21, 0xFF	; 255
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	75 e0       	ldi	r23, 0x05	; 5
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	b6 dc       	rcall	.-1684   	; 0x15fe <WIZCHIP_WRITE_BUF>
    1c92:	24 e0       	ldi	r18, 0x04	; 4
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	ae 01       	movw	r20, r28
    1c98:	47 5f       	subi	r20, 0xF7	; 247
    1c9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9c:	60 e0       	ldi	r22, 0x00	; 0
    1c9e:	7f e0       	ldi	r23, 0x0F	; 15
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	ac dc       	rcall	.-1704   	; 0x15fe <WIZCHIP_WRITE_BUF>
    1ca6:	62 96       	adiw	r28, 0x12	; 18
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	08 95       	ret

00001cb8 <wizchip_init>:
    1cb8:	ff 92       	push	r15
    1cba:	0f 93       	push	r16
    1cbc:	1f 93       	push	r17
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	ec 01       	movw	r28, r24
    1cc4:	8b 01       	movw	r16, r22
    1cc6:	8c df       	rcall	.-232    	; 0x1be0 <wizchip_sw_reset>
    1cc8:	20 97       	sbiw	r28, 0x00	; 0
    1cca:	69 f4       	brne	.+26     	; 0x1ce6 <wizchip_init+0x2e>
    1ccc:	30 c0       	rjmp	.+96     	; 0x1d2e <wizchip_init+0x76>
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e8 0f       	add	r30, r24
    1cd2:	f1 1d       	adc	r31, r1
    1cd4:	87 fd       	sbrc	r24, 7
    1cd6:	fa 95       	dec	r31
    1cd8:	20 81       	ld	r18, Z
    1cda:	92 0f       	add	r25, r18
    1cdc:	91 31       	cpi	r25, 0x11	; 17
    1cde:	0c f0       	brlt	.+2      	; 0x1ce2 <wizchip_init+0x2a>
    1ce0:	5b c0       	rjmp	.+182    	; 0x1d98 <wizchip_init+0xe0>
    1ce2:	8f 5f       	subi	r24, 0xFF	; 255
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <wizchip_init+0x32>
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	88 30       	cpi	r24, 0x08	; 8
    1cec:	84 f3       	brlt	.-32     	; 0x1cce <wizchip_init+0x16>
    1cee:	f1 2c       	mov	r15, r1
    1cf0:	1b c0       	rjmp	.+54     	; 0x1d28 <wizchip_init+0x70>
    1cf2:	6f 2d       	mov	r22, r15
    1cf4:	0f 2c       	mov	r0, r15
    1cf6:	00 0c       	add	r0, r0
    1cf8:	77 0b       	sbc	r23, r23
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	e6 0f       	add	r30, r22
    1cfe:	f7 1f       	adc	r31, r23
    1d00:	66 0f       	add	r22, r22
    1d02:	77 1f       	adc	r23, r23
    1d04:	66 0f       	add	r22, r22
    1d06:	77 1f       	adc	r23, r23
    1d08:	6f 5f       	subi	r22, 0xFF	; 255
    1d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0c:	66 0f       	add	r22, r22
    1d0e:	77 1f       	adc	r23, r23
    1d10:	66 0f       	add	r22, r22
    1d12:	77 1f       	adc	r23, r23
    1d14:	66 0f       	add	r22, r22
    1d16:	77 1f       	adc	r23, r23
    1d18:	71 5e       	subi	r23, 0xE1	; 225
    1d1a:	07 2e       	mov	r0, r23
    1d1c:	00 0c       	add	r0, r0
    1d1e:	88 0b       	sbc	r24, r24
    1d20:	99 0b       	sbc	r25, r25
    1d22:	40 81       	ld	r20, Z
    1d24:	78 db       	rcall	.-2320   	; 0x1416 <WIZCHIP_WRITE>
    1d26:	f3 94       	inc	r15
    1d28:	87 e0       	ldi	r24, 0x07	; 7
    1d2a:	8f 15       	cp	r24, r15
    1d2c:	14 f7       	brge	.-60     	; 0x1cf2 <wizchip_init+0x3a>
    1d2e:	01 15       	cp	r16, r1
    1d30:	11 05       	cpc	r17, r1
    1d32:	69 f4       	brne	.+26     	; 0x1d4e <wizchip_init+0x96>
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	33 c0       	rjmp	.+102    	; 0x1d9e <wizchip_init+0xe6>
    1d38:	f8 01       	movw	r30, r16
    1d3a:	e8 0f       	add	r30, r24
    1d3c:	f1 1d       	adc	r31, r1
    1d3e:	87 fd       	sbrc	r24, 7
    1d40:	fa 95       	dec	r31
    1d42:	20 81       	ld	r18, Z
    1d44:	92 0f       	add	r25, r18
    1d46:	91 31       	cpi	r25, 0x11	; 17
    1d48:	4c f5       	brge	.+82     	; 0x1d9c <wizchip_init+0xe4>
    1d4a:	8f 5f       	subi	r24, 0xFF	; 255
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <wizchip_init+0x9a>
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	88 30       	cpi	r24, 0x08	; 8
    1d54:	8c f3       	brlt	.-30     	; 0x1d38 <wizchip_init+0x80>
    1d56:	c0 e0       	ldi	r28, 0x00	; 0
    1d58:	1b c0       	rjmp	.+54     	; 0x1d90 <wizchip_init+0xd8>
    1d5a:	6c 2f       	mov	r22, r28
    1d5c:	0c 2e       	mov	r0, r28
    1d5e:	00 0c       	add	r0, r0
    1d60:	77 0b       	sbc	r23, r23
    1d62:	f8 01       	movw	r30, r16
    1d64:	e6 0f       	add	r30, r22
    1d66:	f7 1f       	adc	r31, r23
    1d68:	66 0f       	add	r22, r22
    1d6a:	77 1f       	adc	r23, r23
    1d6c:	66 0f       	add	r22, r22
    1d6e:	77 1f       	adc	r23, r23
    1d70:	6f 5f       	subi	r22, 0xFF	; 255
    1d72:	7f 4f       	sbci	r23, 0xFF	; 255
    1d74:	66 0f       	add	r22, r22
    1d76:	77 1f       	adc	r23, r23
    1d78:	66 0f       	add	r22, r22
    1d7a:	77 1f       	adc	r23, r23
    1d7c:	66 0f       	add	r22, r22
    1d7e:	77 1f       	adc	r23, r23
    1d80:	72 5e       	subi	r23, 0xE2	; 226
    1d82:	07 2e       	mov	r0, r23
    1d84:	00 0c       	add	r0, r0
    1d86:	88 0b       	sbc	r24, r24
    1d88:	99 0b       	sbc	r25, r25
    1d8a:	40 81       	ld	r20, Z
    1d8c:	44 db       	rcall	.-2424   	; 0x1416 <WIZCHIP_WRITE>
    1d8e:	cf 5f       	subi	r28, 0xFF	; 255
    1d90:	c8 30       	cpi	r28, 0x08	; 8
    1d92:	1c f3       	brlt	.-58     	; 0x1d5a <wizchip_init+0xa2>
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	03 c0       	rjmp	.+6      	; 0x1d9e <wizchip_init+0xe6>
    1d98:	8f ef       	ldi	r24, 0xFF	; 255
    1d9a:	01 c0       	rjmp	.+2      	; 0x1d9e <wizchip_init+0xe6>
    1d9c:	8f ef       	ldi	r24, 0xFF	; 255
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	1f 91       	pop	r17
    1da4:	0f 91       	pop	r16
    1da6:	ff 90       	pop	r15
    1da8:	08 95       	ret

00001daa <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	ec 01       	movw	r28, r24
   setSHAR(pnetinfo->mac);
    1db0:	26 e0       	ldi	r18, 0x06	; 6
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	ac 01       	movw	r20, r24
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	79 e0       	ldi	r23, 0x09	; 9
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	1f dc       	rcall	.-1986   	; 0x15fe <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
    1dc0:	ae 01       	movw	r20, r28
    1dc2:	42 5f       	subi	r20, 0xF2	; 242
    1dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc6:	24 e0       	ldi	r18, 0x04	; 4
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	60 e0       	ldi	r22, 0x00	; 0
    1dcc:	71 e0       	ldi	r23, 0x01	; 1
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	15 dc       	rcall	.-2006   	; 0x15fe <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
    1dd4:	ae 01       	movw	r20, r28
    1dd6:	46 5f       	subi	r20, 0xF6	; 246
    1dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dda:	24 e0       	ldi	r18, 0x04	; 4
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	60 e0       	ldi	r22, 0x00	; 0
    1de0:	75 e0       	ldi	r23, 0x05	; 5
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	0b dc       	rcall	.-2026   	; 0x15fe <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
    1de8:	ae 01       	movw	r20, r28
    1dea:	4a 5f       	subi	r20, 0xFA	; 250
    1dec:	5f 4f       	sbci	r21, 0xFF	; 255
    1dee:	24 e0       	ldi	r18, 0x04	; 4
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	7f e0       	ldi	r23, 0x0F	; 15
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	01 dc       	rcall	.-2046   	; 0x15fe <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
    1dfc:	8a 89       	ldd	r24, Y+18	; 0x12
    1dfe:	e1 e5       	ldi	r30, 0x51	; 81
    1e00:	f4 e0       	ldi	r31, 0x04	; 4
    1e02:	80 83       	st	Z, r24
   _DNS_[1] = pnetinfo->dns[1];
    1e04:	8b 89       	ldd	r24, Y+19	; 0x13
    1e06:	81 83       	std	Z+1, r24	; 0x01
   _DNS_[2] = pnetinfo->dns[2];
    1e08:	8c 89       	ldd	r24, Y+20	; 0x14
    1e0a:	82 83       	std	Z+2, r24	; 0x02
   _DNS_[3] = pnetinfo->dns[3];
    1e0c:	8d 89       	ldd	r24, Y+21	; 0x15
    1e0e:	83 83       	std	Z+3, r24	; 0x03
   _DHCP_   = pnetinfo->dhcp;
    1e10:	8e 89       	ldd	r24, Y+22	; 0x16
    1e12:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <_DHCP_>
}
    1e16:	df 91       	pop	r29
    1e18:	cf 91       	pop	r28
    1e1a:	08 95       	ret

00001e1c <get16>:

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
	uint16_t i;
	i = *s++ << 8;
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	fc 01       	movw	r30, r24
    1e20:	30 81       	ld	r19, Z
	i = i + *s;
    1e22:	81 81       	ldd	r24, Z+1	; 0x01
	return i;
}
    1e24:	a9 01       	movw	r20, r18
    1e26:	48 0f       	add	r20, r24
    1e28:	51 1d       	adc	r21, r1
    1e2a:	ca 01       	movw	r24, r20
    1e2c:	08 95       	ret

00001e2e <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
	*s++ = i >> 8;
    1e2e:	fc 01       	movw	r30, r24
    1e30:	70 83       	st	Z, r23
	*s++ = i;
    1e32:	61 83       	std	Z+1, r22	; 0x01
	return s;
}
    1e34:	02 96       	adiw	r24, 0x02	; 2
    1e36:	08 95       	ret

00001e38 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
    1e38:	cf 92       	push	r12
    1e3a:	df 92       	push	r13
    1e3c:	ef 92       	push	r14
    1e3e:	ff 92       	push	r15
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	8c 01       	movw	r16, r24
    1e4a:	db 01       	movw	r26, r22
    1e4c:	ea 01       	movw	r28, r20
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
	int indirect = 0;	/* Set if indirection encountered */
	int nseg = 0;		/* Total number of segments in name */
    1e4e:	e1 2c       	mov	r14, r1
    1e50:	f1 2c       	mov	r15, r1
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
	int indirect = 0;	/* Set if indirection encountered */
    1e52:	c1 2c       	mov	r12, r1
    1e54:	d1 2c       	mov	r13, r1
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	70 e0       	ldi	r23, 0x00	; 0

	cp = compressed;

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
    1e5a:	ad 01       	movw	r20, r26
    1e5c:	4f 5f       	subi	r20, 0xFF	; 255
    1e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e60:	8c 91       	ld	r24, X
    1e62:	e8 2f       	mov	r30, r24
    1e64:	f0 e0       	ldi	r31, 0x00	; 0

		if (!indirect) clen++;
    1e66:	c1 14       	cp	r12, r1
    1e68:	d1 04       	cpc	r13, r1
    1e6a:	11 f4       	brne	.+4      	; 0x1e70 <parse_name+0x38>
    1e6c:	6f 5f       	subi	r22, 0xFF	; 255
    1e6e:	7f 4f       	sbci	r23, 0xFF	; 255

		if ((slen & 0xc0) == 0xc0)
    1e70:	98 2f       	mov	r25, r24
    1e72:	90 7c       	andi	r25, 0xC0	; 192
    1e74:	90 3c       	cpi	r25, 0xC0	; 192
    1e76:	c9 f4       	brne	.+50     	; 0x1eaa <parse_name+0x72>
		{
			if (!indirect)
    1e78:	cd 28       	or	r12, r13
    1e7a:	11 f4       	brne	.+4      	; 0x1e80 <parse_name+0x48>
				clen++;
    1e7c:	6f 5f       	subi	r22, 0xFF	; 255
    1e7e:	7f 4f       	sbci	r23, 0xFF	; 255
			indirect = 1;
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
    1e80:	8f 73       	andi	r24, 0x3F	; 63
    1e82:	48 2f       	mov	r20, r24
    1e84:	50 e0       	ldi	r21, 0x00	; 0
    1e86:	54 2f       	mov	r21, r20
    1e88:	44 27       	eor	r20, r20
    1e8a:	11 96       	adiw	r26, 0x01	; 1
    1e8c:	8c 91       	ld	r24, X
    1e8e:	48 0f       	add	r20, r24
    1e90:	51 1d       	adc	r21, r1
    1e92:	f8 01       	movw	r30, r16
    1e94:	e4 0f       	add	r30, r20
    1e96:	f5 1f       	adc	r31, r21
			slen = *cp++;
    1e98:	4f 5f       	subi	r20, 0xFF	; 255
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	40 0f       	add	r20, r16
    1e9e:	51 1f       	adc	r21, r17
    1ea0:	e0 81       	ld	r30, Z
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0

		if ((slen & 0xc0) == 0xc0)
		{
			if (!indirect)
				clen++;
			indirect = 1;
    1ea4:	cc 24       	eor	r12, r12
    1ea6:	c3 94       	inc	r12
    1ea8:	d1 2c       	mov	r13, r1
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
			slen = *cp++;
		}

		if (slen == 0)	/* zero length == all done */
    1eaa:	30 97       	sbiw	r30, 0x00	; 0
    1eac:	e9 f0       	breq	.+58     	; 0x1ee8 <parse_name+0xb0>
			break;

		len -= slen + 1;
    1eae:	2e 1b       	sub	r18, r30
    1eb0:	3f 0b       	sbc	r19, r31
    1eb2:	21 50       	subi	r18, 0x01	; 1
    1eb4:	31 09       	sbc	r19, r1

		if (len < 0) return -1;
    1eb6:	0a f1       	brmi	.+66     	; 0x1efa <parse_name+0xc2>

		if (!indirect) clen += slen;
    1eb8:	c1 14       	cp	r12, r1
    1eba:	d1 04       	cpc	r13, r1
    1ebc:	11 f4       	brne	.+4      	; 0x1ec2 <parse_name+0x8a>
    1ebe:	6e 0f       	add	r22, r30
    1ec0:	7f 1f       	adc	r23, r31

		if ((slen & 0xc0) == 0xc0)
		{
			if (!indirect)
				clen++;
			indirect = 1;
    1ec2:	da 01       	movw	r26, r20
    1ec4:	05 c0       	rjmp	.+10     	; 0x1ed0 <parse_name+0x98>

		if (len < 0) return -1;

		if (!indirect) clen += slen;

		while (slen-- != 0) *buf++ = (char)*cp++;
    1ec6:	9c 91       	ld	r25, X
    1ec8:	98 83       	st	Y, r25
    1eca:	fa 01       	movw	r30, r20
    1ecc:	11 96       	adiw	r26, 0x01	; 1
    1ece:	21 96       	adiw	r28, 0x01	; 1
    1ed0:	af 01       	movw	r20, r30
    1ed2:	41 50       	subi	r20, 0x01	; 1
    1ed4:	51 09       	sbc	r21, r1
    1ed6:	ef 2b       	or	r30, r31
    1ed8:	b1 f7       	brne	.-20     	; 0x1ec6 <parse_name+0x8e>
		*buf++ = '.';
    1eda:	8e e2       	ldi	r24, 0x2E	; 46
    1edc:	88 83       	st	Y, r24
		nseg++;
    1ede:	8f ef       	ldi	r24, 0xFF	; 255
    1ee0:	e8 1a       	sub	r14, r24
    1ee2:	f8 0a       	sbc	r15, r24
		if (len < 0) return -1;

		if (!indirect) clen += slen;

		while (slen-- != 0) *buf++ = (char)*cp++;
		*buf++ = '.';
    1ee4:	21 96       	adiw	r28, 0x01	; 1
		nseg++;
	}
    1ee6:	b9 cf       	rjmp	.-142    	; 0x1e5a <parse_name+0x22>

	if (nseg == 0)
    1ee8:	ef 28       	or	r14, r15
    1eea:	19 f4       	brne	.+6      	; 0x1ef2 <parse_name+0xba>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
    1eec:	8e e2       	ldi	r24, 0x2E	; 46
    1eee:	88 83       	st	Y, r24
    1ef0:	21 96       	adiw	r28, 0x01	; 1
		len--;
	}

	*buf++ = '\0';
    1ef2:	18 82       	st	Y, r1
	len--;

	return clen;	/* Length of compressed message */
    1ef4:	86 2f       	mov	r24, r22
    1ef6:	97 2f       	mov	r25, r23
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <parse_name+0xc6>
		if (slen == 0)	/* zero length == all done */
			break;

		len -= slen + 1;

		if (len < 0) return -1;
    1efa:	8f ef       	ldi	r24, 0xFF	; 255
    1efc:	9f ef       	ldi	r25, 0xFF	; 255

	*buf++ = '\0';
	len--;

	return clen;	/* Length of compressed message */
}
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	df 90       	pop	r13
    1f0c:	cf 90       	pop	r12
    1f0e:	08 95       	ret

00001f10 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
    1f10:	0f 93       	push	r16
    1f12:	1f 93       	push	r17
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	68 97       	sbiw	r28, 0x18	; 24
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	8b 01       	movw	r16, r22
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
    1f2a:	28 e1       	ldi	r18, 0x18	; 24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	ae 01       	movw	r20, r28
    1f30:	4f 5f       	subi	r20, 0xFF	; 255
    1f32:	5f 4f       	sbci	r21, 0xFF	; 255
    1f34:	81 df       	rcall	.-254    	; 0x1e38 <parse_name>


	if (len == -1) return 0;
    1f36:	8f 3f       	cpi	r24, 0xFF	; 255
    1f38:	2f ef       	ldi	r18, 0xFF	; 255
    1f3a:	92 07       	cpc	r25, r18
    1f3c:	21 f0       	breq	.+8      	; 0x1f46 <dns_question+0x36>

	cp += len;
    1f3e:	80 0f       	add	r24, r16
    1f40:	91 1f       	adc	r25, r17
	cp += 2;		/* type */
	cp += 2;		/* class */

	return cp;
    1f42:	04 96       	adiw	r24, 0x04	; 4
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <dns_question+0x3a>
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);


	if (len == -1) return 0;
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
	cp += len;
	cp += 2;		/* type */
	cp += 2;		/* class */

	return cp;
}
    1f4a:	68 96       	adiw	r28, 0x18	; 24
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	08 95       	ret

00001f60 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
    1f60:	af 92       	push	r10
    1f62:	bf 92       	push	r11
    1f64:	cf 92       	push	r12
    1f66:	df 92       	push	r13
    1f68:	ef 92       	push	r14
    1f6a:	ff 92       	push	r15
    1f6c:	0f 93       	push	r16
    1f6e:	1f 93       	push	r17
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	68 97       	sbiw	r28, 0x18	; 24
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	7c 01       	movw	r14, r24
    1f86:	8b 01       	movw	r16, r22
    1f88:	6a 01       	movw	r12, r20
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
    1f8a:	28 e1       	ldi	r18, 0x18	; 24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	ae 01       	movw	r20, r28
    1f90:	4f 5f       	subi	r20, 0xFF	; 255
    1f92:	5f 4f       	sbci	r21, 0xFF	; 255
    1f94:	51 df       	rcall	.-350    	; 0x1e38 <parse_name>

	if (len == -1) return 0;
    1f96:	8f 3f       	cpi	r24, 0xFF	; 255
    1f98:	2f ef       	ldi	r18, 0xFF	; 255
    1f9a:	92 07       	cpc	r25, r18
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <dns_answer+0x40>
    1f9e:	76 c0       	rjmp	.+236    	; 0x208c <__EEPROM_REGION_LENGTH__+0x8c>

	cp += len;
    1fa0:	08 0f       	add	r16, r24
    1fa2:	19 1f       	adc	r17, r25
	type = get16(cp);
    1fa4:	c8 01       	movw	r24, r16
    1fa6:	3a df       	rcall	.-396    	; 0x1e1c <get16>
	cp += 2;		/* type */
	cp += 2;		/* class */
	cp += 4;		/* ttl */
	cp += 2;		/* len */
    1fa8:	58 01       	movw	r10, r16
    1faa:	ea e0       	ldi	r30, 0x0A	; 10
    1fac:	ae 0e       	add	r10, r30
    1fae:	b1 1c       	adc	r11, r1


	switch (type)
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	8f 30       	cpi	r24, 0x0F	; 15
    1fb4:	91 05       	cpc	r25, r1
    1fb6:	08 f0       	brcs	.+2      	; 0x1fba <dns_answer+0x5a>
    1fb8:	6c c0       	rjmp	.+216    	; 0x2092 <__EEPROM_REGION_LENGTH__+0x92>
    1fba:	fc 01       	movw	r30, r24
    1fbc:	88 27       	eor	r24, r24
    1fbe:	e6 56       	subi	r30, 0x66	; 102
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc4:	0c 94 38 35 	jmp	0x6a70	; 0x6a70 <__tablejump2__>
	{
	case TYPE_A:
		/* Just read the address directly into the structure */
		ip_from_dns[0] = *cp++;
    1fc8:	f8 01       	movw	r30, r16
    1fca:	82 85       	ldd	r24, Z+10	; 0x0a
    1fcc:	f6 01       	movw	r30, r12
    1fce:	80 83       	st	Z, r24
		ip_from_dns[1] = *cp++;
    1fd0:	f8 01       	movw	r30, r16
    1fd2:	83 85       	ldd	r24, Z+11	; 0x0b
    1fd4:	f6 01       	movw	r30, r12
    1fd6:	81 83       	std	Z+1, r24	; 0x01
		ip_from_dns[2] = *cp++;
    1fd8:	f8 01       	movw	r30, r16
    1fda:	84 85       	ldd	r24, Z+12	; 0x0c
    1fdc:	f6 01       	movw	r30, r12
    1fde:	82 83       	std	Z+2, r24	; 0x02
		ip_from_dns[3] = *cp++;
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	85 85       	ldd	r24, Z+13	; 0x0d
    1fe4:	f6 01       	movw	r30, r12
    1fe6:	83 83       	std	Z+3, r24	; 0x03
    1fe8:	c8 01       	movw	r24, r16
    1fea:	0e 96       	adiw	r24, 0x0e	; 14
		break;
    1fec:	5f c0       	rjmp	.+190    	; 0x20ac <__EEPROM_REGION_LENGTH__+0xac>
	case TYPE_MR:
	case TYPE_NS:
	case TYPE_PTR:
		/* These types all consist of a single domain name */
		/* convert it to ascii format */
		len = parse_name(msg, cp, name, MAXCNAME);
    1fee:	28 e1       	ldi	r18, 0x18	; 24
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	ae 01       	movw	r20, r28
    1ff4:	4f 5f       	subi	r20, 0xFF	; 255
    1ff6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff8:	b5 01       	movw	r22, r10
    1ffa:	c7 01       	movw	r24, r14
    1ffc:	1d df       	rcall	.-454    	; 0x1e38 <parse_name>
		if (len == -1) return 0;
    1ffe:	8f 3f       	cpi	r24, 0xFF	; 255
    2000:	ff ef       	ldi	r31, 0xFF	; 255
    2002:	9f 07       	cpc	r25, r31
    2004:	09 f4       	brne	.+2      	; 0x2008 <__EEPROM_REGION_LENGTH__+0x8>
    2006:	47 c0       	rjmp	.+142    	; 0x2096 <__EEPROM_REGION_LENGTH__+0x96>

		cp += len;
    2008:	8a 0d       	add	r24, r10
    200a:	9b 1d       	adc	r25, r11
		break;
    200c:	4f c0       	rjmp	.+158    	; 0x20ac <__EEPROM_REGION_LENGTH__+0xac>
	case TYPE_HINFO:
		len = *cp++;
    200e:	c8 01       	movw	r24, r16
    2010:	0b 96       	adiw	r24, 0x0b	; 11
    2012:	f8 01       	movw	r30, r16
    2014:	22 85       	ldd	r18, Z+10	; 0x0a
		cp += len;
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	fc 01       	movw	r30, r24
    201a:	e2 0f       	add	r30, r18
    201c:	f3 1f       	adc	r31, r19

		len = *cp++;
    201e:	40 81       	ld	r20, Z
		cp += len;
    2020:	2f 5f       	subi	r18, 0xFF	; 255
    2022:	3f 4f       	sbci	r19, 0xFF	; 255
    2024:	24 0f       	add	r18, r20
    2026:	31 1d       	adc	r19, r1
    2028:	82 0f       	add	r24, r18
    202a:	93 1f       	adc	r25, r19
		break;
    202c:	3f c0       	rjmp	.+126    	; 0x20ac <__EEPROM_REGION_LENGTH__+0xac>
	case TYPE_MX:
		cp += 2;
    202e:	04 5f       	subi	r16, 0xF4	; 244
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
		/* Get domain name of exchanger */
		len = parse_name(msg, cp, name, MAXCNAME);
    2032:	28 e1       	ldi	r18, 0x18	; 24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	ae 01       	movw	r20, r28
    2038:	4f 5f       	subi	r20, 0xFF	; 255
    203a:	5f 4f       	sbci	r21, 0xFF	; 255
    203c:	b8 01       	movw	r22, r16
    203e:	c7 01       	movw	r24, r14
    2040:	fb de       	rcall	.-522    	; 0x1e38 <parse_name>
		if (len == -1) return 0;
    2042:	8f 3f       	cpi	r24, 0xFF	; 255
    2044:	ff ef       	ldi	r31, 0xFF	; 255
    2046:	9f 07       	cpc	r25, r31
    2048:	49 f1       	breq	.+82     	; 0x209c <__EEPROM_REGION_LENGTH__+0x9c>

		cp += len;
    204a:	80 0f       	add	r24, r16
    204c:	91 1f       	adc	r25, r17
		break;
    204e:	2e c0       	rjmp	.+92     	; 0x20ac <__EEPROM_REGION_LENGTH__+0xac>
	case TYPE_SOA:
		/* Get domain name of name server */
		len = parse_name(msg, cp, name, MAXCNAME);
    2050:	28 e1       	ldi	r18, 0x18	; 24
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	ae 01       	movw	r20, r28
    2056:	4f 5f       	subi	r20, 0xFF	; 255
    2058:	5f 4f       	sbci	r21, 0xFF	; 255
    205a:	b5 01       	movw	r22, r10
    205c:	c7 01       	movw	r24, r14
    205e:	ec de       	rcall	.-552    	; 0x1e38 <parse_name>
		if (len == -1) return 0;
    2060:	8f 3f       	cpi	r24, 0xFF	; 255
    2062:	2f ef       	ldi	r18, 0xFF	; 255
    2064:	92 07       	cpc	r25, r18
    2066:	e9 f0       	breq	.+58     	; 0x20a2 <__EEPROM_REGION_LENGTH__+0xa2>

		cp += len;
    2068:	a8 0e       	add	r10, r24
    206a:	b9 1e       	adc	r11, r25

		/* Get domain name of responsible person */
		len = parse_name(msg, cp, name, MAXCNAME);
    206c:	28 e1       	ldi	r18, 0x18	; 24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	ae 01       	movw	r20, r28
    2072:	4f 5f       	subi	r20, 0xFF	; 255
    2074:	5f 4f       	sbci	r21, 0xFF	; 255
    2076:	b5 01       	movw	r22, r10
    2078:	c7 01       	movw	r24, r14
    207a:	de de       	rcall	.-580    	; 0x1e38 <parse_name>
		if (len == -1) return 0;
    207c:	8f 3f       	cpi	r24, 0xFF	; 255
    207e:	ef ef       	ldi	r30, 0xFF	; 255
    2080:	9e 07       	cpc	r25, r30
    2082:	91 f0       	breq	.+36     	; 0x20a8 <__EEPROM_REGION_LENGTH__+0xa8>

		cp += len;
    2084:	8a 0d       	add	r24, r10
    2086:	9b 1d       	adc	r25, r11

		cp += 4;
		cp += 4;
		cp += 4;
		cp += 4;
		cp += 4;
    2088:	44 96       	adiw	r24, 0x14	; 20
		break;
    208a:	10 c0       	rjmp	.+32     	; 0x20ac <__EEPROM_REGION_LENGTH__+0xac>
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);

	if (len == -1) return 0;
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0d c0       	rjmp	.+26     	; 0x20ac <__EEPROM_REGION_LENGTH__+0xac>
	cp += len;
	type = get16(cp);
	cp += 2;		/* type */
	cp += 2;		/* class */
	cp += 4;		/* ttl */
	cp += 2;		/* len */
    2092:	c5 01       	movw	r24, r10
    2094:	0b c0       	rjmp	.+22     	; 0x20ac <__EEPROM_REGION_LENGTH__+0xac>
	case TYPE_NS:
	case TYPE_PTR:
		/* These types all consist of a single domain name */
		/* convert it to ascii format */
		len = parse_name(msg, cp, name, MAXCNAME);
		if (len == -1) return 0;
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	08 c0       	rjmp	.+16     	; 0x20ac <__EEPROM_REGION_LENGTH__+0xac>
		break;
	case TYPE_MX:
		cp += 2;
		/* Get domain name of exchanger */
		len = parse_name(msg, cp, name, MAXCNAME);
		if (len == -1) return 0;
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	05 c0       	rjmp	.+10     	; 0x20ac <__EEPROM_REGION_LENGTH__+0xac>
		cp += len;
		break;
	case TYPE_SOA:
		/* Get domain name of name server */
		len = parse_name(msg, cp, name, MAXCNAME);
		if (len == -1) return 0;
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <__EEPROM_REGION_LENGTH__+0xac>

		cp += len;

		/* Get domain name of responsible person */
		len = parse_name(msg, cp, name, MAXCNAME);
		if (len == -1) return 0;
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	90 e0       	ldi	r25, 0x00	; 0
		/* Ignore */
		break;
	}

	return cp;
}
    20ac:	68 96       	adiw	r28, 0x18	; 24
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	1f 91       	pop	r17
    20be:	0f 91       	pop	r16
    20c0:	ff 90       	pop	r15
    20c2:	ef 90       	pop	r14
    20c4:	df 90       	pop	r13
    20c6:	cf 90       	pop	r12
    20c8:	bf 90       	pop	r11
    20ca:	af 90       	pop	r10
    20cc:	08 95       	ret

000020ce <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big 
 *                0 - Fail (Timout or parse error)
 *                1 - Success, 
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
    20ce:	cf 92       	push	r12
    20d0:	df 92       	push	r13
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	0f 93       	push	r16
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	ec 01       	movw	r28, r24
    20e0:	7b 01       	movw	r14, r22
    20e2:	6a 01       	movw	r12, r20
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
	memset(pdhdr, 0, sizeof(*pdhdr));
    20e4:	81 e1       	ldi	r24, 0x11	; 17
    20e6:	fe 01       	movw	r30, r28
    20e8:	11 92       	st	Z+, r1
    20ea:	8a 95       	dec	r24
    20ec:	e9 f7       	brne	.-6      	; 0x20e8 <parseDNSMSG+0x1a>

	pdhdr->id = get16(&msg[0]);
    20ee:	cb 01       	movw	r24, r22
    20f0:	95 de       	rcall	.-726    	; 0x1e1c <get16>
    20f2:	99 83       	std	Y+1, r25	; 0x01
    20f4:	88 83       	st	Y, r24
	tmp = get16(&msg[2]);
    20f6:	c7 01       	movw	r24, r14
    20f8:	02 96       	adiw	r24, 0x02	; 2
    20fa:	90 de       	rcall	.-736    	; 0x1e1c <get16>
	if (tmp & 0x8000) pdhdr->qr = 1;
    20fc:	99 23       	and	r25, r25
    20fe:	14 f4       	brge	.+4      	; 0x2104 <parseDNSMSG+0x36>
    2100:	21 e0       	ldi	r18, 0x01	; 1
    2102:	2a 83       	std	Y+2, r18	; 0x02

	pdhdr->opcode = (tmp >> 11) & 0xf;
    2104:	29 2f       	mov	r18, r25
    2106:	26 95       	lsr	r18
    2108:	26 95       	lsr	r18
    210a:	26 95       	lsr	r18
    210c:	2f 70       	andi	r18, 0x0F	; 15
    210e:	2b 83       	std	Y+3, r18	; 0x03

	if (tmp & 0x0400) pdhdr->aa = 1;
    2110:	92 ff       	sbrs	r25, 2
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <parseDNSMSG+0x4a>
    2114:	21 e0       	ldi	r18, 0x01	; 1
    2116:	2c 83       	std	Y+4, r18	; 0x04
	if (tmp & 0x0200) pdhdr->tc = 1;
    2118:	91 ff       	sbrs	r25, 1
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <parseDNSMSG+0x52>
    211c:	21 e0       	ldi	r18, 0x01	; 1
    211e:	2d 83       	std	Y+5, r18	; 0x05
	if (tmp & 0x0100) pdhdr->rd = 1;
    2120:	90 ff       	sbrs	r25, 0
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <parseDNSMSG+0x5a>
    2124:	21 e0       	ldi	r18, 0x01	; 1
    2126:	2e 83       	std	Y+6, r18	; 0x06
	if (tmp & 0x0080) pdhdr->ra = 1;
    2128:	87 ff       	sbrs	r24, 7
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <parseDNSMSG+0x62>
    212c:	21 e0       	ldi	r18, 0x01	; 1
    212e:	2f 83       	std	Y+7, r18	; 0x07

	pdhdr->rcode = tmp & 0xf;
    2130:	8f 70       	andi	r24, 0x0F	; 15
    2132:	88 87       	std	Y+8, r24	; 0x08
	pdhdr->qdcount = get16(&msg[4]);
    2134:	c7 01       	movw	r24, r14
    2136:	04 96       	adiw	r24, 0x04	; 4
    2138:	71 de       	rcall	.-798    	; 0x1e1c <get16>
    213a:	9a 87       	std	Y+10, r25	; 0x0a
    213c:	89 87       	std	Y+9, r24	; 0x09
	pdhdr->ancount = get16(&msg[6]);
    213e:	c7 01       	movw	r24, r14
    2140:	06 96       	adiw	r24, 0x06	; 6
    2142:	6c de       	rcall	.-808    	; 0x1e1c <get16>
    2144:	9c 87       	std	Y+12, r25	; 0x0c
    2146:	8b 87       	std	Y+11, r24	; 0x0b
	pdhdr->nscount = get16(&msg[8]);
    2148:	c7 01       	movw	r24, r14
    214a:	08 96       	adiw	r24, 0x08	; 8
    214c:	67 de       	rcall	.-818    	; 0x1e1c <get16>
    214e:	9e 87       	std	Y+14, r25	; 0x0e
    2150:	8d 87       	std	Y+13, r24	; 0x0d
	pdhdr->arcount = get16(&msg[10]);
    2152:	c7 01       	movw	r24, r14
    2154:	0a 96       	adiw	r24, 0x0a	; 10
    2156:	62 de       	rcall	.-828    	; 0x1e1c <get16>
    2158:	98 8b       	std	Y+16, r25	; 0x10
    215a:	8f 87       	std	Y+15, r24	; 0x0f
    215c:	c7 01       	movw	r24, r14


	/* Now parse the variable length sections */
	cp = &msg[12];
    215e:	0c 96       	adiw	r24, 0x0c	; 12

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
    2160:	00 e0       	ldi	r16, 0x00	; 0
    2162:	10 e0       	ldi	r17, 0x00	; 0
    2164:	07 c0       	rjmp	.+14     	; 0x2174 <parseDNSMSG+0xa6>
	{
		cp = dns_question(msg, cp);
    2166:	bc 01       	movw	r22, r24
    2168:	c7 01       	movw	r24, r14
    216a:	d2 de       	rcall	.-604    	; 0x1f10 <dns_question>
    216c:	00 97       	sbiw	r24, 0x00	; 0
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h"
   #endif
		if(!cp) return -1;
    216e:	71 f1       	breq	.+92     	; 0x21cc <parseDNSMSG+0xfe>
    2170:	0f 5f       	subi	r16, 0xFF	; 255

	/* Now parse the variable length sections */
	cp = &msg[12];

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
    2172:	1f 4f       	sbci	r17, 0xFF	; 255
    2174:	29 85       	ldd	r18, Y+9	; 0x09
    2176:	3a 85       	ldd	r19, Y+10	; 0x0a
    2178:	02 17       	cp	r16, r18
    217a:	13 07       	cpc	r17, r19
    217c:	a0 f3       	brcs	.-24     	; 0x2166 <parseDNSMSG+0x98>
    217e:	00 e0       	ldi	r16, 0x00	; 0
    2180:	10 e0       	ldi	r17, 0x00	; 0
    2182:	08 c0       	rjmp	.+16     	; 0x2194 <parseDNSMSG+0xc6>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
	{
		cp = dns_answer(msg, cp, ip_from_dns);
    2184:	a6 01       	movw	r20, r12
    2186:	bc 01       	movw	r22, r24
    2188:	c7 01       	movw	r24, r14
    218a:	ea de       	rcall	.-556    	; 0x1f60 <dns_answer>
    218c:	00 97       	sbiw	r24, 0x00	; 0
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h"
   #endif
		if(!cp) return -1;
    218e:	01 f1       	breq	.+64     	; 0x21d0 <parseDNSMSG+0x102>
    2190:	0f 5f       	subi	r16, 0xFF	; 255
   #endif
		if(!cp) return -1;
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
    2192:	1f 4f       	sbci	r17, 0xFF	; 255
    2194:	2b 85       	ldd	r18, Y+11	; 0x0b
    2196:	3c 85       	ldd	r19, Y+12	; 0x0c
    2198:	02 17       	cp	r16, r18
    219a:	13 07       	cpc	r17, r19
    219c:	98 f3       	brcs	.-26     	; 0x2184 <parseDNSMSG+0xb6>
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	01 c0       	rjmp	.+2      	; 0x21a6 <parseDNSMSG+0xd8>
    21a4:	01 96       	adiw	r24, 0x01	; 1
   #endif
		if(!cp) return -1;
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
    21a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    21a8:	3e 85       	ldd	r19, Y+14	; 0x0e
    21aa:	82 17       	cp	r24, r18
    21ac:	93 07       	cpc	r25, r19
    21ae:	d0 f3       	brcs	.-12     	; 0x21a4 <parseDNSMSG+0xd6>
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	01 c0       	rjmp	.+2      	; 0x21b8 <parseDNSMSG+0xea>
    21b6:	01 96       	adiw	r24, 0x01	; 1
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
    21b8:	2f 85       	ldd	r18, Y+15	; 0x0f
    21ba:	38 89       	ldd	r19, Y+16	; 0x10
    21bc:	82 17       	cp	r24, r18
    21be:	93 07       	cpc	r25, r19
    21c0:	d0 f3       	brcs	.-12     	; 0x21b6 <parseDNSMSG+0xe8>
    21c2:	88 85       	ldd	r24, Y+8	; 0x08
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
    21c4:	81 11       	cpse	r24, r1
    21c6:	06 c0       	rjmp	.+12     	; 0x21d4 <parseDNSMSG+0x106>
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	05 c0       	rjmp	.+10     	; 0x21d6 <parseDNSMSG+0x108>
    21cc:	8f ef       	ldi	r24, 0xFF	; 255
	{
		cp = dns_question(msg, cp);
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h"
   #endif
		if(!cp) return -1;
    21ce:	03 c0       	rjmp	.+6      	; 0x21d6 <parseDNSMSG+0x108>
    21d0:	8f ef       	ldi	r24, 0xFF	; 255
	{
		cp = dns_answer(msg, cp, ip_from_dns);
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h"
   #endif
		if(!cp) return -1;
    21d2:	01 c0       	rjmp	.+2      	; 0x21d6 <parseDNSMSG+0x108>
    21d4:	80 e0       	ldi	r24, 0x00	; 0
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
	else return 0;
    21d6:	df 91       	pop	r29
}
    21d8:	cf 91       	pop	r28
    21da:	1f 91       	pop	r17
    21dc:	0f 91       	pop	r16
    21de:	ff 90       	pop	r15
    21e0:	ef 90       	pop	r14
    21e2:	df 90       	pop	r13
    21e4:	cf 90       	pop	r12
    21e6:	08 95       	ret

000021e8 <dns_makequery>:
    21e8:	4f 92       	push	r4
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
    21ea:	5f 92       	push	r5
    21ec:	6f 92       	push	r6
    21ee:	7f 92       	push	r7
    21f0:	8f 92       	push	r8
    21f2:	9f 92       	push	r9
    21f4:	af 92       	push	r10
    21f6:	bf 92       	push	r11
    21f8:	cf 92       	push	r12
    21fa:	df 92       	push	r13
    21fc:	ef 92       	push	r14
    21fe:	ff 92       	push	r15
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	68 97       	sbiw	r28, 0x18	; 24
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	f8 2e       	mov	r15, r24
    221a:	8b 01       	movw	r16, r22
    221c:	2a 01       	movw	r4, r20
	uint16_t p;
	uint16_t dlen;

	cp = buf;

	DNS_MSGID++;
    221e:	60 91 68 1d 	lds	r22, 0x1D68	; 0x801d68 <DNS_MSGID>
    2222:	70 91 69 1d 	lds	r23, 0x1D69	; 0x801d69 <DNS_MSGID+0x1>
    2226:	6f 5f       	subi	r22, 0xFF	; 255
    2228:	7f 4f       	sbci	r23, 0xFF	; 255
    222a:	70 93 69 1d 	sts	0x1D69, r23	; 0x801d69 <DNS_MSGID+0x1>
    222e:	60 93 68 1d 	sts	0x1D68, r22	; 0x801d68 <DNS_MSGID>
	cp = put16(cp, DNS_MSGID);
    2232:	ca 01       	movw	r24, r20
    2234:	fc dd       	rcall	.-1032   	; 0x1e2e <put16>
	p = (op << 11) | 0x0100;			/* Recursion desired */
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	7f 2d       	mov	r23, r15
    223c:	77 0f       	add	r23, r23
    223e:	77 0f       	add	r23, r23
    2240:	77 0f       	add	r23, r23
	cp = put16(cp, p);
    2242:	71 60       	ori	r23, 0x01	; 1
    2244:	f4 dd       	rcall	.-1048   	; 0x1e2e <put16>
	cp = put16(cp, 1);
    2246:	61 e0       	ldi	r22, 0x01	; 1
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	f1 dd       	rcall	.-1054   	; 0x1e2e <put16>
	cp = put16(cp, 0);
    224c:	60 e0       	ldi	r22, 0x00	; 0
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	ee dd       	rcall	.-1060   	; 0x1e2e <put16>
	cp = put16(cp, 0);
    2252:	60 e0       	ldi	r22, 0x00	; 0
    2254:	70 e0       	ldi	r23, 0x00	; 0
    2256:	eb dd       	rcall	.-1066   	; 0x1e2e <put16>
	cp = put16(cp, 0);
    2258:	60 e0       	ldi	r22, 0x00	; 0
    225a:	70 e0       	ldi	r23, 0x00	; 0
    225c:	e8 dd       	rcall	.-1072   	; 0x1e2e <put16>
    225e:	5c 01       	movw	r10, r24
    2260:	b8 01       	movw	r22, r16

	strcpy(sname, name);
    2262:	8e 01       	movw	r16, r28
    2264:	0f 5f       	subi	r16, 0xFF	; 255
    2266:	1f 4f       	sbci	r17, 0xFF	; 255
    2268:	c8 01       	movw	r24, r16
    226a:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <strcpy>
    226e:	f8 01       	movw	r30, r16
	dname = sname;
	dlen = strlen(dname);
    2270:	01 90       	ld	r0, Z+
    2272:	00 20       	and	r0, r0
    2274:	e9 f7       	brne	.-6      	; 0x2270 <dns_makequery+0x88>
    2276:	31 97       	sbiw	r30, 0x01	; 1
    2278:	3f 01       	movw	r6, r30
    227a:	60 1a       	sub	r6, r16
    227c:	71 0a       	sbc	r7, r17
    227e:	78 01       	movw	r14, r16
	cp = put16(cp, 0);
	cp = put16(cp, 0);
	cp = put16(cp, 0);

	strcpy(sname, name);
	dname = sname;
    2280:	6e e2       	ldi	r22, 0x2E	; 46
	dlen = strlen(dname);
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
    2282:	70 e0       	ldi	r23, 0x00	; 0
    2284:	c7 01       	movw	r24, r14
    2286:	0e 94 b7 35 	call	0x6b6e	; 0x6b6e <strchr>
    228a:	6c 01       	movw	r12, r24
    228c:	00 97       	sbiw	r24, 0x00	; 0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
    228e:	21 f0       	breq	.+8      	; 0x2298 <dns_makequery+0xb0>
    2290:	8c 01       	movw	r16, r24
    2292:	0e 19       	sub	r16, r14
    2294:	1f 09       	sbc	r17, r15
    2296:	01 c0       	rjmp	.+2      	; 0x229a <dns_makequery+0xb2>
    2298:	83 01       	movw	r16, r6
		else len = dlen;			/* Last component */
    229a:	45 01       	movw	r8, r10

		*cp++ = len;				/* Write length of component */
    229c:	8f ef       	ldi	r24, 0xFF	; 255
    229e:	88 1a       	sub	r8, r24
    22a0:	98 0a       	sbc	r9, r24
    22a2:	f5 01       	movw	r30, r10
    22a4:	00 83       	st	Z, r16
    22a6:	01 15       	cp	r16, r1
		if (len == 0) break;
    22a8:	11 05       	cpc	r17, r1
    22aa:	d9 f0       	breq	.+54     	; 0x22e2 <dns_makequery+0xfa>
    22ac:	a8 01       	movw	r20, r16

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
    22ae:	b7 01       	movw	r22, r14
    22b0:	c4 01       	movw	r24, r8
    22b2:	0e 94 d7 35 	call	0x6bae	; 0x6bae <strncpy>
    22b6:	54 01       	movw	r10, r8
		cp += len;
    22b8:	a0 0e       	add	r10, r16
    22ba:	b1 1e       	adc	r11, r17
    22bc:	cd 28       	or	r12, r13
		if (cp1 == NULL)
    22be:	39 f4       	brne	.+14     	; 0x22ce <dns_makequery+0xe6>
    22c0:	45 01       	movw	r8, r10
		{
			*cp++ = 0;			/* Last one; write null and finish */
    22c2:	ff ef       	ldi	r31, 0xFF	; 255
    22c4:	8f 1a       	sub	r8, r31
    22c6:	9f 0a       	sbc	r9, r31
    22c8:	f5 01       	movw	r30, r10
    22ca:	10 82       	st	Z, r1
    22cc:	0a c0       	rjmp	.+20     	; 0x22e2 <dns_makequery+0xfa>
			break;
    22ce:	c8 01       	movw	r24, r16
		}
		dname += len+1;
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	e8 0e       	add	r14, r24
    22d4:	f9 1e       	adc	r15, r25
    22d6:	60 1a       	sub	r6, r16
		dlen -= len+1;
    22d8:	71 0a       	sbc	r7, r17
    22da:	f1 e0       	ldi	r31, 0x01	; 1
    22dc:	6f 1a       	sub	r6, r31
    22de:	71 08       	sbc	r7, r1
	}
    22e0:	cf cf       	rjmp	.-98     	; 0x2280 <dns_makequery+0x98>

	cp = put16(cp, 0x0001);				/* type */
    22e2:	61 e0       	ldi	r22, 0x01	; 1
    22e4:	70 e0       	ldi	r23, 0x00	; 0
    22e6:	c4 01       	movw	r24, r8
    22e8:	a2 dd       	rcall	.-1212   	; 0x1e2e <put16>
	cp = put16(cp, 0x0001);				/* class */
    22ea:	61 e0       	ldi	r22, 0x01	; 1
    22ec:	70 e0       	ldi	r23, 0x00	; 0
    22ee:	9f dd       	rcall	.-1218   	; 0x1e2e <put16>
    22f0:	84 19       	sub	r24, r4

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
}
    22f2:	95 09       	sbc	r25, r5
    22f4:	68 96       	adiw	r28, 0x18	; 24
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	1f 91       	pop	r17
    2306:	0f 91       	pop	r16
    2308:	ff 90       	pop	r15
    230a:	ef 90       	pop	r14
    230c:	df 90       	pop	r13
    230e:	cf 90       	pop	r12
    2310:	bf 90       	pop	r11
    2312:	af 90       	pop	r10
    2314:	9f 90       	pop	r9
    2316:	8f 90       	pop	r8
    2318:	7f 90       	pop	r7
    231a:	6f 90       	pop	r6
    231c:	5f 90       	pop	r5
    231e:	4f 90       	pop	r4
    2320:	08 95       	ret

00002322 <check_DNS_timeout>:
    2322:	80 91 62 1d 	lds	r24, 0x1D62	; 0x801d62 <dns_1s_tick>
 */

int8_t check_DNS_timeout(void)
{

	if(dns_1s_tick >= DNS_WAIT_TIME)
    2326:	90 91 63 1d 	lds	r25, 0x1D63	; 0x801d63 <dns_1s_tick+0x1>
    232a:	a0 91 64 1d 	lds	r26, 0x1D64	; 0x801d64 <dns_1s_tick+0x2>
    232e:	b0 91 65 1d 	lds	r27, 0x1D65	; 0x801d65 <dns_1s_tick+0x3>
    2332:	03 97       	sbiw	r24, 0x03	; 3
    2334:	a1 05       	cpc	r26, r1
    2336:	b1 05       	cpc	r27, r1
    2338:	a8 f0       	brcs	.+42     	; 0x2364 <check_DNS_timeout+0x42>
	{
		dns_1s_tick = 0;
    233a:	10 92 62 1d 	sts	0x1D62, r1	; 0x801d62 <dns_1s_tick>
    233e:	10 92 63 1d 	sts	0x1D63, r1	; 0x801d63 <dns_1s_tick+0x1>
    2342:	10 92 64 1d 	sts	0x1D64, r1	; 0x801d64 <dns_1s_tick+0x2>
    2346:	10 92 65 1d 	sts	0x1D65, r1	; 0x801d65 <dns_1s_tick+0x3>
		if(retry_count >= MAX_DNS_RETRY) {
    234a:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <retry_count>
    234e:	82 30       	cpi	r24, 0x02	; 2
    2350:	20 f0       	brcs	.+8      	; 0x235a <check_DNS_timeout+0x38>
			retry_count = 0;
    2352:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <retry_count>
			return -1; // timeout occurred
    2356:	8f ef       	ldi	r24, 0xFF	; 255
    2358:	08 95       	ret
		}
		retry_count++;
    235a:	8f 5f       	subi	r24, 0xFF	; 255
    235c:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <retry_count>
		return 0; // timer over, but no timeout
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	08 95       	ret
	}

	return 1; // no timer over, no timeout occur
    2364:	81 e0       	ldi	r24, 0x01	; 1
}
    2366:	08 95       	ret

00002368 <DNS_init>:


/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
	DNS_SOCKET = s; // SOCK_DNS
    2368:	80 93 61 1d 	sts	0x1D61, r24	; 0x801d61 <DNS_SOCKET>
	pDNSMSG = buf; // User's shared buffer
    236c:	70 93 67 1d 	sts	0x1D67, r23	; 0x801d67 <pDNSMSG+0x1>
    2370:	60 93 66 1d 	sts	0x1D66, r22	; 0x801d66 <pDNSMSG>
	DNS_MSGID = DNS_MSG_ID;
    2374:	82 e2       	ldi	r24, 0x22	; 34
    2376:	91 e1       	ldi	r25, 0x11	; 17
    2378:	90 93 69 1d 	sts	0x1D69, r25	; 0x801d69 <DNS_MSGID+0x1>
    237c:	80 93 68 1d 	sts	0x1D68, r24	; 0x801d68 <DNS_MSGID>
    2380:	08 95       	ret

00002382 <DNS_run>:
}

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
    2382:	af 92       	push	r10
    2384:	bf 92       	push	r11
    2386:	cf 92       	push	r12
    2388:	df 92       	push	r13
    238a:	ef 92       	push	r14
    238c:	ff 92       	push	r15
    238e:	0f 93       	push	r16
    2390:	1f 93       	push	r17
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	67 97       	sbiw	r28, 0x17	; 23
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	6c 01       	movw	r12, r24
    23a8:	7b 01       	movw	r14, r22
    23aa:	5a 01       	movw	r10, r20
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
    23ac:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <retry_count>
	dns_1s_tick = 0;
    23b0:	10 92 62 1d 	sts	0x1D62, r1	; 0x801d62 <dns_1s_tick>
    23b4:	10 92 63 1d 	sts	0x1D63, r1	; 0x801d63 <dns_1s_tick+0x1>
    23b8:	10 92 64 1d 	sts	0x1D64, r1	; 0x801d64 <dns_1s_tick+0x2>
    23bc:	10 92 65 1d 	sts	0x1D65, r1	; 0x801d65 <dns_1s_tick+0x3>
   
   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	40 e0       	ldi	r20, 0x00	; 0
    23c4:	50 e0       	ldi	r21, 0x00	; 0
    23c6:	62 e0       	ldi	r22, 0x02	; 2
    23c8:	80 91 61 1d 	lds	r24, 0x1D61	; 0x801d61 <DNS_SOCKET>
    23cc:	0e 94 82 02 	call	0x504	; 0x504 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif
   
	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
    23d0:	40 91 66 1d 	lds	r20, 0x1D66	; 0x801d66 <pDNSMSG>
    23d4:	50 91 67 1d 	lds	r21, 0x1D67	; 0x801d67 <pDNSMSG+0x1>
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	31 e0       	ldi	r19, 0x01	; 1
    23dc:	b7 01       	movw	r22, r14
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	02 df       	rcall	.-508    	; 0x21e8 <dns_makequery>
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
    23e4:	60 91 66 1d 	lds	r22, 0x1D66	; 0x801d66 <pDNSMSG>
    23e8:	70 91 67 1d 	lds	r23, 0x1D67	; 0x801d67 <pDNSMSG+0x1>
    23ec:	05 e3       	ldi	r16, 0x35	; 53
    23ee:	10 e0       	ldi	r17, 0x00	; 0
    23f0:	96 01       	movw	r18, r12
    23f2:	ac 01       	movw	r20, r24
    23f4:	80 91 61 1d 	lds	r24, 0x1D61	; 0x801d61 <DNS_SOCKET>
    23f8:	0e 94 98 06 	call	0xd30	; 0xd30 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
    23fc:	80 91 61 1d 	lds	r24, 0x1D61	; 0x801d61 <DNS_SOCKET>
    2400:	dd d9       	rcall	.-3142   	; 0x17bc <getSn_RX_RSR>
    2402:	7c 01       	movw	r14, r24
    2404:	89 2b       	or	r24, r25
    2406:	29 f1       	breq	.+74     	; 0x2452 <DNS_run+0xd0>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	e8 16       	cp	r14, r24
    240c:	f8 06       	cpc	r15, r24
    240e:	18 f0       	brcs	.+6      	; 0x2416 <DNS_run+0x94>
    2410:	e1 2c       	mov	r14, r1
    2412:	ff 24       	eor	r15, r15
    2414:	f3 94       	inc	r15
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
    2416:	60 91 66 1d 	lds	r22, 0x1D66	; 0x801d66 <pDNSMSG>
    241a:	70 91 67 1d 	lds	r23, 0x1D67	; 0x801d67 <pDNSMSG+0x1>
    241e:	8e 01       	movw	r16, r28
    2420:	0a 5e       	subi	r16, 0xEA	; 234
    2422:	1f 4f       	sbci	r17, 0xFF	; 255
    2424:	9e 01       	movw	r18, r28
    2426:	2e 5e       	subi	r18, 0xEE	; 238
    2428:	3f 4f       	sbci	r19, 0xFF	; 255
    242a:	a7 01       	movw	r20, r14
    242c:	80 91 61 1d 	lds	r24, 0x1D61	; 0x801d61 <DNS_SOCKET>
    2430:	0e 94 c6 07 	call	0xf8c	; 0xf8c <recvfrom>
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
    2434:	60 91 66 1d 	lds	r22, 0x1D66	; 0x801d66 <pDNSMSG>
    2438:	70 91 67 1d 	lds	r23, 0x1D67	; 0x801d67 <pDNSMSG+0x1>
    243c:	a5 01       	movw	r20, r10
    243e:	ce 01       	movw	r24, r28
    2440:	01 96       	adiw	r24, 0x01	; 1
    2442:	45 de       	rcall	.-886    	; 0x20ce <parseDNSMSG>
    2444:	f8 2e       	mov	r15, r24
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
    2446:	80 91 61 1d 	lds	r24, 0x1D61	; 0x801d61 <DNS_SOCKET>
    244a:	0e 94 12 02 	call	0x424	; 0x424 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
    244e:	8f 2d       	mov	r24, r15
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
			break;
		}
		// Check Timeout
		ret_check_timeout = check_DNS_timeout();
    2450:	13 c0       	rjmp	.+38     	; 0x2478 <DNS_run+0xf6>
    2452:	67 df       	rcall	.-306    	; 0x2322 <check_DNS_timeout>
		if (ret_check_timeout < 0) {
    2454:	88 23       	and	r24, r24
    2456:	7c f0       	brlt	.+30     	; 0x2476 <DNS_run+0xf4>
#ifdef _DNS_DEBUG_
			printf("> DNS Server is not responding : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif
			return 0; // timeout occurred
		}
		else if (ret_check_timeout == 0) {
    2458:	81 11       	cpse	r24, r1
    245a:	d0 cf       	rjmp	.-96     	; 0x23fc <DNS_run+0x7a>

#ifdef _DNS_DEBUG_
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
    245c:	60 91 66 1d 	lds	r22, 0x1D66	; 0x801d66 <pDNSMSG>
    2460:	70 91 67 1d 	lds	r23, 0x1D67	; 0x801d67 <pDNSMSG+0x1>
    2464:	05 e3       	ldi	r16, 0x35	; 53
    2466:	10 e0       	ldi	r17, 0x00	; 0
    2468:	96 01       	movw	r18, r12
    246a:	a7 01       	movw	r20, r14
    246c:	80 91 61 1d 	lds	r24, 0x1D61	; 0x801d61 <DNS_SOCKET>
    2470:	0e 94 98 06 	call	0xd30	; 0xd30 <sendto>
    2474:	c3 cf       	rjmp	.-122    	; 0x23fc <DNS_run+0x7a>
		if (ret_check_timeout < 0) {

#ifdef _DNS_DEBUG_
			printf("> DNS Server is not responding : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif
			return 0; // timeout occurred
    2476:	80 e0       	ldi	r24, 0x00	; 0
	}
	close(DNS_SOCKET);
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
}
    2478:	67 96       	adiw	r28, 0x17	; 23
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	de bf       	out	0x3e, r29	; 62
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	cd bf       	out	0x3d, r28	; 61
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	1f 91       	pop	r17
    248a:	0f 91       	pop	r16
    248c:	ff 90       	pop	r15
    248e:	ef 90       	pop	r14
    2490:	df 90       	pop	r13
    2492:	cf 90       	pop	r12
    2494:	bf 90       	pop	r11
    2496:	af 90       	pop	r10
    2498:	08 95       	ret

0000249a <NewMessageData>:
  else
    rc = FAILURE;
    
exit:
  return rc;
}
    249a:	fc 01       	movw	r30, r24
    249c:	73 83       	std	Z+3, r23	; 0x03
    249e:	62 83       	std	Z+2, r22	; 0x02
    24a0:	51 83       	std	Z+1, r21	; 0x01
    24a2:	40 83       	st	Z, r20
    24a4:	08 95       	ret

000024a6 <getNextPacketId>:
    24a6:	fc 01       	movw	r30, r24
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	a2 81       	ldd	r26, Z+2	; 0x02
    24ae:	b3 81       	ldd	r27, Z+3	; 0x03
    24b0:	8f 3f       	cpi	r24, 0xFF	; 255
    24b2:	2f ef       	ldi	r18, 0xFF	; 255
    24b4:	92 07       	cpc	r25, r18
    24b6:	a1 05       	cpc	r26, r1
    24b8:	b1 05       	cpc	r27, r1
    24ba:	39 f0       	breq	.+14     	; 0x24ca <getNextPacketId+0x24>
    24bc:	bc 01       	movw	r22, r24
    24be:	cd 01       	movw	r24, r26
    24c0:	6f 5f       	subi	r22, 0xFF	; 255
    24c2:	7f 4f       	sbci	r23, 0xFF	; 255
    24c4:	8f 4f       	sbci	r24, 0xFF	; 255
    24c6:	9f 4f       	sbci	r25, 0xFF	; 255
    24c8:	04 c0       	rjmp	.+8      	; 0x24d2 <getNextPacketId+0x2c>
    24ca:	61 e0       	ldi	r22, 0x01	; 1
    24cc:	70 e0       	ldi	r23, 0x00	; 0
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	60 83       	st	Z, r22
    24d4:	71 83       	std	Z+1, r23	; 0x01
    24d6:	82 83       	std	Z+2, r24	; 0x02
    24d8:	93 83       	std	Z+3, r25	; 0x03
    24da:	08 95       	ret

000024dc <sendPacket>:
    24dc:	2f 92       	push	r2
    24de:	3f 92       	push	r3
    24e0:	4f 92       	push	r4
    24e2:	5f 92       	push	r5
    24e4:	6f 92       	push	r6
    24e6:	7f 92       	push	r7
    24e8:	8f 92       	push	r8
    24ea:	9f 92       	push	r9
    24ec:	af 92       	push	r10
    24ee:	bf 92       	push	r11
    24f0:	cf 92       	push	r12
    24f2:	df 92       	push	r13
    24f4:	ef 92       	push	r14
    24f6:	ff 92       	push	r15
    24f8:	0f 93       	push	r16
    24fa:	1f 93       	push	r17
    24fc:	cf 93       	push	r28
    24fe:	df 93       	push	r29
    2500:	ec 01       	movw	r28, r24
    2502:	2a 01       	movw	r4, r20
    2504:	3b 01       	movw	r6, r22
    2506:	19 01       	movw	r2, r18
    2508:	81 2c       	mov	r8, r1
    250a:	91 2c       	mov	r9, r1
    250c:	54 01       	movw	r10, r8
    250e:	1a c0       	rjmp	.+52     	; 0x2544 <sendPacket+0x68>
    2510:	ef a5       	ldd	r30, Y+47	; 0x2f
    2512:	f8 a9       	ldd	r31, Y+48	; 0x30
    2514:	c6 80       	ldd	r12, Z+6	; 0x06
    2516:	d7 80       	ldd	r13, Z+7	; 0x07
    2518:	c1 01       	movw	r24, r2
    251a:	0e 94 48 23 	call	0x4690	; 0x4690 <left_ms>
    251e:	7b 01       	movw	r14, r22
    2520:	8c 01       	movw	r16, r24
    2522:	8c 85       	ldd	r24, Y+12	; 0x0c
    2524:	9d 85       	ldd	r25, Y+13	; 0x0d
    2526:	bc 01       	movw	r22, r24
    2528:	68 0d       	add	r22, r8
    252a:	79 1d       	adc	r23, r9
    252c:	a3 01       	movw	r20, r6
    252e:	92 01       	movw	r18, r4
    2530:	8f a5       	ldd	r24, Y+47	; 0x2f
    2532:	98 a9       	ldd	r25, Y+48	; 0x30
    2534:	f6 01       	movw	r30, r12
    2536:	19 95       	eicall
    2538:	99 23       	and	r25, r25
    253a:	74 f0       	brlt	.+28     	; 0x2558 <sendPacket+0x7c>
    253c:	86 0e       	add	r8, r22
    253e:	97 1e       	adc	r9, r23
    2540:	a8 1e       	adc	r10, r24
    2542:	b9 1e       	adc	r11, r25
    2544:	84 14       	cp	r8, r4
    2546:	95 04       	cpc	r9, r5
    2548:	a6 04       	cpc	r10, r6
    254a:	b7 04       	cpc	r11, r7
    254c:	2c f4       	brge	.+10     	; 0x2558 <sendPacket+0x7c>
    254e:	c1 01       	movw	r24, r2
    2550:	0e 94 e7 22 	call	0x45ce	; 0x45ce <expired>
    2554:	88 23       	and	r24, r24
    2556:	e1 f2       	breq	.-72     	; 0x2510 <sendPacket+0x34>
    2558:	84 14       	cp	r8, r4
    255a:	95 04       	cpc	r9, r5
    255c:	a6 04       	cpc	r10, r6
    255e:	b7 04       	cpc	r11, r7
    2560:	61 f4       	brne	.+24     	; 0x257a <sendPacket+0x9e>
    2562:	48 89       	ldd	r20, Y+16	; 0x10
    2564:	59 89       	ldd	r21, Y+17	; 0x11
    2566:	6a 89       	ldd	r22, Y+18	; 0x12
    2568:	7b 89       	ldd	r23, Y+19	; 0x13
    256a:	ce 01       	movw	r24, r28
    256c:	c1 96       	adiw	r24, 0x31	; 49
    256e:	0e 94 1d 23 	call	0x463a	; 0x463a <countdown>
    2572:	60 e0       	ldi	r22, 0x00	; 0
    2574:	70 e0       	ldi	r23, 0x00	; 0
    2576:	cb 01       	movw	r24, r22
    2578:	03 c0       	rjmp	.+6      	; 0x2580 <sendPacket+0xa4>
    257a:	6f ef       	ldi	r22, 0xFF	; 255
    257c:	7f ef       	ldi	r23, 0xFF	; 255
    257e:	cb 01       	movw	r24, r22
    2580:	df 91       	pop	r29
    2582:	cf 91       	pop	r28
    2584:	1f 91       	pop	r17
    2586:	0f 91       	pop	r16
    2588:	ff 90       	pop	r15
    258a:	ef 90       	pop	r14
    258c:	df 90       	pop	r13
    258e:	cf 90       	pop	r12
    2590:	bf 90       	pop	r11
    2592:	af 90       	pop	r10
    2594:	9f 90       	pop	r9
    2596:	8f 90       	pop	r8
    2598:	7f 90       	pop	r7
    259a:	6f 90       	pop	r6
    259c:	5f 90       	pop	r5
    259e:	4f 90       	pop	r4
    25a0:	3f 90       	pop	r3
    25a2:	2f 90       	pop	r2
    25a4:	08 95       	ret

000025a6 <MQTTClient>:
    25a6:	4f 92       	push	r4
    25a8:	5f 92       	push	r5
    25aa:	6f 92       	push	r6
    25ac:	7f 92       	push	r7
    25ae:	af 92       	push	r10
    25b0:	bf 92       	push	r11
    25b2:	cf 92       	push	r12
    25b4:	df 92       	push	r13
    25b6:	ef 92       	push	r14
    25b8:	ff 92       	push	r15
    25ba:	0f 93       	push	r16
    25bc:	1f 93       	push	r17
    25be:	dc 01       	movw	r26, r24
    25c0:	d0 96       	adiw	r26, 0x30	; 48
    25c2:	7c 93       	st	X, r23
    25c4:	6e 93       	st	-X, r22
    25c6:	9f 97       	sbiw	r26, 0x2f	; 47
    25c8:	41 2c       	mov	r4, r1
    25ca:	51 2c       	mov	r5, r1
    25cc:	32 01       	movw	r6, r4
    25ce:	0e c0       	rjmp	.+28     	; 0x25ec <MQTTClient+0x46>
    25d0:	f2 01       	movw	r30, r4
    25d2:	ee 0f       	add	r30, r30
    25d4:	ff 1f       	adc	r31, r31
    25d6:	ee 0f       	add	r30, r30
    25d8:	ff 1f       	adc	r31, r31
    25da:	ea 0f       	add	r30, r26
    25dc:	fb 1f       	adc	r31, r27
    25de:	12 8e       	std	Z+26, r1	; 0x1a
    25e0:	11 8e       	std	Z+25, r1	; 0x19
    25e2:	8f ef       	ldi	r24, 0xFF	; 255
    25e4:	48 1a       	sub	r4, r24
    25e6:	58 0a       	sbc	r5, r24
    25e8:	68 0a       	sbc	r6, r24
    25ea:	78 0a       	sbc	r7, r24
    25ec:	85 e0       	ldi	r24, 0x05	; 5
    25ee:	48 16       	cp	r4, r24
    25f0:	51 04       	cpc	r5, r1
    25f2:	61 04       	cpc	r6, r1
    25f4:	71 04       	cpc	r7, r1
    25f6:	64 f3       	brlt	.-40     	; 0x25d0 <MQTTClient+0x2a>
    25f8:	14 96       	adiw	r26, 0x04	; 4
    25fa:	2d 93       	st	X+, r18
    25fc:	3d 93       	st	X+, r19
    25fe:	4d 93       	st	X+, r20
    2600:	5c 93       	st	X, r21
    2602:	17 97       	sbiw	r26, 0x07	; 7
    2604:	1d 96       	adiw	r26, 0x0d	; 13
    2606:	1c 93       	st	X, r17
    2608:	0e 93       	st	-X, r16
    260a:	1c 97       	sbiw	r26, 0x0c	; 12
    260c:	19 96       	adiw	r26, 0x09	; 9
    260e:	fc 92       	st	X, r15
    2610:	ee 92       	st	-X, r14
    2612:	18 97       	sbiw	r26, 0x08	; 8
    2614:	1f 96       	adiw	r26, 0x0f	; 15
    2616:	dc 92       	st	X, r13
    2618:	ce 92       	st	-X, r12
    261a:	1e 97       	sbiw	r26, 0x0e	; 14
    261c:	1b 96       	adiw	r26, 0x0b	; 11
    261e:	bc 92       	st	X, r11
    2620:	ae 92       	st	-X, r10
    2622:	1a 97       	sbiw	r26, 0x0a	; 10
    2624:	55 96       	adiw	r26, 0x15	; 21
    2626:	1d 92       	st	X+, r1
    2628:	1d 92       	st	X+, r1
    262a:	1d 92       	st	X+, r1
    262c:	1c 92       	st	X, r1
    262e:	58 97       	sbiw	r26, 0x18	; 24
    2630:	54 96       	adiw	r26, 0x14	; 20
    2632:	1c 92       	st	X, r1
    2634:	54 97       	sbiw	r26, 0x14	; 20
    2636:	9e 96       	adiw	r26, 0x2e	; 46
    2638:	1c 92       	st	X, r1
    263a:	1e 92       	st	-X, r1
    263c:	9d 97       	sbiw	r26, 0x2d	; 45
    263e:	cd 01       	movw	r24, r26
    2640:	c1 96       	adiw	r24, 0x31	; 49
    2642:	0e 94 63 23 	call	0x46c6	; 0x46c6 <InitTimer>
    2646:	1f 91       	pop	r17
    2648:	0f 91       	pop	r16
    264a:	ff 90       	pop	r15
    264c:	ef 90       	pop	r14
    264e:	df 90       	pop	r13
    2650:	cf 90       	pop	r12
    2652:	bf 90       	pop	r11
    2654:	af 90       	pop	r10
    2656:	7f 90       	pop	r7
    2658:	6f 90       	pop	r6
    265a:	5f 90       	pop	r5
    265c:	4f 90       	pop	r4
    265e:	08 95       	ret

00002660 <decodePacket>:
    2660:	2f 92       	push	r2
    2662:	3f 92       	push	r3
    2664:	4f 92       	push	r4
    2666:	5f 92       	push	r5
    2668:	6f 92       	push	r6
    266a:	7f 92       	push	r7
    266c:	8f 92       	push	r8
    266e:	9f 92       	push	r9
    2670:	af 92       	push	r10
    2672:	bf 92       	push	r11
    2674:	cf 92       	push	r12
    2676:	df 92       	push	r13
    2678:	ef 92       	push	r14
    267a:	ff 92       	push	r15
    267c:	0f 93       	push	r16
    267e:	1f 93       	push	r17
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
    2684:	00 d0       	rcall	.+0      	; 0x2686 <decodePacket+0x26>
    2686:	1f 92       	push	r1
    2688:	1f 92       	push	r1
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	1c 01       	movw	r2, r24
    2690:	6b 01       	movw	r12, r22
    2692:	2a 83       	std	Y+2, r18	; 0x02
    2694:	3b 83       	std	Y+3, r19	; 0x03
    2696:	4c 83       	std	Y+4, r20	; 0x04
    2698:	5d 83       	std	Y+5, r21	; 0x05
    269a:	db 01       	movw	r26, r22
    269c:	1d 92       	st	X+, r1
    269e:	1d 92       	st	X+, r1
    26a0:	1d 92       	st	X+, r1
    26a2:	1c 92       	st	X, r1
    26a4:	13 97       	sbiw	r26, 0x03	; 3
    26a6:	41 2c       	mov	r4, r1
    26a8:	51 2c       	mov	r5, r1
    26aa:	32 01       	movw	r6, r4
    26ac:	81 2c       	mov	r8, r1
    26ae:	91 2c       	mov	r9, r1
    26b0:	54 01       	movw	r10, r8
    26b2:	83 94       	inc	r8
    26b4:	bf ef       	ldi	r27, 0xFF	; 255
    26b6:	4b 1a       	sub	r4, r27
    26b8:	5b 0a       	sbc	r5, r27
    26ba:	6b 0a       	sbc	r6, r27
    26bc:	7b 0a       	sbc	r7, r27
    26be:	e5 e0       	ldi	r30, 0x05	; 5
    26c0:	4e 16       	cp	r4, r30
    26c2:	51 04       	cpc	r5, r1
    26c4:	61 04       	cpc	r6, r1
    26c6:	71 04       	cpc	r7, r1
    26c8:	0c f0       	brlt	.+2      	; 0x26cc <decodePacket+0x6c>
    26ca:	51 c0       	rjmp	.+162    	; 0x276e <decodePacket+0x10e>
    26cc:	d1 01       	movw	r26, r2
    26ce:	9f 96       	adiw	r26, 0x2f	; 47
    26d0:	8d 91       	ld	r24, X+
    26d2:	9c 91       	ld	r25, X
    26d4:	d0 97       	sbiw	r26, 0x30	; 48
    26d6:	dc 01       	movw	r26, r24
    26d8:	14 96       	adiw	r26, 0x04	; 4
    26da:	ed 91       	ld	r30, X+
    26dc:	fc 91       	ld	r31, X
    26de:	15 97       	sbiw	r26, 0x05	; 5
    26e0:	ea 80       	ldd	r14, Y+2	; 0x02
    26e2:	fb 80       	ldd	r15, Y+3	; 0x03
    26e4:	0c 81       	ldd	r16, Y+4	; 0x04
    26e6:	1d 81       	ldd	r17, Y+5	; 0x05
    26e8:	21 e0       	ldi	r18, 0x01	; 1
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e0       	ldi	r20, 0x00	; 0
    26ee:	50 e0       	ldi	r21, 0x00	; 0
    26f0:	be 01       	movw	r22, r28
    26f2:	6f 5f       	subi	r22, 0xFF	; 255
    26f4:	7f 4f       	sbci	r23, 0xFF	; 255
    26f6:	19 95       	eicall
    26f8:	61 30       	cpi	r22, 0x01	; 1
    26fa:	71 05       	cpc	r23, r1
    26fc:	81 05       	cpc	r24, r1
    26fe:	91 05       	cpc	r25, r1
    2700:	b1 f5       	brne	.+108    	; 0x276e <decodePacket+0x10e>
    2702:	f9 80       	ldd	r15, Y+1	; 0x01
    2704:	af 2d       	mov	r26, r15
    2706:	af 77       	andi	r26, 0x7F	; 127
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	a5 01       	movw	r20, r10
    270c:	94 01       	movw	r18, r8
    270e:	0e 94 40 35 	call	0x6a80	; 0x6a80 <__muluhisi3>
    2712:	f6 01       	movw	r30, r12
    2714:	00 81       	ld	r16, Z
    2716:	11 81       	ldd	r17, Z+1	; 0x01
    2718:	22 81       	ldd	r18, Z+2	; 0x02
    271a:	33 81       	ldd	r19, Z+3	; 0x03
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	80 0f       	add	r24, r16
    2722:	91 1f       	adc	r25, r17
    2724:	a2 1f       	adc	r26, r18
    2726:	b3 1f       	adc	r27, r19
    2728:	80 83       	st	Z, r24
    272a:	91 83       	std	Z+1, r25	; 0x01
    272c:	a2 83       	std	Z+2, r26	; 0x02
    272e:	b3 83       	std	Z+3, r27	; 0x03
    2730:	88 0c       	add	r8, r8
    2732:	99 1c       	adc	r9, r9
    2734:	aa 1c       	adc	r10, r10
    2736:	bb 1c       	adc	r11, r11
    2738:	88 0c       	add	r8, r8
    273a:	99 1c       	adc	r9, r9
    273c:	aa 1c       	adc	r10, r10
    273e:	bb 1c       	adc	r11, r11
    2740:	88 0c       	add	r8, r8
    2742:	99 1c       	adc	r9, r9
    2744:	aa 1c       	adc	r10, r10
    2746:	bb 1c       	adc	r11, r11
    2748:	88 0c       	add	r8, r8
    274a:	99 1c       	adc	r9, r9
    274c:	aa 1c       	adc	r10, r10
    274e:	bb 1c       	adc	r11, r11
    2750:	88 0c       	add	r8, r8
    2752:	99 1c       	adc	r9, r9
    2754:	aa 1c       	adc	r10, r10
    2756:	bb 1c       	adc	r11, r11
    2758:	88 0c       	add	r8, r8
    275a:	99 1c       	adc	r9, r9
    275c:	aa 1c       	adc	r10, r10
    275e:	bb 1c       	adc	r11, r11
    2760:	88 0c       	add	r8, r8
    2762:	99 1c       	adc	r9, r9
    2764:	aa 1c       	adc	r10, r10
    2766:	bb 1c       	adc	r11, r11
    2768:	ff 20       	and	r15, r15
    276a:	0c f4       	brge	.+2      	; 0x276e <decodePacket+0x10e>
    276c:	a3 cf       	rjmp	.-186    	; 0x26b4 <decodePacket+0x54>
    276e:	c3 01       	movw	r24, r6
    2770:	b2 01       	movw	r22, r4
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	df 91       	pop	r29
    277e:	cf 91       	pop	r28
    2780:	1f 91       	pop	r17
    2782:	0f 91       	pop	r16
    2784:	ff 90       	pop	r15
    2786:	ef 90       	pop	r14
    2788:	df 90       	pop	r13
    278a:	cf 90       	pop	r12
    278c:	bf 90       	pop	r11
    278e:	af 90       	pop	r10
    2790:	9f 90       	pop	r9
    2792:	8f 90       	pop	r8
    2794:	7f 90       	pop	r7
    2796:	6f 90       	pop	r6
    2798:	5f 90       	pop	r5
    279a:	4f 90       	pop	r4
    279c:	3f 90       	pop	r3
    279e:	2f 90       	pop	r2
    27a0:	08 95       	ret

000027a2 <readPacket>:
    27a2:	4f 92       	push	r4
    27a4:	5f 92       	push	r5
    27a6:	6f 92       	push	r6
    27a8:	7f 92       	push	r7
    27aa:	8f 92       	push	r8
    27ac:	9f 92       	push	r9
    27ae:	af 92       	push	r10
    27b0:	bf 92       	push	r11
    27b2:	cf 92       	push	r12
    27b4:	df 92       	push	r13
    27b6:	ef 92       	push	r14
    27b8:	ff 92       	push	r15
    27ba:	0f 93       	push	r16
    27bc:	1f 93       	push	r17
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <readPacket+0x22>
    27c4:	1f 92       	push	r1
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	6c 01       	movw	r12, r24
    27cc:	5b 01       	movw	r10, r22
    27ce:	19 82       	std	Y+1, r1	; 0x01
    27d0:	1a 82       	std	Y+2, r1	; 0x02
    27d2:	1b 82       	std	Y+3, r1	; 0x03
    27d4:	1c 82       	std	Y+4, r1	; 0x04
    27d6:	dc 01       	movw	r26, r24
    27d8:	9f 96       	adiw	r26, 0x2f	; 47
    27da:	ed 91       	ld	r30, X+
    27dc:	fc 91       	ld	r31, X
    27de:	d0 97       	sbiw	r26, 0x30	; 48
    27e0:	84 80       	ldd	r8, Z+4	; 0x04
    27e2:	95 80       	ldd	r9, Z+5	; 0x05
    27e4:	cb 01       	movw	r24, r22
    27e6:	0e 94 48 23 	call	0x4690	; 0x4690 <left_ms>
    27ea:	7b 01       	movw	r14, r22
    27ec:	8c 01       	movw	r16, r24
    27ee:	f6 01       	movw	r30, r12
    27f0:	66 85       	ldd	r22, Z+14	; 0x0e
    27f2:	77 85       	ldd	r23, Z+15	; 0x0f
    27f4:	21 e0       	ldi	r18, 0x01	; 1
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	50 e0       	ldi	r21, 0x00	; 0
    27fc:	87 a5       	ldd	r24, Z+47	; 0x2f
    27fe:	90 a9       	ldd	r25, Z+48	; 0x30
    2800:	f4 01       	movw	r30, r8
    2802:	19 95       	eicall
    2804:	61 30       	cpi	r22, 0x01	; 1
    2806:	71 05       	cpc	r23, r1
    2808:	81 05       	cpc	r24, r1
    280a:	91 05       	cpc	r25, r1
    280c:	09 f0       	breq	.+2      	; 0x2810 <readPacket+0x6e>
    280e:	55 c0       	rjmp	.+170    	; 0x28ba <readPacket+0x118>
    2810:	c5 01       	movw	r24, r10
    2812:	0e 94 48 23 	call	0x4690	; 0x4690 <left_ms>
    2816:	9b 01       	movw	r18, r22
    2818:	ac 01       	movw	r20, r24
    281a:	be 01       	movw	r22, r28
    281c:	6f 5f       	subi	r22, 0xFF	; 255
    281e:	7f 4f       	sbci	r23, 0xFF	; 255
    2820:	c6 01       	movw	r24, r12
    2822:	1e df       	rcall	.-452    	; 0x2660 <decodePacket>
    2824:	d6 01       	movw	r26, r12
    2826:	1e 96       	adiw	r26, 0x0e	; 14
    2828:	8d 91       	ld	r24, X+
    282a:	9c 91       	ld	r25, X
    282c:	1f 97       	sbiw	r26, 0x0f	; 15
    282e:	49 81       	ldd	r20, Y+1	; 0x01
    2830:	5a 81       	ldd	r21, Y+2	; 0x02
    2832:	6b 81       	ldd	r22, Y+3	; 0x03
    2834:	7c 81       	ldd	r23, Y+4	; 0x04
    2836:	01 96       	adiw	r24, 0x01	; 1
    2838:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <MQTTPacket_encode>
    283c:	2b 01       	movw	r4, r22
    283e:	3c 01       	movw	r6, r24
    2840:	bf ef       	ldi	r27, 0xFF	; 255
    2842:	4b 1a       	sub	r4, r27
    2844:	5b 0a       	sbc	r5, r27
    2846:	6b 0a       	sbc	r6, r27
    2848:	7b 0a       	sbc	r7, r27
    284a:	49 81       	ldd	r20, Y+1	; 0x01
    284c:	5a 81       	ldd	r21, Y+2	; 0x02
    284e:	6b 81       	ldd	r22, Y+3	; 0x03
    2850:	7c 81       	ldd	r23, Y+4	; 0x04
    2852:	14 16       	cp	r1, r20
    2854:	15 06       	cpc	r1, r21
    2856:	16 06       	cpc	r1, r22
    2858:	17 06       	cpc	r1, r23
    285a:	1c f5       	brge	.+70     	; 0x28a2 <readPacket+0x100>
    285c:	d6 01       	movw	r26, r12
    285e:	9f 96       	adiw	r26, 0x2f	; 47
    2860:	ed 91       	ld	r30, X+
    2862:	fc 91       	ld	r31, X
    2864:	d0 97       	sbiw	r26, 0x30	; 48
    2866:	84 80       	ldd	r8, Z+4	; 0x04
    2868:	95 80       	ldd	r9, Z+5	; 0x05
    286a:	c5 01       	movw	r24, r10
    286c:	0e 94 48 23 	call	0x4690	; 0x4690 <left_ms>
    2870:	7b 01       	movw	r14, r22
    2872:	8c 01       	movw	r16, r24
    2874:	f6 01       	movw	r30, r12
    2876:	86 85       	ldd	r24, Z+14	; 0x0e
    2878:	97 85       	ldd	r25, Z+15	; 0x0f
    287a:	29 81       	ldd	r18, Y+1	; 0x01
    287c:	3a 81       	ldd	r19, Y+2	; 0x02
    287e:	4b 81       	ldd	r20, Y+3	; 0x03
    2880:	5c 81       	ldd	r21, Y+4	; 0x04
    2882:	bc 01       	movw	r22, r24
    2884:	64 0d       	add	r22, r4
    2886:	75 1d       	adc	r23, r5
    2888:	87 a5       	ldd	r24, Z+47	; 0x2f
    288a:	90 a9       	ldd	r25, Z+48	; 0x30
    288c:	f4 01       	movw	r30, r8
    288e:	19 95       	eicall
    2890:	09 81       	ldd	r16, Y+1	; 0x01
    2892:	1a 81       	ldd	r17, Y+2	; 0x02
    2894:	2b 81       	ldd	r18, Y+3	; 0x03
    2896:	3c 81       	ldd	r19, Y+4	; 0x04
    2898:	60 17       	cp	r22, r16
    289a:	71 07       	cpc	r23, r17
    289c:	82 07       	cpc	r24, r18
    289e:	93 07       	cpc	r25, r19
    28a0:	81 f4       	brne	.+32     	; 0x28c2 <readPacket+0x120>
    28a2:	d6 01       	movw	r26, r12
    28a4:	1e 96       	adiw	r26, 0x0e	; 14
    28a6:	ed 91       	ld	r30, X+
    28a8:	fc 91       	ld	r31, X
    28aa:	1f 97       	sbiw	r26, 0x0f	; 15
    28ac:	60 81       	ld	r22, Z
    28ae:	62 95       	swap	r22
    28b0:	6f 70       	andi	r22, 0x0F	; 15
    28b2:	70 e0       	ldi	r23, 0x00	; 0
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	07 c0       	rjmp	.+14     	; 0x28c8 <readPacket+0x126>
    28ba:	6f ef       	ldi	r22, 0xFF	; 255
    28bc:	7f ef       	ldi	r23, 0xFF	; 255
    28be:	cb 01       	movw	r24, r22
    28c0:	03 c0       	rjmp	.+6      	; 0x28c8 <readPacket+0x126>
    28c2:	6f ef       	ldi	r22, 0xFF	; 255
    28c4:	7f ef       	ldi	r23, 0xFF	; 255
    28c6:	cb 01       	movw	r24, r22
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	df 91       	pop	r29
    28d2:	cf 91       	pop	r28
    28d4:	1f 91       	pop	r17
    28d6:	0f 91       	pop	r16
    28d8:	ff 90       	pop	r15
    28da:	ef 90       	pop	r14
    28dc:	df 90       	pop	r13
    28de:	cf 90       	pop	r12
    28e0:	bf 90       	pop	r11
    28e2:	af 90       	pop	r10
    28e4:	9f 90       	pop	r9
    28e6:	8f 90       	pop	r8
    28e8:	7f 90       	pop	r7
    28ea:	6f 90       	pop	r6
    28ec:	5f 90       	pop	r5
    28ee:	4f 90       	pop	r4
    28f0:	08 95       	ret

000028f2 <isTopicMatched>:
    28f2:	cf 93       	push	r28
    28f4:	df 93       	push	r29
    28f6:	ec 01       	movw	r28, r24
    28f8:	db 01       	movw	r26, r22
    28fa:	16 96       	adiw	r26, 0x06	; 6
    28fc:	ed 91       	ld	r30, X+
    28fe:	fc 91       	ld	r31, X
    2900:	17 97       	sbiw	r26, 0x07	; 7
    2902:	12 96       	adiw	r26, 0x02	; 2
    2904:	4d 91       	ld	r20, X+
    2906:	5d 91       	ld	r21, X+
    2908:	6d 91       	ld	r22, X+
    290a:	7c 91       	ld	r23, X
    290c:	15 97       	sbiw	r26, 0x05	; 5
    290e:	4e 0f       	add	r20, r30
    2910:	5f 1f       	adc	r21, r31
    2912:	20 c0       	rjmp	.+64     	; 0x2954 <isTopicMatched+0x62>
    2914:	80 81       	ld	r24, Z
    2916:	8f 32       	cpi	r24, 0x2F	; 47
    2918:	11 f4       	brne	.+4      	; 0x291e <isTopicMatched+0x2c>
    291a:	9f 32       	cpi	r25, 0x2F	; 47
    291c:	09 f5       	brne	.+66     	; 0x2960 <isTopicMatched+0x6e>
    291e:	9b 32       	cpi	r25, 0x2B	; 43
    2920:	21 f0       	breq	.+8      	; 0x292a <isTopicMatched+0x38>
    2922:	93 32       	cpi	r25, 0x23	; 35
    2924:	11 f0       	breq	.+4      	; 0x292a <isTopicMatched+0x38>
    2926:	98 13       	cpse	r25, r24
    2928:	1b c0       	rjmp	.+54     	; 0x2960 <isTopicMatched+0x6e>
    292a:	9b 32       	cpi	r25, 0x2B	; 43
    292c:	69 f4       	brne	.+26     	; 0x2948 <isTopicMatched+0x56>
    292e:	df 01       	movw	r26, r30
    2930:	11 96       	adiw	r26, 0x01	; 1
    2932:	03 c0       	rjmp	.+6      	; 0x293a <isTopicMatched+0x48>
    2934:	31 96       	adiw	r30, 0x01	; 1
    2936:	df 01       	movw	r26, r30
    2938:	11 96       	adiw	r26, 0x01	; 1
    293a:	a4 17       	cp	r26, r20
    293c:	b5 07       	cpc	r27, r21
    293e:	40 f4       	brcc	.+16     	; 0x2950 <isTopicMatched+0x5e>
    2940:	9c 91       	ld	r25, X
    2942:	9f 32       	cpi	r25, 0x2F	; 47
    2944:	b9 f7       	brne	.-18     	; 0x2934 <isTopicMatched+0x42>
    2946:	04 c0       	rjmp	.+8      	; 0x2950 <isTopicMatched+0x5e>
    2948:	93 32       	cpi	r25, 0x23	; 35
    294a:	11 f4       	brne	.+4      	; 0x2950 <isTopicMatched+0x5e>
    294c:	fa 01       	movw	r30, r20
    294e:	31 97       	sbiw	r30, 0x01	; 1
    2950:	21 96       	adiw	r28, 0x01	; 1
    2952:	31 96       	adiw	r30, 0x01	; 1
    2954:	98 81       	ld	r25, Y
    2956:	99 23       	and	r25, r25
    2958:	19 f0       	breq	.+6      	; 0x2960 <isTopicMatched+0x6e>
    295a:	e4 17       	cp	r30, r20
    295c:	f5 07       	cpc	r31, r21
    295e:	d0 f2       	brcs	.-76     	; 0x2914 <isTopicMatched+0x22>
    2960:	e4 17       	cp	r30, r20
    2962:	f5 07       	cpc	r31, r21
    2964:	21 f4       	brne	.+8      	; 0x296e <isTopicMatched+0x7c>
    2966:	99 23       	and	r25, r25
    2968:	21 f0       	breq	.+8      	; 0x2972 <isTopicMatched+0x80>
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	03 c0       	rjmp	.+6      	; 0x2974 <isTopicMatched+0x82>
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	01 c0       	rjmp	.+2      	; 0x2974 <isTopicMatched+0x82>
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	df 91       	pop	r29
    2976:	cf 91       	pop	r28
    2978:	08 95       	ret

0000297a <deliverMessage>:
    297a:	4f 92       	push	r4
    297c:	5f 92       	push	r5
    297e:	6f 92       	push	r6
    2980:	7f 92       	push	r7
    2982:	8f 92       	push	r8
    2984:	9f 92       	push	r9
    2986:	af 92       	push	r10
    2988:	bf 92       	push	r11
    298a:	cf 92       	push	r12
    298c:	df 92       	push	r13
    298e:	ef 92       	push	r14
    2990:	ff 92       	push	r15
    2992:	0f 93       	push	r16
    2994:	1f 93       	push	r17
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	00 d0       	rcall	.+0      	; 0x299c <deliverMessage+0x22>
    299c:	1f 92       	push	r1
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	8c 01       	movw	r16, r24
    29a4:	7b 01       	movw	r14, r22
    29a6:	6a 01       	movw	r12, r20
    29a8:	41 2c       	mov	r4, r1
    29aa:	51 2c       	mov	r5, r1
    29ac:	32 01       	movw	r6, r4
    29ae:	88 24       	eor	r8, r8
    29b0:	8a 94       	dec	r8
    29b2:	98 2c       	mov	r9, r8
    29b4:	54 01       	movw	r10, r8
    29b6:	45 c0       	rjmp	.+138    	; 0x2a42 <deliverMessage+0xc8>
    29b8:	f2 01       	movw	r30, r4
    29ba:	ee 0f       	add	r30, r30
    29bc:	ff 1f       	adc	r31, r31
    29be:	ee 0f       	add	r30, r30
    29c0:	ff 1f       	adc	r31, r31
    29c2:	e0 0f       	add	r30, r16
    29c4:	f1 1f       	adc	r31, r17
    29c6:	61 8d       	ldd	r22, Z+25	; 0x19
    29c8:	72 8d       	ldd	r23, Z+26	; 0x1a
    29ca:	61 15       	cp	r22, r1
    29cc:	71 05       	cpc	r23, r1
    29ce:	a1 f1       	breq	.+104    	; 0x2a38 <deliverMessage+0xbe>
    29d0:	c7 01       	movw	r24, r14
    29d2:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <MQTTPacket_equals>
    29d6:	67 2b       	or	r22, r23
    29d8:	68 2b       	or	r22, r24
    29da:	69 2b       	or	r22, r25
    29dc:	69 f4       	brne	.+26     	; 0x29f8 <deliverMessage+0x7e>
    29de:	f2 01       	movw	r30, r4
    29e0:	ee 0f       	add	r30, r30
    29e2:	ff 1f       	adc	r31, r31
    29e4:	ee 0f       	add	r30, r30
    29e6:	ff 1f       	adc	r31, r31
    29e8:	e0 0f       	add	r30, r16
    29ea:	f1 1f       	adc	r31, r17
    29ec:	b7 01       	movw	r22, r14
    29ee:	81 8d       	ldd	r24, Z+25	; 0x19
    29f0:	92 8d       	ldd	r25, Z+26	; 0x1a
    29f2:	7f df       	rcall	.-258    	; 0x28f2 <isTopicMatched>
    29f4:	88 23       	and	r24, r24
    29f6:	01 f1       	breq	.+64     	; 0x2a38 <deliverMessage+0xbe>
    29f8:	f2 01       	movw	r30, r4
    29fa:	ee 0f       	add	r30, r30
    29fc:	ff 1f       	adc	r31, r31
    29fe:	ee 0f       	add	r30, r30
    2a00:	ff 1f       	adc	r31, r31
    2a02:	e0 0f       	add	r30, r16
    2a04:	f1 1f       	adc	r31, r17
    2a06:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a08:	94 8d       	ldd	r25, Z+28	; 0x1c
    2a0a:	89 2b       	or	r24, r25
    2a0c:	a9 f0       	breq	.+42     	; 0x2a38 <deliverMessage+0xbe>
    2a0e:	a6 01       	movw	r20, r12
    2a10:	b7 01       	movw	r22, r14
    2a12:	ce 01       	movw	r24, r28
    2a14:	01 96       	adiw	r24, 0x01	; 1
    2a16:	41 dd       	rcall	.-1406   	; 0x249a <NewMessageData>
    2a18:	f2 01       	movw	r30, r4
    2a1a:	ee 0f       	add	r30, r30
    2a1c:	ff 1f       	adc	r31, r31
    2a1e:	ee 0f       	add	r30, r30
    2a20:	ff 1f       	adc	r31, r31
    2a22:	e0 0f       	add	r30, r16
    2a24:	f1 1f       	adc	r31, r17
    2a26:	03 8c       	ldd	r0, Z+27	; 0x1b
    2a28:	f4 8d       	ldd	r31, Z+28	; 0x1c
    2a2a:	e0 2d       	mov	r30, r0
    2a2c:	ce 01       	movw	r24, r28
    2a2e:	01 96       	adiw	r24, 0x01	; 1
    2a30:	19 95       	eicall
    2a32:	81 2c       	mov	r8, r1
    2a34:	91 2c       	mov	r9, r1
    2a36:	54 01       	movw	r10, r8
    2a38:	8f ef       	ldi	r24, 0xFF	; 255
    2a3a:	48 1a       	sub	r4, r24
    2a3c:	58 0a       	sbc	r5, r24
    2a3e:	68 0a       	sbc	r6, r24
    2a40:	78 0a       	sbc	r7, r24
    2a42:	a5 e0       	ldi	r26, 0x05	; 5
    2a44:	4a 16       	cp	r4, r26
    2a46:	51 04       	cpc	r5, r1
    2a48:	61 04       	cpc	r6, r1
    2a4a:	71 04       	cpc	r7, r1
    2a4c:	0c f4       	brge	.+2      	; 0x2a50 <deliverMessage+0xd6>
    2a4e:	b4 cf       	rjmp	.-152    	; 0x29b8 <deliverMessage+0x3e>
    2a50:	bf ef       	ldi	r27, 0xFF	; 255
    2a52:	8b 16       	cp	r8, r27
    2a54:	9b 06       	cpc	r9, r27
    2a56:	ab 06       	cpc	r10, r27
    2a58:	bb 06       	cpc	r11, r27
    2a5a:	a9 f4       	brne	.+42     	; 0x2a86 <deliverMessage+0x10c>
    2a5c:	f8 01       	movw	r30, r16
    2a5e:	85 a5       	ldd	r24, Z+45	; 0x2d
    2a60:	96 a5       	ldd	r25, Z+46	; 0x2e
    2a62:	89 2b       	or	r24, r25
    2a64:	81 f0       	breq	.+32     	; 0x2a86 <deliverMessage+0x10c>
    2a66:	a6 01       	movw	r20, r12
    2a68:	b7 01       	movw	r22, r14
    2a6a:	ce 01       	movw	r24, r28
    2a6c:	01 96       	adiw	r24, 0x01	; 1
    2a6e:	15 dd       	rcall	.-1494   	; 0x249a <NewMessageData>
    2a70:	d8 01       	movw	r26, r16
    2a72:	9d 96       	adiw	r26, 0x2d	; 45
    2a74:	ed 91       	ld	r30, X+
    2a76:	fc 91       	ld	r31, X
    2a78:	9e 97       	sbiw	r26, 0x2e	; 46
    2a7a:	ce 01       	movw	r24, r28
    2a7c:	01 96       	adiw	r24, 0x01	; 1
    2a7e:	19 95       	eicall
    2a80:	81 2c       	mov	r8, r1
    2a82:	91 2c       	mov	r9, r1
    2a84:	54 01       	movw	r10, r8
    2a86:	c5 01       	movw	r24, r10
    2a88:	b4 01       	movw	r22, r8
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	df 91       	pop	r29
    2a94:	cf 91       	pop	r28
    2a96:	1f 91       	pop	r17
    2a98:	0f 91       	pop	r16
    2a9a:	ff 90       	pop	r15
    2a9c:	ef 90       	pop	r14
    2a9e:	df 90       	pop	r13
    2aa0:	cf 90       	pop	r12
    2aa2:	bf 90       	pop	r11
    2aa4:	af 90       	pop	r10
    2aa6:	9f 90       	pop	r9
    2aa8:	8f 90       	pop	r8
    2aaa:	7f 90       	pop	r7
    2aac:	6f 90       	pop	r6
    2aae:	5f 90       	pop	r5
    2ab0:	4f 90       	pop	r4
    2ab2:	08 95       	ret

00002ab4 <keepalive>:
    2ab4:	0f 93       	push	r16
    2ab6:	1f 93       	push	r17
    2ab8:	cf 93       	push	r28
    2aba:	df 93       	push	r29
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	28 97       	sbiw	r28, 0x08	; 8
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	de bf       	out	0x3e, r29	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	cd bf       	out	0x3d, r28	; 61
    2acc:	fc 01       	movw	r30, r24
    2ace:	40 89       	ldd	r20, Z+16	; 0x10
    2ad0:	51 89       	ldd	r21, Z+17	; 0x11
    2ad2:	62 89       	ldd	r22, Z+18	; 0x12
    2ad4:	73 89       	ldd	r23, Z+19	; 0x13
    2ad6:	45 2b       	or	r20, r21
    2ad8:	46 2b       	or	r20, r22
    2ada:	47 2b       	or	r20, r23
    2adc:	b9 f1       	breq	.+110    	; 0x2b4c <keepalive+0x98>
    2ade:	8c 01       	movw	r16, r24
    2ae0:	c1 96       	adiw	r24, 0x31	; 49
    2ae2:	0e 94 e7 22 	call	0x45ce	; 0x45ce <expired>
    2ae6:	88 23       	and	r24, r24
    2ae8:	a9 f1       	breq	.+106    	; 0x2b54 <keepalive+0xa0>
    2aea:	f8 01       	movw	r30, r16
    2aec:	84 89       	ldd	r24, Z+20	; 0x14
    2aee:	81 11       	cpse	r24, r1
    2af0:	35 c0       	rjmp	.+106    	; 0x2b5c <keepalive+0xa8>
    2af2:	ce 01       	movw	r24, r28
    2af4:	01 96       	adiw	r24, 0x01	; 1
    2af6:	0e 94 63 23 	call	0x46c6	; 0x46c6 <InitTimer>
    2afa:	48 ee       	ldi	r20, 0xE8	; 232
    2afc:	53 e0       	ldi	r21, 0x03	; 3
    2afe:	60 e0       	ldi	r22, 0x00	; 0
    2b00:	70 e0       	ldi	r23, 0x00	; 0
    2b02:	ce 01       	movw	r24, r28
    2b04:	01 96       	adiw	r24, 0x01	; 1
    2b06:	0e 94 04 23 	call	0x4608	; 0x4608 <countdown_ms>
    2b0a:	f8 01       	movw	r30, r16
    2b0c:	40 85       	ldd	r20, Z+8	; 0x08
    2b0e:	51 85       	ldd	r21, Z+9	; 0x09
    2b10:	60 e0       	ldi	r22, 0x00	; 0
    2b12:	70 e0       	ldi	r23, 0x00	; 0
    2b14:	84 85       	ldd	r24, Z+12	; 0x0c
    2b16:	95 85       	ldd	r25, Z+13	; 0x0d
    2b18:	8c d6       	rcall	.+3352   	; 0x3832 <MQTTSerialize_pingreq>
    2b1a:	16 16       	cp	r1, r22
    2b1c:	17 06       	cpc	r1, r23
    2b1e:	18 06       	cpc	r1, r24
    2b20:	19 06       	cpc	r1, r25
    2b22:	84 f4       	brge	.+32     	; 0x2b44 <keepalive+0x90>
    2b24:	9e 01       	movw	r18, r28
    2b26:	2f 5f       	subi	r18, 0xFF	; 255
    2b28:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2a:	ab 01       	movw	r20, r22
    2b2c:	bc 01       	movw	r22, r24
    2b2e:	c8 01       	movw	r24, r16
    2b30:	d5 dc       	rcall	.-1622   	; 0x24dc <sendPacket>
    2b32:	61 15       	cp	r22, r1
    2b34:	71 05       	cpc	r23, r1
    2b36:	81 05       	cpc	r24, r1
    2b38:	91 05       	cpc	r25, r1
    2b3a:	99 f4       	brne	.+38     	; 0x2b62 <keepalive+0xae>
    2b3c:	21 e0       	ldi	r18, 0x01	; 1
    2b3e:	f8 01       	movw	r30, r16
    2b40:	24 8b       	std	Z+20, r18	; 0x14
    2b42:	0f c0       	rjmp	.+30     	; 0x2b62 <keepalive+0xae>
    2b44:	6f ef       	ldi	r22, 0xFF	; 255
    2b46:	7f ef       	ldi	r23, 0xFF	; 255
    2b48:	cb 01       	movw	r24, r22
    2b4a:	0b c0       	rjmp	.+22     	; 0x2b62 <keepalive+0xae>
    2b4c:	60 e0       	ldi	r22, 0x00	; 0
    2b4e:	70 e0       	ldi	r23, 0x00	; 0
    2b50:	cb 01       	movw	r24, r22
    2b52:	07 c0       	rjmp	.+14     	; 0x2b62 <keepalive+0xae>
    2b54:	6f ef       	ldi	r22, 0xFF	; 255
    2b56:	7f ef       	ldi	r23, 0xFF	; 255
    2b58:	cb 01       	movw	r24, r22
    2b5a:	03 c0       	rjmp	.+6      	; 0x2b62 <keepalive+0xae>
    2b5c:	6f ef       	ldi	r22, 0xFF	; 255
    2b5e:	7f ef       	ldi	r23, 0xFF	; 255
    2b60:	cb 01       	movw	r24, r22
    2b62:	28 96       	adiw	r28, 0x08	; 8
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	df 91       	pop	r29
    2b70:	cf 91       	pop	r28
    2b72:	1f 91       	pop	r17
    2b74:	0f 91       	pop	r16
    2b76:	08 95       	ret

00002b78 <cycle>:
    2b78:	2f 92       	push	r2
    2b7a:	3f 92       	push	r3
    2b7c:	4f 92       	push	r4
    2b7e:	5f 92       	push	r5
    2b80:	6f 92       	push	r6
    2b82:	7f 92       	push	r7
    2b84:	8f 92       	push	r8
    2b86:	9f 92       	push	r9
    2b88:	af 92       	push	r10
    2b8a:	bf 92       	push	r11
    2b8c:	cf 92       	push	r12
    2b8e:	df 92       	push	r13
    2b90:	ef 92       	push	r14
    2b92:	ff 92       	push	r15
    2b94:	0f 93       	push	r16
    2b96:	1f 93       	push	r17
    2b98:	cf 93       	push	r28
    2b9a:	df 93       	push	r29
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
    2ba0:	62 97       	sbiw	r28, 0x12	; 18
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	f8 94       	cli
    2ba6:	de bf       	out	0x3e, r29	; 62
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	cd bf       	out	0x3d, r28	; 61
    2bac:	4c 01       	movw	r8, r24
    2bae:	1b 01       	movw	r2, r22
    2bb0:	f8 dd       	rcall	.-1040   	; 0x27a2 <readPacket>
    2bb2:	2b 01       	movw	r4, r22
    2bb4:	3c 01       	movw	r6, r24
    2bb6:	65 30       	cpi	r22, 0x05	; 5
    2bb8:	71 05       	cpc	r23, r1
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <cycle+0x46>
    2bbc:	7f c0       	rjmp	.+254    	; 0x2cbc <cycle+0x144>
    2bbe:	6d 30       	cpi	r22, 0x0D	; 13
    2bc0:	71 05       	cpc	r23, r1
    2bc2:	09 f4       	brne	.+2      	; 0x2bc6 <cycle+0x4e>
    2bc4:	c3 c0       	rjmp	.+390    	; 0x2d4c <cycle+0x1d4>
    2bc6:	63 30       	cpi	r22, 0x03	; 3
    2bc8:	71 05       	cpc	r23, r1
    2bca:	09 f0       	breq	.+2      	; 0x2bce <cycle+0x56>
    2bcc:	c5 c0       	rjmp	.+394    	; 0x2d58 <cycle+0x1e0>
    2bce:	f4 01       	movw	r30, r8
    2bd0:	82 85       	ldd	r24, Z+10	; 0x0a
    2bd2:	93 85       	ldd	r25, Z+11	; 0x0b
    2bd4:	a6 84       	ldd	r10, Z+14	; 0x0e
    2bd6:	b7 84       	ldd	r11, Z+15	; 0x0f
    2bd8:	1f 92       	push	r1
    2bda:	1f 92       	push	r1
    2bdc:	9f 93       	push	r25
    2bde:	8f 93       	push	r24
    2be0:	ce 01       	movw	r24, r28
    2be2:	08 96       	adiw	r24, 0x08	; 8
    2be4:	6c 01       	movw	r12, r24
    2be6:	fe 01       	movw	r30, r28
    2be8:	36 96       	adiw	r30, 0x06	; 6
    2bea:	7f 01       	movw	r14, r30
    2bec:	8e 01       	movw	r16, r28
    2bee:	06 5f       	subi	r16, 0xF6	; 246
    2bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf2:	9e 01       	movw	r18, r28
    2bf4:	2c 5f       	subi	r18, 0xFC	; 252
    2bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf8:	ae 01       	movw	r20, r28
    2bfa:	4e 5f       	subi	r20, 0xFE	; 254
    2bfc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bfe:	be 01       	movw	r22, r28
    2c00:	6f 5f       	subi	r22, 0xFF	; 255
    2c02:	7f 4f       	sbci	r23, 0xFF	; 255
    2c04:	05 97       	sbiw	r24, 0x05	; 5
    2c06:	18 d6       	rcall	.+3120   	; 0x3838 <MQTTDeserialize_publish>
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	61 30       	cpi	r22, 0x01	; 1
    2c12:	71 05       	cpc	r23, r1
    2c14:	81 05       	cpc	r24, r1
    2c16:	91 05       	cpc	r25, r1
    2c18:	09 f0       	breq	.+2      	; 0x2c1c <cycle+0xa4>
    2c1a:	48 c0       	rjmp	.+144    	; 0x2cac <cycle+0x134>
    2c1c:	ae 01       	movw	r20, r28
    2c1e:	4f 5f       	subi	r20, 0xFF	; 255
    2c20:	5f 4f       	sbci	r21, 0xFF	; 255
    2c22:	b8 01       	movw	r22, r16
    2c24:	c4 01       	movw	r24, r8
    2c26:	a9 de       	rcall	.-686    	; 0x297a <deliverMessage>
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	88 23       	and	r24, r24
    2c2c:	09 f4       	brne	.+2      	; 0x2c30 <cycle+0xb8>
    2c2e:	42 c0       	rjmp	.+132    	; 0x2cb4 <cycle+0x13c>
    2c30:	81 30       	cpi	r24, 0x01	; 1
    2c32:	81 f4       	brne	.+32     	; 0x2c54 <cycle+0xdc>
    2c34:	ec 80       	ldd	r14, Y+4	; 0x04
    2c36:	fd 80       	ldd	r15, Y+5	; 0x05
    2c38:	f4 01       	movw	r30, r8
    2c3a:	40 85       	ldd	r20, Z+8	; 0x08
    2c3c:	51 85       	ldd	r21, Z+9	; 0x09
    2c3e:	60 e0       	ldi	r22, 0x00	; 0
    2c40:	70 e0       	ldi	r23, 0x00	; 0
    2c42:	00 e0       	ldi	r16, 0x00	; 0
    2c44:	24 e0       	ldi	r18, 0x04	; 4
    2c46:	84 85       	ldd	r24, Z+12	; 0x0c
    2c48:	95 85       	ldd	r25, Z+13	; 0x0d
    2c4a:	0e 94 87 20 	call	0x410e	; 0x410e <MQTTSerialize_ack>
    2c4e:	ab 01       	movw	r20, r22
    2c50:	bc 01       	movw	r22, r24
    2c52:	15 c0       	rjmp	.+42     	; 0x2c7e <cycle+0x106>
    2c54:	82 30       	cpi	r24, 0x02	; 2
    2c56:	81 f4       	brne	.+32     	; 0x2c78 <cycle+0x100>
    2c58:	ec 80       	ldd	r14, Y+4	; 0x04
    2c5a:	fd 80       	ldd	r15, Y+5	; 0x05
    2c5c:	f4 01       	movw	r30, r8
    2c5e:	40 85       	ldd	r20, Z+8	; 0x08
    2c60:	51 85       	ldd	r21, Z+9	; 0x09
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	70 e0       	ldi	r23, 0x00	; 0
    2c66:	00 e0       	ldi	r16, 0x00	; 0
    2c68:	25 e0       	ldi	r18, 0x05	; 5
    2c6a:	84 85       	ldd	r24, Z+12	; 0x0c
    2c6c:	95 85       	ldd	r25, Z+13	; 0x0d
    2c6e:	0e 94 87 20 	call	0x410e	; 0x410e <MQTTSerialize_ack>
    2c72:	ab 01       	movw	r20, r22
    2c74:	bc 01       	movw	r22, r24
    2c76:	03 c0       	rjmp	.+6      	; 0x2c7e <cycle+0x106>
    2c78:	40 e0       	ldi	r20, 0x00	; 0
    2c7a:	50 e0       	ldi	r21, 0x00	; 0
    2c7c:	ba 01       	movw	r22, r20
    2c7e:	14 16       	cp	r1, r20
    2c80:	15 06       	cpc	r1, r21
    2c82:	16 06       	cpc	r1, r22
    2c84:	17 06       	cpc	r1, r23
    2c86:	34 f4       	brge	.+12     	; 0x2c94 <cycle+0x11c>
    2c88:	91 01       	movw	r18, r2
    2c8a:	c4 01       	movw	r24, r8
    2c8c:	27 dc       	rcall	.-1970   	; 0x24dc <sendPacket>
    2c8e:	6b 01       	movw	r12, r22
    2c90:	7c 01       	movw	r14, r24
    2c92:	04 c0       	rjmp	.+8      	; 0x2c9c <cycle+0x124>
    2c94:	cc 24       	eor	r12, r12
    2c96:	ca 94       	dec	r12
    2c98:	dc 2c       	mov	r13, r12
    2c9a:	76 01       	movw	r14, r12
    2c9c:	ff ef       	ldi	r31, 0xFF	; 255
    2c9e:	cf 16       	cp	r12, r31
    2ca0:	df 06       	cpc	r13, r31
    2ca2:	ef 06       	cpc	r14, r31
    2ca4:	ff 06       	cpc	r15, r31
    2ca6:	09 f0       	breq	.+2      	; 0x2caa <cycle+0x132>
    2ca8:	5a c0       	rjmp	.+180    	; 0x2d5e <cycle+0x1e6>
    2caa:	5b c0       	rjmp	.+182    	; 0x2d62 <cycle+0x1ea>
    2cac:	c1 2c       	mov	r12, r1
    2cae:	d1 2c       	mov	r13, r1
    2cb0:	76 01       	movw	r14, r12
    2cb2:	57 c0       	rjmp	.+174    	; 0x2d62 <cycle+0x1ea>
    2cb4:	c1 2c       	mov	r12, r1
    2cb6:	d1 2c       	mov	r13, r1
    2cb8:	76 01       	movw	r14, r12
    2cba:	51 c0       	rjmp	.+162    	; 0x2d5e <cycle+0x1e6>
    2cbc:	f4 01       	movw	r30, r8
    2cbe:	e2 84       	ldd	r14, Z+10	; 0x0a
    2cc0:	f3 84       	ldd	r15, Z+11	; 0x0b
    2cc2:	00 e0       	ldi	r16, 0x00	; 0
    2cc4:	10 e0       	ldi	r17, 0x00	; 0
    2cc6:	26 85       	ldd	r18, Z+14	; 0x0e
    2cc8:	37 85       	ldd	r19, Z+15	; 0x0f
    2cca:	ae 01       	movw	r20, r28
    2ccc:	4f 5f       	subi	r20, 0xFF	; 255
    2cce:	5f 4f       	sbci	r21, 0xFF	; 255
    2cd0:	be 01       	movw	r22, r28
    2cd2:	6e 5e       	subi	r22, 0xEE	; 238
    2cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd6:	ce 01       	movw	r24, r28
    2cd8:	0a 96       	adiw	r24, 0x0a	; 10
    2cda:	4b d6       	rcall	.+3222   	; 0x3972 <MQTTDeserialize_ack>
    2cdc:	61 30       	cpi	r22, 0x01	; 1
    2cde:	71 05       	cpc	r23, r1
    2ce0:	81 05       	cpc	r24, r1
    2ce2:	91 05       	cpc	r25, r1
    2ce4:	f1 f4       	brne	.+60     	; 0x2d22 <cycle+0x1aa>
    2ce6:	e9 80       	ldd	r14, Y+1	; 0x01
    2ce8:	fa 80       	ldd	r15, Y+2	; 0x02
    2cea:	f4 01       	movw	r30, r8
    2cec:	40 85       	ldd	r20, Z+8	; 0x08
    2cee:	51 85       	ldd	r21, Z+9	; 0x09
    2cf0:	60 e0       	ldi	r22, 0x00	; 0
    2cf2:	70 e0       	ldi	r23, 0x00	; 0
    2cf4:	00 e0       	ldi	r16, 0x00	; 0
    2cf6:	26 e0       	ldi	r18, 0x06	; 6
    2cf8:	84 85       	ldd	r24, Z+12	; 0x0c
    2cfa:	95 85       	ldd	r25, Z+13	; 0x0d
    2cfc:	0e 94 87 20 	call	0x410e	; 0x410e <MQTTSerialize_ack>
    2d00:	16 16       	cp	r1, r22
    2d02:	17 06       	cpc	r1, r23
    2d04:	18 06       	cpc	r1, r24
    2d06:	19 06       	cpc	r1, r25
    2d08:	8c f4       	brge	.+34     	; 0x2d2c <cycle+0x1b4>
    2d0a:	91 01       	movw	r18, r2
    2d0c:	ab 01       	movw	r20, r22
    2d0e:	bc 01       	movw	r22, r24
    2d10:	c4 01       	movw	r24, r8
    2d12:	e4 db       	rcall	.-2104   	; 0x24dc <sendPacket>
    2d14:	6b 01       	movw	r12, r22
    2d16:	7c 01       	movw	r14, r24
    2d18:	67 2b       	or	r22, r23
    2d1a:	68 2b       	or	r22, r24
    2d1c:	69 2b       	or	r22, r25
    2d1e:	59 f4       	brne	.+22     	; 0x2d36 <cycle+0x1be>
    2d20:	0e c0       	rjmp	.+28     	; 0x2d3e <cycle+0x1c6>
    2d22:	cc 24       	eor	r12, r12
    2d24:	ca 94       	dec	r12
    2d26:	dc 2c       	mov	r13, r12
    2d28:	76 01       	movw	r14, r12
    2d2a:	09 c0       	rjmp	.+18     	; 0x2d3e <cycle+0x1c6>
    2d2c:	cc 24       	eor	r12, r12
    2d2e:	ca 94       	dec	r12
    2d30:	dc 2c       	mov	r13, r12
    2d32:	76 01       	movw	r14, r12
    2d34:	04 c0       	rjmp	.+8      	; 0x2d3e <cycle+0x1c6>
    2d36:	cc 24       	eor	r12, r12
    2d38:	ca 94       	dec	r12
    2d3a:	dc 2c       	mov	r13, r12
    2d3c:	76 01       	movw	r14, r12
    2d3e:	ff ef       	ldi	r31, 0xFF	; 255
    2d40:	cf 16       	cp	r12, r31
    2d42:	df 06       	cpc	r13, r31
    2d44:	ef 06       	cpc	r14, r31
    2d46:	ff 06       	cpc	r15, r31
    2d48:	51 f4       	brne	.+20     	; 0x2d5e <cycle+0x1e6>
    2d4a:	0b c0       	rjmp	.+22     	; 0x2d62 <cycle+0x1ea>
    2d4c:	f4 01       	movw	r30, r8
    2d4e:	14 8a       	std	Z+20, r1	; 0x14
    2d50:	c1 2c       	mov	r12, r1
    2d52:	d1 2c       	mov	r13, r1
    2d54:	76 01       	movw	r14, r12
    2d56:	03 c0       	rjmp	.+6      	; 0x2d5e <cycle+0x1e6>
    2d58:	c1 2c       	mov	r12, r1
    2d5a:	d1 2c       	mov	r13, r1
    2d5c:	76 01       	movw	r14, r12
    2d5e:	c4 01       	movw	r24, r8
    2d60:	a9 de       	rcall	.-686    	; 0x2ab4 <keepalive>
    2d62:	c1 14       	cp	r12, r1
    2d64:	d1 04       	cpc	r13, r1
    2d66:	e1 04       	cpc	r14, r1
    2d68:	f1 04       	cpc	r15, r1
    2d6a:	21 f4       	brne	.+8      	; 0x2d74 <cycle+0x1fc>
    2d6c:	73 01       	movw	r14, r6
    2d6e:	62 01       	movw	r12, r4
    2d70:	ee 24       	eor	r14, r14
    2d72:	ff 24       	eor	r15, r15
    2d74:	c7 01       	movw	r24, r14
    2d76:	b6 01       	movw	r22, r12
    2d78:	62 96       	adiw	r28, 0x12	; 18
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
    2d84:	df 91       	pop	r29
    2d86:	cf 91       	pop	r28
    2d88:	1f 91       	pop	r17
    2d8a:	0f 91       	pop	r16
    2d8c:	ff 90       	pop	r15
    2d8e:	ef 90       	pop	r14
    2d90:	df 90       	pop	r13
    2d92:	cf 90       	pop	r12
    2d94:	bf 90       	pop	r11
    2d96:	af 90       	pop	r10
    2d98:	9f 90       	pop	r9
    2d9a:	8f 90       	pop	r8
    2d9c:	7f 90       	pop	r7
    2d9e:	6f 90       	pop	r6
    2da0:	5f 90       	pop	r5
    2da2:	4f 90       	pop	r4
    2da4:	3f 90       	pop	r3
    2da6:	2f 90       	pop	r2
    2da8:	08 95       	ret

00002daa <MQTTYield>:
    2daa:	cf 92       	push	r12
    2dac:	df 92       	push	r13
    2dae:	ef 92       	push	r14
    2db0:	ff 92       	push	r15
    2db2:	0f 93       	push	r16
    2db4:	1f 93       	push	r17
    2db6:	cf 93       	push	r28
    2db8:	df 93       	push	r29
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
    2dbe:	28 97       	sbiw	r28, 0x08	; 8
    2dc0:	0f b6       	in	r0, 0x3f	; 63
    2dc2:	f8 94       	cli
    2dc4:	de bf       	out	0x3e, r29	; 62
    2dc6:	0f be       	out	0x3f, r0	; 63
    2dc8:	cd bf       	out	0x3d, r28	; 61
    2dca:	8c 01       	movw	r16, r24
    2dcc:	6a 01       	movw	r12, r20
    2dce:	7b 01       	movw	r14, r22
    2dd0:	ce 01       	movw	r24, r28
    2dd2:	01 96       	adiw	r24, 0x01	; 1
    2dd4:	0e 94 63 23 	call	0x46c6	; 0x46c6 <InitTimer>
    2dd8:	b7 01       	movw	r22, r14
    2dda:	a6 01       	movw	r20, r12
    2ddc:	ce 01       	movw	r24, r28
    2dde:	01 96       	adiw	r24, 0x01	; 1
    2de0:	0e 94 04 23 	call	0x4608	; 0x4608 <countdown_ms>
    2de4:	0a c0       	rjmp	.+20     	; 0x2dfa <MQTTYield+0x50>
    2de6:	be 01       	movw	r22, r28
    2de8:	6f 5f       	subi	r22, 0xFF	; 255
    2dea:	7f 4f       	sbci	r23, 0xFF	; 255
    2dec:	c8 01       	movw	r24, r16
    2dee:	c4 de       	rcall	.-632    	; 0x2b78 <cycle>
    2df0:	6f 3f       	cpi	r22, 0xFF	; 255
    2df2:	7f 4f       	sbci	r23, 0xFF	; 255
    2df4:	8f 4f       	sbci	r24, 0xFF	; 255
    2df6:	9f 4f       	sbci	r25, 0xFF	; 255
    2df8:	51 f0       	breq	.+20     	; 0x2e0e <MQTTYield+0x64>
    2dfa:	ce 01       	movw	r24, r28
    2dfc:	01 96       	adiw	r24, 0x01	; 1
    2dfe:	0e 94 e7 22 	call	0x45ce	; 0x45ce <expired>
    2e02:	88 23       	and	r24, r24
    2e04:	81 f3       	breq	.-32     	; 0x2de6 <MQTTYield+0x3c>
    2e06:	60 e0       	ldi	r22, 0x00	; 0
    2e08:	70 e0       	ldi	r23, 0x00	; 0
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	03 c0       	rjmp	.+6      	; 0x2e14 <MQTTYield+0x6a>
    2e0e:	6f ef       	ldi	r22, 0xFF	; 255
    2e10:	7f ef       	ldi	r23, 0xFF	; 255
    2e12:	cb 01       	movw	r24, r22
    2e14:	28 96       	adiw	r28, 0x08	; 8
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	f8 94       	cli
    2e1a:	de bf       	out	0x3e, r29	; 62
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	cd bf       	out	0x3d, r28	; 61
    2e20:	df 91       	pop	r29
    2e22:	cf 91       	pop	r28
    2e24:	1f 91       	pop	r17
    2e26:	0f 91       	pop	r16
    2e28:	ff 90       	pop	r15
    2e2a:	ef 90       	pop	r14
    2e2c:	df 90       	pop	r13
    2e2e:	cf 90       	pop	r12
    2e30:	08 95       	ret

00002e32 <waitfor>:
    2e32:	8f 92       	push	r8
    2e34:	9f 92       	push	r9
    2e36:	af 92       	push	r10
    2e38:	bf 92       	push	r11
    2e3a:	cf 92       	push	r12
    2e3c:	df 92       	push	r13
    2e3e:	ef 92       	push	r14
    2e40:	ff 92       	push	r15
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	8c 01       	movw	r16, r24
    2e4c:	4a 01       	movw	r8, r20
    2e4e:	5b 01       	movw	r10, r22
    2e50:	e9 01       	movw	r28, r18
    2e52:	cc 24       	eor	r12, r12
    2e54:	ca 94       	dec	r12
    2e56:	dc 2c       	mov	r13, r12
    2e58:	76 01       	movw	r14, r12
    2e5a:	ce 01       	movw	r24, r28
    2e5c:	0e 94 e7 22 	call	0x45ce	; 0x45ce <expired>
    2e60:	81 11       	cpse	r24, r1
    2e62:	0a c0       	rjmp	.+20     	; 0x2e78 <waitfor+0x46>
    2e64:	be 01       	movw	r22, r28
    2e66:	c8 01       	movw	r24, r16
    2e68:	87 de       	rcall	.-754    	; 0x2b78 <cycle>
    2e6a:	6b 01       	movw	r12, r22
    2e6c:	7c 01       	movw	r14, r24
    2e6e:	68 15       	cp	r22, r8
    2e70:	79 05       	cpc	r23, r9
    2e72:	8a 05       	cpc	r24, r10
    2e74:	9b 05       	cpc	r25, r11
    2e76:	89 f7       	brne	.-30     	; 0x2e5a <waitfor+0x28>
    2e78:	c7 01       	movw	r24, r14
    2e7a:	b6 01       	movw	r22, r12
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	1f 91       	pop	r17
    2e82:	0f 91       	pop	r16
    2e84:	ff 90       	pop	r15
    2e86:	ef 90       	pop	r14
    2e88:	df 90       	pop	r13
    2e8a:	cf 90       	pop	r12
    2e8c:	bf 90       	pop	r11
    2e8e:	af 90       	pop	r10
    2e90:	9f 90       	pop	r9
    2e92:	8f 90       	pop	r8
    2e94:	08 95       	ret

00002e96 <MQTTConnect>:
    2e96:	ef 92       	push	r14
    2e98:	ff 92       	push	r15
    2e9a:	0f 93       	push	r16
    2e9c:	1f 93       	push	r17
    2e9e:	cf 93       	push	r28
    2ea0:	df 93       	push	r29
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
    2ea6:	c5 54       	subi	r28, 0x45	; 69
    2ea8:	d1 09       	sbc	r29, r1
    2eaa:	0f b6       	in	r0, 0x3f	; 63
    2eac:	f8 94       	cli
    2eae:	de bf       	out	0x3e, r29	; 62
    2eb0:	0f be       	out	0x3f, r0	; 63
    2eb2:	cd bf       	out	0x3d, r28	; 61
    2eb4:	7c 01       	movw	r14, r24
    2eb6:	8b 01       	movw	r16, r22
    2eb8:	8b e3       	ldi	r24, 0x3B	; 59
    2eba:	e8 e8       	ldi	r30, 0x88	; 136
    2ebc:	f2 e0       	ldi	r31, 0x02	; 2
    2ebe:	de 01       	movw	r26, r28
    2ec0:	19 96       	adiw	r26, 0x09	; 9
    2ec2:	01 90       	ld	r0, Z+
    2ec4:	0d 92       	st	X+, r0
    2ec6:	8a 95       	dec	r24
    2ec8:	e1 f7       	brne	.-8      	; 0x2ec2 <MQTTConnect+0x2c>
    2eca:	ce 01       	movw	r24, r28
    2ecc:	01 96       	adiw	r24, 0x01	; 1
    2ece:	0e 94 63 23 	call	0x46c6	; 0x46c6 <InitTimer>
    2ed2:	f7 01       	movw	r30, r14
    2ed4:	44 81       	ldd	r20, Z+4	; 0x04
    2ed6:	55 81       	ldd	r21, Z+5	; 0x05
    2ed8:	66 81       	ldd	r22, Z+6	; 0x06
    2eda:	77 81       	ldd	r23, Z+7	; 0x07
    2edc:	ce 01       	movw	r24, r28
    2ede:	01 96       	adiw	r24, 0x01	; 1
    2ee0:	0e 94 04 23 	call	0x4608	; 0x4608 <countdown_ms>
    2ee4:	f7 01       	movw	r30, r14
    2ee6:	85 89       	ldd	r24, Z+21	; 0x15
    2ee8:	96 89       	ldd	r25, Z+22	; 0x16
    2eea:	a7 89       	ldd	r26, Z+23	; 0x17
    2eec:	b0 8d       	ldd	r27, Z+24	; 0x18
    2eee:	89 2b       	or	r24, r25
    2ef0:	8a 2b       	or	r24, r26
    2ef2:	8b 2b       	or	r24, r27
    2ef4:	09 f0       	breq	.+2      	; 0x2ef8 <MQTTConnect+0x62>
    2ef6:	63 c0       	rjmp	.+198    	; 0x2fbe <MQTTConnect+0x128>
    2ef8:	01 15       	cp	r16, r1
    2efa:	11 05       	cpc	r17, r1
    2efc:	19 f4       	brne	.+6      	; 0x2f04 <MQTTConnect+0x6e>
    2efe:	8e 01       	movw	r16, r28
    2f00:	07 5f       	subi	r16, 0xF7	; 247
    2f02:	1f 4f       	sbci	r17, 0xFF	; 255
    2f04:	f8 01       	movw	r30, r16
    2f06:	47 85       	ldd	r20, Z+15	; 0x0f
    2f08:	50 89       	ldd	r21, Z+16	; 0x10
    2f0a:	60 e0       	ldi	r22, 0x00	; 0
    2f0c:	70 e0       	ldi	r23, 0x00	; 0
    2f0e:	f7 01       	movw	r30, r14
    2f10:	40 8b       	std	Z+16, r20	; 0x10
    2f12:	51 8b       	std	Z+17, r21	; 0x11
    2f14:	62 8b       	std	Z+18, r22	; 0x12
    2f16:	73 8b       	std	Z+19, r23	; 0x13
    2f18:	c7 01       	movw	r24, r14
    2f1a:	c1 96       	adiw	r24, 0x31	; 49
    2f1c:	0e 94 1d 23 	call	0x463a	; 0x463a <countdown>
    2f20:	f7 01       	movw	r30, r14
    2f22:	40 85       	ldd	r20, Z+8	; 0x08
    2f24:	51 85       	ldd	r21, Z+9	; 0x09
    2f26:	60 e0       	ldi	r22, 0x00	; 0
    2f28:	70 e0       	ldi	r23, 0x00	; 0
    2f2a:	98 01       	movw	r18, r16
    2f2c:	84 85       	ldd	r24, Z+12	; 0x0c
    2f2e:	95 85       	ldd	r25, Z+13	; 0x0d
    2f30:	19 d3       	rcall	.+1586   	; 0x3564 <MQTTSerialize_connect>
    2f32:	ab 01       	movw	r20, r22
    2f34:	bc 01       	movw	r22, r24
    2f36:	14 16       	cp	r1, r20
    2f38:	15 06       	cpc	r1, r21
    2f3a:	16 06       	cpc	r1, r22
    2f3c:	17 06       	cpc	r1, r23
    2f3e:	0c f0       	brlt	.+2      	; 0x2f42 <MQTTConnect+0xac>
    2f40:	42 c0       	rjmp	.+132    	; 0x2fc6 <MQTTConnect+0x130>
    2f42:	9e 01       	movw	r18, r28
    2f44:	2f 5f       	subi	r18, 0xFF	; 255
    2f46:	3f 4f       	sbci	r19, 0xFF	; 255
    2f48:	c7 01       	movw	r24, r14
    2f4a:	c8 da       	rcall	.-2672   	; 0x24dc <sendPacket>
    2f4c:	61 15       	cp	r22, r1
    2f4e:	71 05       	cpc	r23, r1
    2f50:	81 05       	cpc	r24, r1
    2f52:	91 05       	cpc	r25, r1
    2f54:	09 f0       	breq	.+2      	; 0x2f58 <MQTTConnect+0xc2>
    2f56:	3e c0       	rjmp	.+124    	; 0x2fd4 <MQTTConnect+0x13e>
    2f58:	9e 01       	movw	r18, r28
    2f5a:	2f 5f       	subi	r18, 0xFF	; 255
    2f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5e:	42 e0       	ldi	r20, 0x02	; 2
    2f60:	50 e0       	ldi	r21, 0x00	; 0
    2f62:	60 e0       	ldi	r22, 0x00	; 0
    2f64:	70 e0       	ldi	r23, 0x00	; 0
    2f66:	c7 01       	movw	r24, r14
    2f68:	64 df       	rcall	.-312    	; 0x2e32 <waitfor>
    2f6a:	62 30       	cpi	r22, 0x02	; 2
    2f6c:	71 05       	cpc	r23, r1
    2f6e:	81 05       	cpc	r24, r1
    2f70:	91 05       	cpc	r25, r1
    2f72:	69 f5       	brne	.+90     	; 0x2fce <MQTTConnect+0x138>
    2f74:	8f ef       	ldi	r24, 0xFF	; 255
    2f76:	26 96       	adiw	r28, 0x06	; 6
    2f78:	8f af       	std	Y+63, r24	; 0x3f
    2f7a:	26 97       	sbiw	r28, 0x06	; 6
    2f7c:	25 96       	adiw	r28, 0x05	; 5
    2f7e:	1f ae       	std	Y+63, r1	; 0x3f
    2f80:	25 97       	sbiw	r28, 0x05	; 5
    2f82:	f7 01       	movw	r30, r14
    2f84:	02 85       	ldd	r16, Z+10	; 0x0a
    2f86:	13 85       	ldd	r17, Z+11	; 0x0b
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	46 85       	ldd	r20, Z+14	; 0x0e
    2f8e:	57 85       	ldd	r21, Z+15	; 0x0f
    2f90:	be 01       	movw	r22, r28
    2f92:	6b 5b       	subi	r22, 0xBB	; 187
    2f94:	7f 4f       	sbci	r23, 0xFF	; 255
    2f96:	ce 01       	movw	r24, r28
    2f98:	8c 5b       	subi	r24, 0xBC	; 188
    2f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9c:	d1 d3       	rcall	.+1954   	; 0x3740 <MQTTDeserialize_connack>
    2f9e:	61 30       	cpi	r22, 0x01	; 1
    2fa0:	71 05       	cpc	r23, r1
    2fa2:	81 05       	cpc	r24, r1
    2fa4:	91 05       	cpc	r25, r1
    2fa6:	39 f4       	brne	.+14     	; 0x2fb6 <MQTTConnect+0x120>
    2fa8:	26 96       	adiw	r28, 0x06	; 6
    2faa:	6f ad       	ldd	r22, Y+63	; 0x3f
    2fac:	26 97       	sbiw	r28, 0x06	; 6
    2fae:	70 e0       	ldi	r23, 0x00	; 0
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	0f c0       	rjmp	.+30     	; 0x2fd4 <MQTTConnect+0x13e>
    2fb6:	6f ef       	ldi	r22, 0xFF	; 255
    2fb8:	7f ef       	ldi	r23, 0xFF	; 255
    2fba:	cb 01       	movw	r24, r22
    2fbc:	0b c0       	rjmp	.+22     	; 0x2fd4 <MQTTConnect+0x13e>
    2fbe:	6f ef       	ldi	r22, 0xFF	; 255
    2fc0:	7f ef       	ldi	r23, 0xFF	; 255
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	07 c0       	rjmp	.+14     	; 0x2fd4 <MQTTConnect+0x13e>
    2fc6:	6f ef       	ldi	r22, 0xFF	; 255
    2fc8:	7f ef       	ldi	r23, 0xFF	; 255
    2fca:	cb 01       	movw	r24, r22
    2fcc:	03 c0       	rjmp	.+6      	; 0x2fd4 <MQTTConnect+0x13e>
    2fce:	6f ef       	ldi	r22, 0xFF	; 255
    2fd0:	7f ef       	ldi	r23, 0xFF	; 255
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	61 15       	cp	r22, r1
    2fd6:	71 05       	cpc	r23, r1
    2fd8:	81 05       	cpc	r24, r1
    2fda:	91 05       	cpc	r25, r1
    2fdc:	49 f4       	brne	.+18     	; 0x2ff0 <MQTTConnect+0x15a>
    2fde:	01 e0       	ldi	r16, 0x01	; 1
    2fe0:	10 e0       	ldi	r17, 0x00	; 0
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	f7 01       	movw	r30, r14
    2fe8:	05 8b       	std	Z+21, r16	; 0x15
    2fea:	16 8b       	std	Z+22, r17	; 0x16
    2fec:	27 8b       	std	Z+23, r18	; 0x17
    2fee:	30 8f       	std	Z+24, r19	; 0x18
    2ff0:	cb 5b       	subi	r28, 0xBB	; 187
    2ff2:	df 4f       	sbci	r29, 0xFF	; 255
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	df 91       	pop	r29
    3000:	cf 91       	pop	r28
    3002:	1f 91       	pop	r17
    3004:	0f 91       	pop	r16
    3006:	ff 90       	pop	r15
    3008:	ef 90       	pop	r14
    300a:	08 95       	ret

0000300c <MQTTSubscribe>:
    300c:	2f 92       	push	r2
    300e:	3f 92       	push	r3
    3010:	4f 92       	push	r4
    3012:	5f 92       	push	r5
    3014:	6f 92       	push	r6
    3016:	7f 92       	push	r7
    3018:	8f 92       	push	r8
    301a:	9f 92       	push	r9
    301c:	af 92       	push	r10
    301e:	bf 92       	push	r11
    3020:	cf 92       	push	r12
    3022:	df 92       	push	r13
    3024:	ef 92       	push	r14
    3026:	ff 92       	push	r15
    3028:	0f 93       	push	r16
    302a:	1f 93       	push	r17
    302c:	cf 93       	push	r28
    302e:	df 93       	push	r29
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	6f 97       	sbiw	r28, 0x1f	; 31
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
    3040:	3c 01       	movw	r6, r24
    3042:	7d 8f       	std	Y+29, r23	; 0x1d
    3044:	6c 8f       	std	Y+28, r22	; 0x1c
    3046:	4b 8f       	std	Y+27, r20	; 0x1b
    3048:	3f 8f       	std	Y+31, r19	; 0x1f
    304a:	2e 8f       	std	Y+30, r18	; 0x1e
    304c:	1b 86       	std	Y+11, r1	; 0x0b
    304e:	1c 86       	std	Y+12, r1	; 0x0c
    3050:	1d 86       	std	Y+13, r1	; 0x0d
    3052:	1e 86       	std	Y+14, r1	; 0x0e
    3054:	18 8a       	std	Y+16, r1	; 0x10
    3056:	1f 86       	std	Y+15, r1	; 0x0f
    3058:	7a 87       	std	Y+10, r23	; 0x0a
    305a:	69 87       	std	Y+9, r22	; 0x09
    305c:	ce 01       	movw	r24, r28
    305e:	01 96       	adiw	r24, 0x01	; 1
    3060:	0e 94 63 23 	call	0x46c6	; 0x46c6 <InitTimer>
    3064:	f3 01       	movw	r30, r6
    3066:	44 81       	ldd	r20, Z+4	; 0x04
    3068:	55 81       	ldd	r21, Z+5	; 0x05
    306a:	66 81       	ldd	r22, Z+6	; 0x06
    306c:	77 81       	ldd	r23, Z+7	; 0x07
    306e:	ce 01       	movw	r24, r28
    3070:	01 96       	adiw	r24, 0x01	; 1
    3072:	0e 94 04 23 	call	0x4608	; 0x4608 <countdown_ms>
    3076:	f3 01       	movw	r30, r6
    3078:	85 89       	ldd	r24, Z+21	; 0x15
    307a:	96 89       	ldd	r25, Z+22	; 0x16
    307c:	a7 89       	ldd	r26, Z+23	; 0x17
    307e:	b0 8d       	ldd	r27, Z+24	; 0x18
    3080:	89 2b       	or	r24, r25
    3082:	8a 2b       	or	r24, r26
    3084:	8b 2b       	or	r24, r27
    3086:	09 f4       	brne	.+2      	; 0x308a <MQTTSubscribe+0x7e>
    3088:	9a c0       	rjmp	.+308    	; 0x31be <MQTTSubscribe+0x1b2>
    308a:	c3 01       	movw	r24, r6
    308c:	0c da       	rcall	.-3048   	; 0x24a6 <getNextPacketId>
    308e:	8b 01       	movw	r16, r22
    3090:	9c 01       	movw	r18, r24
    3092:	f3 01       	movw	r30, r6
    3094:	40 85       	ldd	r20, Z+8	; 0x08
    3096:	51 85       	ldd	r21, Z+9	; 0x09
    3098:	60 e0       	ldi	r22, 0x00	; 0
    309a:	70 e0       	ldi	r23, 0x00	; 0
    309c:	ce 01       	movw	r24, r28
    309e:	4b 96       	adiw	r24, 0x1b	; 27
    30a0:	4c 01       	movw	r8, r24
    30a2:	fe 01       	movw	r30, r28
    30a4:	39 96       	adiw	r30, 0x09	; 9
    30a6:	5f 01       	movw	r10, r30
    30a8:	c1 2c       	mov	r12, r1
    30aa:	d1 2c       	mov	r13, r1
    30ac:	76 01       	movw	r14, r12
    30ae:	c3 94       	inc	r12
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	f3 01       	movw	r30, r6
    30b4:	84 85       	ldd	r24, Z+12	; 0x0c
    30b6:	95 85       	ldd	r25, Z+13	; 0x0d
    30b8:	0e 94 25 21 	call	0x424a	; 0x424a <MQTTSerialize_subscribe>
    30bc:	ab 01       	movw	r20, r22
    30be:	bc 01       	movw	r22, r24
    30c0:	14 16       	cp	r1, r20
    30c2:	15 06       	cpc	r1, r21
    30c4:	16 06       	cpc	r1, r22
    30c6:	17 06       	cpc	r1, r23
    30c8:	0c f0       	brlt	.+2      	; 0x30cc <MQTTSubscribe+0xc0>
    30ca:	7e c0       	rjmp	.+252    	; 0x31c8 <MQTTSubscribe+0x1bc>
    30cc:	9e 01       	movw	r18, r28
    30ce:	2f 5f       	subi	r18, 0xFF	; 255
    30d0:	3f 4f       	sbci	r19, 0xFF	; 255
    30d2:	c3 01       	movw	r24, r6
    30d4:	03 da       	rcall	.-3066   	; 0x24dc <sendPacket>
    30d6:	1b 01       	movw	r2, r22
    30d8:	2c 01       	movw	r4, r24
    30da:	67 2b       	or	r22, r23
    30dc:	68 2b       	or	r22, r24
    30de:	69 2b       	or	r22, r25
    30e0:	09 f0       	breq	.+2      	; 0x30e4 <MQTTSubscribe+0xd8>
    30e2:	7b c0       	rjmp	.+246    	; 0x31da <MQTTSubscribe+0x1ce>
    30e4:	9e 01       	movw	r18, r28
    30e6:	2f 5f       	subi	r18, 0xFF	; 255
    30e8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ea:	49 e0       	ldi	r20, 0x09	; 9
    30ec:	50 e0       	ldi	r21, 0x00	; 0
    30ee:	60 e0       	ldi	r22, 0x00	; 0
    30f0:	70 e0       	ldi	r23, 0x00	; 0
    30f2:	c3 01       	movw	r24, r6
    30f4:	9e de       	rcall	.-708    	; 0x2e32 <waitfor>
    30f6:	69 30       	cpi	r22, 0x09	; 9
    30f8:	71 05       	cpc	r23, r1
    30fa:	81 05       	cpc	r24, r1
    30fc:	91 05       	cpc	r25, r1
    30fe:	09 f0       	breq	.+2      	; 0x3102 <MQTTSubscribe+0xf6>
    3100:	68 c0       	rjmp	.+208    	; 0x31d2 <MQTTSubscribe+0x1c6>
    3102:	1d 8a       	std	Y+21, r1	; 0x15
    3104:	1e 8a       	std	Y+22, r1	; 0x16
    3106:	1f 8a       	std	Y+23, r1	; 0x17
    3108:	18 8e       	std	Y+24, r1	; 0x18
    310a:	8f ef       	ldi	r24, 0xFF	; 255
    310c:	9f ef       	ldi	r25, 0xFF	; 255
    310e:	dc 01       	movw	r26, r24
    3110:	89 8b       	std	Y+17, r24	; 0x11
    3112:	9a 8b       	std	Y+18, r25	; 0x12
    3114:	ab 8b       	std	Y+19, r26	; 0x13
    3116:	bc 8b       	std	Y+20, r27	; 0x14
    3118:	f3 01       	movw	r30, r6
    311a:	a2 84       	ldd	r10, Z+10	; 0x0a
    311c:	b3 84       	ldd	r11, Z+11	; 0x0b
    311e:	c1 2c       	mov	r12, r1
    3120:	d1 2c       	mov	r13, r1
    3122:	e6 84       	ldd	r14, Z+14	; 0x0e
    3124:	f7 84       	ldd	r15, Z+15	; 0x0f
    3126:	8e 01       	movw	r16, r28
    3128:	0f 5e       	subi	r16, 0xEF	; 239
    312a:	1f 4f       	sbci	r17, 0xFF	; 255
    312c:	9e 01       	movw	r18, r28
    312e:	2b 5e       	subi	r18, 0xEB	; 235
    3130:	3f 4f       	sbci	r19, 0xFF	; 255
    3132:	41 e0       	ldi	r20, 0x01	; 1
    3134:	50 e0       	ldi	r21, 0x00	; 0
    3136:	60 e0       	ldi	r22, 0x00	; 0
    3138:	70 e0       	ldi	r23, 0x00	; 0
    313a:	ce 01       	movw	r24, r28
    313c:	49 96       	adiw	r24, 0x19	; 25
    313e:	0e 94 c3 21 	call	0x4386	; 0x4386 <MQTTDeserialize_suback>
    3142:	61 30       	cpi	r22, 0x01	; 1
    3144:	71 05       	cpc	r23, r1
    3146:	81 05       	cpc	r24, r1
    3148:	91 05       	cpc	r25, r1
    314a:	29 f4       	brne	.+10     	; 0x3156 <MQTTSubscribe+0x14a>
    314c:	49 89       	ldd	r20, Y+17	; 0x11
    314e:	5a 89       	ldd	r21, Y+18	; 0x12
    3150:	6b 89       	ldd	r22, Y+19	; 0x13
    3152:	7c 89       	ldd	r23, Y+20	; 0x14
    3154:	02 c0       	rjmp	.+4      	; 0x315a <MQTTSubscribe+0x14e>
    3156:	b2 01       	movw	r22, r4
    3158:	a1 01       	movw	r20, r2
    315a:	40 38       	cpi	r20, 0x80	; 128
    315c:	51 05       	cpc	r21, r1
    315e:	61 05       	cpc	r22, r1
    3160:	71 05       	cpc	r23, r1
    3162:	11 f5       	brne	.+68     	; 0x31a8 <MQTTSubscribe+0x19c>
    3164:	29 c0       	rjmp	.+82     	; 0x31b8 <MQTTSubscribe+0x1ac>
    3166:	fc 01       	movw	r30, r24
    3168:	ee 0f       	add	r30, r30
    316a:	ff 1f       	adc	r31, r31
    316c:	ee 0f       	add	r30, r30
    316e:	ff 1f       	adc	r31, r31
    3170:	e6 0d       	add	r30, r6
    3172:	f7 1d       	adc	r31, r7
    3174:	21 8d       	ldd	r18, Z+25	; 0x19
    3176:	32 8d       	ldd	r19, Z+26	; 0x1a
    3178:	23 2b       	or	r18, r19
    317a:	91 f4       	brne	.+36     	; 0x31a0 <MQTTSubscribe+0x194>
    317c:	88 0f       	add	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	88 0f       	add	r24, r24
    3182:	99 1f       	adc	r25, r25
    3184:	f3 01       	movw	r30, r6
    3186:	e8 0f       	add	r30, r24
    3188:	f9 1f       	adc	r31, r25
    318a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    318c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    318e:	92 8f       	std	Z+26, r25	; 0x1a
    3190:	81 8f       	std	Z+25, r24	; 0x19
    3192:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3194:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3196:	94 8f       	std	Z+28, r25	; 0x1c
    3198:	83 8f       	std	Z+27, r24	; 0x1b
    319a:	b2 01       	movw	r22, r4
    319c:	a1 01       	movw	r20, r2
    319e:	0c c0       	rjmp	.+24     	; 0x31b8 <MQTTSubscribe+0x1ac>
    31a0:	01 96       	adiw	r24, 0x01	; 1
    31a2:	a1 1d       	adc	r26, r1
    31a4:	b1 1d       	adc	r27, r1
    31a6:	03 c0       	rjmp	.+6      	; 0x31ae <MQTTSubscribe+0x1a2>
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	dc 01       	movw	r26, r24
    31ae:	85 30       	cpi	r24, 0x05	; 5
    31b0:	91 05       	cpc	r25, r1
    31b2:	a1 05       	cpc	r26, r1
    31b4:	b1 05       	cpc	r27, r1
    31b6:	bc f2       	brlt	.-82     	; 0x3166 <MQTTSubscribe+0x15a>
    31b8:	1a 01       	movw	r2, r20
    31ba:	2b 01       	movw	r4, r22
    31bc:	0e c0       	rjmp	.+28     	; 0x31da <MQTTSubscribe+0x1ce>
    31be:	22 24       	eor	r2, r2
    31c0:	2a 94       	dec	r2
    31c2:	32 2c       	mov	r3, r2
    31c4:	21 01       	movw	r4, r2
    31c6:	09 c0       	rjmp	.+18     	; 0x31da <MQTTSubscribe+0x1ce>
    31c8:	22 24       	eor	r2, r2
    31ca:	2a 94       	dec	r2
    31cc:	32 2c       	mov	r3, r2
    31ce:	21 01       	movw	r4, r2
    31d0:	04 c0       	rjmp	.+8      	; 0x31da <MQTTSubscribe+0x1ce>
    31d2:	22 24       	eor	r2, r2
    31d4:	2a 94       	dec	r2
    31d6:	32 2c       	mov	r3, r2
    31d8:	21 01       	movw	r4, r2
    31da:	c2 01       	movw	r24, r4
    31dc:	b1 01       	movw	r22, r2
    31de:	6f 96       	adiw	r28, 0x1f	; 31
    31e0:	0f b6       	in	r0, 0x3f	; 63
    31e2:	f8 94       	cli
    31e4:	de bf       	out	0x3e, r29	; 62
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	cd bf       	out	0x3d, r28	; 61
    31ea:	df 91       	pop	r29
    31ec:	cf 91       	pop	r28
    31ee:	1f 91       	pop	r17
    31f0:	0f 91       	pop	r16
    31f2:	ff 90       	pop	r15
    31f4:	ef 90       	pop	r14
    31f6:	df 90       	pop	r13
    31f8:	cf 90       	pop	r12
    31fa:	bf 90       	pop	r11
    31fc:	af 90       	pop	r10
    31fe:	9f 90       	pop	r9
    3200:	8f 90       	pop	r8
    3202:	7f 90       	pop	r7
    3204:	6f 90       	pop	r6
    3206:	5f 90       	pop	r5
    3208:	4f 90       	pop	r4
    320a:	3f 90       	pop	r3
    320c:	2f 90       	pop	r2
    320e:	08 95       	ret

00003210 <MQTTPublish>:

int32_t MQTTPublish(Client* c, const char* topicName, MQTTMessage* message)
{
    3210:	4f 92       	push	r4
    3212:	5f 92       	push	r5
    3214:	6f 92       	push	r6
    3216:	7f 92       	push	r7
    3218:	8f 92       	push	r8
    321a:	9f 92       	push	r9
    321c:	af 92       	push	r10
    321e:	bf 92       	push	r11
    3220:	cf 92       	push	r12
    3222:	df 92       	push	r13
    3224:	ef 92       	push	r14
    3226:	ff 92       	push	r15
    3228:	0f 93       	push	r16
    322a:	1f 93       	push	r17
    322c:	cf 93       	push	r28
    322e:	df 93       	push	r29
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
    3234:	64 97       	sbiw	r28, 0x14	; 20
    3236:	0f b6       	in	r0, 0x3f	; 63
    3238:	f8 94       	cli
    323a:	de bf       	out	0x3e, r29	; 62
    323c:	0f be       	out	0x3f, r0	; 63
    323e:	cd bf       	out	0x3d, r28	; 61
    3240:	4c 01       	movw	r8, r24
    3242:	5a 01       	movw	r10, r20
  int32_t rc = FAILURE;
  Timer timer;   
  MQTTString topic = MQTTString_initializer;
    3244:	1b 86       	std	Y+11, r1	; 0x0b
    3246:	1c 86       	std	Y+12, r1	; 0x0c
    3248:	1d 86       	std	Y+13, r1	; 0x0d
    324a:	1e 86       	std	Y+14, r1	; 0x0e
    324c:	18 8a       	std	Y+16, r1	; 0x10
    324e:	1f 86       	std	Y+15, r1	; 0x0f
  topic.cstring = (char *)topicName;
    3250:	7a 87       	std	Y+10, r23	; 0x0a
    3252:	69 87       	std	Y+9, r22	; 0x09
  int32_t len = 0;

  InitTimer(&timer);
    3254:	ce 01       	movw	r24, r28
    3256:	01 96       	adiw	r24, 0x01	; 1
    3258:	0e 94 63 23 	call	0x46c6	; 0x46c6 <InitTimer>
  countdown_ms(&timer, c->command_timeout_ms);
    325c:	f4 01       	movw	r30, r8
    325e:	44 81       	ldd	r20, Z+4	; 0x04
    3260:	55 81       	ldd	r21, Z+5	; 0x05
    3262:	66 81       	ldd	r22, Z+6	; 0x06
    3264:	77 81       	ldd	r23, Z+7	; 0x07
    3266:	ce 01       	movw	r24, r28
    3268:	01 96       	adiw	r24, 0x01	; 1
    326a:	0e 94 04 23 	call	0x4608	; 0x4608 <countdown_ms>
    
  if (!c->isconnected)
    326e:	f4 01       	movw	r30, r8
    3270:	85 89       	ldd	r24, Z+21	; 0x15
    3272:	96 89       	ldd	r25, Z+22	; 0x16
    3274:	a7 89       	ldd	r26, Z+23	; 0x17
    3276:	b0 8d       	ldd	r27, Z+24	; 0x18
    3278:	89 2b       	or	r24, r25
    327a:	8a 2b       	or	r24, r26
    327c:	8b 2b       	or	r24, r27
    327e:	09 f4       	brne	.+2      	; 0x3282 <MQTTPublish+0x72>
    3280:	a6 c0       	rjmp	.+332    	; 0x33ce <MQTTPublish+0x1be>
    goto exit;

  if (message->qos == QOS1 || message->qos == QOS2)
    3282:	f5 01       	movw	r30, r10
    3284:	80 81       	ld	r24, Z
    3286:	81 50       	subi	r24, 0x01	; 1
    3288:	82 30       	cpi	r24, 0x02	; 2
    328a:	28 f4       	brcc	.+10     	; 0x3296 <MQTTPublish+0x86>
    message->id = getNextPacketId(c);
    328c:	c4 01       	movw	r24, r8
    328e:	0b d9       	rcall	.-3562   	; 0x24a6 <getNextPacketId>
    3290:	f5 01       	movw	r30, r10
    3292:	74 83       	std	Z+4, r23	; 0x04
    3294:	63 83       	std	Z+3, r22	; 0x03
    
  len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
        topic, (uint8_t*)message->payload, message->payloadlen);
    3296:	f5 01       	movw	r30, r10
    3298:	47 80       	ldd	r4, Z+7	; 0x07
    329a:	50 84       	ldd	r5, Z+8	; 0x08
    329c:	25 81       	ldd	r18, Z+5	; 0x05
    329e:	36 81       	ldd	r19, Z+6	; 0x06
    goto exit;

  if (message->qos == QOS1 || message->qos == QOS2)
    message->id = getNextPacketId(c);
    
  len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
    32a0:	c3 80       	ldd	r12, Z+3	; 0x03
    32a2:	d4 80       	ldd	r13, Z+4	; 0x04
    32a4:	e1 80       	ldd	r14, Z+1	; 0x01
    32a6:	00 81       	ld	r16, Z
    32a8:	f4 01       	movw	r30, r8
    32aa:	40 85       	ldd	r20, Z+8	; 0x08
    32ac:	51 85       	ldd	r21, Z+9	; 0x09
    32ae:	60 e0       	ldi	r22, 0x00	; 0
    32b0:	70 e0       	ldi	r23, 0x00	; 0
    32b2:	84 85       	ldd	r24, Z+12	; 0x0c
    32b4:	95 85       	ldd	r25, Z+13	; 0x0d
    32b6:	1f 92       	push	r1
    32b8:	1f 92       	push	r1
    32ba:	5f 92       	push	r5
    32bc:	4f 92       	push	r4
    32be:	3f 93       	push	r19
    32c0:	2f 93       	push	r18
    32c2:	2d b7       	in	r18, 0x3d	; 61
    32c4:	3e b7       	in	r19, 0x3e	; 62
    32c6:	28 50       	subi	r18, 0x08	; 8
    32c8:	31 09       	sbc	r19, r1
    32ca:	0f b6       	in	r0, 0x3f	; 63
    32cc:	f8 94       	cli
    32ce:	3e bf       	out	0x3e, r19	; 62
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	2d bf       	out	0x3d, r18	; 61
    32d4:	ad b7       	in	r26, 0x3d	; 61
    32d6:	be b7       	in	r27, 0x3e	; 62
    32d8:	11 96       	adiw	r26, 0x01	; 1
    32da:	28 e0       	ldi	r18, 0x08	; 8
    32dc:	fe 01       	movw	r30, r28
    32de:	39 96       	adiw	r30, 0x09	; 9
    32e0:	01 90       	ld	r0, Z+
    32e2:	0d 92       	st	X+, r0
    32e4:	2a 95       	dec	r18
    32e6:	e1 f7       	brne	.-8      	; 0x32e0 <MQTTPublish+0xd0>
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	7f d6       	rcall	.+3326   	; 0x3fea <MQTTSerialize_publish>
    32ec:	ab 01       	movw	r20, r22
    32ee:	bc 01       	movw	r22, r24
        topic, (uint8_t*)message->payload, message->payloadlen);
    
  if (len <= 0)
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	f8 94       	cli
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	cd bf       	out	0x3d, r28	; 61
    32fa:	14 16       	cp	r1, r20
    32fc:	15 06       	cpc	r1, r21
    32fe:	16 06       	cpc	r1, r22
    3300:	17 06       	cpc	r1, r23
    3302:	0c f0       	brlt	.+2      	; 0x3306 <MQTTPublish+0xf6>
    3304:	69 c0       	rjmp	.+210    	; 0x33d8 <MQTTPublish+0x1c8>
    goto exit;
  
  if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
    3306:	9e 01       	movw	r18, r28
    3308:	2f 5f       	subi	r18, 0xFF	; 255
    330a:	3f 4f       	sbci	r19, 0xFF	; 255
    330c:	c4 01       	movw	r24, r8
    330e:	e6 d8       	rcall	.-3636   	; 0x24dc <sendPacket>
    3310:	2b 01       	movw	r4, r22
    3312:	3c 01       	movw	r6, r24
    3314:	67 2b       	or	r22, r23
    3316:	68 2b       	or	r22, r24
    3318:	69 2b       	or	r22, r25
    331a:	09 f0       	breq	.+2      	; 0x331e <MQTTPublish+0x10e>
    331c:	6b c0       	rjmp	.+214    	; 0x33f4 <MQTTPublish+0x1e4>
    goto exit; // there was a problem
    
  if (message->qos == QOS1)
    331e:	f5 01       	movw	r30, r10
    3320:	80 81       	ld	r24, Z
    3322:	81 30       	cpi	r24, 0x01	; 1
    3324:	51 f5       	brne	.+84     	; 0x337a <MQTTPublish+0x16a>
  {
    if (waitfor(c, PUBACK, &timer) == PUBACK)
    3326:	9e 01       	movw	r18, r28
    3328:	2f 5f       	subi	r18, 0xFF	; 255
    332a:	3f 4f       	sbci	r19, 0xFF	; 255
    332c:	44 e0       	ldi	r20, 0x04	; 4
    332e:	50 e0       	ldi	r21, 0x00	; 0
    3330:	60 e0       	ldi	r22, 0x00	; 0
    3332:	70 e0       	ldi	r23, 0x00	; 0
    3334:	c4 01       	movw	r24, r8
    3336:	7d dd       	rcall	.-1286   	; 0x2e32 <waitfor>
    3338:	64 30       	cpi	r22, 0x04	; 4
    333a:	71 05       	cpc	r23, r1
    333c:	81 05       	cpc	r24, r1
    333e:	91 05       	cpc	r25, r1
    3340:	09 f0       	breq	.+2      	; 0x3344 <MQTTPublish+0x134>
    3342:	4f c0       	rjmp	.+158    	; 0x33e2 <MQTTPublish+0x1d2>
    {
      uint16_t mypacketid;
      uint8_t dup, type;

      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    3344:	f4 01       	movw	r30, r8
    3346:	e2 84       	ldd	r14, Z+10	; 0x0a
    3348:	f3 84       	ldd	r15, Z+11	; 0x0b
    334a:	00 e0       	ldi	r16, 0x00	; 0
    334c:	10 e0       	ldi	r17, 0x00	; 0
    334e:	26 85       	ldd	r18, Z+14	; 0x0e
    3350:	37 85       	ldd	r19, Z+15	; 0x0f
    3352:	ae 01       	movw	r20, r28
    3354:	4f 5e       	subi	r20, 0xEF	; 239
    3356:	5f 4f       	sbci	r21, 0xFF	; 255
    3358:	be 01       	movw	r22, r28
    335a:	6c 5e       	subi	r22, 0xEC	; 236
    335c:	7f 4f       	sbci	r23, 0xFF	; 255
    335e:	ce 01       	movw	r24, r28
    3360:	43 96       	adiw	r24, 0x13	; 19
    3362:	07 d3       	rcall	.+1550   	; 0x3972 <MQTTDeserialize_ack>
    3364:	61 30       	cpi	r22, 0x01	; 1
    3366:	71 05       	cpc	r23, r1
    3368:	81 05       	cpc	r24, r1
    336a:	91 05       	cpc	r25, r1
    336c:	09 f4       	brne	.+2      	; 0x3370 <MQTTPublish+0x160>
    336e:	42 c0       	rjmp	.+132    	; 0x33f4 <MQTTPublish+0x1e4>
        rc = FAILURE;
    3370:	44 24       	eor	r4, r4
    3372:	4a 94       	dec	r4
    3374:	54 2c       	mov	r5, r4
    3376:	32 01       	movw	r6, r4
    3378:	3d c0       	rjmp	.+122    	; 0x33f4 <MQTTPublish+0x1e4>
    }
    else
      rc = FAILURE;
  }
  else if (message->qos == QOS2)
    337a:	82 30       	cpi	r24, 0x02	; 2
    337c:	d9 f5       	brne	.+118    	; 0x33f4 <MQTTPublish+0x1e4>
  {
    if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
    337e:	9e 01       	movw	r18, r28
    3380:	2f 5f       	subi	r18, 0xFF	; 255
    3382:	3f 4f       	sbci	r19, 0xFF	; 255
    3384:	47 e0       	ldi	r20, 0x07	; 7
    3386:	50 e0       	ldi	r21, 0x00	; 0
    3388:	60 e0       	ldi	r22, 0x00	; 0
    338a:	70 e0       	ldi	r23, 0x00	; 0
    338c:	c4 01       	movw	r24, r8
    338e:	51 dd       	rcall	.-1374   	; 0x2e32 <waitfor>
    3390:	67 30       	cpi	r22, 0x07	; 7
    3392:	71 05       	cpc	r23, r1
    3394:	81 05       	cpc	r24, r1
    3396:	91 05       	cpc	r25, r1
    3398:	49 f5       	brne	.+82     	; 0x33ec <MQTTPublish+0x1dc>
    {
      uint16_t mypacketid;
      uint8_t dup, type;
    
      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    339a:	f4 01       	movw	r30, r8
    339c:	e2 84       	ldd	r14, Z+10	; 0x0a
    339e:	f3 84       	ldd	r15, Z+11	; 0x0b
    33a0:	00 e0       	ldi	r16, 0x00	; 0
    33a2:	10 e0       	ldi	r17, 0x00	; 0
    33a4:	26 85       	ldd	r18, Z+14	; 0x0e
    33a6:	37 85       	ldd	r19, Z+15	; 0x0f
    33a8:	ae 01       	movw	r20, r28
    33aa:	4f 5e       	subi	r20, 0xEF	; 239
    33ac:	5f 4f       	sbci	r21, 0xFF	; 255
    33ae:	be 01       	movw	r22, r28
    33b0:	6c 5e       	subi	r22, 0xEC	; 236
    33b2:	7f 4f       	sbci	r23, 0xFF	; 255
    33b4:	ce 01       	movw	r24, r28
    33b6:	43 96       	adiw	r24, 0x13	; 19
    33b8:	dc d2       	rcall	.+1464   	; 0x3972 <MQTTDeserialize_ack>
    33ba:	61 30       	cpi	r22, 0x01	; 1
    33bc:	71 05       	cpc	r23, r1
    33be:	81 05       	cpc	r24, r1
    33c0:	91 05       	cpc	r25, r1
    33c2:	c1 f0       	breq	.+48     	; 0x33f4 <MQTTPublish+0x1e4>
        rc = FAILURE;
    33c4:	44 24       	eor	r4, r4
    33c6:	4a 94       	dec	r4
    33c8:	54 2c       	mov	r5, r4
    33ca:	32 01       	movw	r6, r4
    33cc:	13 c0       	rjmp	.+38     	; 0x33f4 <MQTTPublish+0x1e4>
  return rc;
}

int32_t MQTTPublish(Client* c, const char* topicName, MQTTMessage* message)
{
  int32_t rc = FAILURE;
    33ce:	44 24       	eor	r4, r4
    33d0:	4a 94       	dec	r4
    33d2:	54 2c       	mov	r5, r4
    33d4:	32 01       	movw	r6, r4
    33d6:	0e c0       	rjmp	.+28     	; 0x33f4 <MQTTPublish+0x1e4>
    33d8:	44 24       	eor	r4, r4
    33da:	4a 94       	dec	r4
    33dc:	54 2c       	mov	r5, r4
    33de:	32 01       	movw	r6, r4
    33e0:	09 c0       	rjmp	.+18     	; 0x33f4 <MQTTPublish+0x1e4>

      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
        rc = FAILURE;
    }
    else
      rc = FAILURE;
    33e2:	44 24       	eor	r4, r4
    33e4:	4a 94       	dec	r4
    33e6:	54 2c       	mov	r5, r4
    33e8:	32 01       	movw	r6, r4
    33ea:	04 c0       	rjmp	.+8      	; 0x33f4 <MQTTPublish+0x1e4>
    
      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
        rc = FAILURE;
    }
    else
      rc = FAILURE;
    33ec:	44 24       	eor	r4, r4
    33ee:	4a 94       	dec	r4
    33f0:	54 2c       	mov	r5, r4
    33f2:	32 01       	movw	r6, r4
  }
    
exit:
  return rc;
}
    33f4:	c3 01       	movw	r24, r6
    33f6:	b2 01       	movw	r22, r4
    33f8:	64 96       	adiw	r28, 0x14	; 20
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	cd bf       	out	0x3d, r28	; 61
    3404:	df 91       	pop	r29
    3406:	cf 91       	pop	r28
    3408:	1f 91       	pop	r17
    340a:	0f 91       	pop	r16
    340c:	ff 90       	pop	r15
    340e:	ef 90       	pop	r14
    3410:	df 90       	pop	r13
    3412:	cf 90       	pop	r12
    3414:	bf 90       	pop	r11
    3416:	af 90       	pop	r10
    3418:	9f 90       	pop	r9
    341a:	8f 90       	pop	r8
    341c:	7f 90       	pop	r7
    341e:	6f 90       	pop	r6
    3420:	5f 90       	pop	r5
    3422:	4f 90       	pop	r4
    3424:	08 95       	ret

00003426 <MQTTSerialize_connectLength>:
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_disconnect(uint8_t* buf, int32_t buflen)
{
  return MQTTSerialize_zero(buf, buflen, DISCONNECT);
}
    3426:	8f 92       	push	r8
    3428:	9f 92       	push	r9
    342a:	af 92       	push	r10
    342c:	bf 92       	push	r11
    342e:	cf 92       	push	r12
    3430:	df 92       	push	r13
    3432:	ef 92       	push	r14
    3434:	ff 92       	push	r15
    3436:	cf 93       	push	r28
    3438:	df 93       	push	r29
    343a:	ec 01       	movw	r28, r24
    343c:	8e 81       	ldd	r24, Y+6	; 0x06
    343e:	83 30       	cpi	r24, 0x03	; 3
    3440:	31 f0       	breq	.+12     	; 0x344e <MQTTSerialize_connectLength+0x28>
    3442:	84 30       	cpi	r24, 0x04	; 4
    3444:	61 f0       	breq	.+24     	; 0x345e <MQTTSerialize_connectLength+0x38>
    3446:	c1 2c       	mov	r12, r1
    3448:	d1 2c       	mov	r13, r1
    344a:	76 01       	movw	r14, r12
    344c:	0f c0       	rjmp	.+30     	; 0x346c <MQTTSerialize_connectLength+0x46>
    344e:	0f 2e       	mov	r0, r31
    3450:	fc e0       	ldi	r31, 0x0C	; 12
    3452:	cf 2e       	mov	r12, r31
    3454:	d1 2c       	mov	r13, r1
    3456:	e1 2c       	mov	r14, r1
    3458:	f1 2c       	mov	r15, r1
    345a:	f0 2d       	mov	r31, r0
    345c:	07 c0       	rjmp	.+14     	; 0x346c <MQTTSerialize_connectLength+0x46>
    345e:	0f 2e       	mov	r0, r31
    3460:	fa e0       	ldi	r31, 0x0A	; 10
    3462:	cf 2e       	mov	r12, r31
    3464:	d1 2c       	mov	r13, r1
    3466:	e1 2c       	mov	r14, r1
    3468:	f1 2c       	mov	r15, r1
    346a:	f0 2d       	mov	r31, r0
    346c:	2f 81       	ldd	r18, Y+7	; 0x07
    346e:	38 85       	ldd	r19, Y+8	; 0x08
    3470:	49 85       	ldd	r20, Y+9	; 0x09
    3472:	5a 85       	ldd	r21, Y+10	; 0x0a
    3474:	6b 85       	ldd	r22, Y+11	; 0x0b
    3476:	7c 85       	ldd	r23, Y+12	; 0x0c
    3478:	8d 85       	ldd	r24, Y+13	; 0x0d
    347a:	9e 85       	ldd	r25, Y+14	; 0x0e
    347c:	06 d5       	rcall	.+2572   	; 0x3e8a <MQTTstrlen>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	02 96       	adiw	r24, 0x02	; 2
    3484:	a1 1d       	adc	r26, r1
    3486:	b1 1d       	adc	r27, r1
    3488:	c8 0e       	add	r12, r24
    348a:	d9 1e       	adc	r13, r25
    348c:	ea 1e       	adc	r14, r26
    348e:	fb 1e       	adc	r15, r27
    3490:	8a 89       	ldd	r24, Y+18	; 0x12
    3492:	88 23       	and	r24, r24
    3494:	31 f1       	breq	.+76     	; 0x34e2 <MQTTSerialize_connectLength+0xbc>
    3496:	29 8d       	ldd	r18, Y+25	; 0x19
    3498:	3a 8d       	ldd	r19, Y+26	; 0x1a
    349a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    349c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    349e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    34a0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    34a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34a4:	98 a1       	ldd	r25, Y+32	; 0x20
    34a6:	f1 d4       	rcall	.+2530   	; 0x3e8a <MQTTstrlen>
    34a8:	4b 01       	movw	r8, r22
    34aa:	5c 01       	movw	r10, r24
    34ac:	22 e0       	ldi	r18, 0x02	; 2
    34ae:	82 0e       	add	r8, r18
    34b0:	91 1c       	adc	r9, r1
    34b2:	a1 1c       	adc	r10, r1
    34b4:	b1 1c       	adc	r11, r1
    34b6:	29 a1       	ldd	r18, Y+33	; 0x21
    34b8:	3a a1       	ldd	r19, Y+34	; 0x22
    34ba:	4b a1       	ldd	r20, Y+35	; 0x23
    34bc:	5c a1       	ldd	r21, Y+36	; 0x24
    34be:	6d a1       	ldd	r22, Y+37	; 0x25
    34c0:	7e a1       	ldd	r23, Y+38	; 0x26
    34c2:	8f a1       	ldd	r24, Y+39	; 0x27
    34c4:	98 a5       	ldd	r25, Y+40	; 0x28
    34c6:	e1 d4       	rcall	.+2498   	; 0x3e8a <MQTTstrlen>
    34c8:	dc 01       	movw	r26, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	88 0d       	add	r24, r8
    34ce:	99 1d       	adc	r25, r9
    34d0:	aa 1d       	adc	r26, r10
    34d2:	bb 1d       	adc	r27, r11
    34d4:	02 96       	adiw	r24, 0x02	; 2
    34d6:	a1 1d       	adc	r26, r1
    34d8:	b1 1d       	adc	r27, r1
    34da:	c8 0e       	add	r12, r24
    34dc:	d9 1e       	adc	r13, r25
    34de:	ea 1e       	adc	r14, r26
    34e0:	fb 1e       	adc	r15, r27
    34e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    34e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    34e6:	89 2b       	or	r24, r25
    34e8:	21 f4       	brne	.+8      	; 0x34f2 <MQTTSerialize_connectLength+0xcc>
    34ea:	89 a9       	ldd	r24, Y+49	; 0x31
    34ec:	9a a9       	ldd	r25, Y+50	; 0x32
    34ee:	89 2b       	or	r24, r25
    34f0:	91 f0       	breq	.+36     	; 0x3516 <MQTTSerialize_connectLength+0xf0>
    34f2:	2b a5       	ldd	r18, Y+43	; 0x2b
    34f4:	3c a5       	ldd	r19, Y+44	; 0x2c
    34f6:	4d a5       	ldd	r20, Y+45	; 0x2d
    34f8:	5e a5       	ldd	r21, Y+46	; 0x2e
    34fa:	6f a5       	ldd	r22, Y+47	; 0x2f
    34fc:	78 a9       	ldd	r23, Y+48	; 0x30
    34fe:	89 a9       	ldd	r24, Y+49	; 0x31
    3500:	9a a9       	ldd	r25, Y+50	; 0x32
    3502:	c3 d4       	rcall	.+2438   	; 0x3e8a <MQTTstrlen>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	02 96       	adiw	r24, 0x02	; 2
    350a:	a1 1d       	adc	r26, r1
    350c:	b1 1d       	adc	r27, r1
    350e:	c8 0e       	add	r12, r24
    3510:	d9 1e       	adc	r13, r25
    3512:	ea 1e       	adc	r14, r26
    3514:	fb 1e       	adc	r15, r27
    3516:	8b a9       	ldd	r24, Y+51	; 0x33
    3518:	9c a9       	ldd	r25, Y+52	; 0x34
    351a:	89 2b       	or	r24, r25
    351c:	21 f4       	brne	.+8      	; 0x3526 <MQTTSerialize_connectLength+0x100>
    351e:	89 ad       	ldd	r24, Y+57	; 0x39
    3520:	9a ad       	ldd	r25, Y+58	; 0x3a
    3522:	89 2b       	or	r24, r25
    3524:	91 f0       	breq	.+36     	; 0x354a <MQTTSerialize_connectLength+0x124>
    3526:	2b a9       	ldd	r18, Y+51	; 0x33
    3528:	3c a9       	ldd	r19, Y+52	; 0x34
    352a:	4d a9       	ldd	r20, Y+53	; 0x35
    352c:	5e a9       	ldd	r21, Y+54	; 0x36
    352e:	6f a9       	ldd	r22, Y+55	; 0x37
    3530:	78 ad       	ldd	r23, Y+56	; 0x38
    3532:	89 ad       	ldd	r24, Y+57	; 0x39
    3534:	9a ad       	ldd	r25, Y+58	; 0x3a
    3536:	a9 d4       	rcall	.+2386   	; 0x3e8a <MQTTstrlen>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	02 96       	adiw	r24, 0x02	; 2
    353e:	a1 1d       	adc	r26, r1
    3540:	b1 1d       	adc	r27, r1
    3542:	c8 0e       	add	r12, r24
    3544:	d9 1e       	adc	r13, r25
    3546:	ea 1e       	adc	r14, r26
    3548:	fb 1e       	adc	r15, r27
    354a:	c7 01       	movw	r24, r14
    354c:	b6 01       	movw	r22, r12
    354e:	df 91       	pop	r29
    3550:	cf 91       	pop	r28
    3552:	ff 90       	pop	r15
    3554:	ef 90       	pop	r14
    3556:	df 90       	pop	r13
    3558:	cf 90       	pop	r12
    355a:	bf 90       	pop	r11
    355c:	af 90       	pop	r10
    355e:	9f 90       	pop	r9
    3560:	8f 90       	pop	r8
    3562:	08 95       	ret

00003564 <MQTTSerialize_connect>:
    3564:	4f 92       	push	r4
    3566:	5f 92       	push	r5
    3568:	6f 92       	push	r6
    356a:	7f 92       	push	r7
    356c:	af 92       	push	r10
    356e:	bf 92       	push	r11
    3570:	df 92       	push	r13
    3572:	ef 92       	push	r14
    3574:	ff 92       	push	r15
    3576:	0f 93       	push	r16
    3578:	1f 93       	push	r17
    357a:	cf 93       	push	r28
    357c:	df 93       	push	r29
    357e:	00 d0       	rcall	.+0      	; 0x3580 <MQTTSerialize_connect+0x1c>
    3580:	00 d0       	rcall	.+0      	; 0x3582 <MQTTSerialize_connect+0x1e>
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
    3586:	5c 01       	movw	r10, r24
    3588:	2a 01       	movw	r4, r20
    358a:	3b 01       	movw	r6, r22
    358c:	79 01       	movw	r14, r18
    358e:	9a 83       	std	Y+2, r25	; 0x02
    3590:	89 83       	std	Y+1, r24	; 0x01
    3592:	c9 01       	movw	r24, r18
    3594:	48 df       	rcall	.-368    	; 0x3426 <MQTTSerialize_connectLength>
    3596:	6b 83       	std	Y+3, r22	; 0x03
    3598:	7c 83       	std	Y+4, r23	; 0x04
    359a:	8d 83       	std	Y+5, r24	; 0x05
    359c:	9e 83       	std	Y+6, r25	; 0x06
    359e:	33 d3       	rcall	.+1638   	; 0x3c06 <MQTTPacket_len>
    35a0:	46 16       	cp	r4, r22
    35a2:	57 06       	cpc	r5, r23
    35a4:	68 06       	cpc	r6, r24
    35a6:	79 06       	cpc	r7, r25
    35a8:	0c f4       	brge	.+2      	; 0x35ac <MQTTSerialize_connect+0x48>
    35aa:	b2 c0       	rjmp	.+356    	; 0x3710 <MQTTSerialize_connect+0x1ac>
    35ac:	60 e1       	ldi	r22, 0x10	; 16
    35ae:	ce 01       	movw	r24, r28
    35b0:	01 96       	adiw	r24, 0x01	; 1
    35b2:	7a d3       	rcall	.+1780   	; 0x3ca8 <writeChar>
    35b4:	4b 81       	ldd	r20, Y+3	; 0x03
    35b6:	5c 81       	ldd	r21, Y+4	; 0x04
    35b8:	6d 81       	ldd	r22, Y+5	; 0x05
    35ba:	7e 81       	ldd	r23, Y+6	; 0x06
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	9a 81       	ldd	r25, Y+2	; 0x02
    35c0:	44 d2       	rcall	.+1160   	; 0x3a4a <MQTTPacket_encode>
    35c2:	29 81       	ldd	r18, Y+1	; 0x01
    35c4:	3a 81       	ldd	r19, Y+2	; 0x02
    35c6:	62 0f       	add	r22, r18
    35c8:	73 1f       	adc	r23, r19
    35ca:	7a 83       	std	Y+2, r23	; 0x02
    35cc:	69 83       	std	Y+1, r22	; 0x01
    35ce:	f7 01       	movw	r30, r14
    35d0:	86 81       	ldd	r24, Z+6	; 0x06
    35d2:	84 30       	cpi	r24, 0x04	; 4
    35d4:	51 f4       	brne	.+20     	; 0x35ea <MQTTSerialize_connect+0x86>
    35d6:	66 e4       	ldi	r22, 0x46	; 70
    35d8:	73 e0       	ldi	r23, 0x03	; 3
    35da:	ce 01       	movw	r24, r28
    35dc:	01 96       	adiw	r24, 0x01	; 1
    35de:	9c d3       	rcall	.+1848   	; 0x3d18 <writeCString>
    35e0:	64 e0       	ldi	r22, 0x04	; 4
    35e2:	ce 01       	movw	r24, r28
    35e4:	01 96       	adiw	r24, 0x01	; 1
    35e6:	60 d3       	rcall	.+1728   	; 0x3ca8 <writeChar>
    35e8:	09 c0       	rjmp	.+18     	; 0x35fc <MQTTSerialize_connect+0x98>
    35ea:	6b e4       	ldi	r22, 0x4B	; 75
    35ec:	73 e0       	ldi	r23, 0x03	; 3
    35ee:	ce 01       	movw	r24, r28
    35f0:	01 96       	adiw	r24, 0x01	; 1
    35f2:	92 d3       	rcall	.+1828   	; 0x3d18 <writeCString>
    35f4:	63 e0       	ldi	r22, 0x03	; 3
    35f6:	ce 01       	movw	r24, r28
    35f8:	01 96       	adiw	r24, 0x01	; 1
    35fa:	56 d3       	rcall	.+1708   	; 0x3ca8 <writeChar>
    35fc:	d1 2c       	mov	r13, r1
    35fe:	f7 01       	movw	r30, r14
    3600:	81 89       	ldd	r24, Z+17	; 0x11
    3602:	80 fb       	bst	r24, 0
    3604:	d1 f8       	bld	r13, 1
    3606:	92 89       	ldd	r25, Z+18	; 0x12
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	91 11       	cpse	r25, r1
    360c:	01 c0       	rjmp	.+2      	; 0x3610 <MQTTSerialize_connect+0xac>
    360e:	80 e0       	ldi	r24, 0x00	; 0
    3610:	80 fb       	bst	r24, 0
    3612:	d2 f8       	bld	r13, 2
    3614:	d2 fe       	sbrs	r13, 2
    3616:	0d c0       	rjmp	.+26     	; 0x3632 <MQTTSerialize_connect+0xce>
    3618:	f7 01       	movw	r30, r14
    361a:	82 a5       	ldd	r24, Z+42	; 0x2a
    361c:	83 70       	andi	r24, 0x03	; 3
    361e:	88 0f       	add	r24, r24
    3620:	88 0f       	add	r24, r24
    3622:	88 0f       	add	r24, r24
    3624:	9d 2d       	mov	r25, r13
    3626:	97 7e       	andi	r25, 0xE7	; 231
    3628:	d9 2e       	mov	r13, r25
    362a:	d8 2a       	or	r13, r24
    362c:	81 a5       	ldd	r24, Z+41	; 0x29
    362e:	80 fb       	bst	r24, 0
    3630:	d5 f8       	bld	r13, 5
    3632:	f7 01       	movw	r30, r14
    3634:	83 a5       	ldd	r24, Z+43	; 0x2b
    3636:	94 a5       	ldd	r25, Z+44	; 0x2c
    3638:	89 2b       	or	r24, r25
    363a:	21 f4       	brne	.+8      	; 0x3644 <MQTTSerialize_connect+0xe0>
    363c:	81 a9       	ldd	r24, Z+49	; 0x31
    363e:	92 a9       	ldd	r25, Z+50	; 0x32
    3640:	89 2b       	or	r24, r25
    3642:	11 f0       	breq	.+4      	; 0x3648 <MQTTSerialize_connect+0xe4>
    3644:	68 94       	set
    3646:	d7 f8       	bld	r13, 7
    3648:	f7 01       	movw	r30, r14
    364a:	83 a9       	ldd	r24, Z+51	; 0x33
    364c:	94 a9       	ldd	r25, Z+52	; 0x34
    364e:	89 2b       	or	r24, r25
    3650:	21 f4       	brne	.+8      	; 0x365a <MQTTSerialize_connect+0xf6>
    3652:	81 ad       	ldd	r24, Z+57	; 0x39
    3654:	92 ad       	ldd	r25, Z+58	; 0x3a
    3656:	89 2b       	or	r24, r25
    3658:	11 f0       	breq	.+4      	; 0x365e <MQTTSerialize_connect+0xfa>
    365a:	68 94       	set
    365c:	d6 f8       	bld	r13, 6
    365e:	6d 2d       	mov	r22, r13
    3660:	ce 01       	movw	r24, r28
    3662:	01 96       	adiw	r24, 0x01	; 1
    3664:	21 d3       	rcall	.+1602   	; 0x3ca8 <writeChar>
    3666:	f7 01       	movw	r30, r14
    3668:	47 85       	ldd	r20, Z+15	; 0x0f
    366a:	50 89       	ldd	r21, Z+16	; 0x10
    366c:	60 e0       	ldi	r22, 0x00	; 0
    366e:	70 e0       	ldi	r23, 0x00	; 0
    3670:	ce 01       	movw	r24, r28
    3672:	01 96       	adiw	r24, 0x01	; 1
    3674:	23 d3       	rcall	.+1606   	; 0x3cbc <writeInt>
    3676:	f7 01       	movw	r30, r14
    3678:	07 81       	ldd	r16, Z+7	; 0x07
    367a:	10 85       	ldd	r17, Z+8	; 0x08
    367c:	21 85       	ldd	r18, Z+9	; 0x09
    367e:	32 85       	ldd	r19, Z+10	; 0x0a
    3680:	43 85       	ldd	r20, Z+11	; 0x0b
    3682:	54 85       	ldd	r21, Z+12	; 0x0c
    3684:	65 85       	ldd	r22, Z+13	; 0x0d
    3686:	76 85       	ldd	r23, Z+14	; 0x0e
    3688:	ce 01       	movw	r24, r28
    368a:	01 96       	adiw	r24, 0x01	; 1
    368c:	6d d3       	rcall	.+1754   	; 0x3d68 <writeMQTTString>
    368e:	f7 01       	movw	r30, r14
    3690:	82 89       	ldd	r24, Z+18	; 0x12
    3692:	88 23       	and	r24, r24
    3694:	b9 f0       	breq	.+46     	; 0x36c4 <MQTTSerialize_connect+0x160>
    3696:	01 8d       	ldd	r16, Z+25	; 0x19
    3698:	12 8d       	ldd	r17, Z+26	; 0x1a
    369a:	23 8d       	ldd	r18, Z+27	; 0x1b
    369c:	34 8d       	ldd	r19, Z+28	; 0x1c
    369e:	45 8d       	ldd	r20, Z+29	; 0x1d
    36a0:	56 8d       	ldd	r21, Z+30	; 0x1e
    36a2:	67 8d       	ldd	r22, Z+31	; 0x1f
    36a4:	70 a1       	ldd	r23, Z+32	; 0x20
    36a6:	ce 01       	movw	r24, r28
    36a8:	01 96       	adiw	r24, 0x01	; 1
    36aa:	5e d3       	rcall	.+1724   	; 0x3d68 <writeMQTTString>
    36ac:	f7 01       	movw	r30, r14
    36ae:	01 a1       	ldd	r16, Z+33	; 0x21
    36b0:	12 a1       	ldd	r17, Z+34	; 0x22
    36b2:	23 a1       	ldd	r18, Z+35	; 0x23
    36b4:	34 a1       	ldd	r19, Z+36	; 0x24
    36b6:	45 a1       	ldd	r20, Z+37	; 0x25
    36b8:	56 a1       	ldd	r21, Z+38	; 0x26
    36ba:	67 a1       	ldd	r22, Z+39	; 0x27
    36bc:	70 a5       	ldd	r23, Z+40	; 0x28
    36be:	ce 01       	movw	r24, r28
    36c0:	01 96       	adiw	r24, 0x01	; 1
    36c2:	52 d3       	rcall	.+1700   	; 0x3d68 <writeMQTTString>
    36c4:	7d 2c       	mov	r7, r13
    36c6:	dd 20       	and	r13, r13
    36c8:	64 f4       	brge	.+24     	; 0x36e2 <MQTTSerialize_connect+0x17e>
    36ca:	f7 01       	movw	r30, r14
    36cc:	03 a5       	ldd	r16, Z+43	; 0x2b
    36ce:	14 a5       	ldd	r17, Z+44	; 0x2c
    36d0:	25 a5       	ldd	r18, Z+45	; 0x2d
    36d2:	36 a5       	ldd	r19, Z+46	; 0x2e
    36d4:	47 a5       	ldd	r20, Z+47	; 0x2f
    36d6:	50 a9       	ldd	r21, Z+48	; 0x30
    36d8:	61 a9       	ldd	r22, Z+49	; 0x31
    36da:	72 a9       	ldd	r23, Z+50	; 0x32
    36dc:	ce 01       	movw	r24, r28
    36de:	01 96       	adiw	r24, 0x01	; 1
    36e0:	43 d3       	rcall	.+1670   	; 0x3d68 <writeMQTTString>
    36e2:	76 fe       	sbrs	r7, 6
    36e4:	0c c0       	rjmp	.+24     	; 0x36fe <MQTTSerialize_connect+0x19a>
    36e6:	f7 01       	movw	r30, r14
    36e8:	03 a9       	ldd	r16, Z+51	; 0x33
    36ea:	14 a9       	ldd	r17, Z+52	; 0x34
    36ec:	25 a9       	ldd	r18, Z+53	; 0x35
    36ee:	36 a9       	ldd	r19, Z+54	; 0x36
    36f0:	47 a9       	ldd	r20, Z+55	; 0x37
    36f2:	50 ad       	ldd	r21, Z+56	; 0x38
    36f4:	61 ad       	ldd	r22, Z+57	; 0x39
    36f6:	72 ad       	ldd	r23, Z+58	; 0x3a
    36f8:	ce 01       	movw	r24, r28
    36fa:	01 96       	adiw	r24, 0x01	; 1
    36fc:	35 d3       	rcall	.+1642   	; 0x3d68 <writeMQTTString>
    36fe:	69 81       	ldd	r22, Y+1	; 0x01
    3700:	7a 81       	ldd	r23, Y+2	; 0x02
    3702:	6a 19       	sub	r22, r10
    3704:	7b 09       	sbc	r23, r11
    3706:	07 2e       	mov	r0, r23
    3708:	00 0c       	add	r0, r0
    370a:	88 0b       	sbc	r24, r24
    370c:	99 0b       	sbc	r25, r25
    370e:	04 c0       	rjmp	.+8      	; 0x3718 <MQTTSerialize_connect+0x1b4>
    3710:	6e ef       	ldi	r22, 0xFE	; 254
    3712:	7f ef       	ldi	r23, 0xFF	; 255
    3714:	8f ef       	ldi	r24, 0xFF	; 255
    3716:	9f ef       	ldi	r25, 0xFF	; 255
    3718:	26 96       	adiw	r28, 0x06	; 6
    371a:	0f b6       	in	r0, 0x3f	; 63
    371c:	f8 94       	cli
    371e:	de bf       	out	0x3e, r29	; 62
    3720:	0f be       	out	0x3f, r0	; 63
    3722:	cd bf       	out	0x3d, r28	; 61
    3724:	df 91       	pop	r29
    3726:	cf 91       	pop	r28
    3728:	1f 91       	pop	r17
    372a:	0f 91       	pop	r16
    372c:	ff 90       	pop	r15
    372e:	ef 90       	pop	r14
    3730:	df 90       	pop	r13
    3732:	bf 90       	pop	r11
    3734:	af 90       	pop	r10
    3736:	7f 90       	pop	r7
    3738:	6f 90       	pop	r6
    373a:	5f 90       	pop	r5
    373c:	4f 90       	pop	r4
    373e:	08 95       	ret

00003740 <MQTTDeserialize_connack>:
    3740:	ef 92       	push	r14
    3742:	ff 92       	push	r15
    3744:	0f 93       	push	r16
    3746:	1f 93       	push	r17
    3748:	cf 93       	push	r28
    374a:	df 93       	push	r29
    374c:	00 d0       	rcall	.+0      	; 0x374e <MQTTDeserialize_connack+0xe>
    374e:	00 d0       	rcall	.+0      	; 0x3750 <MQTTDeserialize_connack+0x10>
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
    3754:	7c 01       	movw	r14, r24
    3756:	8b 01       	movw	r16, r22
    3758:	5a 83       	std	Y+2, r21	; 0x02
    375a:	49 83       	std	Y+1, r20	; 0x01
    375c:	ce 01       	movw	r24, r28
    375e:	01 96       	adiw	r24, 0x01	; 1
    3760:	9b d2       	rcall	.+1334   	; 0x3c98 <readChar>
    3762:	80 7f       	andi	r24, 0xF0	; 240
    3764:	80 32       	cpi	r24, 0x20	; 32
    3766:	19 f5       	brne	.+70     	; 0x37ae <MQTTDeserialize_connack+0x6e>
    3768:	be 01       	movw	r22, r28
    376a:	6d 5f       	subi	r22, 0xFD	; 253
    376c:	7f 4f       	sbci	r23, 0xFF	; 255
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	9a 81       	ldd	r25, Y+2	; 0x02
    3772:	77 d2       	rcall	.+1262   	; 0x3c62 <MQTTPacket_decodeBuf>
    3774:	29 81       	ldd	r18, Y+1	; 0x01
    3776:	3a 81       	ldd	r19, Y+2	; 0x02
    3778:	26 0f       	add	r18, r22
    377a:	37 1f       	adc	r19, r23
    377c:	3a 83       	std	Y+2, r19	; 0x02
    377e:	29 83       	std	Y+1, r18	; 0x01
    3780:	2b 81       	ldd	r18, Y+3	; 0x03
    3782:	3c 81       	ldd	r19, Y+4	; 0x04
    3784:	22 30       	cpi	r18, 0x02	; 2
    3786:	31 05       	cpc	r19, r1
    3788:	ac f0       	brlt	.+42     	; 0x37b4 <MQTTDeserialize_connack+0x74>
    378a:	ce 01       	movw	r24, r28
    378c:	01 96       	adiw	r24, 0x01	; 1
    378e:	84 d2       	rcall	.+1288   	; 0x3c98 <readChar>
    3790:	87 fb       	bst	r24, 7
    3792:	88 27       	eor	r24, r24
    3794:	80 f9       	bld	r24, 0
    3796:	f7 01       	movw	r30, r14
    3798:	80 83       	st	Z, r24
    379a:	ce 01       	movw	r24, r28
    379c:	01 96       	adiw	r24, 0x01	; 1
    379e:	7c d2       	rcall	.+1272   	; 0x3c98 <readChar>
    37a0:	f8 01       	movw	r30, r16
    37a2:	80 83       	st	Z, r24
    37a4:	61 e0       	ldi	r22, 0x01	; 1
    37a6:	70 e0       	ldi	r23, 0x00	; 0
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	03 c0       	rjmp	.+6      	; 0x37b4 <MQTTDeserialize_connack+0x74>
    37ae:	60 e0       	ldi	r22, 0x00	; 0
    37b0:	70 e0       	ldi	r23, 0x00	; 0
    37b2:	cb 01       	movw	r24, r22
    37b4:	26 96       	adiw	r28, 0x06	; 6
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	f8 94       	cli
    37ba:	de bf       	out	0x3e, r29	; 62
    37bc:	0f be       	out	0x3f, r0	; 63
    37be:	cd bf       	out	0x3d, r28	; 61
    37c0:	df 91       	pop	r29
    37c2:	cf 91       	pop	r28
    37c4:	1f 91       	pop	r17
    37c6:	0f 91       	pop	r16
    37c8:	ff 90       	pop	r15
    37ca:	ef 90       	pop	r14
    37cc:	08 95       	ret

000037ce <MQTTSerialize_zero>:
    37ce:	0f 93       	push	r16
    37d0:	1f 93       	push	r17
    37d2:	cf 93       	push	r28
    37d4:	df 93       	push	r29
    37d6:	1f 92       	push	r1
    37d8:	1f 92       	push	r1
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
    37de:	9a 83       	std	Y+2, r25	; 0x02
    37e0:	89 83       	std	Y+1, r24	; 0x01
    37e2:	42 30       	cpi	r20, 0x02	; 2
    37e4:	51 05       	cpc	r21, r1
    37e6:	61 05       	cpc	r22, r1
    37e8:	71 05       	cpc	r23, r1
    37ea:	c4 f0       	brlt	.+48     	; 0x381c <MQTTSerialize_zero+0x4e>
    37ec:	8c 01       	movw	r16, r24
    37ee:	62 2f       	mov	r22, r18
    37f0:	62 95       	swap	r22
    37f2:	60 7f       	andi	r22, 0xF0	; 240
    37f4:	ce 01       	movw	r24, r28
    37f6:	01 96       	adiw	r24, 0x01	; 1
    37f8:	57 d2       	rcall	.+1198   	; 0x3ca8 <writeChar>
    37fa:	40 e0       	ldi	r20, 0x00	; 0
    37fc:	50 e0       	ldi	r21, 0x00	; 0
    37fe:	ba 01       	movw	r22, r20
    3800:	89 81       	ldd	r24, Y+1	; 0x01
    3802:	9a 81       	ldd	r25, Y+2	; 0x02
    3804:	22 d1       	rcall	.+580    	; 0x3a4a <MQTTPacket_encode>
    3806:	29 81       	ldd	r18, Y+1	; 0x01
    3808:	3a 81       	ldd	r19, Y+2	; 0x02
    380a:	62 0f       	add	r22, r18
    380c:	73 1f       	adc	r23, r19
    380e:	60 1b       	sub	r22, r16
    3810:	71 0b       	sbc	r23, r17
    3812:	07 2e       	mov	r0, r23
    3814:	00 0c       	add	r0, r0
    3816:	88 0b       	sbc	r24, r24
    3818:	99 0b       	sbc	r25, r25
    381a:	04 c0       	rjmp	.+8      	; 0x3824 <MQTTSerialize_zero+0x56>
    381c:	6e ef       	ldi	r22, 0xFE	; 254
    381e:	7f ef       	ldi	r23, 0xFF	; 255
    3820:	8f ef       	ldi	r24, 0xFF	; 255
    3822:	9f ef       	ldi	r25, 0xFF	; 255
    3824:	0f 90       	pop	r0
    3826:	0f 90       	pop	r0
    3828:	df 91       	pop	r29
    382a:	cf 91       	pop	r28
    382c:	1f 91       	pop	r17
    382e:	0f 91       	pop	r16
    3830:	08 95       	ret

00003832 <MQTTSerialize_pingreq>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_pingreq(uint8_t* buf, int32_t buflen)
{
  return MQTTSerialize_zero(buf, buflen, PINGREQ);
    3832:	2c e0       	ldi	r18, 0x0C	; 12
    3834:	cc cf       	rjmp	.-104    	; 0x37ce <MQTTSerialize_zero>
    3836:	08 95       	ret

00003838 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int32_t MQTTDeserialize_publish(uint8_t* dup, uint8_t* qos, uint8_t* retained, uint16_t* packetid, MQTTString* topicName,
		uint8_t** payload, int32_t* payloadlen, uint8_t* buf, int32_t buflen)
{
    3838:	2f 92       	push	r2
    383a:	3f 92       	push	r3
    383c:	4f 92       	push	r4
    383e:	5f 92       	push	r5
    3840:	6f 92       	push	r6
    3842:	7f 92       	push	r7
    3844:	8f 92       	push	r8
    3846:	9f 92       	push	r9
    3848:	af 92       	push	r10
    384a:	bf 92       	push	r11
    384c:	cf 92       	push	r12
    384e:	df 92       	push	r13
    3850:	ef 92       	push	r14
    3852:	ff 92       	push	r15
    3854:	0f 93       	push	r16
    3856:	1f 93       	push	r17
    3858:	cf 93       	push	r28
    385a:	df 93       	push	r29
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62
    3860:	28 97       	sbiw	r28, 0x08	; 8
    3862:	0f b6       	in	r0, 0x3f	; 63
    3864:	f8 94       	cli
    3866:	de bf       	out	0x3e, r29	; 62
    3868:	0f be       	out	0x3f, r0	; 63
    386a:	cd bf       	out	0x3d, r28	; 61
    386c:	3c 01       	movw	r6, r24
    386e:	1b 01       	movw	r2, r22
    3870:	2a 01       	movw	r4, r20
    3872:	38 87       	std	Y+8, r19	; 0x08
    3874:	2f 83       	std	Y+7, r18	; 0x07
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    3876:	ba 82       	std	Y+2, r11	; 0x02
    3878:	a9 82       	std	Y+1, r10	; 0x01
  uint8_t* enddata = NULL;
  int32_t rc = 0;
  int32_t mylen = 0;
    387a:	1b 82       	std	Y+3, r1	; 0x03
    387c:	1c 82       	std	Y+4, r1	; 0x04
    387e:	1d 82       	std	Y+5, r1	; 0x05
    3880:	1e 82       	std	Y+6, r1	; 0x06

  FUNC_ENTRY;
  header.byte = readChar(&curdata);
    3882:	ce 01       	movw	r24, r28
    3884:	01 96       	adiw	r24, 0x01	; 1
    3886:	08 d2       	rcall	.+1040   	; 0x3c98 <readChar>

  if (header.bits.type != PUBLISH)
    3888:	98 2f       	mov	r25, r24
    388a:	90 7f       	andi	r25, 0xF0	; 240
    388c:	90 33       	cpi	r25, 0x30	; 48
    388e:	09 f0       	breq	.+2      	; 0x3892 <MQTTDeserialize_publish+0x5a>
    3890:	52 c0       	rjmp	.+164    	; 0x3936 <MQTTDeserialize_publish+0xfe>
    goto exit;
	
  *dup = header.bits.dup;
    3892:	83 fb       	bst	r24, 3
    3894:	99 27       	eor	r25, r25
    3896:	90 f9       	bld	r25, 0
    3898:	f3 01       	movw	r30, r6
    389a:	90 83       	st	Z, r25
  *qos = header.bits.qos;
    389c:	98 2f       	mov	r25, r24
    389e:	96 95       	lsr	r25
    38a0:	93 70       	andi	r25, 0x03	; 3
    38a2:	f1 01       	movw	r30, r2
    38a4:	90 83       	st	Z, r25
  *retained = header.bits.retain;
    38a6:	81 70       	andi	r24, 0x01	; 1
    38a8:	f2 01       	movw	r30, r4
    38aa:	80 83       	st	Z, r24

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    38ac:	be 01       	movw	r22, r28
    38ae:	6d 5f       	subi	r22, 0xFD	; 253
    38b0:	7f 4f       	sbci	r23, 0xFF	; 255
    38b2:	89 81       	ldd	r24, Y+1	; 0x01
    38b4:	9a 81       	ldd	r25, Y+2	; 0x02
    38b6:	d5 d1       	rcall	.+938    	; 0x3c62 <MQTTPacket_decodeBuf>
    38b8:	4b 01       	movw	r8, r22
    38ba:	5c 01       	movw	r10, r24
    38bc:	69 80       	ldd	r6, Y+1	; 0x01
    38be:	7a 80       	ldd	r7, Y+2	; 0x02
    38c0:	66 0e       	add	r6, r22
    38c2:	77 1e       	adc	r7, r23
    38c4:	7a 82       	std	Y+2, r7	; 0x02
    38c6:	69 82       	std	Y+1, r6	; 0x01
  enddata = curdata + mylen;
    38c8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ca:	9c 81       	ldd	r25, Y+4	; 0x04
    38cc:	68 0e       	add	r6, r24
    38ce:	79 1e       	adc	r7, r25

  /* do we have enough data to read the protocol version byte? */
  if (!readMQTTLenString(topicName, &curdata, enddata) || enddata - curdata < 0)
    38d0:	a3 01       	movw	r20, r6
    38d2:	be 01       	movw	r22, r28
    38d4:	6f 5f       	subi	r22, 0xFF	; 255
    38d6:	7f 4f       	sbci	r23, 0xFF	; 255
    38d8:	c8 01       	movw	r24, r16
    38da:	99 d2       	rcall	.+1330   	; 0x3e0e <readMQTTLenString>
    38dc:	67 2b       	or	r22, r23
    38de:	68 2b       	or	r22, r24
    38e0:	69 2b       	or	r22, r25
    38e2:	61 f1       	breq	.+88     	; 0x393c <MQTTDeserialize_publish+0x104>
    38e4:	89 81       	ldd	r24, Y+1	; 0x01
    38e6:	9a 81       	ldd	r25, Y+2	; 0x02
    38e8:	93 01       	movw	r18, r6
    38ea:	28 1b       	sub	r18, r24
    38ec:	39 0b       	sbc	r19, r25
    38ee:	c9 01       	movw	r24, r18
    38f0:	99 23       	and	r25, r25
    38f2:	24 f1       	brlt	.+72     	; 0x393c <MQTTDeserialize_publish+0x104>
    goto exit;

  if (*qos > 0)
    38f4:	f1 01       	movw	r30, r2
    38f6:	80 81       	ld	r24, Z
    38f8:	88 23       	and	r24, r24
    *packetid = readInt(&curdata);
    38fa:	39 f0       	breq	.+14     	; 0x390a <MQTTDeserialize_publish+0xd2>
    38fc:	ce 01       	movw	r24, r28
    38fe:	01 96       	adiw	r24, 0x01	; 1
    3900:	b8 d1       	rcall	.+880    	; 0x3c72 <readInt>
    3902:	ef 81       	ldd	r30, Y+7	; 0x07
    3904:	f8 85       	ldd	r31, Y+8	; 0x08
    3906:	71 83       	std	Z+1, r23	; 0x01
    3908:	60 83       	st	Z, r22

  *payloadlen = enddata - curdata;
    390a:	29 81       	ldd	r18, Y+1	; 0x01
    390c:	3a 81       	ldd	r19, Y+2	; 0x02
    390e:	c3 01       	movw	r24, r6
    3910:	82 1b       	sub	r24, r18
    3912:	93 0b       	sbc	r25, r19
    3914:	09 2e       	mov	r0, r25
    3916:	00 0c       	add	r0, r0
    3918:	aa 0b       	sbc	r26, r26
    391a:	bb 0b       	sbc	r27, r27
    391c:	f6 01       	movw	r30, r12
    391e:	80 83       	st	Z, r24
    3920:	91 83       	std	Z+1, r25	; 0x01
    3922:	a2 83       	std	Z+2, r26	; 0x02
    3924:	b3 83       	std	Z+3, r27	; 0x03
  *payload = curdata;
    3926:	f7 01       	movw	r30, r14
    3928:	31 83       	std	Z+1, r19	; 0x01
    392a:	20 83       	st	Z, r18
  rc = 1;
    392c:	81 2c       	mov	r8, r1
    392e:	91 2c       	mov	r9, r1
    3930:	54 01       	movw	r10, r8
    3932:	83 94       	inc	r8
    3934:	03 c0       	rjmp	.+6      	; 0x393c <MQTTDeserialize_publish+0x104>
		uint8_t** payload, int32_t* payloadlen, uint8_t* buf, int32_t buflen)
{
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
  uint8_t* enddata = NULL;
  int32_t rc = 0;
    3936:	81 2c       	mov	r8, r1
    3938:	91 2c       	mov	r9, r1
    393a:	54 01       	movw	r10, r8
  *payload = curdata;
  rc = 1;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    393c:	c5 01       	movw	r24, r10
    393e:	b4 01       	movw	r22, r8
    3940:	28 96       	adiw	r28, 0x08	; 8
    3942:	0f b6       	in	r0, 0x3f	; 63
    3944:	f8 94       	cli
    3946:	de bf       	out	0x3e, r29	; 62
    3948:	0f be       	out	0x3f, r0	; 63
    394a:	cd bf       	out	0x3d, r28	; 61
    394c:	df 91       	pop	r29
    394e:	cf 91       	pop	r28
    3950:	1f 91       	pop	r17
    3952:	0f 91       	pop	r16
    3954:	ff 90       	pop	r15
    3956:	ef 90       	pop	r14
    3958:	df 90       	pop	r13
    395a:	cf 90       	pop	r12
    395c:	bf 90       	pop	r11
    395e:	af 90       	pop	r10
    3960:	9f 90       	pop	r9
    3962:	8f 90       	pop	r8
    3964:	7f 90       	pop	r7
    3966:	6f 90       	pop	r6
    3968:	5f 90       	pop	r5
    396a:	4f 90       	pop	r4
    396c:	3f 90       	pop	r3
    396e:	2f 90       	pop	r2
    3970:	08 95       	ret

00003972 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int32_t MQTTDeserialize_ack(uint8_t* packettype, uint8_t* dup, uint16_t* packetid, uint8_t* buf, int32_t buflen)
{
    3972:	cf 92       	push	r12
    3974:	df 92       	push	r13
    3976:	ef 92       	push	r14
    3978:	ff 92       	push	r15
    397a:	0f 93       	push	r16
    397c:	1f 93       	push	r17
    397e:	cf 93       	push	r28
    3980:	df 93       	push	r29
    3982:	00 d0       	rcall	.+0      	; 0x3984 <MQTTDeserialize_ack+0x12>
    3984:	00 d0       	rcall	.+0      	; 0x3986 <MQTTDeserialize_ack+0x14>
    3986:	cd b7       	in	r28, 0x3d	; 61
    3988:	de b7       	in	r29, 0x3e	; 62
    398a:	7c 01       	movw	r14, r24
    398c:	6b 01       	movw	r12, r22
    398e:	8a 01       	movw	r16, r20
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    3990:	3a 83       	std	Y+2, r19	; 0x02
    3992:	29 83       	std	Y+1, r18	; 0x01
  uint8_t* enddata = NULL;
  int32_t rc = 0;
  int32_t mylen;

  FUNC_ENTRY;
  header.byte = readChar(&curdata);
    3994:	ce 01       	movw	r24, r28
    3996:	01 96       	adiw	r24, 0x01	; 1
    3998:	7f d1       	rcall	.+766    	; 0x3c98 <readChar>
  *dup = header.bits.dup;
    399a:	83 fb       	bst	r24, 3
    399c:	99 27       	eor	r25, r25
    399e:	90 f9       	bld	r25, 0
    39a0:	f6 01       	movw	r30, r12
    39a2:	90 83       	st	Z, r25
  *packettype = header.bits.type;
    39a4:	82 95       	swap	r24
    39a6:	8f 70       	andi	r24, 0x0F	; 15
    39a8:	f7 01       	movw	r30, r14
    39aa:	80 83       	st	Z, r24

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    39ac:	be 01       	movw	r22, r28
    39ae:	6d 5f       	subi	r22, 0xFD	; 253
    39b0:	7f 4f       	sbci	r23, 0xFF	; 255
    39b2:	89 81       	ldd	r24, Y+1	; 0x01
    39b4:	9a 81       	ldd	r25, Y+2	; 0x02
    39b6:	55 d1       	rcall	.+682    	; 0x3c62 <MQTTPacket_decodeBuf>
    39b8:	29 81       	ldd	r18, Y+1	; 0x01
    39ba:	3a 81       	ldd	r19, Y+2	; 0x02
    39bc:	26 0f       	add	r18, r22
    39be:	37 1f       	adc	r19, r23
    39c0:	3a 83       	std	Y+2, r19	; 0x02
    39c2:	29 83       	std	Y+1, r18	; 0x01
  enddata = curdata + mylen;

  if (enddata - curdata < 2)
    39c4:	2b 81       	ldd	r18, Y+3	; 0x03
    39c6:	3c 81       	ldd	r19, Y+4	; 0x04
    39c8:	22 30       	cpi	r18, 0x02	; 2
    39ca:	31 05       	cpc	r19, r1
    39cc:	54 f0       	brlt	.+20     	; 0x39e2 <MQTTDeserialize_ack+0x70>
    goto exit;
	
  *packetid = readInt(&curdata);
    39ce:	ce 01       	movw	r24, r28
    39d0:	01 96       	adiw	r24, 0x01	; 1
    39d2:	4f d1       	rcall	.+670    	; 0x3c72 <readInt>
    39d4:	f8 01       	movw	r30, r16
    39d6:	71 83       	std	Z+1, r23	; 0x01
    39d8:	60 83       	st	Z, r22

  rc = 1;
    39da:	61 e0       	ldi	r22, 0x01	; 1
    39dc:	70 e0       	ldi	r23, 0x00	; 0
    39de:	80 e0       	ldi	r24, 0x00	; 0
    39e0:	90 e0       	ldi	r25, 0x00	; 0
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    39e2:	26 96       	adiw	r28, 0x06	; 6
    39e4:	0f b6       	in	r0, 0x3f	; 63
    39e6:	f8 94       	cli
    39e8:	de bf       	out	0x3e, r29	; 62
    39ea:	0f be       	out	0x3f, r0	; 63
    39ec:	cd bf       	out	0x3d, r28	; 61
    39ee:	df 91       	pop	r29
    39f0:	cf 91       	pop	r28
    39f2:	1f 91       	pop	r17
    39f4:	0f 91       	pop	r16
    39f6:	ff 90       	pop	r15
    39f8:	ef 90       	pop	r14
    39fa:	df 90       	pop	r13
    39fc:	cf 90       	pop	r12
    39fe:	08 95       	ret

00003a00 <bufchar>:

int32_t getLenStringLen(char* ptr)
{
  int32_t len = 256*((uint8_t)(*ptr)) + (uint8_t)(*(ptr+1));
  return len;
}
    3a00:	0f 93       	push	r16
    3a02:	1f 93       	push	r17
    3a04:	cf 93       	push	r28
    3a06:	df 93       	push	r29
    3a08:	ec 01       	movw	r28, r24
    3a0a:	00 e0       	ldi	r16, 0x00	; 0
    3a0c:	10 e0       	ldi	r17, 0x00	; 0
    3a0e:	98 01       	movw	r18, r16
    3a10:	10 c0       	rjmp	.+32     	; 0x3a32 <bufchar+0x32>
    3a12:	e0 91 56 04 	lds	r30, 0x0456	; 0x800456 <bufptr>
    3a16:	f0 91 57 04 	lds	r31, 0x0457	; 0x800457 <bufptr+0x1>
    3a1a:	df 01       	movw	r26, r30
    3a1c:	11 96       	adiw	r26, 0x01	; 1
    3a1e:	b0 93 57 04 	sts	0x0457, r27	; 0x800457 <bufptr+0x1>
    3a22:	a0 93 56 04 	sts	0x0456, r26	; 0x800456 <bufptr>
    3a26:	90 81       	ld	r25, Z
    3a28:	98 83       	st	Y, r25
    3a2a:	0f 5f       	subi	r16, 0xFF	; 255
    3a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a2e:	2f 4f       	sbci	r18, 0xFF	; 255
    3a30:	3f 4f       	sbci	r19, 0xFF	; 255
    3a32:	04 17       	cp	r16, r20
    3a34:	15 07       	cpc	r17, r21
    3a36:	26 07       	cpc	r18, r22
    3a38:	37 07       	cpc	r19, r23
    3a3a:	5c f3       	brlt	.-42     	; 0x3a12 <bufchar+0x12>
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	ba 01       	movw	r22, r20
    3a40:	df 91       	pop	r29
    3a42:	cf 91       	pop	r28
    3a44:	1f 91       	pop	r17
    3a46:	0f 91       	pop	r16
    3a48:	08 95       	ret

00003a4a <MQTTPacket_encode>:
    3a4a:	8f 92       	push	r8
    3a4c:	9f 92       	push	r9
    3a4e:	af 92       	push	r10
    3a50:	bf 92       	push	r11
    3a52:	cf 92       	push	r12
    3a54:	df 92       	push	r13
    3a56:	ef 92       	push	r14
    3a58:	ff 92       	push	r15
    3a5a:	0f 93       	push	r16
    3a5c:	1f 93       	push	r17
    3a5e:	c1 2c       	mov	r12, r1
    3a60:	d1 2c       	mov	r13, r1
    3a62:	76 01       	movw	r14, r12
    3a64:	02 c0       	rjmp	.+4      	; 0x3a6a <MQTTPacket_encode+0x20>
    3a66:	75 01       	movw	r14, r10
    3a68:	64 01       	movw	r12, r8
    3a6a:	8a 01       	movw	r16, r20
    3a6c:	9b 01       	movw	r18, r22
    3a6e:	0f 77       	andi	r16, 0x7F	; 127
    3a70:	11 27       	eor	r17, r17
    3a72:	22 27       	eor	r18, r18
    3a74:	30 78       	andi	r19, 0x80	; 128
    3a76:	33 23       	and	r19, r19
    3a78:	64 f4       	brge	.+24     	; 0x3a92 <MQTTPacket_encode+0x48>
    3a7a:	01 50       	subi	r16, 0x01	; 1
    3a7c:	11 09       	sbc	r17, r1
    3a7e:	21 09       	sbc	r18, r1
    3a80:	31 09       	sbc	r19, r1
    3a82:	00 68       	ori	r16, 0x80	; 128
    3a84:	1f 6f       	ori	r17, 0xFF	; 255
    3a86:	2f 6f       	ori	r18, 0xFF	; 255
    3a88:	3f 6f       	ori	r19, 0xFF	; 255
    3a8a:	0f 5f       	subi	r16, 0xFF	; 255
    3a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a8e:	2f 4f       	sbci	r18, 0xFF	; 255
    3a90:	3f 4f       	sbci	r19, 0xFF	; 255
    3a92:	4a 01       	movw	r8, r20
    3a94:	5b 01       	movw	r10, r22
    3a96:	77 23       	and	r23, r23
    3a98:	2c f4       	brge	.+10     	; 0x3aa4 <MQTTPacket_encode+0x5a>
    3a9a:	2f e7       	ldi	r18, 0x7F	; 127
    3a9c:	82 0e       	add	r8, r18
    3a9e:	91 1c       	adc	r9, r1
    3aa0:	a1 1c       	adc	r10, r1
    3aa2:	b1 1c       	adc	r11, r1
    3aa4:	b5 01       	movw	r22, r10
    3aa6:	a4 01       	movw	r20, r8
    3aa8:	68 94       	set
    3aaa:	16 f8       	bld	r1, 6
    3aac:	75 95       	asr	r23
    3aae:	67 95       	ror	r22
    3ab0:	57 95       	ror	r21
    3ab2:	47 95       	ror	r20
    3ab4:	16 94       	lsr	r1
    3ab6:	d1 f7       	brne	.-12     	; 0x3aac <MQTTPacket_encode+0x62>
    3ab8:	14 16       	cp	r1, r20
    3aba:	15 06       	cpc	r1, r21
    3abc:	16 06       	cpc	r1, r22
    3abe:	17 06       	cpc	r1, r23
    3ac0:	0c f4       	brge	.+2      	; 0x3ac4 <MQTTPacket_encode+0x7a>
    3ac2:	00 68       	ori	r16, 0x80	; 128
    3ac4:	46 01       	movw	r8, r12
    3ac6:	57 01       	movw	r10, r14
    3ac8:	2f ef       	ldi	r18, 0xFF	; 255
    3aca:	82 1a       	sub	r8, r18
    3acc:	92 0a       	sbc	r9, r18
    3ace:	a2 0a       	sbc	r10, r18
    3ad0:	b2 0a       	sbc	r11, r18
    3ad2:	fc 01       	movw	r30, r24
    3ad4:	ec 0d       	add	r30, r12
    3ad6:	fd 1d       	adc	r31, r13
    3ad8:	00 83       	st	Z, r16
    3ada:	14 16       	cp	r1, r20
    3adc:	15 06       	cpc	r1, r21
    3ade:	16 06       	cpc	r1, r22
    3ae0:	17 06       	cpc	r1, r23
    3ae2:	0c f2       	brlt	.-126    	; 0x3a66 <MQTTPacket_encode+0x1c>
    3ae4:	c5 01       	movw	r24, r10
    3ae6:	b4 01       	movw	r22, r8
    3ae8:	1f 91       	pop	r17
    3aea:	0f 91       	pop	r16
    3aec:	ff 90       	pop	r15
    3aee:	ef 90       	pop	r14
    3af0:	df 90       	pop	r13
    3af2:	cf 90       	pop	r12
    3af4:	bf 90       	pop	r11
    3af6:	af 90       	pop	r10
    3af8:	9f 90       	pop	r9
    3afa:	8f 90       	pop	r8
    3afc:	08 95       	ret

00003afe <MQTTPacket_decode>:
    3afe:	4f 92       	push	r4
    3b00:	5f 92       	push	r5
    3b02:	6f 92       	push	r6
    3b04:	7f 92       	push	r7
    3b06:	9f 92       	push	r9
    3b08:	af 92       	push	r10
    3b0a:	bf 92       	push	r11
    3b0c:	cf 92       	push	r12
    3b0e:	df 92       	push	r13
    3b10:	ef 92       	push	r14
    3b12:	ff 92       	push	r15
    3b14:	0f 93       	push	r16
    3b16:	1f 93       	push	r17
    3b18:	cf 93       	push	r28
    3b1a:	df 93       	push	r29
    3b1c:	1f 92       	push	r1
    3b1e:	cd b7       	in	r28, 0x3d	; 61
    3b20:	de b7       	in	r29, 0x3e	; 62
    3b22:	5c 01       	movw	r10, r24
    3b24:	8b 01       	movw	r16, r22
    3b26:	db 01       	movw	r26, r22
    3b28:	1d 92       	st	X+, r1
    3b2a:	1d 92       	st	X+, r1
    3b2c:	1d 92       	st	X+, r1
    3b2e:	1c 92       	st	X, r1
    3b30:	13 97       	sbiw	r26, 0x03	; 3
    3b32:	41 2c       	mov	r4, r1
    3b34:	51 2c       	mov	r5, r1
    3b36:	32 01       	movw	r6, r4
    3b38:	c1 2c       	mov	r12, r1
    3b3a:	d1 2c       	mov	r13, r1
    3b3c:	76 01       	movw	r14, r12
    3b3e:	c3 94       	inc	r12
    3b40:	bf ef       	ldi	r27, 0xFF	; 255
    3b42:	4b 1a       	sub	r4, r27
    3b44:	5b 0a       	sbc	r5, r27
    3b46:	6b 0a       	sbc	r6, r27
    3b48:	7b 0a       	sbc	r7, r27
    3b4a:	e5 e0       	ldi	r30, 0x05	; 5
    3b4c:	4e 16       	cp	r4, r30
    3b4e:	51 04       	cpc	r5, r1
    3b50:	61 04       	cpc	r6, r1
    3b52:	71 04       	cpc	r7, r1
    3b54:	0c f0       	brlt	.+2      	; 0x3b58 <MQTTPacket_decode+0x5a>
    3b56:	44 c0       	rjmp	.+136    	; 0x3be0 <MQTTPacket_decode+0xe2>
    3b58:	41 e0       	ldi	r20, 0x01	; 1
    3b5a:	50 e0       	ldi	r21, 0x00	; 0
    3b5c:	60 e0       	ldi	r22, 0x00	; 0
    3b5e:	70 e0       	ldi	r23, 0x00	; 0
    3b60:	ce 01       	movw	r24, r28
    3b62:	01 96       	adiw	r24, 0x01	; 1
    3b64:	f5 01       	movw	r30, r10
    3b66:	19 95       	eicall
    3b68:	61 30       	cpi	r22, 0x01	; 1
    3b6a:	71 05       	cpc	r23, r1
    3b6c:	81 05       	cpc	r24, r1
    3b6e:	91 05       	cpc	r25, r1
    3b70:	b9 f5       	brne	.+110    	; 0x3be0 <MQTTPacket_decode+0xe2>
    3b72:	99 80       	ldd	r9, Y+1	; 0x01
    3b74:	a9 2d       	mov	r26, r9
    3b76:	af 77       	andi	r26, 0x7F	; 127
    3b78:	b0 e0       	ldi	r27, 0x00	; 0
    3b7a:	a7 01       	movw	r20, r14
    3b7c:	96 01       	movw	r18, r12
    3b7e:	0e 94 40 35 	call	0x6a80	; 0x6a80 <__muluhisi3>
    3b82:	d8 01       	movw	r26, r16
    3b84:	2d 91       	ld	r18, X+
    3b86:	3d 91       	ld	r19, X+
    3b88:	4d 91       	ld	r20, X+
    3b8a:	5c 91       	ld	r21, X
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	cb 01       	movw	r24, r22
    3b90:	82 0f       	add	r24, r18
    3b92:	93 1f       	adc	r25, r19
    3b94:	a4 1f       	adc	r26, r20
    3b96:	b5 1f       	adc	r27, r21
    3b98:	f8 01       	movw	r30, r16
    3b9a:	80 83       	st	Z, r24
    3b9c:	91 83       	std	Z+1, r25	; 0x01
    3b9e:	a2 83       	std	Z+2, r26	; 0x02
    3ba0:	b3 83       	std	Z+3, r27	; 0x03
    3ba2:	cc 0c       	add	r12, r12
    3ba4:	dd 1c       	adc	r13, r13
    3ba6:	ee 1c       	adc	r14, r14
    3ba8:	ff 1c       	adc	r15, r15
    3baa:	cc 0c       	add	r12, r12
    3bac:	dd 1c       	adc	r13, r13
    3bae:	ee 1c       	adc	r14, r14
    3bb0:	ff 1c       	adc	r15, r15
    3bb2:	cc 0c       	add	r12, r12
    3bb4:	dd 1c       	adc	r13, r13
    3bb6:	ee 1c       	adc	r14, r14
    3bb8:	ff 1c       	adc	r15, r15
    3bba:	cc 0c       	add	r12, r12
    3bbc:	dd 1c       	adc	r13, r13
    3bbe:	ee 1c       	adc	r14, r14
    3bc0:	ff 1c       	adc	r15, r15
    3bc2:	cc 0c       	add	r12, r12
    3bc4:	dd 1c       	adc	r13, r13
    3bc6:	ee 1c       	adc	r14, r14
    3bc8:	ff 1c       	adc	r15, r15
    3bca:	cc 0c       	add	r12, r12
    3bcc:	dd 1c       	adc	r13, r13
    3bce:	ee 1c       	adc	r14, r14
    3bd0:	ff 1c       	adc	r15, r15
    3bd2:	cc 0c       	add	r12, r12
    3bd4:	dd 1c       	adc	r13, r13
    3bd6:	ee 1c       	adc	r14, r14
    3bd8:	ff 1c       	adc	r15, r15
    3bda:	99 20       	and	r9, r9
    3bdc:	0c f4       	brge	.+2      	; 0x3be0 <MQTTPacket_decode+0xe2>
    3bde:	b0 cf       	rjmp	.-160    	; 0x3b40 <MQTTPacket_decode+0x42>
    3be0:	c3 01       	movw	r24, r6
    3be2:	b2 01       	movw	r22, r4
    3be4:	0f 90       	pop	r0
    3be6:	df 91       	pop	r29
    3be8:	cf 91       	pop	r28
    3bea:	1f 91       	pop	r17
    3bec:	0f 91       	pop	r16
    3bee:	ff 90       	pop	r15
    3bf0:	ef 90       	pop	r14
    3bf2:	df 90       	pop	r13
    3bf4:	cf 90       	pop	r12
    3bf6:	bf 90       	pop	r11
    3bf8:	af 90       	pop	r10
    3bfa:	9f 90       	pop	r9
    3bfc:	7f 90       	pop	r7
    3bfe:	6f 90       	pop	r6
    3c00:	5f 90       	pop	r5
    3c02:	4f 90       	pop	r4
    3c04:	08 95       	ret

00003c06 <MQTTPacket_len>:
    3c06:	0f 93       	push	r16
    3c08:	1f 93       	push	r17
    3c0a:	8b 01       	movw	r16, r22
    3c0c:	9c 01       	movw	r18, r24
    3c0e:	0f 5f       	subi	r16, 0xFF	; 255
    3c10:	1f 4f       	sbci	r17, 0xFF	; 255
    3c12:	2f 4f       	sbci	r18, 0xFF	; 255
    3c14:	3f 4f       	sbci	r19, 0xFF	; 255
    3c16:	00 38       	cpi	r16, 0x80	; 128
    3c18:	11 05       	cpc	r17, r1
    3c1a:	21 05       	cpc	r18, r1
    3c1c:	31 05       	cpc	r19, r1
    3c1e:	2c f4       	brge	.+10     	; 0x3c2a <MQTTPacket_len+0x24>
    3c20:	6e 5f       	subi	r22, 0xFE	; 254
    3c22:	7f 4f       	sbci	r23, 0xFF	; 255
    3c24:	8f 4f       	sbci	r24, 0xFF	; 255
    3c26:	9f 4f       	sbci	r25, 0xFF	; 255
    3c28:	19 c0       	rjmp	.+50     	; 0x3c5c <MQTTPacket_len+0x56>
    3c2a:	01 15       	cp	r16, r1
    3c2c:	40 e4       	ldi	r20, 0x40	; 64
    3c2e:	14 07       	cpc	r17, r20
    3c30:	21 05       	cpc	r18, r1
    3c32:	31 05       	cpc	r19, r1
    3c34:	2c f4       	brge	.+10     	; 0x3c40 <MQTTPacket_len+0x3a>
    3c36:	6d 5f       	subi	r22, 0xFD	; 253
    3c38:	7f 4f       	sbci	r23, 0xFF	; 255
    3c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c3e:	0e c0       	rjmp	.+28     	; 0x3c5c <MQTTPacket_len+0x56>
    3c40:	0f 3f       	cpi	r16, 0xFF	; 255
    3c42:	1f 4f       	sbci	r17, 0xFF	; 255
    3c44:	2f 41       	sbci	r18, 0x1F	; 31
    3c46:	31 05       	cpc	r19, r1
    3c48:	2c f4       	brge	.+10     	; 0x3c54 <MQTTPacket_len+0x4e>
    3c4a:	6c 5f       	subi	r22, 0xFC	; 252
    3c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c4e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c50:	9f 4f       	sbci	r25, 0xFF	; 255
    3c52:	04 c0       	rjmp	.+8      	; 0x3c5c <MQTTPacket_len+0x56>
    3c54:	6b 5f       	subi	r22, 0xFB	; 251
    3c56:	7f 4f       	sbci	r23, 0xFF	; 255
    3c58:	8f 4f       	sbci	r24, 0xFF	; 255
    3c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c5c:	1f 91       	pop	r17
    3c5e:	0f 91       	pop	r16
    3c60:	08 95       	ret

00003c62 <MQTTPacket_decodeBuf>:
    3c62:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <bufptr+0x1>
    3c66:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <bufptr>
    3c6a:	80 e0       	ldi	r24, 0x00	; 0
    3c6c:	9d e1       	ldi	r25, 0x1D	; 29
    3c6e:	47 cf       	rjmp	.-370    	; 0x3afe <MQTTPacket_decode>
    3c70:	08 95       	ret

00003c72 <readInt>:
    3c72:	dc 01       	movw	r26, r24
    3c74:	ed 91       	ld	r30, X+
    3c76:	fc 91       	ld	r31, X
    3c78:	11 97       	sbiw	r26, 0x01	; 1
    3c7a:	60 81       	ld	r22, Z
    3c7c:	70 e0       	ldi	r23, 0x00	; 0
    3c7e:	76 2f       	mov	r23, r22
    3c80:	66 27       	eor	r22, r22
    3c82:	81 81       	ldd	r24, Z+1	; 0x01
    3c84:	68 0f       	add	r22, r24
    3c86:	71 1d       	adc	r23, r1
    3c88:	07 2e       	mov	r0, r23
    3c8a:	00 0c       	add	r0, r0
    3c8c:	88 0b       	sbc	r24, r24
    3c8e:	99 0b       	sbc	r25, r25
    3c90:	32 96       	adiw	r30, 0x02	; 2
    3c92:	ed 93       	st	X+, r30
    3c94:	fc 93       	st	X, r31
    3c96:	08 95       	ret

00003c98 <readChar>:
    3c98:	dc 01       	movw	r26, r24
    3c9a:	ed 91       	ld	r30, X+
    3c9c:	fc 91       	ld	r31, X
    3c9e:	11 97       	sbiw	r26, 0x01	; 1
    3ca0:	81 91       	ld	r24, Z+
    3ca2:	ed 93       	st	X+, r30
    3ca4:	fc 93       	st	X, r31
    3ca6:	08 95       	ret

00003ca8 <writeChar>:
    3ca8:	fc 01       	movw	r30, r24
    3caa:	a0 81       	ld	r26, Z
    3cac:	b1 81       	ldd	r27, Z+1	; 0x01
    3cae:	6c 93       	st	X, r22
    3cb0:	80 81       	ld	r24, Z
    3cb2:	91 81       	ldd	r25, Z+1	; 0x01
    3cb4:	01 96       	adiw	r24, 0x01	; 1
    3cb6:	91 83       	std	Z+1, r25	; 0x01
    3cb8:	80 83       	st	Z, r24
    3cba:	08 95       	ret

00003cbc <writeInt>:
    3cbc:	cf 93       	push	r28
    3cbe:	df 93       	push	r29
    3cc0:	fc 01       	movw	r30, r24
    3cc2:	c0 81       	ld	r28, Z
    3cc4:	d1 81       	ldd	r29, Z+1	; 0x01
    3cc6:	db 01       	movw	r26, r22
    3cc8:	ca 01       	movw	r24, r20
    3cca:	77 23       	and	r23, r23
    3ccc:	24 f4       	brge	.+8      	; 0x3cd6 <writeInt+0x1a>
    3cce:	81 50       	subi	r24, 0x01	; 1
    3cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd2:	af 4f       	sbci	r26, 0xFF	; 255
    3cd4:	bf 4f       	sbci	r27, 0xFF	; 255
    3cd6:	98 83       	st	Y, r25
    3cd8:	a0 81       	ld	r26, Z
    3cda:	b1 81       	ldd	r27, Z+1	; 0x01
    3cdc:	cd 01       	movw	r24, r26
    3cde:	01 96       	adiw	r24, 0x01	; 1
    3ce0:	91 83       	std	Z+1, r25	; 0x01
    3ce2:	80 83       	st	Z, r24
    3ce4:	55 27       	eor	r21, r21
    3ce6:	66 27       	eor	r22, r22
    3ce8:	70 78       	andi	r23, 0x80	; 128
    3cea:	77 23       	and	r23, r23
    3cec:	5c f4       	brge	.+22     	; 0x3d04 <writeInt+0x48>
    3cee:	41 50       	subi	r20, 0x01	; 1
    3cf0:	51 09       	sbc	r21, r1
    3cf2:	61 09       	sbc	r22, r1
    3cf4:	71 09       	sbc	r23, r1
    3cf6:	5f 6f       	ori	r21, 0xFF	; 255
    3cf8:	6f 6f       	ori	r22, 0xFF	; 255
    3cfa:	7f 6f       	ori	r23, 0xFF	; 255
    3cfc:	4f 5f       	subi	r20, 0xFF	; 255
    3cfe:	5f 4f       	sbci	r21, 0xFF	; 255
    3d00:	6f 4f       	sbci	r22, 0xFF	; 255
    3d02:	7f 4f       	sbci	r23, 0xFF	; 255
    3d04:	11 96       	adiw	r26, 0x01	; 1
    3d06:	4c 93       	st	X, r20
    3d08:	80 81       	ld	r24, Z
    3d0a:	91 81       	ldd	r25, Z+1	; 0x01
    3d0c:	01 96       	adiw	r24, 0x01	; 1
    3d0e:	91 83       	std	Z+1, r25	; 0x01
    3d10:	80 83       	st	Z, r24
    3d12:	df 91       	pop	r29
    3d14:	cf 91       	pop	r28
    3d16:	08 95       	ret

00003d18 <writeCString>:
    3d18:	ef 92       	push	r14
    3d1a:	ff 92       	push	r15
    3d1c:	0f 93       	push	r16
    3d1e:	1f 93       	push	r17
    3d20:	cf 93       	push	r28
    3d22:	df 93       	push	r29
    3d24:	8c 01       	movw	r16, r24
    3d26:	7b 01       	movw	r14, r22
    3d28:	eb 01       	movw	r28, r22
    3d2a:	09 90       	ld	r0, Y+
    3d2c:	00 20       	and	r0, r0
    3d2e:	e9 f7       	brne	.-6      	; 0x3d2a <writeCString+0x12>
    3d30:	21 97       	sbiw	r28, 0x01	; 1
    3d32:	c6 1b       	sub	r28, r22
    3d34:	d7 0b       	sbc	r29, r23
    3d36:	ae 01       	movw	r20, r28
    3d38:	60 e0       	ldi	r22, 0x00	; 0
    3d3a:	70 e0       	ldi	r23, 0x00	; 0
    3d3c:	bf df       	rcall	.-130    	; 0x3cbc <writeInt>
    3d3e:	ae 01       	movw	r20, r28
    3d40:	b7 01       	movw	r22, r14
    3d42:	f8 01       	movw	r30, r16
    3d44:	80 81       	ld	r24, Z
    3d46:	91 81       	ldd	r25, Z+1	; 0x01
    3d48:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <memcpy>
    3d4c:	f8 01       	movw	r30, r16
    3d4e:	80 81       	ld	r24, Z
    3d50:	91 81       	ldd	r25, Z+1	; 0x01
    3d52:	c8 0f       	add	r28, r24
    3d54:	d9 1f       	adc	r29, r25
    3d56:	d1 83       	std	Z+1, r29	; 0x01
    3d58:	c0 83       	st	Z, r28
    3d5a:	df 91       	pop	r29
    3d5c:	cf 91       	pop	r28
    3d5e:	1f 91       	pop	r17
    3d60:	0f 91       	pop	r16
    3d62:	ff 90       	pop	r15
    3d64:	ef 90       	pop	r14
    3d66:	08 95       	ret

00003d68 <writeMQTTString>:


void writeMQTTString(uint8_t** pptr, MQTTString mqttstring)
{
    3d68:	af 92       	push	r10
    3d6a:	bf 92       	push	r11
    3d6c:	cf 92       	push	r12
    3d6e:	df 92       	push	r13
    3d70:	ef 92       	push	r14
    3d72:	ff 92       	push	r15
    3d74:	0f 93       	push	r16
    3d76:	1f 93       	push	r17
    3d78:	cf 93       	push	r28
    3d7a:	df 93       	push	r29
    3d7c:	cd b7       	in	r28, 0x3d	; 61
    3d7e:	de b7       	in	r29, 0x3e	; 62
    3d80:	28 97       	sbiw	r28, 0x08	; 8
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	f8 94       	cli
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	cd bf       	out	0x3d, r28	; 61
    3d8c:	5c 01       	movw	r10, r24
    3d8e:	09 83       	std	Y+1, r16	; 0x01
    3d90:	1a 83       	std	Y+2, r17	; 0x02
    3d92:	2b 83       	std	Y+3, r18	; 0x03
    3d94:	3c 83       	std	Y+4, r19	; 0x04
    3d96:	4d 83       	std	Y+5, r20	; 0x05
    3d98:	5e 83       	std	Y+6, r21	; 0x06
    3d9a:	6f 83       	std	Y+7, r22	; 0x07
    3d9c:	78 87       	std	Y+8, r23	; 0x08
  if (mqttstring.lenstring.len > 0)
    3d9e:	cb 80       	ldd	r12, Y+3	; 0x03
    3da0:	dc 80       	ldd	r13, Y+4	; 0x04
    3da2:	ed 80       	ldd	r14, Y+5	; 0x05
    3da4:	fe 80       	ldd	r15, Y+6	; 0x06
    3da6:	1c 14       	cp	r1, r12
    3da8:	1d 04       	cpc	r1, r13
    3daa:	1e 04       	cpc	r1, r14
    3dac:	1f 04       	cpc	r1, r15
    3dae:	9c f4       	brge	.+38     	; 0x3dd6 <writeMQTTString+0x6e>
  {
    writeInt(pptr, mqttstring.lenstring.len);
    3db0:	b7 01       	movw	r22, r14
    3db2:	a6 01       	movw	r20, r12
    3db4:	83 df       	rcall	.-250    	; 0x3cbc <writeInt>
    memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
    3db6:	6f 81       	ldd	r22, Y+7	; 0x07
    3db8:	78 85       	ldd	r23, Y+8	; 0x08
    3dba:	a6 01       	movw	r20, r12
    3dbc:	f5 01       	movw	r30, r10
    3dbe:	80 81       	ld	r24, Z
    3dc0:	91 81       	ldd	r25, Z+1	; 0x01
    3dc2:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <memcpy>
    *pptr += mqttstring.lenstring.len;
    3dc6:	f5 01       	movw	r30, r10
    3dc8:	80 81       	ld	r24, Z
    3dca:	91 81       	ldd	r25, Z+1	; 0x01
    3dcc:	c8 0e       	add	r12, r24
    3dce:	d9 1e       	adc	r13, r25
    3dd0:	d1 82       	std	Z+1, r13	; 0x01
    3dd2:	c0 82       	st	Z, r12
    3dd4:	0b c0       	rjmp	.+22     	; 0x3dec <writeMQTTString+0x84>
  }
  else if (mqttstring.cstring)
    3dd6:	69 81       	ldd	r22, Y+1	; 0x01
    3dd8:	7a 81       	ldd	r23, Y+2	; 0x02
    3dda:	61 15       	cp	r22, r1
    3ddc:	71 05       	cpc	r23, r1
    writeCString(pptr, mqttstring.cstring);
    3dde:	11 f0       	breq	.+4      	; 0x3de4 <writeMQTTString+0x7c>
    3de0:	9b df       	rcall	.-202    	; 0x3d18 <writeCString>
    3de2:	04 c0       	rjmp	.+8      	; 0x3dec <writeMQTTString+0x84>
  else
    writeInt(pptr, 0);
    3de4:	40 e0       	ldi	r20, 0x00	; 0
    3de6:	50 e0       	ldi	r21, 0x00	; 0
    3de8:	ba 01       	movw	r22, r20
    3dea:	68 df       	rcall	.-304    	; 0x3cbc <writeInt>
}
    3dec:	28 96       	adiw	r28, 0x08	; 8
    3dee:	0f b6       	in	r0, 0x3f	; 63
    3df0:	f8 94       	cli
    3df2:	de bf       	out	0x3e, r29	; 62
    3df4:	0f be       	out	0x3f, r0	; 63
    3df6:	cd bf       	out	0x3d, r28	; 61
    3df8:	df 91       	pop	r29
    3dfa:	cf 91       	pop	r28
    3dfc:	1f 91       	pop	r17
    3dfe:	0f 91       	pop	r16
    3e00:	ff 90       	pop	r15
    3e02:	ef 90       	pop	r14
    3e04:	df 90       	pop	r13
    3e06:	cf 90       	pop	r12
    3e08:	bf 90       	pop	r11
    3e0a:	af 90       	pop	r10
    3e0c:	08 95       	ret

00003e0e <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int32_t readMQTTLenString(MQTTString* mqttstring, uint8_t** pptr, uint8_t* enddata)
{
    3e0e:	ef 92       	push	r14
    3e10:	ff 92       	push	r15
    3e12:	0f 93       	push	r16
    3e14:	1f 93       	push	r17
    3e16:	cf 93       	push	r28
    3e18:	df 93       	push	r29
    3e1a:	8c 01       	movw	r16, r24
    3e1c:	eb 01       	movw	r28, r22
    3e1e:	7a 01       	movw	r14, r20
  int32_t rc = 0;

  FUNC_ENTRY;

  /* the first two bytes are the length of the string */
  if (enddata - (*pptr) > 1) /* enough length to read the integer? */
    3e20:	88 81       	ld	r24, Y
    3e22:	99 81       	ldd	r25, Y+1	; 0x01
    3e24:	9a 01       	movw	r18, r20
    3e26:	28 1b       	sub	r18, r24
    3e28:	39 0b       	sbc	r19, r25
    3e2a:	22 30       	cpi	r18, 0x02	; 2
    3e2c:	31 05       	cpc	r19, r1
    3e2e:	e4 f0       	brlt	.+56     	; 0x3e68 <readMQTTLenString+0x5a>
  {
    mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
    3e30:	cb 01       	movw	r24, r22
    3e32:	1f df       	rcall	.-450    	; 0x3c72 <readInt>
    3e34:	f8 01       	movw	r30, r16
    3e36:	62 83       	std	Z+2, r22	; 0x02
    3e38:	73 83       	std	Z+3, r23	; 0x03
    3e3a:	84 83       	std	Z+4, r24	; 0x04
    3e3c:	95 83       	std	Z+5, r25	; 0x05
	
    if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
    3e3e:	28 81       	ld	r18, Y
    3e40:	39 81       	ldd	r19, Y+1	; 0x01
    3e42:	a9 01       	movw	r20, r18
    3e44:	46 0f       	add	r20, r22
    3e46:	57 1f       	adc	r21, r23
    3e48:	e4 16       	cp	r14, r20
    3e4a:	f5 06       	cpc	r15, r21
    3e4c:	88 f0       	brcs	.+34     	; 0x3e70 <readMQTTLenString+0x62>
    {
      mqttstring->lenstring.data = (char*)*pptr;
    3e4e:	37 83       	std	Z+7, r19	; 0x07
    3e50:	26 83       	std	Z+6, r18	; 0x06
      *pptr += mqttstring->lenstring.len;
    3e52:	28 81       	ld	r18, Y
    3e54:	39 81       	ldd	r19, Y+1	; 0x01
    3e56:	62 0f       	add	r22, r18
    3e58:	73 1f       	adc	r23, r19
    3e5a:	79 83       	std	Y+1, r23	; 0x01
    3e5c:	68 83       	st	Y, r22
      rc = 1;
    3e5e:	61 e0       	ldi	r22, 0x01	; 1
    3e60:	70 e0       	ldi	r23, 0x00	; 0
    3e62:	80 e0       	ldi	r24, 0x00	; 0
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	07 c0       	rjmp	.+14     	; 0x3e76 <readMQTTLenString+0x68>
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int32_t readMQTTLenString(MQTTString* mqttstring, uint8_t** pptr, uint8_t* enddata)
{
  int32_t rc = 0;
    3e68:	60 e0       	ldi	r22, 0x00	; 0
    3e6a:	70 e0       	ldi	r23, 0x00	; 0
    3e6c:	cb 01       	movw	r24, r22
    3e6e:	03 c0       	rjmp	.+6      	; 0x3e76 <readMQTTLenString+0x68>
    3e70:	60 e0       	ldi	r22, 0x00	; 0
    3e72:	70 e0       	ldi	r23, 0x00	; 0
    3e74:	cb 01       	movw	r24, r22
      *pptr += mqttstring->lenstring.len;
      rc = 1;
    }
  }

  mqttstring->cstring = NULL;
    3e76:	f8 01       	movw	r30, r16
    3e78:	11 82       	std	Z+1, r1	; 0x01
    3e7a:	10 82       	st	Z, r1
  FUNC_EXIT_RC(rc);
  return rc;
}
    3e7c:	df 91       	pop	r29
    3e7e:	cf 91       	pop	r28
    3e80:	1f 91       	pop	r17
    3e82:	0f 91       	pop	r16
    3e84:	ff 90       	pop	r15
    3e86:	ef 90       	pop	r14
    3e88:	08 95       	ret

00003e8a <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int32_t MQTTstrlen(MQTTString mqttstring)
{
    3e8a:	cf 93       	push	r28
    3e8c:	df 93       	push	r29
    3e8e:	cd b7       	in	r28, 0x3d	; 61
    3e90:	de b7       	in	r29, 0x3e	; 62
    3e92:	28 97       	sbiw	r28, 0x08	; 8
    3e94:	0f b6       	in	r0, 0x3f	; 63
    3e96:	f8 94       	cli
    3e98:	de bf       	out	0x3e, r29	; 62
    3e9a:	0f be       	out	0x3f, r0	; 63
    3e9c:	cd bf       	out	0x3d, r28	; 61
    3e9e:	29 83       	std	Y+1, r18	; 0x01
    3ea0:	3a 83       	std	Y+2, r19	; 0x02
    3ea2:	4b 83       	std	Y+3, r20	; 0x03
    3ea4:	5c 83       	std	Y+4, r21	; 0x04
    3ea6:	6d 83       	std	Y+5, r22	; 0x05
    3ea8:	7e 83       	std	Y+6, r23	; 0x06
    3eaa:	8f 83       	std	Y+7, r24	; 0x07
    3eac:	98 87       	std	Y+8, r25	; 0x08
  int rc = 0;

  if (mqttstring.cstring)
    3eae:	e9 81       	ldd	r30, Y+1	; 0x01
    3eb0:	fa 81       	ldd	r31, Y+2	; 0x02
    3eb2:	30 97       	sbiw	r30, 0x00	; 0
    3eb4:	49 f0       	breq	.+18     	; 0x3ec8 <MQTTstrlen+0x3e>
    rc = strlen(mqttstring.cstring);
    3eb6:	df 01       	movw	r26, r30
    3eb8:	0d 90       	ld	r0, X+
    3eba:	00 20       	and	r0, r0
    3ebc:	e9 f7       	brne	.-6      	; 0x3eb8 <MQTTstrlen+0x2e>
    3ebe:	11 97       	sbiw	r26, 0x01	; 1
    3ec0:	bd 01       	movw	r22, r26
    3ec2:	6e 1b       	sub	r22, r30
    3ec4:	7f 0b       	sbc	r23, r31
    3ec6:	02 c0       	rjmp	.+4      	; 0x3ecc <MQTTstrlen+0x42>
  else
    rc = mqttstring.lenstring.len;
    3ec8:	6b 81       	ldd	r22, Y+3	; 0x03
    3eca:	7c 81       	ldd	r23, Y+4	; 0x04
	
  return rc;
    3ecc:	07 2e       	mov	r0, r23
    3ece:	00 0c       	add	r0, r0
    3ed0:	88 0b       	sbc	r24, r24
    3ed2:	99 0b       	sbc	r25, r25
}
    3ed4:	28 96       	adiw	r28, 0x08	; 8
    3ed6:	0f b6       	in	r0, 0x3f	; 63
    3ed8:	f8 94       	cli
    3eda:	de bf       	out	0x3e, r29	; 62
    3edc:	0f be       	out	0x3f, r0	; 63
    3ede:	cd bf       	out	0x3d, r28	; 61
    3ee0:	df 91       	pop	r29
    3ee2:	cf 91       	pop	r28
    3ee4:	08 95       	ret

00003ee6 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int32_t MQTTPacket_equals(MQTTString* a, char* bptr)
{
    3ee6:	0f 93       	push	r16
    3ee8:	1f 93       	push	r17
    3eea:	cf 93       	push	r28
    3eec:	df 93       	push	r29
    3eee:	eb 01       	movw	r28, r22
  int32_t alen = 0, blen = 0;
  char *aptr;
	
  if (a->cstring)
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	a0 81       	ld	r26, Z
    3ef4:	b1 81       	ldd	r27, Z+1	; 0x01
    3ef6:	10 97       	sbiw	r26, 0x00	; 0
    3ef8:	59 f0       	breq	.+22     	; 0x3f10 <MQTTPacket_equals+0x2a>
  {
    aptr = a->cstring;
    alen = strlen(a->cstring);
    3efa:	fd 01       	movw	r30, r26
    3efc:	01 90       	ld	r0, Z+
    3efe:	00 20       	and	r0, r0
    3f00:	e9 f7       	brne	.-6      	; 0x3efc <MQTTPacket_equals+0x16>
    3f02:	31 97       	sbiw	r30, 0x01	; 1
    3f04:	af 01       	movw	r20, r30
    3f06:	4a 1b       	sub	r20, r26
    3f08:	5b 0b       	sbc	r21, r27
    3f0a:	60 e0       	ldi	r22, 0x00	; 0
    3f0c:	70 e0       	ldi	r23, 0x00	; 0
    3f0e:	07 c0       	rjmp	.+14     	; 0x3f1e <MQTTPacket_equals+0x38>
  }
  else
  {
    aptr = a->lenstring.data;
    3f10:	fc 01       	movw	r30, r24
    3f12:	a6 81       	ldd	r26, Z+6	; 0x06
    3f14:	b7 81       	ldd	r27, Z+7	; 0x07
    alen = a->lenstring.len;
    3f16:	42 81       	ldd	r20, Z+2	; 0x02
    3f18:	53 81       	ldd	r21, Z+3	; 0x03
    3f1a:	64 81       	ldd	r22, Z+4	; 0x04
    3f1c:	75 81       	ldd	r23, Z+5	; 0x05
  }

  blen = strlen(bptr);
    3f1e:	fe 01       	movw	r30, r28
    3f20:	01 90       	ld	r0, Z+
    3f22:	00 20       	and	r0, r0
    3f24:	e9 f7       	brne	.-6      	; 0x3f20 <MQTTPacket_equals+0x3a>
    3f26:	31 97       	sbiw	r30, 0x01	; 1
    3f28:	8f 01       	movw	r16, r30
    3f2a:	0c 1b       	sub	r16, r28
    3f2c:	1d 0b       	sbc	r17, r29
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	30 e0       	ldi	r19, 0x00	; 0
	
  return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    3f32:	40 17       	cp	r20, r16
    3f34:	51 07       	cpc	r21, r17
    3f36:	62 07       	cpc	r22, r18
    3f38:	73 07       	cpc	r23, r19
    3f3a:	49 f4       	brne	.+18     	; 0x3f4e <MQTTPacket_equals+0x68>
    3f3c:	be 01       	movw	r22, r28
    3f3e:	cd 01       	movw	r24, r26
    3f40:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <strncmp>
    3f44:	89 2b       	or	r24, r25
    3f46:	31 f0       	breq	.+12     	; 0x3f54 <MQTTPacket_equals+0x6e>
    3f48:	60 e0       	ldi	r22, 0x00	; 0
    3f4a:	70 e0       	ldi	r23, 0x00	; 0
    3f4c:	05 c0       	rjmp	.+10     	; 0x3f58 <MQTTPacket_equals+0x72>
    3f4e:	60 e0       	ldi	r22, 0x00	; 0
    3f50:	70 e0       	ldi	r23, 0x00	; 0
    3f52:	02 c0       	rjmp	.+4      	; 0x3f58 <MQTTPacket_equals+0x72>
    3f54:	61 e0       	ldi	r22, 0x01	; 1
    3f56:	70 e0       	ldi	r23, 0x00	; 0
    3f58:	07 2e       	mov	r0, r23
    3f5a:	00 0c       	add	r0, r0
    3f5c:	88 0b       	sbc	r24, r24
    3f5e:	99 0b       	sbc	r25, r25
}
    3f60:	df 91       	pop	r29
    3f62:	cf 91       	pop	r28
    3f64:	1f 91       	pop	r17
    3f66:	0f 91       	pop	r16
    3f68:	08 95       	ret

00003f6a <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_publishLength(uint8_t qos, MQTTString topicName, int32_t payloadlen)
{
    3f6a:	bf 92       	push	r11
    3f6c:	cf 92       	push	r12
    3f6e:	df 92       	push	r13
    3f70:	ef 92       	push	r14
    3f72:	ff 92       	push	r15
    3f74:	0f 93       	push	r16
    3f76:	1f 93       	push	r17
    3f78:	cf 93       	push	r28
    3f7a:	df 93       	push	r29
    3f7c:	cd b7       	in	r28, 0x3d	; 61
    3f7e:	de b7       	in	r29, 0x3e	; 62
    3f80:	28 97       	sbiw	r28, 0x08	; 8
    3f82:	0f b6       	in	r0, 0x3f	; 63
    3f84:	f8 94       	cli
    3f86:	de bf       	out	0x3e, r29	; 62
    3f88:	0f be       	out	0x3f, r0	; 63
    3f8a:	cd bf       	out	0x3d, r28	; 61
    3f8c:	b8 2e       	mov	r11, r24
    3f8e:	b2 2f       	mov	r27, r18
    3f90:	a3 2f       	mov	r26, r19
    3f92:	f4 2f       	mov	r31, r20
    3f94:	e5 2f       	mov	r30, r21
    3f96:	86 2f       	mov	r24, r22
    3f98:	97 2f       	mov	r25, r23
  int32_t len = 2 + MQTTstrlen(topicName) + payloadlen;
    3f9a:	20 2f       	mov	r18, r16
    3f9c:	31 2f       	mov	r19, r17
    3f9e:	4b 2f       	mov	r20, r27
    3fa0:	5a 2f       	mov	r21, r26
    3fa2:	6f 2f       	mov	r22, r31
    3fa4:	7e 2f       	mov	r23, r30
    3fa6:	71 df       	rcall	.-286    	; 0x3e8a <MQTTstrlen>
    3fa8:	dc 01       	movw	r26, r24
    3faa:	cb 01       	movw	r24, r22
    3fac:	02 96       	adiw	r24, 0x02	; 2
    3fae:	a1 1d       	adc	r26, r1
    3fb0:	b1 1d       	adc	r27, r1
    3fb2:	bc 01       	movw	r22, r24
    3fb4:	cd 01       	movw	r24, r26
    3fb6:	6c 0d       	add	r22, r12
    3fb8:	7d 1d       	adc	r23, r13
    3fba:	8e 1d       	adc	r24, r14
    3fbc:	9f 1d       	adc	r25, r15
  
  if (qos > 0)
    3fbe:	bb 20       	and	r11, r11
    3fc0:	21 f0       	breq	.+8      	; 0x3fca <MQTTSerialize_publishLength+0x60>
    len += 2; /* packetid */
    3fc2:	6e 5f       	subi	r22, 0xFE	; 254
    3fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3fc6:	8f 4f       	sbci	r24, 0xFF	; 255
    3fc8:	9f 4f       	sbci	r25, 0xFF	; 255
	
  return len;
}
    3fca:	28 96       	adiw	r28, 0x08	; 8
    3fcc:	0f b6       	in	r0, 0x3f	; 63
    3fce:	f8 94       	cli
    3fd0:	de bf       	out	0x3e, r29	; 62
    3fd2:	0f be       	out	0x3f, r0	; 63
    3fd4:	cd bf       	out	0x3d, r28	; 61
    3fd6:	df 91       	pop	r29
    3fd8:	cf 91       	pop	r28
    3fda:	1f 91       	pop	r17
    3fdc:	0f 91       	pop	r16
    3fde:	ff 90       	pop	r15
    3fe0:	ef 90       	pop	r14
    3fe2:	df 90       	pop	r13
    3fe4:	cf 90       	pop	r12
    3fe6:	bf 90       	pop	r11
    3fe8:	08 95       	ret

00003fea <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int32_t MQTTSerialize_publish(uint8_t* buf, int32_t buflen, uint8_t dup, uint8_t qos, uint8_t retained, uint16_t packetid,
		MQTTString topicName, uint8_t* payload, int32_t payloadlen)
{
    3fea:	3f 92       	push	r3
    3fec:	4f 92       	push	r4
    3fee:	5f 92       	push	r5
    3ff0:	6f 92       	push	r6
    3ff2:	7f 92       	push	r7
    3ff4:	8f 92       	push	r8
    3ff6:	9f 92       	push	r9
    3ff8:	af 92       	push	r10
    3ffa:	bf 92       	push	r11
    3ffc:	cf 92       	push	r12
    3ffe:	df 92       	push	r13
    4000:	ef 92       	push	r14
    4002:	ff 92       	push	r15
    4004:	0f 93       	push	r16
    4006:	1f 93       	push	r17
    4008:	cf 93       	push	r28
    400a:	df 93       	push	r29
    400c:	00 d0       	rcall	.+0      	; 0x400e <MQTTSerialize_publish+0x24>
    400e:	1f 92       	push	r1
    4010:	cd b7       	in	r28, 0x3d	; 61
    4012:	de b7       	in	r29, 0x3e	; 62
    4014:	4c 01       	movw	r8, r24
    4016:	2a 01       	movw	r4, r20
    4018:	3b 01       	movw	r6, r22
    401a:	32 2e       	mov	r3, r18
    401c:	b0 2e       	mov	r11, r16
    401e:	ae 2c       	mov	r10, r14
    4020:	dc 82       	std	Y+4, r13	; 0x04
    4022:	cb 82       	std	Y+3, r12	; 0x03
  uint8_t *ptr = buf;
    4024:	9a 83       	std	Y+2, r25	; 0x02
    4026:	89 83       	std	Y+1, r24	; 0x01
  int32_t rem_len = 0;
  int32_t rc = 0;

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    4028:	cb a0       	ldd	r12, Y+35	; 0x23
    402a:	dc a0       	ldd	r13, Y+36	; 0x24
    402c:	ed a0       	ldd	r14, Y+37	; 0x25
    402e:	fe a0       	ldd	r15, Y+38	; 0x26
    4030:	09 8d       	ldd	r16, Y+25	; 0x19
    4032:	1a 8d       	ldd	r17, Y+26	; 0x1a
    4034:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4036:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4038:	4d 8d       	ldd	r20, Y+29	; 0x1d
    403a:	5e 8d       	ldd	r21, Y+30	; 0x1e
    403c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    403e:	78 a1       	ldd	r23, Y+32	; 0x20
    4040:	8b 2d       	mov	r24, r11
    4042:	93 df       	rcall	.-218    	; 0x3f6a <MQTTSerialize_publishLength>
    4044:	6b 01       	movw	r12, r22
    4046:	7c 01       	movw	r14, r24
    4048:	de dd       	rcall	.-1092   	; 0x3c06 <MQTTPacket_len>
    404a:	46 16       	cp	r4, r22
    404c:	57 06       	cpc	r5, r23
    404e:	68 06       	cpc	r6, r24
    4050:	79 06       	cpc	r7, r25
    4052:	0c f4       	brge	.+2      	; 0x4056 <MQTTSerialize_publish+0x6c>
    4054:	42 c0       	rjmp	.+132    	; 0x40da <MQTTSerialize_publish+0xf0>
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.bits.type = PUBLISH;
    4056:	60 e3       	ldi	r22, 0x30	; 48
  header.bits.dup = dup;
    4058:	30 fa       	bst	r3, 0
    405a:	63 f9       	bld	r22, 3
  header.bits.qos = qos;
    405c:	8b 2d       	mov	r24, r11
    405e:	83 70       	andi	r24, 0x03	; 3
    4060:	88 0f       	add	r24, r24
    4062:	69 7f       	andi	r22, 0xF9	; 249
    4064:	68 2b       	or	r22, r24
  header.bits.retain = retained;
    4066:	a0 fa       	bst	r10, 0
    4068:	60 f9       	bld	r22, 0
  writeChar(&ptr, header.byte); /* write header */
    406a:	ce 01       	movw	r24, r28
    406c:	01 96       	adiw	r24, 0x01	; 1
    406e:	1c de       	rcall	.-968    	; 0x3ca8 <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    4070:	b7 01       	movw	r22, r14
    4072:	a6 01       	movw	r20, r12
    4074:	89 81       	ldd	r24, Y+1	; 0x01
    4076:	9a 81       	ldd	r25, Y+2	; 0x02
    4078:	e8 dc       	rcall	.-1584   	; 0x3a4a <MQTTPacket_encode>
    407a:	29 81       	ldd	r18, Y+1	; 0x01
    407c:	3a 81       	ldd	r19, Y+2	; 0x02
    407e:	62 0f       	add	r22, r18
    4080:	73 1f       	adc	r23, r19
    4082:	7a 83       	std	Y+2, r23	; 0x02
    4084:	69 83       	std	Y+1, r22	; 0x01

  writeMQTTString(&ptr, topicName);
    4086:	09 8d       	ldd	r16, Y+25	; 0x19
    4088:	1a 8d       	ldd	r17, Y+26	; 0x1a
    408a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    408c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    408e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4090:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4092:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4094:	78 a1       	ldd	r23, Y+32	; 0x20
    4096:	ce 01       	movw	r24, r28
    4098:	01 96       	adiw	r24, 0x01	; 1
    409a:	66 de       	rcall	.-820    	; 0x3d68 <writeMQTTString>

  if (qos > 0)
    409c:	bb 20       	and	r11, r11
    409e:	41 f0       	breq	.+16     	; 0x40b0 <MQTTSerialize_publish+0xc6>
    writeInt(&ptr, packetid);
    40a0:	8b 81       	ldd	r24, Y+3	; 0x03
    40a2:	9c 81       	ldd	r25, Y+4	; 0x04
    40a4:	ac 01       	movw	r20, r24
    40a6:	60 e0       	ldi	r22, 0x00	; 0
    40a8:	70 e0       	ldi	r23, 0x00	; 0
    40aa:	ce 01       	movw	r24, r28
    40ac:	01 96       	adiw	r24, 0x01	; 1
    40ae:	06 de       	rcall	.-1012   	; 0x3cbc <writeInt>

  memcpy(ptr, payload, payloadlen);
    40b0:	4b a1       	ldd	r20, Y+35	; 0x23
    40b2:	5c a1       	ldd	r21, Y+36	; 0x24
    40b4:	69 a1       	ldd	r22, Y+33	; 0x21
    40b6:	7a a1       	ldd	r23, Y+34	; 0x22
    40b8:	89 81       	ldd	r24, Y+1	; 0x01
    40ba:	9a 81       	ldd	r25, Y+2	; 0x02
    40bc:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <memcpy>
  ptr += payloadlen;
    40c0:	69 81       	ldd	r22, Y+1	; 0x01
    40c2:	7a 81       	ldd	r23, Y+2	; 0x02
    40c4:	8b a1       	ldd	r24, Y+35	; 0x23
    40c6:	9c a1       	ldd	r25, Y+36	; 0x24
    40c8:	68 0f       	add	r22, r24
    40ca:	79 1f       	adc	r23, r25

  rc = ptr - buf;
    40cc:	68 19       	sub	r22, r8
    40ce:	79 09       	sbc	r23, r9
    40d0:	07 2e       	mov	r0, r23
    40d2:	00 0c       	add	r0, r0
    40d4:	88 0b       	sbc	r24, r24
    40d6:	99 0b       	sbc	r25, r25
    40d8:	04 c0       	rjmp	.+8      	; 0x40e2 <MQTTSerialize_publish+0xf8>

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    40da:	6e ef       	ldi	r22, 0xFE	; 254
    40dc:	7f ef       	ldi	r23, 0xFF	; 255
    40de:	8f ef       	ldi	r24, 0xFF	; 255
    40e0:	9f ef       	ldi	r25, 0xFF	; 255

  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    40e2:	0f 90       	pop	r0
    40e4:	0f 90       	pop	r0
    40e6:	0f 90       	pop	r0
    40e8:	0f 90       	pop	r0
    40ea:	df 91       	pop	r29
    40ec:	cf 91       	pop	r28
    40ee:	1f 91       	pop	r17
    40f0:	0f 91       	pop	r16
    40f2:	ff 90       	pop	r15
    40f4:	ef 90       	pop	r14
    40f6:	df 90       	pop	r13
    40f8:	cf 90       	pop	r12
    40fa:	bf 90       	pop	r11
    40fc:	af 90       	pop	r10
    40fe:	9f 90       	pop	r9
    4100:	8f 90       	pop	r8
    4102:	7f 90       	pop	r7
    4104:	6f 90       	pop	r6
    4106:	5f 90       	pop	r5
    4108:	4f 90       	pop	r4
    410a:	3f 90       	pop	r3
    410c:	08 95       	ret

0000410e <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_ack(uint8_t* buf, int32_t buflen, uint8_t packettype, uint8_t dup, uint16_t packetid)
{
    410e:	ef 92       	push	r14
    4110:	ff 92       	push	r15
    4112:	0f 93       	push	r16
    4114:	1f 93       	push	r17
    4116:	cf 93       	push	r28
    4118:	df 93       	push	r29
    411a:	1f 92       	push	r1
    411c:	1f 92       	push	r1
    411e:	cd b7       	in	r28, 0x3d	; 61
    4120:	de b7       	in	r29, 0x3e	; 62
    4122:	fc 01       	movw	r30, r24
  MQTTHeader header = {0};
  int32_t rc = 0;
  uint8_t *ptr = buf;
    4124:	fa 83       	std	Y+2, r31	; 0x02
    4126:	e9 83       	std	Y+1, r30	; 0x01

  FUNC_ENTRY;

  if (buflen < 4)
    4128:	44 30       	cpi	r20, 0x04	; 4
    412a:	51 05       	cpc	r21, r1
    412c:	61 05       	cpc	r22, r1
    412e:	71 05       	cpc	r23, r1
    4130:	7c f1       	brlt	.+94     	; 0x4190 <MQTTSerialize_ack+0x82>
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.bits.type = packettype;
    4132:	82 2f       	mov	r24, r18
    4134:	82 95       	swap	r24
    4136:	80 7f       	andi	r24, 0xF0	; 240
  header.bits.dup = dup;
    4138:	00 fb       	bst	r16, 0
    413a:	83 f9       	bld	r24, 3
  header.bits.qos = (packettype == PUBREL) ? 1 : 0;
    413c:	91 e0       	ldi	r25, 0x01	; 1
    413e:	26 30       	cpi	r18, 0x06	; 6
    4140:	09 f0       	breq	.+2      	; 0x4144 <MQTTSerialize_ack+0x36>
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	8f 01       	movw	r16, r30
    4146:	99 0f       	add	r25, r25
    4148:	68 2f       	mov	r22, r24
    414a:	69 7f       	andi	r22, 0xF9	; 249
    414c:	86 2f       	mov	r24, r22
    414e:	89 2b       	or	r24, r25
  writeChar(&ptr, header.byte); /* write header */
    4150:	68 2f       	mov	r22, r24
    4152:	ce 01       	movw	r24, r28
    4154:	01 96       	adiw	r24, 0x01	; 1
    4156:	a8 dd       	rcall	.-1200   	; 0x3ca8 <writeChar>

  ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
    4158:	42 e0       	ldi	r20, 0x02	; 2
    415a:	50 e0       	ldi	r21, 0x00	; 0
    415c:	60 e0       	ldi	r22, 0x00	; 0
    415e:	70 e0       	ldi	r23, 0x00	; 0
    4160:	89 81       	ldd	r24, Y+1	; 0x01
    4162:	9a 81       	ldd	r25, Y+2	; 0x02
    4164:	72 dc       	rcall	.-1820   	; 0x3a4a <MQTTPacket_encode>
    4166:	29 81       	ldd	r18, Y+1	; 0x01
    4168:	3a 81       	ldd	r19, Y+2	; 0x02
    416a:	62 0f       	add	r22, r18
    416c:	73 1f       	adc	r23, r19
    416e:	7a 83       	std	Y+2, r23	; 0x02
    4170:	69 83       	std	Y+1, r22	; 0x01
  writeInt(&ptr, packetid);
    4172:	a7 01       	movw	r20, r14
    4174:	60 e0       	ldi	r22, 0x00	; 0
    4176:	70 e0       	ldi	r23, 0x00	; 0
    4178:	ce 01       	movw	r24, r28
    417a:	01 96       	adiw	r24, 0x01	; 1
    417c:	9f dd       	rcall	.-1218   	; 0x3cbc <writeInt>
  rc = ptr - buf;
    417e:	69 81       	ldd	r22, Y+1	; 0x01
    4180:	7a 81       	ldd	r23, Y+2	; 0x02
    4182:	60 1b       	sub	r22, r16
    4184:	71 0b       	sbc	r23, r17
    4186:	07 2e       	mov	r0, r23
    4188:	00 0c       	add	r0, r0
    418a:	88 0b       	sbc	r24, r24
    418c:	99 0b       	sbc	r25, r25
    418e:	04 c0       	rjmp	.+8      	; 0x4198 <MQTTSerialize_ack+0x8a>

  FUNC_ENTRY;

  if (buflen < 4)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    4190:	6e ef       	ldi	r22, 0xFE	; 254
    4192:	7f ef       	ldi	r23, 0xFF	; 255
    4194:	8f ef       	ldi	r24, 0xFF	; 255
    4196:	9f ef       	ldi	r25, 0xFF	; 255
  writeInt(&ptr, packetid);
  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    4198:	0f 90       	pop	r0
    419a:	0f 90       	pop	r0
    419c:	df 91       	pop	r29
    419e:	cf 91       	pop	r28
    41a0:	1f 91       	pop	r17
    41a2:	0f 91       	pop	r16
    41a4:	ff 90       	pop	r15
    41a6:	ef 90       	pop	r14
    41a8:	08 95       	ret

000041aa <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
    41aa:	4f 92       	push	r4
    41ac:	5f 92       	push	r5
    41ae:	6f 92       	push	r6
    41b0:	7f 92       	push	r7
    41b2:	8f 92       	push	r8
    41b4:	9f 92       	push	r9
    41b6:	af 92       	push	r10
    41b8:	bf 92       	push	r11
    41ba:	cf 92       	push	r12
    41bc:	df 92       	push	r13
    41be:	ef 92       	push	r14
    41c0:	ff 92       	push	r15
    41c2:	cf 93       	push	r28
    41c4:	df 93       	push	r29
    41c6:	2b 01       	movw	r4, r22
    41c8:	3c 01       	movw	r6, r24
    41ca:	ea 01       	movw	r28, r20
  int32_t len = 2; /* packetid */

  for (int32_t i = 0; i < count; ++i)
    41cc:	c1 2c       	mov	r12, r1
    41ce:	d1 2c       	mov	r13, r1
    41d0:	76 01       	movw	r14, r12
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
  int32_t len = 2; /* packetid */
    41d2:	81 2c       	mov	r8, r1
    41d4:	91 2c       	mov	r9, r1
    41d6:	54 01       	movw	r10, r8
    41d8:	68 94       	set
    41da:	81 f8       	bld	r8, 1

  for (int32_t i = 0; i < count; ++i)
    41dc:	20 c0       	rjmp	.+64     	; 0x421e <MQTTSerialize_subscribeLength+0x74>
    len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
    41de:	f6 01       	movw	r30, r12
    41e0:	ee 0f       	add	r30, r30
    41e2:	ff 1f       	adc	r31, r31
    41e4:	ee 0f       	add	r30, r30
    41e6:	ff 1f       	adc	r31, r31
    41e8:	ee 0f       	add	r30, r30
    41ea:	ff 1f       	adc	r31, r31
    41ec:	ec 0f       	add	r30, r28
    41ee:	fd 1f       	adc	r31, r29
    41f0:	20 81       	ld	r18, Z
    41f2:	31 81       	ldd	r19, Z+1	; 0x01
    41f4:	42 81       	ldd	r20, Z+2	; 0x02
    41f6:	53 81       	ldd	r21, Z+3	; 0x03
    41f8:	64 81       	ldd	r22, Z+4	; 0x04
    41fa:	75 81       	ldd	r23, Z+5	; 0x05
    41fc:	86 81       	ldd	r24, Z+6	; 0x06
    41fe:	97 81       	ldd	r25, Z+7	; 0x07
    4200:	44 de       	rcall	.-888    	; 0x3e8a <MQTTstrlen>
    4202:	dc 01       	movw	r26, r24
    4204:	cb 01       	movw	r24, r22
    4206:	03 96       	adiw	r24, 0x03	; 3
    4208:	a1 1d       	adc	r26, r1
    420a:	b1 1d       	adc	r27, r1
    420c:	88 0e       	add	r8, r24
    420e:	99 1e       	adc	r9, r25
    4210:	aa 1e       	adc	r10, r26
    4212:	bb 1e       	adc	r11, r27
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
  int32_t len = 2; /* packetid */

  for (int32_t i = 0; i < count; ++i)
    4214:	8f ef       	ldi	r24, 0xFF	; 255
    4216:	c8 1a       	sub	r12, r24
    4218:	d8 0a       	sbc	r13, r24
    421a:	e8 0a       	sbc	r14, r24
    421c:	f8 0a       	sbc	r15, r24
    421e:	c4 14       	cp	r12, r4
    4220:	d5 04       	cpc	r13, r5
    4222:	e6 04       	cpc	r14, r6
    4224:	f7 04       	cpc	r15, r7
    4226:	dc f2       	brlt	.-74     	; 0x41de <MQTTSerialize_subscribeLength+0x34>
    len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
	
  return len;
}
    4228:	c5 01       	movw	r24, r10
    422a:	b4 01       	movw	r22, r8
    422c:	df 91       	pop	r29
    422e:	cf 91       	pop	r28
    4230:	ff 90       	pop	r15
    4232:	ef 90       	pop	r14
    4234:	df 90       	pop	r13
    4236:	cf 90       	pop	r12
    4238:	bf 90       	pop	r11
    423a:	af 90       	pop	r10
    423c:	9f 90       	pop	r9
    423e:	8f 90       	pop	r8
    4240:	7f 90       	pop	r7
    4242:	6f 90       	pop	r6
    4244:	5f 90       	pop	r5
    4246:	4f 90       	pop	r4
    4248:	08 95       	ret

0000424a <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int32_t MQTTSerialize_subscribe(uint8_t* buf, int32_t buflen, uint8_t dup, uint16_t packetid, int32_t count,
		MQTTString topicFilters[], int32_t requestedQoSs[])
{
    424a:	2f 92       	push	r2
    424c:	3f 92       	push	r3
    424e:	4f 92       	push	r4
    4250:	5f 92       	push	r5
    4252:	6f 92       	push	r6
    4254:	7f 92       	push	r7
    4256:	8f 92       	push	r8
    4258:	9f 92       	push	r9
    425a:	af 92       	push	r10
    425c:	bf 92       	push	r11
    425e:	cf 92       	push	r12
    4260:	df 92       	push	r13
    4262:	ef 92       	push	r14
    4264:	ff 92       	push	r15
    4266:	0f 93       	push	r16
    4268:	1f 93       	push	r17
    426a:	cf 93       	push	r28
    426c:	df 93       	push	r29
    426e:	cd b7       	in	r28, 0x3d	; 61
    4270:	de b7       	in	r29, 0x3e	; 62
    4272:	27 97       	sbiw	r28, 0x07	; 7
    4274:	0f b6       	in	r0, 0x3f	; 63
    4276:	f8 94       	cli
    4278:	de bf       	out	0x3e, r29	; 62
    427a:	0f be       	out	0x3f, r0	; 63
    427c:	cd bf       	out	0x3d, r28	; 61
    427e:	1c 01       	movw	r2, r24
    4280:	2a 01       	movw	r4, r20
    4282:	3b 01       	movw	r6, r22
    4284:	2f 83       	std	Y+7, r18	; 0x07
  uint8_t *ptr = buf;
    4286:	9a 83       	std	Y+2, r25	; 0x02
    4288:	89 83       	std	Y+1, r24	; 0x01
  int32_t rem_len = 0;
  int32_t rc = 0;

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
    428a:	a5 01       	movw	r20, r10
    428c:	c7 01       	movw	r24, r14
    428e:	b6 01       	movw	r22, r12
    4290:	8c df       	rcall	.-232    	; 0x41aa <MQTTSerialize_subscribeLength>
    4292:	6b 83       	std	Y+3, r22	; 0x03
    4294:	7c 83       	std	Y+4, r23	; 0x04
    4296:	8d 83       	std	Y+5, r24	; 0x05
    4298:	9e 83       	std	Y+6, r25	; 0x06
    429a:	b5 dc       	rcall	.-1686   	; 0x3c06 <MQTTPacket_len>
    429c:	46 16       	cp	r4, r22
    429e:	57 06       	cpc	r5, r23
    42a0:	68 06       	cpc	r6, r24
    42a2:	79 06       	cpc	r7, r25
    42a4:	0c f4       	brge	.+2      	; 0x42a8 <MQTTSerialize_subscribe+0x5e>
    42a6:	52 c0       	rjmp	.+164    	; 0x434c <MQTTSerialize_subscribe+0x102>
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.byte = 0;
  header.bits.type = SUBSCRIBE;
    42a8:	60 e8       	ldi	r22, 0x80	; 128
  header.bits.dup = dup;
    42aa:	8f 81       	ldd	r24, Y+7	; 0x07
    42ac:	80 fb       	bst	r24, 0
    42ae:	63 f9       	bld	r22, 3
  header.bits.qos = 1;
    42b0:	69 7f       	andi	r22, 0xF9	; 249
    42b2:	62 60       	ori	r22, 0x02	; 2
  writeChar(&ptr, header.byte); /* write header */
    42b4:	ce 01       	movw	r24, r28
    42b6:	01 96       	adiw	r24, 0x01	; 1
    42b8:	f7 dc       	rcall	.-1554   	; 0x3ca8 <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    42ba:	4b 81       	ldd	r20, Y+3	; 0x03
    42bc:	5c 81       	ldd	r21, Y+4	; 0x04
    42be:	6d 81       	ldd	r22, Y+5	; 0x05
    42c0:	7e 81       	ldd	r23, Y+6	; 0x06
    42c2:	89 81       	ldd	r24, Y+1	; 0x01
    42c4:	9a 81       	ldd	r25, Y+2	; 0x02
    42c6:	c1 db       	rcall	.-2174   	; 0x3a4a <MQTTPacket_encode>
    42c8:	29 81       	ldd	r18, Y+1	; 0x01
    42ca:	3a 81       	ldd	r19, Y+2	; 0x02
    42cc:	62 0f       	add	r22, r18
    42ce:	73 1f       	adc	r23, r19
    42d0:	7a 83       	std	Y+2, r23	; 0x02
    42d2:	69 83       	std	Y+1, r22	; 0x01

  writeInt(&ptr, packetid);
    42d4:	a8 01       	movw	r20, r16
    42d6:	60 e0       	ldi	r22, 0x00	; 0
    42d8:	70 e0       	ldi	r23, 0x00	; 0
    42da:	ce 01       	movw	r24, r28
    42dc:	01 96       	adiw	r24, 0x01	; 1
    42de:	ee dc       	rcall	.-1572   	; 0x3cbc <writeInt>

  for (int32_t i = 0; i < count; ++i)
    42e0:	41 2c       	mov	r4, r1
    42e2:	51 2c       	mov	r5, r1
    42e4:	32 01       	movw	r6, r4
    42e6:	24 c0       	rjmp	.+72     	; 0x4330 <MQTTSerialize_subscribe+0xe6>
  {
    writeMQTTString(&ptr, topicFilters[i]);
    42e8:	f2 01       	movw	r30, r4
    42ea:	ee 0f       	add	r30, r30
    42ec:	ff 1f       	adc	r31, r31
    42ee:	ee 0f       	add	r30, r30
    42f0:	ff 1f       	adc	r31, r31
    42f2:	ee 0f       	add	r30, r30
    42f4:	ff 1f       	adc	r31, r31
    42f6:	ea 0d       	add	r30, r10
    42f8:	fb 1d       	adc	r31, r11
    42fa:	00 81       	ld	r16, Z
    42fc:	11 81       	ldd	r17, Z+1	; 0x01
    42fe:	22 81       	ldd	r18, Z+2	; 0x02
    4300:	33 81       	ldd	r19, Z+3	; 0x03
    4302:	44 81       	ldd	r20, Z+4	; 0x04
    4304:	55 81       	ldd	r21, Z+5	; 0x05
    4306:	66 81       	ldd	r22, Z+6	; 0x06
    4308:	77 81       	ldd	r23, Z+7	; 0x07
    430a:	ce 01       	movw	r24, r28
    430c:	01 96       	adiw	r24, 0x01	; 1
    430e:	2c dd       	rcall	.-1448   	; 0x3d68 <writeMQTTString>
    writeChar(&ptr, requestedQoSs[i]);
    4310:	f2 01       	movw	r30, r4
    4312:	ee 0f       	add	r30, r30
    4314:	ff 1f       	adc	r31, r31
    4316:	ee 0f       	add	r30, r30
    4318:	ff 1f       	adc	r31, r31
    431a:	e8 0d       	add	r30, r8
    431c:	f9 1d       	adc	r31, r9
    431e:	60 81       	ld	r22, Z
    4320:	ce 01       	movw	r24, r28
    4322:	01 96       	adiw	r24, 0x01	; 1
    4324:	c1 dc       	rcall	.-1662   	; 0x3ca8 <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;

  writeInt(&ptr, packetid);

  for (int32_t i = 0; i < count; ++i)
    4326:	8f ef       	ldi	r24, 0xFF	; 255
    4328:	48 1a       	sub	r4, r24
    432a:	58 0a       	sbc	r5, r24
    432c:	68 0a       	sbc	r6, r24
    432e:	78 0a       	sbc	r7, r24
    4330:	4c 14       	cp	r4, r12
    4332:	5d 04       	cpc	r5, r13
    4334:	6e 04       	cpc	r6, r14
    4336:	7f 04       	cpc	r7, r15
    4338:	bc f2       	brlt	.-82     	; 0x42e8 <MQTTSerialize_subscribe+0x9e>
  {
    writeMQTTString(&ptr, topicFilters[i]);
    writeChar(&ptr, requestedQoSs[i]);
  }

  rc = ptr - buf;
    433a:	69 81       	ldd	r22, Y+1	; 0x01
    433c:	7a 81       	ldd	r23, Y+2	; 0x02
    433e:	62 19       	sub	r22, r2
    4340:	73 09       	sbc	r23, r3
    4342:	07 2e       	mov	r0, r23
    4344:	00 0c       	add	r0, r0
    4346:	88 0b       	sbc	r24, r24
    4348:	99 0b       	sbc	r25, r25
    434a:	04 c0       	rjmp	.+8      	; 0x4354 <MQTTSerialize_subscribe+0x10a>

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    434c:	6e ef       	ldi	r22, 0xFE	; 254
    434e:	7f ef       	ldi	r23, 0xFF	; 255
    4350:	8f ef       	ldi	r24, 0xFF	; 255
    4352:	9f ef       	ldi	r25, 0xFF	; 255

  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    4354:	27 96       	adiw	r28, 0x07	; 7
    4356:	0f b6       	in	r0, 0x3f	; 63
    4358:	f8 94       	cli
    435a:	de bf       	out	0x3e, r29	; 62
    435c:	0f be       	out	0x3f, r0	; 63
    435e:	cd bf       	out	0x3d, r28	; 61
    4360:	df 91       	pop	r29
    4362:	cf 91       	pop	r28
    4364:	1f 91       	pop	r17
    4366:	0f 91       	pop	r16
    4368:	ff 90       	pop	r15
    436a:	ef 90       	pop	r14
    436c:	df 90       	pop	r13
    436e:	cf 90       	pop	r12
    4370:	bf 90       	pop	r11
    4372:	af 90       	pop	r10
    4374:	9f 90       	pop	r9
    4376:	8f 90       	pop	r8
    4378:	7f 90       	pop	r7
    437a:	6f 90       	pop	r6
    437c:	5f 90       	pop	r5
    437e:	4f 90       	pop	r4
    4380:	3f 90       	pop	r3
    4382:	2f 90       	pop	r2
    4384:	08 95       	ret

00004386 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int32_t MQTTDeserialize_suback(uint16_t* packetid, int32_t maxcount, int32_t* count, int32_t grantedQoSs[], uint8_t* buf, int32_t buflen)
{
    4386:	4f 92       	push	r4
    4388:	5f 92       	push	r5
    438a:	6f 92       	push	r6
    438c:	7f 92       	push	r7
    438e:	8f 92       	push	r8
    4390:	9f 92       	push	r9
    4392:	af 92       	push	r10
    4394:	bf 92       	push	r11
    4396:	cf 92       	push	r12
    4398:	df 92       	push	r13
    439a:	ef 92       	push	r14
    439c:	ff 92       	push	r15
    439e:	0f 93       	push	r16
    43a0:	1f 93       	push	r17
    43a2:	cf 93       	push	r28
    43a4:	df 93       	push	r29
    43a6:	00 d0       	rcall	.+0      	; 0x43a8 <MQTTDeserialize_suback+0x22>
    43a8:	00 d0       	rcall	.+0      	; 0x43aa <MQTTDeserialize_suback+0x24>
    43aa:	cd b7       	in	r28, 0x3d	; 61
    43ac:	de b7       	in	r29, 0x3e	; 62
    43ae:	4c 01       	movw	r8, r24
    43b0:	2a 01       	movw	r4, r20
    43b2:	3b 01       	movw	r6, r22
    43b4:	69 01       	movw	r12, r18
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    43b6:	fa 82       	std	Y+2, r15	; 0x02
    43b8:	e9 82       	std	Y+1, r14	; 0x01
  int32_t rc = 0;
  int32_t mylen;

  FUNC_ENTRY;

  header.byte = readChar(&curdata);
    43ba:	ce 01       	movw	r24, r28
    43bc:	01 96       	adiw	r24, 0x01	; 1
    43be:	6c dc       	rcall	.-1832   	; 0x3c98 <readChar>
  if (header.bits.type != SUBACK)
    43c0:	80 7f       	andi	r24, 0xF0	; 240
    43c2:	80 39       	cpi	r24, 0x90	; 144
    43c4:	09 f0       	breq	.+2      	; 0x43c8 <MQTTDeserialize_suback+0x42>
    43c6:	53 c0       	rjmp	.+166    	; 0x446e <MQTTDeserialize_suback+0xe8>
    goto exit;

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    43c8:	be 01       	movw	r22, r28
    43ca:	6d 5f       	subi	r22, 0xFD	; 253
    43cc:	7f 4f       	sbci	r23, 0xFF	; 255
    43ce:	89 81       	ldd	r24, Y+1	; 0x01
    43d0:	9a 81       	ldd	r25, Y+2	; 0x02
    43d2:	47 dc       	rcall	.-1906   	; 0x3c62 <MQTTPacket_decodeBuf>
    43d4:	29 81       	ldd	r18, Y+1	; 0x01
    43d6:	3a 81       	ldd	r19, Y+2	; 0x02
    43d8:	26 0f       	add	r18, r22
    43da:	37 1f       	adc	r19, r23
    43dc:	3a 83       	std	Y+2, r19	; 0x02
    43de:	29 83       	std	Y+1, r18	; 0x01
  enddata = curdata + mylen;
    43e0:	ab 80       	ldd	r10, Y+3	; 0x03
    43e2:	bc 80       	ldd	r11, Y+4	; 0x04
    43e4:	a2 0e       	add	r10, r18
    43e6:	b3 1e       	adc	r11, r19

  if (enddata - curdata < 2)
    43e8:	a5 01       	movw	r20, r10
    43ea:	42 1b       	sub	r20, r18
    43ec:	53 0b       	sbc	r21, r19
    43ee:	42 30       	cpi	r20, 0x02	; 2
    43f0:	51 05       	cpc	r21, r1
    43f2:	0c f4       	brge	.+2      	; 0x43f6 <MQTTDeserialize_suback+0x70>
    43f4:	43 c0       	rjmp	.+134    	; 0x447c <MQTTDeserialize_suback+0xf6>
    goto exit;

  *packetid = readInt(&curdata);
    43f6:	ce 01       	movw	r24, r28
    43f8:	01 96       	adiw	r24, 0x01	; 1
    43fa:	3b dc       	rcall	.-1930   	; 0x3c72 <readInt>
    43fc:	f4 01       	movw	r30, r8
    43fe:	71 83       	std	Z+1, r23	; 0x01
    4400:	60 83       	st	Z, r22

  *count = 0;
    4402:	f6 01       	movw	r30, r12
    4404:	10 82       	st	Z, r1
    4406:	11 82       	std	Z+1, r1	; 0x01
    4408:	12 82       	std	Z+2, r1	; 0x02
    440a:	13 82       	std	Z+3, r1	; 0x03

  while (curdata < enddata)
    440c:	26 c0       	rjmp	.+76     	; 0x445a <MQTTDeserialize_suback+0xd4>
  {
    if (*count > maxcount)
    440e:	f6 01       	movw	r30, r12
    4410:	80 81       	ld	r24, Z
    4412:	91 81       	ldd	r25, Z+1	; 0x01
    4414:	a2 81       	ldd	r26, Z+2	; 0x02
    4416:	b3 81       	ldd	r27, Z+3	; 0x03
    4418:	48 16       	cp	r4, r24
    441a:	59 06       	cpc	r5, r25
    441c:	6a 06       	cpc	r6, r26
    441e:	7b 06       	cpc	r7, r27
    4420:	54 f1       	brlt	.+84     	; 0x4476 <MQTTDeserialize_suback+0xf0>
    {
      rc = -1;
      goto exit;
    }
    grantedQoSs[(*count)++] = readChar(&curdata);
    4422:	ac 01       	movw	r20, r24
    4424:	bd 01       	movw	r22, r26
    4426:	4f 5f       	subi	r20, 0xFF	; 255
    4428:	5f 4f       	sbci	r21, 0xFF	; 255
    442a:	6f 4f       	sbci	r22, 0xFF	; 255
    442c:	7f 4f       	sbci	r23, 0xFF	; 255
    442e:	40 83       	st	Z, r20
    4430:	51 83       	std	Z+1, r21	; 0x01
    4432:	62 83       	std	Z+2, r22	; 0x02
    4434:	73 83       	std	Z+3, r23	; 0x03
    4436:	88 0f       	add	r24, r24
    4438:	99 1f       	adc	r25, r25
    443a:	88 0f       	add	r24, r24
    443c:	99 1f       	adc	r25, r25
    443e:	78 01       	movw	r14, r16
    4440:	e8 0e       	add	r14, r24
    4442:	f9 1e       	adc	r15, r25
    4444:	ce 01       	movw	r24, r28
    4446:	01 96       	adiw	r24, 0x01	; 1
    4448:	27 dc       	rcall	.-1970   	; 0x3c98 <readChar>
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	a0 e0       	ldi	r26, 0x00	; 0
    444e:	b0 e0       	ldi	r27, 0x00	; 0
    4450:	f7 01       	movw	r30, r14
    4452:	80 83       	st	Z, r24
    4454:	91 83       	std	Z+1, r25	; 0x01
    4456:	a2 83       	std	Z+2, r26	; 0x02
    4458:	b3 83       	std	Z+3, r27	; 0x03

  *packetid = readInt(&curdata);

  *count = 0;

  while (curdata < enddata)
    445a:	89 81       	ldd	r24, Y+1	; 0x01
    445c:	9a 81       	ldd	r25, Y+2	; 0x02
    445e:	8a 15       	cp	r24, r10
    4460:	9b 05       	cpc	r25, r11
    4462:	a8 f2       	brcs	.-86     	; 0x440e <MQTTDeserialize_suback+0x88>
      goto exit;
    }
    grantedQoSs[(*count)++] = readChar(&curdata);
  }

  rc = 1;
    4464:	61 e0       	ldi	r22, 0x01	; 1
    4466:	70 e0       	ldi	r23, 0x00	; 0
    4468:	80 e0       	ldi	r24, 0x00	; 0
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	07 c0       	rjmp	.+14     	; 0x447c <MQTTDeserialize_suback+0xf6>
int32_t MQTTDeserialize_suback(uint16_t* packetid, int32_t maxcount, int32_t* count, int32_t grantedQoSs[], uint8_t* buf, int32_t buflen)
{
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
  uint8_t* enddata = NULL;
  int32_t rc = 0;
    446e:	60 e0       	ldi	r22, 0x00	; 0
    4470:	70 e0       	ldi	r23, 0x00	; 0
    4472:	cb 01       	movw	r24, r22
    4474:	03 c0       	rjmp	.+6      	; 0x447c <MQTTDeserialize_suback+0xf6>

  while (curdata < enddata)
  {
    if (*count > maxcount)
    {
      rc = -1;
    4476:	6f ef       	ldi	r22, 0xFF	; 255
    4478:	7f ef       	ldi	r23, 0xFF	; 255
    447a:	cb 01       	movw	r24, r22

  rc = 1;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    447c:	26 96       	adiw	r28, 0x06	; 6
    447e:	0f b6       	in	r0, 0x3f	; 63
    4480:	f8 94       	cli
    4482:	de bf       	out	0x3e, r29	; 62
    4484:	0f be       	out	0x3f, r0	; 63
    4486:	cd bf       	out	0x3d, r28	; 61
    4488:	df 91       	pop	r29
    448a:	cf 91       	pop	r28
    448c:	1f 91       	pop	r17
    448e:	0f 91       	pop	r16
    4490:	ff 90       	pop	r15
    4492:	ef 90       	pop	r14
    4494:	df 90       	pop	r13
    4496:	cf 90       	pop	r12
    4498:	bf 90       	pop	r11
    449a:	af 90       	pop	r10
    449c:	9f 90       	pop	r9
    449e:	8f 90       	pop	r8
    44a0:	7f 90       	pop	r7
    44a2:	6f 90       	pop	r6
    44a4:	5f 90       	pop	r5
    44a6:	4f 90       	pop	r4
    44a8:	08 95       	ret

000044aa <w5500_read>:
  n->mqttwrite = w5500_write;
  n->disconnect = w5500_disconnect;
}

int32_t w5500_read(Network* n, uint8_t* buffer, int32_t len, int32_t timeout_ms)
{
    44aa:	cf 92       	push	r12
    44ac:	df 92       	push	r13
    44ae:	ef 92       	push	r14
    44b0:	ff 92       	push	r15
    44b2:	0f 93       	push	r16
    44b4:	1f 93       	push	r17
    44b6:	cf 93       	push	r28
    44b8:	df 93       	push	r29
    44ba:	ec 01       	movw	r28, r24
    44bc:	8b 01       	movw	r16, r22
    44be:	69 01       	movw	r12, r18
    44c0:	7a 01       	movw	r14, r20
  if ((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket) > 0))
    44c2:	88 81       	ld	r24, Y
    44c4:	99 81       	ldd	r25, Y+1	; 0x01
    44c6:	aa 81       	ldd	r26, Y+2	; 0x02
    44c8:	bb 81       	ldd	r27, Y+3	; 0x03
    44ca:	88 0f       	add	r24, r24
    44cc:	99 1f       	adc	r25, r25
    44ce:	aa 1f       	adc	r26, r26
    44d0:	bb 1f       	adc	r27, r27
    44d2:	88 0f       	add	r24, r24
    44d4:	99 1f       	adc	r25, r25
    44d6:	aa 1f       	adc	r26, r26
    44d8:	bb 1f       	adc	r27, r27
    44da:	01 96       	adiw	r24, 0x01	; 1
    44dc:	a1 1d       	adc	r26, r1
    44de:	b1 1d       	adc	r27, r1
    44e0:	88 0f       	add	r24, r24
    44e2:	99 1f       	adc	r25, r25
    44e4:	aa 1f       	adc	r26, r26
    44e6:	bb 1f       	adc	r27, r27
    44e8:	88 0f       	add	r24, r24
    44ea:	99 1f       	adc	r25, r25
    44ec:	aa 1f       	adc	r26, r26
    44ee:	bb 1f       	adc	r27, r27
    44f0:	88 0f       	add	r24, r24
    44f2:	99 1f       	adc	r25, r25
    44f4:	aa 1f       	adc	r26, r26
    44f6:	bb 1f       	adc	r27, r27
    44f8:	bc 01       	movw	r22, r24
    44fa:	cd 01       	movw	r24, r26
    44fc:	7d 5f       	subi	r23, 0xFD	; 253
    44fe:	8f 4f       	sbci	r24, 0xFF	; 255
    4500:	9f 4f       	sbci	r25, 0xFF	; 255
    4502:	0e 94 a4 09 	call	0x1348	; 0x1348 <WIZCHIP_READ>
    4506:	87 31       	cpi	r24, 0x17	; 23
    4508:	59 f4       	brne	.+22     	; 0x4520 <w5500_read+0x76>
    450a:	88 81       	ld	r24, Y
    450c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <getSn_RX_RSR>
    4510:	89 2b       	or	r24, r25
    4512:	51 f0       	breq	.+20     	; 0x4528 <w5500_read+0x7e>
    return recv(n->my_socket, buffer, len);
    4514:	a6 01       	movw	r20, r12
    4516:	b8 01       	movw	r22, r16
    4518:	88 81       	ld	r24, Y
    451a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <recv>
    451e:	07 c0       	rjmp	.+14     	; 0x452e <w5500_read+0x84>
  
  return 0;
    4520:	60 e0       	ldi	r22, 0x00	; 0
    4522:	70 e0       	ldi	r23, 0x00	; 0
    4524:	cb 01       	movw	r24, r22
    4526:	03 c0       	rjmp	.+6      	; 0x452e <w5500_read+0x84>
    4528:	60 e0       	ldi	r22, 0x00	; 0
    452a:	70 e0       	ldi	r23, 0x00	; 0
    452c:	cb 01       	movw	r24, r22
}
    452e:	df 91       	pop	r29
    4530:	cf 91       	pop	r28
    4532:	1f 91       	pop	r17
    4534:	0f 91       	pop	r16
    4536:	ff 90       	pop	r15
    4538:	ef 90       	pop	r14
    453a:	df 90       	pop	r13
    453c:	cf 90       	pop	r12
    453e:	08 95       	ret

00004540 <w5500_write>:

int32_t w5500_write(Network* n, uint8_t* buffer, int32_t len, int32_t timeout_ms)
{
    4540:	cf 92       	push	r12
    4542:	df 92       	push	r13
    4544:	ef 92       	push	r14
    4546:	ff 92       	push	r15
    4548:	0f 93       	push	r16
    454a:	1f 93       	push	r17
    454c:	cf 93       	push	r28
    454e:	df 93       	push	r29
    4550:	ec 01       	movw	r28, r24
    4552:	8b 01       	movw	r16, r22
    4554:	69 01       	movw	r12, r18
    4556:	7a 01       	movw	r14, r20
  if (getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
    4558:	88 81       	ld	r24, Y
    455a:	99 81       	ldd	r25, Y+1	; 0x01
    455c:	aa 81       	ldd	r26, Y+2	; 0x02
    455e:	bb 81       	ldd	r27, Y+3	; 0x03
    4560:	88 0f       	add	r24, r24
    4562:	99 1f       	adc	r25, r25
    4564:	aa 1f       	adc	r26, r26
    4566:	bb 1f       	adc	r27, r27
    4568:	88 0f       	add	r24, r24
    456a:	99 1f       	adc	r25, r25
    456c:	aa 1f       	adc	r26, r26
    456e:	bb 1f       	adc	r27, r27
    4570:	01 96       	adiw	r24, 0x01	; 1
    4572:	a1 1d       	adc	r26, r1
    4574:	b1 1d       	adc	r27, r1
    4576:	88 0f       	add	r24, r24
    4578:	99 1f       	adc	r25, r25
    457a:	aa 1f       	adc	r26, r26
    457c:	bb 1f       	adc	r27, r27
    457e:	88 0f       	add	r24, r24
    4580:	99 1f       	adc	r25, r25
    4582:	aa 1f       	adc	r26, r26
    4584:	bb 1f       	adc	r27, r27
    4586:	88 0f       	add	r24, r24
    4588:	99 1f       	adc	r25, r25
    458a:	aa 1f       	adc	r26, r26
    458c:	bb 1f       	adc	r27, r27
    458e:	bc 01       	movw	r22, r24
    4590:	cd 01       	movw	r24, r26
    4592:	7d 5f       	subi	r23, 0xFD	; 253
    4594:	8f 4f       	sbci	r24, 0xFF	; 255
    4596:	9f 4f       	sbci	r25, 0xFF	; 255
    4598:	0e 94 a4 09 	call	0x1348	; 0x1348 <WIZCHIP_READ>
    459c:	87 31       	cpi	r24, 0x17	; 23
    459e:	31 f4       	brne	.+12     	; 0x45ac <w5500_write+0x6c>
    return send(n->my_socket, buffer, len);
    45a0:	a6 01       	movw	r20, r12
    45a2:	b8 01       	movw	r22, r16
    45a4:	88 81       	ld	r24, Y
    45a6:	0e 94 c6 04 	call	0x98c	; 0x98c <send>
    45aa:	03 c0       	rjmp	.+6      	; 0x45b2 <w5500_write+0x72>
  
  return 0;
    45ac:	60 e0       	ldi	r22, 0x00	; 0
    45ae:	70 e0       	ldi	r23, 0x00	; 0
    45b0:	cb 01       	movw	r24, r22
}
    45b2:	df 91       	pop	r29
    45b4:	cf 91       	pop	r28
    45b6:	1f 91       	pop	r17
    45b8:	0f 91       	pop	r16
    45ba:	ff 90       	pop	r15
    45bc:	ef 90       	pop	r14
    45be:	df 90       	pop	r13
    45c0:	cf 90       	pop	r12
    45c2:	08 95       	ret

000045c4 <w5500_disconnect>:

void w5500_disconnect(Network* n)
{
  disconnect(n->my_socket);
    45c4:	fc 01       	movw	r30, r24
    45c6:	80 81       	ld	r24, Z
    45c8:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <disconnect>
    45cc:	08 95       	ret

000045ce <expired>:
  MilliTimer++;
}
*/

int8_t expired(Timer* timer)
{
    45ce:	cf 92       	push	r12
    45d0:	df 92       	push	r13
    45d2:	ef 92       	push	r14
    45d4:	ff 92       	push	r15
  int32_t left = (timer->end_time) - millis();
    45d6:	fc 01       	movw	r30, r24
    45d8:	c4 80       	ldd	r12, Z+4	; 0x04
    45da:	d5 80       	ldd	r13, Z+5	; 0x05
    45dc:	e6 80       	ldd	r14, Z+6	; 0x06
    45de:	f7 80       	ldd	r15, Z+7	; 0x07
    45e0:	88 d3       	rcall	.+1808   	; 0x4cf2 <millis>
    45e2:	a7 01       	movw	r20, r14
    45e4:	96 01       	movw	r18, r12
    45e6:	26 1b       	sub	r18, r22
    45e8:	37 0b       	sbc	r19, r23
    45ea:	48 0b       	sbc	r20, r24
    45ec:	59 0b       	sbc	r21, r25
    45ee:	da 01       	movw	r26, r20
    45f0:	c9 01       	movw	r24, r18
  return (left < 0);
    45f2:	88 27       	eor	r24, r24
    45f4:	b7 fd       	sbrc	r27, 7
    45f6:	83 95       	inc	r24
    45f8:	99 27       	eor	r25, r25
    45fa:	aa 27       	eor	r26, r26
    45fc:	bb 27       	eor	r27, r27
}
    45fe:	ff 90       	pop	r15
    4600:	ef 90       	pop	r14
    4602:	df 90       	pop	r13
    4604:	cf 90       	pop	r12
    4606:	08 95       	ret

00004608 <countdown_ms>:

void countdown_ms(Timer* timer, uint32_t timeout)
{
    4608:	cf 92       	push	r12
    460a:	df 92       	push	r13
    460c:	ef 92       	push	r14
    460e:	ff 92       	push	r15
    4610:	cf 93       	push	r28
    4612:	df 93       	push	r29
    4614:	ec 01       	movw	r28, r24
    4616:	6a 01       	movw	r12, r20
    4618:	7b 01       	movw	r14, r22
	timer->end_time = millis() + timeout;
    461a:	6b d3       	rcall	.+1750   	; 0x4cf2 <millis>
    461c:	c6 0e       	add	r12, r22
    461e:	d7 1e       	adc	r13, r23
    4620:	e8 1e       	adc	r14, r24
    4622:	f9 1e       	adc	r15, r25
    4624:	cc 82       	std	Y+4, r12	; 0x04
    4626:	dd 82       	std	Y+5, r13	; 0x05
    4628:	ee 82       	std	Y+6, r14	; 0x06
    462a:	ff 82       	std	Y+7, r15	; 0x07
}
    462c:	df 91       	pop	r29
    462e:	cf 91       	pop	r28
    4630:	ff 90       	pop	r15
    4632:	ef 90       	pop	r14
    4634:	df 90       	pop	r13
    4636:	cf 90       	pop	r12
    4638:	08 95       	ret

0000463a <countdown>:

void countdown(Timer* timer, uint32_t timeout)
{
    463a:	8f 92       	push	r8
    463c:	9f 92       	push	r9
    463e:	af 92       	push	r10
    4640:	bf 92       	push	r11
    4642:	cf 92       	push	r12
    4644:	df 92       	push	r13
    4646:	ef 92       	push	r14
    4648:	ff 92       	push	r15
    464a:	cf 93       	push	r28
    464c:	df 93       	push	r29
    464e:	ec 01       	movw	r28, r24
    4650:	4a 01       	movw	r8, r20
    4652:	5b 01       	movw	r10, r22
  timer->end_time = millis() + (timeout * 1000UL);
    4654:	4e d3       	rcall	.+1692   	; 0x4cf2 <millis>
    4656:	6b 01       	movw	r12, r22
    4658:	7c 01       	movw	r14, r24
    465a:	a8 ee       	ldi	r26, 0xE8	; 232
    465c:	b3 e0       	ldi	r27, 0x03	; 3
    465e:	a5 01       	movw	r20, r10
    4660:	94 01       	movw	r18, r8
    4662:	0e 94 40 35 	call	0x6a80	; 0x6a80 <__muluhisi3>
    4666:	dc 01       	movw	r26, r24
    4668:	cb 01       	movw	r24, r22
    466a:	8c 0d       	add	r24, r12
    466c:	9d 1d       	adc	r25, r13
    466e:	ae 1d       	adc	r26, r14
    4670:	bf 1d       	adc	r27, r15
    4672:	8c 83       	std	Y+4, r24	; 0x04
    4674:	9d 83       	std	Y+5, r25	; 0x05
    4676:	ae 83       	std	Y+6, r26	; 0x06
    4678:	bf 83       	std	Y+7, r27	; 0x07
}
    467a:	df 91       	pop	r29
    467c:	cf 91       	pop	r28
    467e:	ff 90       	pop	r15
    4680:	ef 90       	pop	r14
    4682:	df 90       	pop	r13
    4684:	cf 90       	pop	r12
    4686:	bf 90       	pop	r11
    4688:	af 90       	pop	r10
    468a:	9f 90       	pop	r9
    468c:	8f 90       	pop	r8
    468e:	08 95       	ret

00004690 <left_ms>:

int32_t left_ms(Timer* timer)
{
    4690:	cf 92       	push	r12
    4692:	df 92       	push	r13
    4694:	ef 92       	push	r14
    4696:	ff 92       	push	r15
  int32_t left = timer->end_time - millis();
    4698:	fc 01       	movw	r30, r24
    469a:	c4 80       	ldd	r12, Z+4	; 0x04
    469c:	d5 80       	ldd	r13, Z+5	; 0x05
    469e:	e6 80       	ldd	r14, Z+6	; 0x06
    46a0:	f7 80       	ldd	r15, Z+7	; 0x07
    46a2:	27 d3       	rcall	.+1614   	; 0x4cf2 <millis>
  return (left < 0) ? 0 : left;
    46a4:	a7 01       	movw	r20, r14
    46a6:	96 01       	movw	r18, r12
    46a8:	26 1b       	sub	r18, r22
    46aa:	37 0b       	sbc	r19, r23
    46ac:	48 0b       	sbc	r20, r24
    46ae:	59 0b       	sbc	r21, r25
    46b0:	ca 01       	movw	r24, r20
    46b2:	b9 01       	movw	r22, r18
    46b4:	1a f4       	brpl	.+6      	; 0x46bc <left_ms+0x2c>
    46b6:	60 e0       	ldi	r22, 0x00	; 0
    46b8:	70 e0       	ldi	r23, 0x00	; 0
    46ba:	cb 01       	movw	r24, r22
}
    46bc:	ff 90       	pop	r15
    46be:	ef 90       	pop	r14
    46c0:	df 90       	pop	r13
    46c2:	cf 90       	pop	r12
    46c4:	08 95       	ret

000046c6 <InitTimer>:

void InitTimer(Timer* timer)
{
  timer->end_time = 0;
    46c6:	fc 01       	movw	r30, r24
    46c8:	14 82       	std	Z+4, r1	; 0x04
    46ca:	15 82       	std	Z+5, r1	; 0x05
    46cc:	16 82       	std	Z+6, r1	; 0x06
    46ce:	17 82       	std	Z+7, r1	; 0x07
    46d0:	08 95       	ret

000046d2 <NewNetwork>:
}


void NewNetwork(Network* n)
{
    46d2:	fc 01       	movw	r30, r24
  //n->my_socket = 0; //initialized outside actually..
  n->mqttread = w5500_read;
    46d4:	85 e5       	ldi	r24, 0x55	; 85
    46d6:	92 e2       	ldi	r25, 0x22	; 34
    46d8:	95 83       	std	Z+5, r25	; 0x05
    46da:	84 83       	std	Z+4, r24	; 0x04
  n->mqttwrite = w5500_write;
    46dc:	80 ea       	ldi	r24, 0xA0	; 160
    46de:	92 e2       	ldi	r25, 0x22	; 34
    46e0:	97 83       	std	Z+7, r25	; 0x07
    46e2:	86 83       	std	Z+6, r24	; 0x06
  n->disconnect = w5500_disconnect;
    46e4:	82 ee       	ldi	r24, 0xE2	; 226
    46e6:	92 e2       	ldi	r25, 0x22	; 34
    46e8:	91 87       	std	Z+9, r25	; 0x09
    46ea:	80 87       	std	Z+8, r24	; 0x08
    46ec:	08 95       	ret

000046ee <ConnectNetwork>:
{
  disconnect(n->my_socket);
}

int32_t ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
    46ee:	ef 92       	push	r14
    46f0:	ff 92       	push	r15
    46f2:	0f 93       	push	r16
    46f4:	1f 93       	push	r17
    46f6:	cf 93       	push	r28
    46f8:	df 93       	push	r29
    46fa:	ec 01       	movw	r28, r24
    46fc:	8b 01       	movw	r16, r22
    46fe:	7a 01       	movw	r14, r20
  socket(n->my_socket, Sn_MR_TCP, 12345, 0);
    4700:	20 e0       	ldi	r18, 0x00	; 0
    4702:	49 e3       	ldi	r20, 0x39	; 57
    4704:	50 e3       	ldi	r21, 0x30	; 48
    4706:	61 e0       	ldi	r22, 0x01	; 1
    4708:	88 81       	ld	r24, Y
    470a:	0e 94 82 02 	call	0x504	; 0x504 <socket>
  connect(n->my_socket, ip, port);
    470e:	a7 01       	movw	r20, r14
    4710:	b8 01       	movw	r22, r16
    4712:	88 81       	ld	r24, Y
    4714:	0e 94 7f 03 	call	0x6fe	; 0x6fe <connect>

  return 0;
}
    4718:	60 e0       	ldi	r22, 0x00	; 0
    471a:	70 e0       	ldi	r23, 0x00	; 0
    471c:	cb 01       	movw	r24, r22
    471e:	df 91       	pop	r29
    4720:	cf 91       	pop	r28
    4722:	1f 91       	pop	r17
    4724:	0f 91       	pop	r16
    4726:	ff 90       	pop	r15
    4728:	ef 90       	pop	r14
    472a:	08 95       	ret

0000472c <appDataConf>:
    472c:	10 92 5b 06 	sts	0x065B, r1	; 0x80065b <appDataReqBusy>
    4730:	08 95       	ret

00004732 <cs_sel>:
    4732:	8b b1       	in	r24, 0x0b	; 11
    4734:	8f 7b       	andi	r24, 0xBF	; 191
    4736:	8b b9       	out	0x0b, r24	; 11
    4738:	08 95       	ret

0000473a <cs_desel>:
    473a:	8b b1       	in	r24, 0x0b	; 11
    473c:	80 64       	ori	r24, 0x40	; 64
    473e:	8b b9       	out	0x0b, r24	; 11
    4740:	08 95       	ret

00004742 <spi_rb>:
    4742:	1e bc       	out	0x2e, r1	; 46
    4744:	0d b4       	in	r0, 0x2d	; 45
    4746:	07 fe       	sbrs	r0, 7
    4748:	fd cf       	rjmp	.-6      	; 0x4744 <spi_rb+0x2>
    474a:	8e b5       	in	r24, 0x2e	; 46
    474c:	08 95       	ret

0000474e <spi_wb>:
    474e:	8e bd       	out	0x2e, r24	; 46
    4750:	0d b4       	in	r0, 0x2d	; 45
    4752:	07 fe       	sbrs	r0, 7
    4754:	fd cf       	rjmp	.-6      	; 0x4750 <spi_wb+0x2>
    4756:	08 95       	ret

00004758 <spi_rb_burst>:
    4758:	fc 01       	movw	r30, r24
    475a:	20 e0       	ldi	r18, 0x00	; 0
    475c:	30 e0       	ldi	r19, 0x00	; 0
    475e:	09 c0       	rjmp	.+18     	; 0x4772 <spi_rb_burst+0x1a>
    4760:	1e bc       	out	0x2e, r1	; 46
    4762:	0d b4       	in	r0, 0x2d	; 45
    4764:	07 fe       	sbrs	r0, 7
    4766:	fd cf       	rjmp	.-6      	; 0x4762 <spi_rb_burst+0xa>
    4768:	8e b5       	in	r24, 0x2e	; 46
    476a:	80 83       	st	Z, r24
    476c:	2f 5f       	subi	r18, 0xFF	; 255
    476e:	3f 4f       	sbci	r19, 0xFF	; 255
    4770:	31 96       	adiw	r30, 0x01	; 1
    4772:	26 17       	cp	r18, r22
    4774:	37 07       	cpc	r19, r23
    4776:	a0 f3       	brcs	.-24     	; 0x4760 <spi_rb_burst+0x8>
    4778:	08 95       	ret

0000477a <spi_wb_burst>:
    477a:	fc 01       	movw	r30, r24
    477c:	20 e0       	ldi	r18, 0x00	; 0
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	0a c0       	rjmp	.+20     	; 0x4796 <spi_wb_burst+0x1c>
    4782:	cf 01       	movw	r24, r30
    4784:	01 96       	adiw	r24, 0x01	; 1
    4786:	40 81       	ld	r20, Z
    4788:	4e bd       	out	0x2e, r20	; 46
    478a:	0d b4       	in	r0, 0x2d	; 45
    478c:	07 fe       	sbrs	r0, 7
    478e:	fd cf       	rjmp	.-6      	; 0x478a <spi_wb_burst+0x10>
    4790:	2f 5f       	subi	r18, 0xFF	; 255
    4792:	3f 4f       	sbci	r19, 0xFF	; 255
    4794:	fc 01       	movw	r30, r24
    4796:	26 17       	cp	r18, r22
    4798:	37 07       	cpc	r19, r23
    479a:	98 f3       	brcs	.-26     	; 0x4782 <spi_wb_burst+0x8>
    479c:	08 95       	ret

0000479e <appSendData>:
    479e:	cf 93       	push	r28
    47a0:	df 93       	push	r29
    47a2:	80 91 5b 06 	lds	r24, 0x065B	; 0x80065b <appDataReqBusy>
    47a6:	81 11       	cpse	r24, r1
    47a8:	24 c0       	rjmp	.+72     	; 0x47f2 <appSendData+0x54>
    47aa:	c0 91 80 05 	lds	r28, 0x0580	; 0x800580 <appUartBufferPtr>
    47ae:	cc 23       	and	r28, r28
    47b0:	01 f1       	breq	.+64     	; 0x47f2 <appSendData+0x54>
    47b2:	4c 2f       	mov	r20, r28
    47b4:	50 e0       	ldi	r21, 0x00	; 0
    47b6:	61 e8       	ldi	r22, 0x81	; 129
    47b8:	75 e0       	ldi	r23, 0x05	; 5
    47ba:	8e ee       	ldi	r24, 0xEE	; 238
    47bc:	95 e0       	ldi	r25, 0x05	; 5
    47be:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <memcpy>
    47c2:	ec e5       	ldi	r30, 0x5C	; 92
    47c4:	f6 e0       	ldi	r31, 0x06	; 6
    47c6:	16 82       	std	Z+6, r1	; 0x06
    47c8:	15 82       	std	Z+5, r1	; 0x05
    47ca:	d1 e0       	ldi	r29, 0x01	; 1
    47cc:	d7 83       	std	Z+7, r29	; 0x07
    47ce:	d0 87       	std	Z+8, r29	; 0x08
    47d0:	82 e0       	ldi	r24, 0x02	; 2
    47d2:	81 87       	std	Z+9, r24	; 0x09
    47d4:	8e ee       	ldi	r24, 0xEE	; 238
    47d6:	95 e0       	ldi	r25, 0x05	; 5
    47d8:	93 87       	std	Z+11, r25	; 0x0b
    47da:	82 87       	std	Z+10, r24	; 0x0a
    47dc:	c4 87       	std	Z+12, r28	; 0x0c
    47de:	86 e9       	ldi	r24, 0x96	; 150
    47e0:	93 e2       	ldi	r25, 0x23	; 35
    47e2:	96 87       	std	Z+14, r25	; 0x0e
    47e4:	85 87       	std	Z+13, r24	; 0x0d
    47e6:	cf 01       	movw	r24, r30
    47e8:	d7 d7       	rcall	.+4014   	; 0x5798 <NWK_DataReq>
    47ea:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <appUartBufferPtr>
    47ee:	d0 93 5b 06 	sts	0x065B, r29	; 0x80065b <appDataReqBusy>
    47f2:	df 91       	pop	r29
    47f4:	cf 91       	pop	r28
    47f6:	08 95       	ret

000047f8 <appTimerHandler>:
    47f8:	d2 cf       	rjmp	.-92     	; 0x479e <appSendData>
    47fa:	08 95       	ret

000047fc <messageArrived>:
    47fc:	af 92       	push	r10
    47fe:	bf 92       	push	r11
    4800:	cf 92       	push	r12
    4802:	df 92       	push	r13
    4804:	ef 92       	push	r14
    4806:	ff 92       	push	r15
    4808:	0f 93       	push	r16
    480a:	1f 93       	push	r17
    480c:	cf 93       	push	r28
    480e:	df 93       	push	r29
    4810:	cd b7       	in	r28, 0x3d	; 61
    4812:	de b7       	in	r29, 0x3e	; 62
    4814:	cf 58       	subi	r28, 0x8F	; 143
    4816:	d1 40       	sbci	r29, 0x01	; 1
    4818:	0f b6       	in	r0, 0x3f	; 63
    481a:	f8 94       	cli
    481c:	de bf       	out	0x3e, r29	; 62
    481e:	0f be       	out	0x3f, r0	; 63
    4820:	cd bf       	out	0x3d, r28	; 61
    4822:	20 91 c3 02 	lds	r18, 0x02C3	; 0x8002c3 <ClientID+0x5b>
    4826:	30 91 c4 02 	lds	r19, 0x02C4	; 0x8002c4 <ClientID+0x5c>
    482a:	3a 83       	std	Y+2, r19	; 0x02
    482c:	29 83       	std	Y+1, r18	; 0x01
    482e:	fe 01       	movw	r30, r28
    4830:	33 96       	adiw	r30, 0x03	; 3
    4832:	4e e3       	ldi	r20, 0x3E	; 62
    4834:	df 01       	movw	r26, r30
    4836:	1d 92       	st	X+, r1
    4838:	4a 95       	dec	r20
    483a:	e9 f7       	brne	.-6      	; 0x4836 <messageArrived+0x3a>
    483c:	7e 01       	movw	r14, r28
    483e:	b1 e4       	ldi	r27, 0x41	; 65
    4840:	eb 0e       	add	r14, r27
    4842:	f1 1c       	adc	r15, r1
    4844:	f7 01       	movw	r30, r14
    4846:	31 83       	std	Z+1, r19	; 0x01
    4848:	20 83       	st	Z, r18
    484a:	32 96       	adiw	r30, 0x02	; 2
    484c:	4e e7       	ldi	r20, 0x7E	; 126
    484e:	df 01       	movw	r26, r30
    4850:	1d 92       	st	X+, r1
    4852:	4a 95       	dec	r20
    4854:	e9 f7       	brne	.-6      	; 0x4850 <messageArrived+0x54>
    4856:	8e 01       	movw	r16, r28
    4858:	0f 53       	subi	r16, 0x3F	; 63
    485a:	1f 4f       	sbci	r17, 0xFF	; 255
    485c:	f8 01       	movw	r30, r16
    485e:	21 93       	st	Z+, r18
    4860:	31 93       	st	Z+, r19
    4862:	2a ea       	ldi	r18, 0xAA	; 170
    4864:	df 01       	movw	r26, r30
    4866:	1d 92       	st	X+, r1
    4868:	2a 95       	dec	r18
    486a:	e9 f7       	brne	.-6      	; 0x4866 <messageArrived+0x6a>
    486c:	fc 01       	movw	r30, r24
    486e:	a0 80       	ld	r10, Z
    4870:	b1 80       	ldd	r11, Z+1	; 0x01
    4872:	02 80       	ldd	r0, Z+2	; 0x02
    4874:	f3 81       	ldd	r31, Z+3	; 0x03
    4876:	e0 2d       	mov	r30, r0
    4878:	42 81       	ldd	r20, Z+2	; 0x02
    487a:	53 81       	ldd	r21, Z+3	; 0x03
    487c:	64 81       	ldd	r22, Z+4	; 0x04
    487e:	75 81       	ldd	r23, Z+5	; 0x05
    4880:	86 81       	ldd	r24, Z+6	; 0x06
    4882:	97 81       	ldd	r25, Z+7	; 0x07
    4884:	bc 01       	movw	r22, r24
    4886:	9e 01       	movw	r18, r28
    4888:	2f 5f       	subi	r18, 0xFF	; 255
    488a:	3f 4f       	sbci	r19, 0xFF	; 255
    488c:	69 01       	movw	r12, r18
    488e:	c9 01       	movw	r24, r18
    4890:	0e 94 d7 35 	call	0x6bae	; 0x6bae <strncpy>
    4894:	d5 01       	movw	r26, r10
    4896:	15 96       	adiw	r26, 0x05	; 5
    4898:	6d 91       	ld	r22, X+
    489a:	7c 91       	ld	r23, X
    489c:	16 97       	sbiw	r26, 0x06	; 6
    489e:	17 96       	adiw	r26, 0x07	; 7
    48a0:	4d 91       	ld	r20, X+
    48a2:	5c 91       	ld	r21, X
    48a4:	18 97       	sbiw	r26, 0x08	; 8
    48a6:	c7 01       	movw	r24, r14
    48a8:	0e 94 d7 35 	call	0x6bae	; 0x6bae <strncpy>
    48ac:	ff 92       	push	r15
    48ae:	ef 92       	push	r14
    48b0:	df 92       	push	r13
    48b2:	cf 92       	push	r12
    48b4:	83 e7       	ldi	r24, 0x73	; 115
    48b6:	93 e0       	ldi	r25, 0x03	; 3
    48b8:	9f 93       	push	r25
    48ba:	8f 93       	push	r24
    48bc:	1f 93       	push	r17
    48be:	0f 93       	push	r16
    48c0:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <sprintf_P>
    48c4:	c8 01       	movw	r24, r16
    48c6:	9c d5       	rcall	.+2872   	; 0x5400 <HAL_UARTWriteString>
    48c8:	6b e7       	ldi	r22, 0x7B	; 123
    48ca:	70 e0       	ldi	r23, 0x00	; 0
    48cc:	c8 01       	movw	r24, r16
    48ce:	0e 94 b7 35 	call	0x6b6e	; 0x6b6e <strchr>
    48d2:	0f b6       	in	r0, 0x3f	; 63
    48d4:	f8 94       	cli
    48d6:	de bf       	out	0x3e, r29	; 62
    48d8:	0f be       	out	0x3f, r0	; 63
    48da:	cd bf       	out	0x3d, r28	; 61
    48dc:	89 2b       	or	r24, r25
    48de:	09 f4       	brne	.+2      	; 0x48e2 <messageArrived+0xe6>
    48e0:	9b c0       	rjmp	.+310    	; 0x4a18 <messageArrived+0x21c>
    48e2:	ce 01       	movw	r24, r28
    48e4:	86 57       	subi	r24, 0x76	; 118
    48e6:	9e 4f       	sbci	r25, 0xFE	; 254
    48e8:	9f 93       	push	r25
    48ea:	8f 93       	push	r24
    48ec:	02 96       	adiw	r24, 0x02	; 2
    48ee:	9f 93       	push	r25
    48f0:	8f 93       	push	r24
    48f2:	40 97       	sbiw	r24, 0x10	; 16
    48f4:	9f 93       	push	r25
    48f6:	8f 93       	push	r24
    48f8:	42 96       	adiw	r24, 0x12	; 18
    48fa:	9f 93       	push	r25
    48fc:	8f 93       	push	r24
    48fe:	04 55       	subi	r16, 0x54	; 84
    4900:	1f 4f       	sbci	r17, 0xFF	; 255
    4902:	1f 93       	push	r17
    4904:	0f 93       	push	r16
    4906:	82 e5       	ldi	r24, 0x52	; 82
    4908:	93 e0       	ldi	r25, 0x03	; 3
    490a:	9f 93       	push	r25
    490c:	8f 93       	push	r24
    490e:	c7 01       	movw	r24, r14
    4910:	9f 93       	push	r25
    4912:	ef 92       	push	r14
    4914:	0e 94 55 36 	call	0x6caa	; 0x6caa <sscanf>
    4918:	61 e6       	ldi	r22, 0x61	; 97
    491a:	73 e0       	ldi	r23, 0x03	; 3
    491c:	c8 01       	movw	r24, r16
    491e:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <strstr>
    4922:	0f b6       	in	r0, 0x3f	; 63
    4924:	f8 94       	cli
    4926:	de bf       	out	0x3e, r29	; 62
    4928:	0f be       	out	0x3f, r0	; 63
    492a:	cd bf       	out	0x3d, r28	; 61
    492c:	89 2b       	or	r24, r25
    492e:	09 f1       	breq	.+66     	; 0x4972 <messageArrived+0x176>
    4930:	c2 57       	subi	r28, 0x72	; 114
    4932:	de 4f       	sbci	r29, 0xFE	; 254
    4934:	88 81       	ld	r24, Y
    4936:	ce 58       	subi	r28, 0x8E	; 142
    4938:	d1 40       	sbci	r29, 0x01	; 1
    493a:	c1 57       	subi	r28, 0x71	; 113
    493c:	de 4f       	sbci	r29, 0xFE	; 254
    493e:	98 81       	ld	r25, Y
    4940:	cf 58       	subi	r28, 0x8F	; 143
    4942:	d1 40       	sbci	r29, 0x01	; 1
    4944:	0c 5a       	subi	r16, 0xAC	; 172
    4946:	11 09       	sbc	r17, r1
    4948:	d8 01       	movw	r26, r16
    494a:	1c 92       	st	X, r1
    494c:	9f 93       	push	r25
    494e:	8f 93       	push	r24
    4950:	8c e4       	ldi	r24, 0x4C	; 76
    4952:	93 e0       	ldi	r25, 0x03	; 3
    4954:	9f 93       	push	r25
    4956:	8f 93       	push	r24
    4958:	1f 93       	push	r17
    495a:	0f 93       	push	r16
    495c:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <sprintf_P>
    4960:	c8 01       	movw	r24, r16
    4962:	4e d5       	rcall	.+2716   	; 0x5400 <HAL_UARTWriteString>
    4964:	0f 90       	pop	r0
    4966:	0f 90       	pop	r0
    4968:	0f 90       	pop	r0
    496a:	0f 90       	pop	r0
    496c:	0f 90       	pop	r0
    496e:	0f 90       	pop	r0
    4970:	2a c0       	rjmp	.+84     	; 0x49c6 <messageArrived+0x1ca>
    4972:	61 e6       	ldi	r22, 0x61	; 97
    4974:	73 e0       	ldi	r23, 0x03	; 3
    4976:	ce 01       	movw	r24, r28
    4978:	84 58       	subi	r24, 0x84	; 132
    497a:	9e 4f       	sbci	r25, 0xFE	; 254
    497c:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <strstr>
    4980:	89 2b       	or	r24, r25
    4982:	09 f1       	breq	.+66     	; 0x49c6 <messageArrived+0x1ca>
    4984:	c4 57       	subi	r28, 0x74	; 116
    4986:	de 4f       	sbci	r29, 0xFE	; 254
    4988:	88 81       	ld	r24, Y
    498a:	cc 58       	subi	r28, 0x8C	; 140
    498c:	d1 40       	sbci	r29, 0x01	; 1
    498e:	c3 57       	subi	r28, 0x73	; 115
    4990:	de 4f       	sbci	r29, 0xFE	; 254
    4992:	98 81       	ld	r25, Y
    4994:	cd 58       	subi	r28, 0x8D	; 141
    4996:	d1 40       	sbci	r29, 0x01	; 1
    4998:	8e 01       	movw	r16, r28
    499a:	0f 53       	subi	r16, 0x3F	; 63
    499c:	1f 4f       	sbci	r17, 0xFF	; 255
    499e:	f8 01       	movw	r30, r16
    49a0:	10 82       	st	Z, r1
    49a2:	9f 93       	push	r25
    49a4:	8f 93       	push	r24
    49a6:	85 e2       	ldi	r24, 0x25	; 37
    49a8:	93 e0       	ldi	r25, 0x03	; 3
    49aa:	9f 93       	push	r25
    49ac:	8f 93       	push	r24
    49ae:	1f 93       	push	r17
    49b0:	0f 93       	push	r16
    49b2:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <sprintf_P>
    49b6:	c8 01       	movw	r24, r16
    49b8:	23 d5       	rcall	.+2630   	; 0x5400 <HAL_UARTWriteString>
    49ba:	0f 90       	pop	r0
    49bc:	0f 90       	pop	r0
    49be:	0f 90       	pop	r0
    49c0:	0f 90       	pop	r0
    49c2:	0f 90       	pop	r0
    49c4:	0f 90       	pop	r0
    49c6:	6c e6       	ldi	r22, 0x6C	; 108
    49c8:	73 e0       	ldi	r23, 0x03	; 3
    49ca:	ce 01       	movw	r24, r28
    49cc:	83 59       	subi	r24, 0x93	; 147
    49ce:	9e 4f       	sbci	r25, 0xFE	; 254
    49d0:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <strstr>
    49d4:	89 2b       	or	r24, r25
    49d6:	61 f0       	breq	.+24     	; 0x49f0 <messageArrived+0x1f4>
    49d8:	c2 57       	subi	r28, 0x72	; 114
    49da:	de 4f       	sbci	r29, 0xFE	; 254
    49dc:	88 81       	ld	r24, Y
    49de:	99 81       	ldd	r25, Y+1	; 0x01
    49e0:	ce 58       	subi	r28, 0x8E	; 142
    49e2:	d1 40       	sbci	r29, 0x01	; 1
    49e4:	01 97       	sbiw	r24, 0x01	; 1
    49e6:	c1 f4       	brne	.+48     	; 0x4a18 <messageArrived+0x21c>
    49e8:	86 e7       	ldi	r24, 0x76	; 118
    49ea:	93 e0       	ldi	r25, 0x03	; 3
    49ec:	09 d5       	rcall	.+2578   	; 0x5400 <HAL_UARTWriteString>
    49ee:	14 c0       	rjmp	.+40     	; 0x4a18 <messageArrived+0x21c>
    49f0:	6c e6       	ldi	r22, 0x6C	; 108
    49f2:	73 e0       	ldi	r23, 0x03	; 3
    49f4:	ce 01       	movw	r24, r28
    49f6:	84 58       	subi	r24, 0x84	; 132
    49f8:	9e 4f       	sbci	r25, 0xFE	; 254
    49fa:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <strstr>
    49fe:	89 2b       	or	r24, r25
    4a00:	59 f0       	breq	.+22     	; 0x4a18 <messageArrived+0x21c>
    4a02:	c4 57       	subi	r28, 0x74	; 116
    4a04:	de 4f       	sbci	r29, 0xFE	; 254
    4a06:	88 81       	ld	r24, Y
    4a08:	99 81       	ldd	r25, Y+1	; 0x01
    4a0a:	cc 58       	subi	r28, 0x8C	; 140
    4a0c:	d1 40       	sbci	r29, 0x01	; 1
    4a0e:	01 97       	sbiw	r24, 0x01	; 1
    4a10:	19 f4       	brne	.+6      	; 0x4a18 <messageArrived+0x21c>
    4a12:	86 e7       	ldi	r24, 0x76	; 118
    4a14:	93 e0       	ldi	r25, 0x03	; 3
    4a16:	f4 d4       	rcall	.+2536   	; 0x5400 <HAL_UARTWriteString>
    4a18:	c1 57       	subi	r28, 0x71	; 113
    4a1a:	de 4f       	sbci	r29, 0xFE	; 254
    4a1c:	0f b6       	in	r0, 0x3f	; 63
    4a1e:	f8 94       	cli
    4a20:	de bf       	out	0x3e, r29	; 62
    4a22:	0f be       	out	0x3f, r0	; 63
    4a24:	cd bf       	out	0x3d, r28	; 61
    4a26:	df 91       	pop	r29
    4a28:	cf 91       	pop	r28
    4a2a:	1f 91       	pop	r17
    4a2c:	0f 91       	pop	r16
    4a2e:	ff 90       	pop	r15
    4a30:	ef 90       	pop	r14
    4a32:	df 90       	pop	r13
    4a34:	cf 90       	pop	r12
    4a36:	bf 90       	pop	r11
    4a38:	af 90       	pop	r10
    4a3a:	08 95       	ret

00004a3c <appInit>:
    4a3c:	81 e0       	ldi	r24, 0x01	; 1
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	e3 d5       	rcall	.+3014   	; 0x5608 <NWK_SetAddr>
    4a42:	88 e7       	ldi	r24, 0x78	; 120
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	e7 d5       	rcall	.+3022   	; 0x5616 <NWK_SetPanId>
    4a48:	8f e0       	ldi	r24, 0x0F	; 15
    4a4a:	0e 94 2d 33 	call	0x665a	; 0x665a <PHY_SetChannel>
    4a4e:	81 e0       	ldi	r24, 0x01	; 1
    4a50:	0e 94 29 33 	call	0x6652	; 0x6652 <PHY_SetRxState>
    4a54:	61 e0       	ldi	r22, 0x01	; 1
    4a56:	76 e2       	ldi	r23, 0x26	; 38
    4a58:	81 e0       	ldi	r24, 0x01	; 1
    4a5a:	e4 d5       	rcall	.+3016   	; 0x5624 <NWK_OpenEndpoint>
    4a5c:	ed e6       	ldi	r30, 0x6D	; 109
    4a5e:	f6 e0       	ldi	r31, 0x06	; 6
    4a60:	84 e1       	ldi	r24, 0x14	; 20
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	a0 e0       	ldi	r26, 0x00	; 0
    4a66:	b0 e0       	ldi	r27, 0x00	; 0
    4a68:	86 83       	std	Z+6, r24	; 0x06
    4a6a:	97 83       	std	Z+7, r25	; 0x07
    4a6c:	a0 87       	std	Z+8, r26	; 0x08
    4a6e:	b1 87       	std	Z+9, r27	; 0x09
    4a70:	12 86       	std	Z+10, r1	; 0x0a
    4a72:	8c ef       	ldi	r24, 0xFC	; 252
    4a74:	93 e2       	ldi	r25, 0x23	; 35
    4a76:	94 87       	std	Z+12, r25	; 0x0c
    4a78:	83 87       	std	Z+11, r24	; 0x0b
    4a7a:	08 95       	ret

00004a7c <APP_TaskHandler>:
    4a7c:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <appState>
    4a80:	81 11       	cpse	r24, r1
    4a82:	04 c0       	rjmp	.+8      	; 0x4a8c <APP_TaskHandler+0x10>
    4a84:	db df       	rcall	.-74     	; 0x4a3c <appInit>
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <appState>
    4a8c:	08 95       	ret

00004a8e <HAL_UartBytesReceived>:
    4a8e:	ff 92       	push	r15
    4a90:	0f 93       	push	r16
    4a92:	1f 93       	push	r17
    4a94:	cf 93       	push	r28
    4a96:	df 93       	push	r29
    4a98:	8c 01       	movw	r16, r24
    4a9a:	c0 e0       	ldi	r28, 0x00	; 0
    4a9c:	d0 e0       	ldi	r29, 0x00	; 0
    4a9e:	14 c0       	rjmp	.+40     	; 0x4ac8 <HAL_UartBytesReceived+0x3a>
    4aa0:	bb d4       	rcall	.+2422   	; 0x5418 <HAL_UartReadByte>
    4aa2:	f8 2e       	mov	r15, r24
    4aa4:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <appUartBufferPtr>
    4aa8:	8d 36       	cpi	r24, 0x6D	; 109
    4aaa:	09 f4       	brne	.+2      	; 0x4aae <HAL_UartBytesReceived+0x20>
    4aac:	78 de       	rcall	.-784    	; 0x479e <appSendData>
    4aae:	e0 91 80 05 	lds	r30, 0x0580	; 0x800580 <appUartBufferPtr>
    4ab2:	ed 36       	cpi	r30, 0x6D	; 109
    4ab4:	40 f4       	brcc	.+16     	; 0x4ac6 <HAL_UartBytesReceived+0x38>
    4ab6:	81 e0       	ldi	r24, 0x01	; 1
    4ab8:	8e 0f       	add	r24, r30
    4aba:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <appUartBufferPtr>
    4abe:	f0 e0       	ldi	r31, 0x00	; 0
    4ac0:	ef 57       	subi	r30, 0x7F	; 127
    4ac2:	fa 4f       	sbci	r31, 0xFA	; 250
    4ac4:	f0 82       	st	Z, r15
    4ac6:	21 96       	adiw	r28, 0x01	; 1
    4ac8:	c0 17       	cp	r28, r16
    4aca:	d1 07       	cpc	r29, r17
    4acc:	48 f3       	brcs	.-46     	; 0x4aa0 <HAL_UartBytesReceived+0x12>
    4ace:	8d e6       	ldi	r24, 0x6D	; 109
    4ad0:	96 e0       	ldi	r25, 0x06	; 6
    4ad2:	0e 94 62 34 	call	0x68c4	; 0x68c4 <SYS_TimerStop>
    4ad6:	8d e6       	ldi	r24, 0x6D	; 109
    4ad8:	96 e0       	ldi	r25, 0x06	; 6
    4ada:	0e 94 ac 34 	call	0x6958	; 0x6958 <SYS_TimerStart>
    4ade:	df 91       	pop	r29
    4ae0:	cf 91       	pop	r28
    4ae2:	1f 91       	pop	r17
    4ae4:	0f 91       	pop	r16
    4ae6:	ff 90       	pop	r15
    4ae8:	08 95       	ret

00004aea <mqtt_pub>:
    4aea:	af 92       	push	r10
    4aec:	bf 92       	push	r11
    4aee:	cf 92       	push	r12
    4af0:	df 92       	push	r13
    4af2:	ef 92       	push	r14
    4af4:	ff 92       	push	r15
    4af6:	0f 93       	push	r16
    4af8:	1f 93       	push	r17
    4afa:	cf 93       	push	r28
    4afc:	df 93       	push	r29
    4afe:	cd b7       	in	r28, 0x3d	; 61
    4b00:	de b7       	in	r29, 0x3e	; 62
    4b02:	29 97       	sbiw	r28, 0x09	; 9
    4b04:	0f b6       	in	r0, 0x3f	; 63
    4b06:	f8 94       	cli
    4b08:	de bf       	out	0x3e, r29	; 62
    4b0a:	0f be       	out	0x3f, r0	; 63
    4b0c:	cd bf       	out	0x3d, r28	; 61
    4b0e:	8c 01       	movw	r16, r24
    4b10:	7b 01       	movw	r14, r22
    4b12:	6a 01       	movw	r12, r20
    4b14:	59 01       	movw	r10, r18
    4b16:	a8 95       	wdr
    4b18:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <mqtt_pub_count.3622>
    4b1c:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <mqtt_pub_count.3622+0x1>
    4b20:	a0 91 5c 04 	lds	r26, 0x045C	; 0x80045c <mqtt_pub_count.3622+0x2>
    4b24:	b0 91 5d 04 	lds	r27, 0x045D	; 0x80045d <mqtt_pub_count.3622+0x3>
    4b28:	01 96       	adiw	r24, 0x01	; 1
    4b2a:	a1 1d       	adc	r26, r1
    4b2c:	b1 1d       	adc	r27, r1
    4b2e:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <mqtt_pub_count.3622>
    4b32:	90 93 5b 04 	sts	0x045B, r25	; 0x80045b <mqtt_pub_count.3622+0x1>
    4b36:	a0 93 5c 04 	sts	0x045C, r26	; 0x80045c <mqtt_pub_count.3622+0x2>
    4b3a:	b0 93 5d 04 	sts	0x045D, r27	; 0x80045d <mqtt_pub_count.3622+0x3>
    4b3e:	bf 93       	push	r27
    4b40:	af 93       	push	r26
    4b42:	9f 93       	push	r25
    4b44:	8f 93       	push	r24
    4b46:	81 e1       	ldi	r24, 0x11	; 17
    4b48:	93 e0       	ldi	r25, 0x03	; 3
    4b4a:	9f 93       	push	r25
    4b4c:	8f 93       	push	r24
    4b4e:	0e 94 00 36 	call	0x6c00	; 0x6c00 <printf_P>
    4b52:	19 82       	std	Y+1, r1	; 0x01
    4b54:	80 91 6e 23 	lds	r24, 0x236E	; 0x80236e <mes_id>
    4b58:	90 91 6f 23 	lds	r25, 0x236F	; 0x80236f <mes_id+0x1>
    4b5c:	9c 01       	movw	r18, r24
    4b5e:	2f 5f       	subi	r18, 0xFF	; 255
    4b60:	3f 4f       	sbci	r19, 0xFF	; 255
    4b62:	30 93 6f 23 	sts	0x236F, r19	; 0x80236f <mes_id+0x1>
    4b66:	20 93 6e 23 	sts	0x236E, r18	; 0x80236e <mes_id>
    4b6a:	9d 83       	std	Y+5, r25	; 0x05
    4b6c:	8c 83       	std	Y+4, r24	; 0x04
    4b6e:	b9 86       	std	Y+9, r11	; 0x09
    4b70:	a8 86       	std	Y+8, r10	; 0x08
    4b72:	df 82       	std	Y+7, r13	; 0x07
    4b74:	ce 82       	std	Y+6, r12	; 0x06
    4b76:	ae 01       	movw	r20, r28
    4b78:	4f 5f       	subi	r20, 0xFF	; 255
    4b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b7c:	b7 01       	movw	r22, r14
    4b7e:	c8 01       	movw	r24, r16
    4b80:	0e 94 08 19 	call	0x3210	; 0x3210 <MQTTPublish>
    4b84:	0f 90       	pop	r0
    4b86:	0f 90       	pop	r0
    4b88:	0f 90       	pop	r0
    4b8a:	0f 90       	pop	r0
    4b8c:	0f 90       	pop	r0
    4b8e:	0f 90       	pop	r0
    4b90:	67 2b       	or	r22, r23
    4b92:	68 2b       	or	r22, r24
    4b94:	69 2b       	or	r22, r25
    4b96:	59 f4       	brne	.+22     	; 0x4bae <mqtt_pub+0xc4>
    4b98:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <mqtt_err_cnt.3623>
    4b9c:	89 e0       	ldi	r24, 0x09	; 9
    4b9e:	93 e0       	ldi	r25, 0x03	; 3
    4ba0:	9f 93       	push	r25
    4ba2:	8f 93       	push	r24
    4ba4:	0e 94 00 36 	call	0x6c00	; 0x6c00 <printf_P>
    4ba8:	0f 90       	pop	r0
    4baa:	0f 90       	pop	r0
    4bac:	19 c0       	rjmp	.+50     	; 0x4be0 <mqtt_pub+0xf6>
    4bae:	8e ef       	ldi	r24, 0xFE	; 254
    4bb0:	92 e0       	ldi	r25, 0x02	; 2
    4bb2:	9f 93       	push	r25
    4bb4:	8f 93       	push	r24
    4bb6:	0e 94 00 36 	call	0x6c00	; 0x6c00 <printf_P>
    4bba:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <mqtt_err_cnt.3623>
    4bbe:	91 e0       	ldi	r25, 0x01	; 1
    4bc0:	98 0f       	add	r25, r24
    4bc2:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <mqtt_err_cnt.3623>
    4bc6:	0f 90       	pop	r0
    4bc8:	0f 90       	pop	r0
    4bca:	85 31       	cpi	r24, 0x15	; 21
    4bcc:	48 f0       	brcs	.+18     	; 0x4be0 <mqtt_pub+0xf6>
    4bce:	81 ec       	ldi	r24, 0xC1	; 193
    4bd0:	92 e0       	ldi	r25, 0x02	; 2
    4bd2:	9f 93       	push	r25
    4bd4:	8f 93       	push	r24
    4bd6:	0e 94 00 36 	call	0x6c00	; 0x6c00 <printf_P>
    4bda:	0f 90       	pop	r0
    4bdc:	0f 90       	pop	r0
    4bde:	ff cf       	rjmp	.-2      	; 0x4bde <mqtt_pub+0xf4>
    4be0:	29 96       	adiw	r28, 0x09	; 9
    4be2:	0f b6       	in	r0, 0x3f	; 63
    4be4:	f8 94       	cli
    4be6:	de bf       	out	0x3e, r29	; 62
    4be8:	0f be       	out	0x3f, r0	; 63
    4bea:	cd bf       	out	0x3d, r28	; 61
    4bec:	df 91       	pop	r29
    4bee:	cf 91       	pop	r28
    4bf0:	1f 91       	pop	r17
    4bf2:	0f 91       	pop	r16
    4bf4:	ff 90       	pop	r15
    4bf6:	ef 90       	pop	r14
    4bf8:	df 90       	pop	r13
    4bfa:	cf 90       	pop	r12
    4bfc:	bf 90       	pop	r11
    4bfe:	af 90       	pop	r10
    4c00:	08 95       	ret

00004c02 <appDataInd>:
    4c02:	0f 93       	push	r16
    4c04:	1f 93       	push	r17
    4c06:	cf 93       	push	r28
    4c08:	8c 01       	movw	r16, r24
    4c0a:	e0 e0       	ldi	r30, 0x00	; 0
    4c0c:	f5 e0       	ldi	r31, 0x05	; 5
    4c0e:	10 82       	st	Z, r1
    4c10:	dc 01       	movw	r26, r24
    4c12:	18 96       	adiw	r26, 0x08	; 8
    4c14:	8c 91       	ld	r24, X
    4c16:	18 97       	sbiw	r26, 0x08	; 8
    4c18:	8f 93       	push	r24
    4c1a:	17 96       	adiw	r26, 0x07	; 7
    4c1c:	8c 91       	ld	r24, X
    4c1e:	8f 93       	push	r24
    4c20:	8e e5       	ldi	r24, 0x5E	; 94
    4c22:	91 e0       	ldi	r25, 0x01	; 1
    4c24:	9f 93       	push	r25
    4c26:	8f 93       	push	r24
    4c28:	ff 93       	push	r31
    4c2a:	ef 93       	push	r30
    4c2c:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <sprintf_P>
    4c30:	9c 01       	movw	r18, r24
    4c32:	40 e0       	ldi	r20, 0x00	; 0
    4c34:	55 e0       	ldi	r21, 0x05	; 5
    4c36:	6e e7       	ldi	r22, 0x7E	; 126
    4c38:	73 e0       	ldi	r23, 0x03	; 3
    4c3a:	83 ec       	ldi	r24, 0xC3	; 195
    4c3c:	94 e0       	ldi	r25, 0x04	; 4
    4c3e:	55 df       	rcall	.-342    	; 0x4aea <mqtt_pub>
    4c40:	0f 90       	pop	r0
    4c42:	0f 90       	pop	r0
    4c44:	0f 90       	pop	r0
    4c46:	0f 90       	pop	r0
    4c48:	0f 90       	pop	r0
    4c4a:	0f 90       	pop	r0
    4c4c:	c0 e0       	ldi	r28, 0x00	; 0
    4c4e:	0a c0       	rjmp	.+20     	; 0x4c64 <appDataInd+0x62>
    4c50:	d8 01       	movw	r26, r16
    4c52:	17 96       	adiw	r26, 0x07	; 7
    4c54:	ed 91       	ld	r30, X+
    4c56:	fc 91       	ld	r31, X
    4c58:	18 97       	sbiw	r26, 0x08	; 8
    4c5a:	ec 0f       	add	r30, r28
    4c5c:	f1 1d       	adc	r31, r1
    4c5e:	80 81       	ld	r24, Z
    4c60:	a8 d3       	rcall	.+1872   	; 0x53b2 <HAL_UartWriteByte>
    4c62:	cf 5f       	subi	r28, 0xFF	; 255
    4c64:	f8 01       	movw	r30, r16
    4c66:	81 85       	ldd	r24, Z+9	; 0x09
    4c68:	c8 17       	cp	r28, r24
    4c6a:	90 f3       	brcs	.-28     	; 0x4c50 <appDataInd+0x4e>
    4c6c:	81 e0       	ldi	r24, 0x01	; 1
    4c6e:	cf 91       	pop	r28
    4c70:	1f 91       	pop	r17
    4c72:	0f 91       	pop	r16
    4c74:	08 95       	ret

00004c76 <freeRam>:
    4c76:	cf 93       	push	r28
    4c78:	df 93       	push	r29
    4c7a:	1f 92       	push	r1
    4c7c:	1f 92       	push	r1
    4c7e:	cd b7       	in	r28, 0x3d	; 61
    4c80:	de b7       	in	r29, 0x3e	; 62
    4c82:	80 91 99 25 	lds	r24, 0x2599	; 0x802599 <__brkval>
    4c86:	90 91 9a 25 	lds	r25, 0x259A	; 0x80259a <__brkval+0x1>
    4c8a:	00 97       	sbiw	r24, 0x00	; 0
    4c8c:	11 f0       	breq	.+4      	; 0x4c92 <freeRam+0x1c>
    4c8e:	9c 01       	movw	r18, r24
    4c90:	02 c0       	rjmp	.+4      	; 0x4c96 <freeRam+0x20>
    4c92:	24 ea       	ldi	r18, 0xA4	; 164
    4c94:	35 e2       	ldi	r19, 0x25	; 37
    4c96:	ce 01       	movw	r24, r28
    4c98:	01 96       	adiw	r24, 0x01	; 1
    4c9a:	82 1b       	sub	r24, r18
    4c9c:	93 0b       	sbc	r25, r19
    4c9e:	0f 90       	pop	r0
    4ca0:	0f 90       	pop	r0
    4ca2:	df 91       	pop	r29
    4ca4:	cf 91       	pop	r28
    4ca6:	08 95       	ret

00004ca8 <__vector_21>:
    4ca8:	1f 92       	push	r1
    4caa:	0f 92       	push	r0
    4cac:	0f b6       	in	r0, 0x3f	; 63
    4cae:	0f 92       	push	r0
    4cb0:	11 24       	eor	r1, r1
    4cb2:	8f 93       	push	r24
    4cb4:	9f 93       	push	r25
    4cb6:	af 93       	push	r26
    4cb8:	bf 93       	push	r27
    4cba:	80 91 6a 21 	lds	r24, 0x216A	; 0x80216a <_millis>
    4cbe:	90 91 6b 21 	lds	r25, 0x216B	; 0x80216b <_millis+0x1>
    4cc2:	a0 91 6c 21 	lds	r26, 0x216C	; 0x80216c <_millis+0x2>
    4cc6:	b0 91 6d 21 	lds	r27, 0x216D	; 0x80216d <_millis+0x3>
    4cca:	01 96       	adiw	r24, 0x01	; 1
    4ccc:	a1 1d       	adc	r26, r1
    4cce:	b1 1d       	adc	r27, r1
    4cd0:	80 93 6a 21 	sts	0x216A, r24	; 0x80216a <_millis>
    4cd4:	90 93 6b 21 	sts	0x216B, r25	; 0x80216b <_millis+0x1>
    4cd8:	a0 93 6c 21 	sts	0x216C, r26	; 0x80216c <_millis+0x2>
    4cdc:	b0 93 6d 21 	sts	0x216D, r27	; 0x80216d <_millis+0x3>
    4ce0:	bf 91       	pop	r27
    4ce2:	af 91       	pop	r26
    4ce4:	9f 91       	pop	r25
    4ce6:	8f 91       	pop	r24
    4ce8:	0f 90       	pop	r0
    4cea:	0f be       	out	0x3f, r0	; 63
    4cec:	0f 90       	pop	r0
    4cee:	1f 90       	pop	r1
    4cf0:	18 95       	reti

00004cf2 <millis>:
    4cf2:	f8 94       	cli
    4cf4:	60 91 6a 21 	lds	r22, 0x216A	; 0x80216a <_millis>
    4cf8:	70 91 6b 21 	lds	r23, 0x216B	; 0x80216b <_millis+0x1>
    4cfc:	80 91 6c 21 	lds	r24, 0x216C	; 0x80216c <_millis+0x2>
    4d00:	90 91 6d 21 	lds	r25, 0x216D	; 0x80216d <_millis+0x3>
    4d04:	78 94       	sei
    4d06:	08 95       	ret

00004d08 <IO_LIBRARY_Init>:
    4d08:	cf 93       	push	r28
    4d0a:	df 93       	push	r29
    4d0c:	cd b7       	in	r28, 0x3d	; 61
    4d0e:	de b7       	in	r29, 0x3e	; 62
    4d10:	28 97       	sbiw	r28, 0x08	; 8
    4d12:	0f b6       	in	r0, 0x3f	; 63
    4d14:	f8 94       	cli
    4d16:	de bf       	out	0x3e, r29	; 62
    4d18:	0f be       	out	0x3f, r0	; 63
    4d1a:	cd bf       	out	0x3d, r28	; 61
    4d1c:	88 e0       	ldi	r24, 0x08	; 8
    4d1e:	e3 e0       	ldi	r30, 0x03	; 3
    4d20:	f3 e0       	ldi	r31, 0x03	; 3
    4d22:	de 01       	movw	r26, r28
    4d24:	11 96       	adiw	r26, 0x01	; 1
    4d26:	01 90       	ld	r0, Z+
    4d28:	0d 92       	st	X+, r0
    4d2a:	8a 95       	dec	r24
    4d2c:	e1 f7       	brne	.-8      	; 0x4d26 <IO_LIBRARY_Init+0x1e>
    4d2e:	6d e9       	ldi	r22, 0x9D	; 157
    4d30:	73 e2       	ldi	r23, 0x23	; 35
    4d32:	89 e9       	ldi	r24, 0x99	; 153
    4d34:	93 e2       	ldi	r25, 0x23	; 35
    4d36:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <reg_wizchip_cs_cbfunc>
    4d3a:	67 ea       	ldi	r22, 0xA7	; 167
    4d3c:	73 e2       	ldi	r23, 0x23	; 35
    4d3e:	81 ea       	ldi	r24, 0xA1	; 161
    4d40:	93 e2       	ldi	r25, 0x23	; 35
    4d42:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <reg_wizchip_spi_cbfunc>
    4d46:	6d eb       	ldi	r22, 0xBD	; 189
    4d48:	73 e2       	ldi	r23, 0x23	; 35
    4d4a:	8c ea       	ldi	r24, 0xAC	; 172
    4d4c:	93 e2       	ldi	r25, 0x23	; 35
    4d4e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <reg_wizchip_spiburst_cbfunc>
    4d52:	be 01       	movw	r22, r28
    4d54:	6f 5f       	subi	r22, 0xFF	; 255
    4d56:	7f 4f       	sbci	r23, 0xFF	; 255
    4d58:	cb 01       	movw	r24, r22
    4d5a:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <wizchip_init>
    4d5e:	81 e3       	ldi	r24, 0x31	; 49
    4d60:	92 e0       	ldi	r25, 0x02	; 2
    4d62:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <wizchip_setnetinfo>
    4d66:	28 96       	adiw	r28, 0x08	; 8
    4d68:	0f b6       	in	r0, 0x3f	; 63
    4d6a:	f8 94       	cli
    4d6c:	de bf       	out	0x3e, r29	; 62
    4d6e:	0f be       	out	0x3f, r0	; 63
    4d70:	cd bf       	out	0x3d, r28	; 61
    4d72:	df 91       	pop	r29
    4d74:	cf 91       	pop	r28
    4d76:	08 95       	ret

00004d78 <timer0_init>:
// Timer0
// 1ms IRQ
// Used for millis() timing
void timer0_init(void)
{
	TCCR0A = (1<<WGM01); //TIMER0 SET-UP: CTC MODE
    4d78:	82 e0       	ldi	r24, 0x02	; 2
    4d7a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00); // PS 1:64
    4d7c:	83 e0       	ldi	r24, 0x03	; 3
    4d7e:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249; // 1ms reach for clear (16mz:64=>250kHz:250-=>1kHz)
    4d80:	89 ef       	ldi	r24, 0xF9	; 249
    4d82:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= 1<<OCIE0A;	 //IRQ on TIMER0 output compareA
    4d84:	ee e6       	ldi	r30, 0x6E	; 110
    4d86:	f0 e0       	ldi	r31, 0x00	; 0
    4d88:	80 81       	ld	r24, Z
    4d8a:	82 60       	ori	r24, 0x02	; 2
    4d8c:	80 83       	st	Z, r24
    4d8e:	08 95       	ret

00004d90 <avr_init>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    4d90:	99 e2       	ldi	r25, 0x29	; 41
    4d92:	88 e1       	ldi	r24, 0x18	; 24
    4d94:	0f b6       	in	r0, 0x3f	; 63
    4d96:	f8 94       	cli
    4d98:	a8 95       	wdr
    4d9a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    4d9e:	0f be       	out	0x3f, r0	; 63
    4da0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
static void avr_init(void)
{
	// Initialize device here.
	// WatchDog INIT
	wdt_enable(WDTO_8S);  // set up wdt reset interval 2 second
	wdt_reset(); // wdt reset ~ every <2000ms
    4da4:	a8 95       	wdr

	timer0_init();// Timer0 millis engine init
    4da6:	e8 df       	rcall	.-48     	; 0x4d78 <timer0_init>
#endif
	// Define Output/Input Stream
	stdout = &uart0_stdout;
#endif
	
	sei(); //re-enable global interrupts
    4da8:	78 94       	sei
    4daa:	08 95       	ret

00004dac <main>:
			seq_query,\
			len_query);
}

int main()
{
    4dac:	cf 93       	push	r28
    4dae:	df 93       	push	r29
    4db0:	cd b7       	in	r28, 0x3d	; 61
    4db2:	de b7       	in	r29, 0x3e	; 62
    4db4:	c8 5b       	subi	r28, 0xB8	; 184
    4db6:	d1 09       	sbc	r29, r1
    4db8:	0f b6       	in	r0, 0x3f	; 63
    4dba:	f8 94       	cli
    4dbc:	de bf       	out	0x3e, r29	; 62
    4dbe:	0f be       	out	0x3f, r0	; 63
    4dc0:	cd bf       	out	0x3d, r28	; 61
	// INIT MCU
	avr_init();
    4dc2:	e6 df       	rcall	.-52     	; 0x4d90 <avr_init>
	spi_init(); //SPI Master, MODE0, 4Mhz(DIV4), CS_PB.3=HIGH - suitable for WIZNET 5x00(1/2/5)
    4dc4:	45 d2       	rcall	.+1162   	; 0x5250 <spi_init>
    4dc6:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <SYS_Init>

	SYS_Init();
    4dca:	60 e0       	ldi	r22, 0x00	; 0
	HAL_UartInit(UART_BAUD_RATE);
    4dcc:	76 e9       	ldi	r23, 0x96	; 150
    4dce:	80 e0       	ldi	r24, 0x00	; 0
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	9a d2       	rcall	.+1332   	; 0x5308 <HAL_UartInit>
    4dd4:	03 e6       	ldi	r16, 0x63	; 99


	// Print program metrics
	strcpy(_msg, "");
    4dd6:	14 e0       	ldi	r17, 0x04	; 4
    4dd8:	d8 01       	movw	r26, r16
    4dda:	1c 92       	st	X, r1
    4ddc:	87 e8       	ldi	r24, 0x87	; 135
	_len = SPRINTF(_msg,"%S", str_prog_name);// ???????? ?????????
    4dde:	93 e0       	ldi	r25, 0x03	; 3
    4de0:	9f 93       	push	r25
    4de2:	8f 93       	push	r24
    4de4:	8e eb       	ldi	r24, 0xBE	; 190
    4de6:	92 e0       	ldi	r25, 0x02	; 2
    4de8:	9f 93       	push	r25
    4dea:	8f 93       	push	r24
    4dec:	1f 93       	push	r17
    4dee:	0f 93       	push	r16
    4df0:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <sprintf_P>
	HAL_UARTWriteString(_msg);
    4df4:	c8 01       	movw	r24, r16
    4df6:	04 d3       	rcall	.+1544   	; 0x5400 <HAL_UARTWriteString>
    4df8:	87 df       	rcall	.-242    	; 0x4d08 <IO_LIBRARY_Init>
	

	//Wizchip WIZ5500 Ethernet initialize
	IO_LIBRARY_Init(); //After that ping must working
    4dfa:	f8 01       	movw	r30, r16
    4dfc:	10 82       	st	Z, r1
	HAL_UARTWriteString(_msg);
	printf("> DNS 1st : %d.%d.%d.%d\r\n", netInfo.dns[0], netInfo.dns[1], netInfo.dns[2], netInfo.dns[3]);
	printf("> DNS 2nd : %d.%d.%d.%d\r\n", DNS_2nd[0], DNS_2nd[1], DNS_2nd[2], DNS_2nd[3]);
	printf("=======================================\r\n");
	#endif
	strcpy(_msg, "");
    4dfe:	8e e1       	ldi	r24, 0x1E	; 30
    4e00:	92 e0       	ldi	r25, 0x02	; 2
	_len = 0;
	_len = SPRINTF(_msg,"> Target Domain Name : %s\r\n", Domain_name);
    4e02:	9f 93       	push	r25
    4e04:	8f 93       	push	r24
    4e06:	82 ea       	ldi	r24, 0xA2	; 162
    4e08:	92 e0       	ldi	r25, 0x02	; 2
    4e0a:	9f 93       	push	r25
    4e0c:	8f 93       	push	r24
    4e0e:	1f 93       	push	r17
    4e10:	0f 93       	push	r16
    4e12:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <sprintf_P>
    4e16:	c8 01       	movw	r24, r16
	HAL_UARTWriteString(_msg);
    4e18:	f3 d2       	rcall	.+1510   	; 0x5400 <HAL_UARTWriteString>
    4e1a:	6a e6       	ldi	r22, 0x6A	; 106
    4e1c:	7d e1       	ldi	r23, 0x1D	; 29
	#endif

	/* DNS client Initialization */
	DNS_init(SOCK_DNS, gDATABUF_DNS);
    4e1e:	86 e0       	ldi	r24, 0x06	; 6
    4e20:	0e 94 b4 11 	call	0x2368	; 0x2368 <DNS_init>
    4e24:	4f e5       	ldi	r20, 0x5F	; 95
    4e26:	54 e0       	ldi	r21, 0x04	; 4

	/* DNS processing */
	int32_t ret;
	if ((ret = DNS_run(netInfo.dns, Domain_name, Domain_IP)) > 0) // try to 1st DNS
    4e28:	6e e1       	ldi	r22, 0x1E	; 30
    4e2a:	72 e0       	ldi	r23, 0x02	; 2
    4e2c:	83 e4       	ldi	r24, 0x43	; 67
    4e2e:	92 e0       	ldi	r25, 0x02	; 2
    4e30:	0e 94 c1 11 	call	0x2382	; 0x2382 <DNS_run>
    4e34:	c8 2e       	mov	r12, r24
    4e36:	88 0f       	add	r24, r24
    4e38:	dd 08       	sbc	r13, r13
    4e3a:	ee 08       	sbc	r14, r14
    4e3c:	ff 08       	sbc	r15, r15
    4e3e:	0f b6       	in	r0, 0x3f	; 63
    4e40:	f8 94       	cli
    4e42:	de bf       	out	0x3e, r29	; 62
    4e44:	0f be       	out	0x3f, r0	; 63
    4e46:	cd bf       	out	0x3d, r28	; 61
    4e48:	1c 14       	cp	r1, r12
    4e4a:	1d 04       	cpc	r1, r13
    4e4c:	1e 04       	cpc	r1, r14
    4e4e:	1f 04       	cpc	r1, r15
    4e50:	8c f4       	brge	.+34     	; 0x4e74 <main+0xc8>
    4e52:	f8 01       	movw	r30, r16
    4e54:	10 82       	st	Z, r1
	{
		#ifdef DNS_INFO
		strcpy(_msg, "");
    4e56:	8e e8       	ldi	r24, 0x8E	; 142
    4e58:	92 e0       	ldi	r25, 0x02	; 2
		_len = 0;
		_len = SPRINTF(_msg,"> 1st DNS Respond\r\n");
    4e5a:	9f 93       	push	r25
    4e5c:	8f 93       	push	r24
    4e5e:	ff 93       	push	r31
    4e60:	0f 93       	push	r16
    4e62:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <sprintf_P>
    4e66:	c8 01       	movw	r24, r16
		HAL_UARTWriteString(_msg);
    4e68:	cb d2       	rcall	.+1430   	; 0x5400 <HAL_UARTWriteString>
    4e6a:	0f 90       	pop	r0
    4e6c:	0f 90       	pop	r0
    4e6e:	0f 90       	pop	r0
    4e70:	0f 90       	pop	r0
    4e72:	56 c0       	rjmp	.+172    	; 0x4f20 <main+0x174>
    4e74:	3f ef       	ldi	r19, 0xFF	; 255
    4e76:	c3 16       	cp	r12, r19
		#endif
	}
	else if ((ret != -1) && ((ret = DNS_run(DNS_2nd, Domain_name, Domain_IP))>0))     // retry to 2nd DNS
    4e78:	d3 06       	cpc	r13, r19
    4e7a:	e3 06       	cpc	r14, r19
    4e7c:	f3 06       	cpc	r15, r19
    4e7e:	29 f1       	breq	.+74     	; 0x4eca <main+0x11e>
    4e80:	4f e5       	ldi	r20, 0x5F	; 95
    4e82:	54 e0       	ldi	r21, 0x04	; 4
    4e84:	6e e1       	ldi	r22, 0x1E	; 30
    4e86:	72 e0       	ldi	r23, 0x02	; 2
    4e88:	8d e2       	ldi	r24, 0x2D	; 45
    4e8a:	92 e0       	ldi	r25, 0x02	; 2
    4e8c:	0e 94 c1 11 	call	0x2382	; 0x2382 <DNS_run>
    4e90:	c8 2e       	mov	r12, r24
    4e92:	88 0f       	add	r24, r24
    4e94:	dd 08       	sbc	r13, r13
    4e96:	ee 08       	sbc	r14, r14
    4e98:	ff 08       	sbc	r15, r15
    4e9a:	1c 14       	cp	r1, r12
    4e9c:	1d 04       	cpc	r1, r13
    4e9e:	1e 04       	cpc	r1, r14
    4ea0:	1f 04       	cpc	r1, r15
    4ea2:	9c f4       	brge	.+38     	; 0x4eca <main+0x11e>
    4ea4:	e3 e6       	ldi	r30, 0x63	; 99
    4ea6:	f4 e0       	ldi	r31, 0x04	; 4
	{
		#ifdef DNS_INFO
		strcpy(_msg, "");
    4ea8:	10 82       	st	Z, r1
    4eaa:	8a e7       	ldi	r24, 0x7A	; 122
    4eac:	92 e0       	ldi	r25, 0x02	; 2
		_len = 0;
		_len = SPRINTF(_msg,"> 2nd DNS Respond\r\n");
    4eae:	9f 93       	push	r25
    4eb0:	8f 93       	push	r24
    4eb2:	ff 93       	push	r31
    4eb4:	ef 93       	push	r30
    4eb6:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <sprintf_P>
    4eba:	83 e6       	ldi	r24, 0x63	; 99
		HAL_UARTWriteString(_msg);
    4ebc:	94 e0       	ldi	r25, 0x04	; 4
    4ebe:	a0 d2       	rcall	.+1344   	; 0x5400 <HAL_UARTWriteString>
    4ec0:	0f 90       	pop	r0
    4ec2:	0f 90       	pop	r0
    4ec4:	0f 90       	pop	r0
    4ec6:	0f 90       	pop	r0
    4ec8:	2b c0       	rjmp	.+86     	; 0x4f20 <main+0x174>
    4eca:	8f ef       	ldi	r24, 0xFF	; 255
    4ecc:	c8 16       	cp	r12, r24
		#endif
	}
	else if(ret == -1)
    4ece:	d8 06       	cpc	r13, r24
    4ed0:	e8 06       	cpc	r14, r24
    4ed2:	f8 06       	cpc	r15, r24
    4ed4:	99 f4       	brne	.+38     	; 0x4efc <main+0x150>
    4ed6:	e3 e6       	ldi	r30, 0x63	; 99
    4ed8:	f4 e0       	ldi	r31, 0x04	; 4
	{
		#ifdef DNS_INFO
		strcpy(_msg, "");
    4eda:	10 82       	st	Z, r1
    4edc:	80 e4       	ldi	r24, 0x40	; 64
    4ede:	92 e0       	ldi	r25, 0x02	; 2
		_len = 0;
		_len = SPRINTF(_msg,"> MAX_DOMAIN_NAME is too small. Should be redefined it.\r\n");
    4ee0:	9f 93       	push	r25
    4ee2:	8f 93       	push	r24
    4ee4:	ff 93       	push	r31
    4ee6:	ef 93       	push	r30
    4ee8:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <sprintf_P>
    4eec:	83 e6       	ldi	r24, 0x63	; 99
		HAL_UARTWriteString(_msg);
    4eee:	94 e0       	ldi	r25, 0x04	; 4
    4ef0:	87 d2       	rcall	.+1294   	; 0x5400 <HAL_UARTWriteString>
    4ef2:	0f 90       	pop	r0
    4ef4:	0f 90       	pop	r0
    4ef6:	0f 90       	pop	r0
    4ef8:	0f 90       	pop	r0
    4efa:	12 c0       	rjmp	.+36     	; 0x4f20 <main+0x174>
    4efc:	e3 e6       	ldi	r30, 0x63	; 99
    4efe:	f4 e0       	ldi	r31, 0x04	; 4
		;
	}
	else
	{
		#ifdef DNS_INFO
		strcpy(_msg, "");
    4f00:	10 82       	st	Z, r1
    4f02:	81 e3       	ldi	r24, 0x31	; 49
    4f04:	92 e0       	ldi	r25, 0x02	; 2
		_len = 0;
		_len = SPRINTF(_msg,"> DNS Failed\r\n");
    4f06:	9f 93       	push	r25
    4f08:	8f 93       	push	r24
    4f0a:	ff 93       	push	r31
    4f0c:	ef 93       	push	r30
    4f0e:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <sprintf_P>
    4f12:	83 e6       	ldi	r24, 0x63	; 99
		HAL_UARTWriteString(_msg);
    4f14:	94 e0       	ldi	r25, 0x04	; 4
    4f16:	74 d2       	rcall	.+1256   	; 0x5400 <HAL_UARTWriteString>
    4f18:	0f 90       	pop	r0
    4f1a:	0f 90       	pop	r0
    4f1c:	0f 90       	pop	r0
    4f1e:	0f 90       	pop	r0
    4f20:	1c 14       	cp	r1, r12
    4f22:	1d 04       	cpc	r1, r13
		#endif
		;
	}

	if(ret > 0)
    4f24:	1e 04       	cpc	r1, r14
    4f26:	1f 04       	cpc	r1, r15
    4f28:	ec f5       	brge	.+122    	; 0x4fa4 <main+0x1f8>
    4f2a:	e3 e6       	ldi	r30, 0x63	; 99
    4f2c:	f4 e0       	ldi	r31, 0x04	; 4
	{
		strcpy(_msg, "");
    4f2e:	10 82       	st	Z, r1
    4f30:	0f e5       	ldi	r16, 0x5F	; 95
    4f32:	14 e0       	ldi	r17, 0x04	; 4
		_len = 0;
		_len = SPRINTF(_msg,"> Translated %s to [%d.%d.%d.%d]\r\n\r\n",Domain_name,Domain_IP[0],Domain_IP[1],Domain_IP[2],Domain_IP[3]);
    4f34:	d8 01       	movw	r26, r16
    4f36:	13 96       	adiw	r26, 0x03	; 3
    4f38:	3c 91       	ld	r19, X
    4f3a:	13 97       	sbiw	r26, 0x03	; 3
    4f3c:	12 96       	adiw	r26, 0x02	; 2
    4f3e:	2c 91       	ld	r18, X
    4f40:	12 97       	sbiw	r26, 0x02	; 2
    4f42:	11 96       	adiw	r26, 0x01	; 1
    4f44:	9c 91       	ld	r25, X
    4f46:	11 97       	sbiw	r26, 0x01	; 1
    4f48:	8c 91       	ld	r24, X
    4f4a:	1f 92       	push	r1
    4f4c:	3f 93       	push	r19
    4f4e:	1f 92       	push	r1
    4f50:	2f 93       	push	r18
    4f52:	1f 92       	push	r1
    4f54:	9f 93       	push	r25
    4f56:	1f 92       	push	r1
    4f58:	8f 93       	push	r24
    4f5a:	8e e1       	ldi	r24, 0x1E	; 30
    4f5c:	92 e0       	ldi	r25, 0x02	; 2
    4f5e:	9f 93       	push	r25
    4f60:	8f 93       	push	r24
    4f62:	8c e0       	ldi	r24, 0x0C	; 12
    4f64:	92 e0       	ldi	r25, 0x02	; 2
    4f66:	9f 93       	push	r25
    4f68:	8f 93       	push	r24
    4f6a:	ff 93       	push	r31
    4f6c:	ef 93       	push	r30
    4f6e:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <sprintf_P>
    4f72:	83 e6       	ldi	r24, 0x63	; 99
		HAL_UARTWriteString(_msg);
    4f74:	94 e0       	ldi	r25, 0x04	; 4
    4f76:	44 d2       	rcall	.+1160   	; 0x5400 <HAL_UARTWriteString>
    4f78:	f8 01       	movw	r30, r16
    4f7a:	80 81       	ld	r24, Z
		MQTT_targetIP[0] = Domain_IP[0];
    4f7c:	ec ef       	ldi	r30, 0xFC	; 252
    4f7e:	f4 e0       	ldi	r31, 0x04	; 4
    4f80:	80 83       	st	Z, r24
    4f82:	d8 01       	movw	r26, r16
    4f84:	11 96       	adiw	r26, 0x01	; 1
		MQTT_targetIP[1] = Domain_IP[1];
    4f86:	8c 91       	ld	r24, X
    4f88:	11 97       	sbiw	r26, 0x01	; 1
    4f8a:	81 83       	std	Z+1, r24	; 0x01
    4f8c:	12 96       	adiw	r26, 0x02	; 2
    4f8e:	8c 91       	ld	r24, X
		MQTT_targetIP[2] = Domain_IP[2];
    4f90:	12 97       	sbiw	r26, 0x02	; 2
    4f92:	82 83       	std	Z+2, r24	; 0x02
    4f94:	13 96       	adiw	r26, 0x03	; 3
    4f96:	8c 91       	ld	r24, X
		MQTT_targetIP[3] = Domain_IP[3];
    4f98:	83 83       	std	Z+3, r24	; 0x03
    4f9a:	0f b6       	in	r0, 0x3f	; 63
    4f9c:	f8 94       	cli
    4f9e:	de bf       	out	0x3e, r29	; 62
    4fa0:	0f be       	out	0x3f, r0	; 63
    4fa2:	cd bf       	out	0x3d, r28	; 61
    4fa4:	82 e0       	ldi	r24, 0x02	; 2
    4fa6:	90 e0       	ldi	r25, 0x00	; 0
//****************MQTT client initialize
	//Find MQTT broker and connect with it
	uint8_t mqtt_buf[100];
	int32_t mqtt_rc = 0;
	Network mqtt_network;
	mqtt_network.my_socket = SOCK_MQTT;
    4fa8:	a0 e0       	ldi	r26, 0x00	; 0
    4faa:	b0 e0       	ldi	r27, 0x00	; 0
    4fac:	a9 96       	adiw	r28, 0x29	; 41
    4fae:	8c af       	std	Y+60, r24	; 0x3c
    4fb0:	9d af       	std	Y+61, r25	; 0x3d
    4fb2:	ae af       	std	Y+62, r26	; 0x3e
    4fb4:	bf af       	std	Y+63, r27	; 0x3f
    4fb6:	a9 97       	sbiw	r28, 0x29	; 41
    4fb8:	a3 e6       	ldi	r26, 0x63	; 99
    4fba:	b4 e0       	ldi	r27, 0x04	; 4

	strcpy(_msg, "");
    4fbc:	1c 92       	st	X, r1
    4fbe:	ec ef       	ldi	r30, 0xFC	; 252
    4fc0:	f4 e0       	ldi	r31, 0x04	; 4
	_len = 0;
	_len = SPRINTF(_msg,">>Trying connect to MQTT broker: %d.%d.%d.%d ..\r\n", MQTT_targetIP[0], MQTT_targetIP[1], MQTT_targetIP[2], MQTT_targetIP[3]);
    4fc2:	33 81       	ldd	r19, Z+3	; 0x03
    4fc4:	22 81       	ldd	r18, Z+2	; 0x02
    4fc6:	91 81       	ldd	r25, Z+1	; 0x01
    4fc8:	80 81       	ld	r24, Z
    4fca:	1f 92       	push	r1
    4fcc:	3f 93       	push	r19
    4fce:	1f 92       	push	r1
    4fd0:	2f 93       	push	r18
    4fd2:	1f 92       	push	r1
    4fd4:	9f 93       	push	r25
    4fd6:	1f 92       	push	r1
    4fd8:	8f 93       	push	r24
    4fda:	8a ed       	ldi	r24, 0xDA	; 218
    4fdc:	91 e0       	ldi	r25, 0x01	; 1
    4fde:	9f 93       	push	r25
    4fe0:	8f 93       	push	r24
    4fe2:	bf 93       	push	r27
    4fe4:	af 93       	push	r26
    4fe6:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <sprintf_P>
	HAL_UARTWriteString(_msg);
    4fea:	83 e6       	ldi	r24, 0x63	; 99
    4fec:	94 e0       	ldi	r25, 0x04	; 4
    4fee:	08 d2       	rcall	.+1040   	; 0x5400 <HAL_UARTWriteString>
	NewNetwork(&mqtt_network);
    4ff0:	ce 01       	movw	r24, r28
    4ff2:	8b 59       	subi	r24, 0x9B	; 155
    4ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ff6:	6d db       	rcall	.-2342   	; 0x46d2 <NewNetwork>
    4ff8:	4b e5       	ldi	r20, 0x5B	; 91
	ConnectNetwork(&mqtt_network, MQTT_targetIP, 1883);
    4ffa:	57 e0       	ldi	r21, 0x07	; 7
    4ffc:	6c ef       	ldi	r22, 0xFC	; 252
    4ffe:	74 e0       	ldi	r23, 0x04	; 4
    5000:	ce 01       	movw	r24, r28
    5002:	8b 59       	subi	r24, 0x9B	; 155
    5004:	9f 4f       	sbci	r25, 0xFF	; 255
    5006:	73 db       	rcall	.-2330   	; 0x46ee <ConnectNetwork>
    5008:	a1 2c       	mov	r10, r1
    500a:	68 94       	set
	MQTTClient(&mqtt_client, &mqtt_network, 1000, mqtt_buf, 100, mqtt_readBuffer, MQTT_BUFFER_SIZE);
    500c:	bb 24       	eor	r11, r11
    500e:	b1 f8       	bld	r11, 1
    5010:	0f 2e       	mov	r0, r31
    5012:	fe e6       	ldi	r31, 0x6E	; 110
    5014:	cf 2e       	mov	r12, r31
    5016:	f1 e2       	ldi	r31, 0x21	; 33
    5018:	df 2e       	mov	r13, r31
    501a:	f0 2d       	mov	r31, r0
    501c:	0f 2e       	mov	r0, r31
    501e:	f4 e6       	ldi	r31, 0x64	; 100
    5020:	ef 2e       	mov	r14, r31
    5022:	f1 2c       	mov	r15, r1
    5024:	f0 2d       	mov	r31, r0
    5026:	8e 01       	movw	r16, r28
    5028:	0f 5f       	subi	r16, 0xFF	; 255
    502a:	1f 4f       	sbci	r17, 0xFF	; 255
    502c:	28 ee       	ldi	r18, 0xE8	; 232
    502e:	33 e0       	ldi	r19, 0x03	; 3
    5030:	40 e0       	ldi	r20, 0x00	; 0
    5032:	50 e0       	ldi	r21, 0x00	; 0
    5034:	be 01       	movw	r22, r28
    5036:	6b 59       	subi	r22, 0x9B	; 155
    5038:	7f 4f       	sbci	r23, 0xFF	; 255
    503a:	83 ec       	ldi	r24, 0xC3	; 195
    503c:	94 e0       	ldi	r25, 0x04	; 4
    503e:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <MQTTClient>
    5042:	8b e3       	ldi	r24, 0x3B	; 59
    5044:	eb e0       	ldi	r30, 0x0B	; 11

	//Connection to MQTT broker
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    5046:	f3 e0       	ldi	r31, 0x03	; 3
    5048:	de 01       	movw	r26, r28
    504a:	a1 59       	subi	r26, 0x91	; 145
    504c:	bf 4f       	sbci	r27, 0xFF	; 255
    504e:	01 90       	ld	r0, Z+
    5050:	0d 92       	st	X+, r0
    5052:	8a 95       	dec	r24
    5054:	e1 f7       	brne	.-8      	; 0x504e <main+0x2a2>
    5056:	cf 57       	subi	r28, 0x7F	; 127
    5058:	df 4f       	sbci	r29, 0xFF	; 255
	data.willFlag = 0;
    505a:	18 82       	st	Y, r1
    505c:	c1 58       	subi	r28, 0x81	; 129
    505e:	d0 40       	sbci	r29, 0x00	; 0
    5060:	84 e0       	ldi	r24, 0x04	; 4
    5062:	e6 96       	adiw	r28, 0x36	; 54
	data.MQTTVersion = 4;//3;
    5064:	8f af       	std	Y+63, r24	; 0x3f
    5066:	e6 97       	sbiw	r28, 0x36	; 54
    5068:	88 e6       	ldi	r24, 0x68	; 104
    506a:	92 e0       	ldi	r25, 0x02	; 2
	data.clientID.cstring = ClientID;
    506c:	e8 96       	adiw	r28, 0x38	; 56
    506e:	9f af       	std	Y+63, r25	; 0x3f
    5070:	8e af       	std	Y+62, r24	; 0x3e
    5072:	e8 97       	sbiw	r28, 0x38	; 56
    5074:	88 e4       	ldi	r24, 0x48	; 72
    5076:	92 e0       	ldi	r25, 0x02	; 2
	data.username.cstring = ClientUsername;
    5078:	c6 56       	subi	r28, 0x66	; 102
    507a:	df 4f       	sbci	r29, 0xFF	; 255
    507c:	99 83       	std	Y+1, r25	; 0x01
    507e:	88 83       	st	Y, r24
    5080:	ca 59       	subi	r28, 0x9A	; 154
    5082:	d0 40       	sbci	r29, 0x00	; 0
    5084:	83 ea       	ldi	r24, 0xA3	; 163
    5086:	94 e0       	ldi	r25, 0x04	; 4
	data.password.cstring = ClientPassword;
    5088:	ce 55       	subi	r28, 0x5E	; 94
    508a:	df 4f       	sbci	r29, 0xFF	; 255
    508c:	99 83       	std	Y+1, r25	; 0x01
    508e:	88 83       	st	Y, r24
    5090:	c2 5a       	subi	r28, 0xA2	; 162
    5092:	d0 40       	sbci	r29, 0x00	; 0
    5094:	8c e3       	ldi	r24, 0x3C	; 60
    5096:	90 e0       	ldi	r25, 0x00	; 0
	data.keepAliveInterval = 60;
    5098:	c2 58       	subi	r28, 0x82	; 130
    509a:	df 4f       	sbci	r29, 0xFF	; 255
    509c:	99 83       	std	Y+1, r25	; 0x01
    509e:	88 83       	st	Y, r24
    50a0:	ce 57       	subi	r28, 0x7E	; 126
    50a2:	d0 40       	sbci	r29, 0x00	; 0
    50a4:	81 e0       	ldi	r24, 0x01	; 1
    50a6:	c0 58       	subi	r28, 0x80	; 128
	data.cleansession = 1;
    50a8:	df 4f       	sbci	r29, 0xFF	; 255
    50aa:	88 83       	st	Y, r24
    50ac:	c0 58       	subi	r28, 0x80	; 128
    50ae:	d0 40       	sbci	r29, 0x00	; 0
    50b0:	be 01       	movw	r22, r28
    50b2:	61 59       	subi	r22, 0x91	; 145
	mqtt_rc = MQTTConnect(&mqtt_client, &data);
    50b4:	7f 4f       	sbci	r23, 0xFF	; 255
    50b6:	83 ec       	ldi	r24, 0xC3	; 195
    50b8:	94 e0       	ldi	r25, 0x04	; 4
    50ba:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <MQTTConnect>
    50be:	0f b6       	in	r0, 0x3f	; 63
    50c0:	f8 94       	cli
	if (mqtt_rc == SUCCESSS)
    50c2:	de bf       	out	0x3e, r29	; 62
    50c4:	0f be       	out	0x3f, r0	; 63
    50c6:	cd bf       	out	0x3d, r28	; 61
    50c8:	61 15       	cp	r22, r1
    50ca:	71 05       	cpc	r23, r1
    50cc:	81 05       	cpc	r24, r1
    50ce:	91 05       	cpc	r25, r1
    50d0:	09 f0       	breq	.+2      	; 0x50d4 <main+0x328>
    50d2:	41 c0       	rjmp	.+130    	; 0x5156 <main+0x3aa>
    50d4:	03 e6       	ldi	r16, 0x63	; 99
    50d6:	14 e0       	ldi	r17, 0x04	; 4
	{
		strcpy(_msg, "");
    50d8:	d8 01       	movw	r26, r16
    50da:	1c 92       	st	X, r1
    50dc:	9f 93       	push	r25
		_len = 0;
		_len = SPRINTF(_msg,"++MQTT Connected SUCCESS: %ld\r\n", mqtt_rc);
    50de:	8f 93       	push	r24
    50e0:	7f 93       	push	r23
    50e2:	6f 93       	push	r22
    50e4:	8a eb       	ldi	r24, 0xBA	; 186
    50e6:	91 e0       	ldi	r25, 0x01	; 1
    50e8:	9f 93       	push	r25
    50ea:	8f 93       	push	r24
    50ec:	1f 93       	push	r17
    50ee:	0f 93       	push	r16
    50f0:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <sprintf_P>
    50f4:	c8 01       	movw	r24, r16
		HAL_UARTWriteString(_msg);
    50f6:	84 d1       	rcall	.+776    	; 0x5400 <HAL_UARTWriteString>
    50f8:	7e 01       	movw	r14, r28
    50fa:	ba ea       	ldi	r27, 0xAA	; 170
		HAL_UARTWriteString(_msg);
		while(1);//Reboot the board
	}

	// Subscribe topic
	char SubString[] = SUBSCRIBE;
    50fc:	eb 0e       	add	r14, r27
    50fe:	f1 1c       	adc	r15, r1
    5100:	8f e0       	ldi	r24, 0x0F	; 15
    5102:	ee e7       	ldi	r30, 0x7E	; 126
    5104:	f3 e0       	ldi	r31, 0x03	; 3
    5106:	d7 01       	movw	r26, r14
    5108:	01 90       	ld	r0, Z+
    510a:	0d 92       	st	X+, r0
    510c:	8a 95       	dec	r24
    510e:	e1 f7       	brne	.-8      	; 0x5108 <main+0x35c>
    5110:	2e ef       	ldi	r18, 0xFE	; 254
    5112:	33 e2       	ldi	r19, 0x23	; 35
	mqtt_rc = MQTTSubscribe(&mqtt_client, SubString, QOS0, messageArrived);
    5114:	40 e0       	ldi	r20, 0x00	; 0
    5116:	b7 01       	movw	r22, r14
    5118:	83 ec       	ldi	r24, 0xC3	; 195
    511a:	94 e0       	ldi	r25, 0x04	; 4
    511c:	0e 94 06 18 	call	0x300c	; 0x300c <MQTTSubscribe>
    5120:	f8 01       	movw	r30, r16
    5122:	10 82       	st	Z, r1
	strcpy(_msg, "");
    5124:	9f 93       	push	r25
    5126:	8f 93       	push	r24
	_len = 0;
	_len = SPRINTF(_msg,"Subscribed (%s) %d\r\n", SubString, mqtt_rc);
    5128:	7f 93       	push	r23
    512a:	6f 93       	push	r22
    512c:	ff 92       	push	r15
    512e:	ef 92       	push	r14
    5130:	85 ea       	ldi	r24, 0xA5	; 165
    5132:	91 e0       	ldi	r25, 0x01	; 1
    5134:	9f 93       	push	r25
    5136:	8f 93       	push	r24
    5138:	1f 93       	push	r17
    513a:	0f 93       	push	r16
    513c:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <sprintf_P>
	HAL_UARTWriteString(_msg);
    5140:	c8 01       	movw	r24, r16
    5142:	5e d1       	rcall	.+700    	; 0x5400 <HAL_UARTWriteString>
    5144:	d6 dd       	rcall	.-1108   	; 0x4cf2 <millis>
	
	//timer
	uint32_t timer_mqtt_pub_1sec = millis();
    5146:	6b 01       	movw	r12, r22
    5148:	7c 01       	movw	r14, r24
    514a:	0f b6       	in	r0, 0x3f	; 63
    514c:	f8 94       	cli
    514e:	de bf       	out	0x3e, r29	; 62
    5150:	0f be       	out	0x3f, r0	; 63
    5152:	cd bf       	out	0x3d, r28	; 61
    5154:	18 c0       	rjmp	.+48     	; 0x5186 <main+0x3da>
    5156:	e3 e6       	ldi	r30, 0x63	; 99
    5158:	f4 e0       	ldi	r31, 0x04	; 4
		_len = SPRINTF(_msg,"++MQTT Connected SUCCESS: %ld\r\n", mqtt_rc);
		HAL_UARTWriteString(_msg);
	}
	else
	{
		strcpy(_msg, "");
    515a:	10 82       	st	Z, r1
    515c:	9f 93       	push	r25
		_len = 0;
		_len = SPRINTF(_msg,"--MQTT Connected ERROR: %ld\r\n", mqtt_rc);
    515e:	8f 93       	push	r24
    5160:	7f 93       	push	r23
    5162:	6f 93       	push	r22
    5164:	87 e8       	ldi	r24, 0x87	; 135
    5166:	91 e0       	ldi	r25, 0x01	; 1
    5168:	9f 93       	push	r25
    516a:	8f 93       	push	r24
    516c:	ff 93       	push	r31
    516e:	ef 93       	push	r30
    5170:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <sprintf_P>
		HAL_UARTWriteString(_msg);
    5174:	83 e6       	ldi	r24, 0x63	; 99
    5176:	94 e0       	ldi	r25, 0x04	; 4
    5178:	43 d1       	rcall	.+646    	; 0x5400 <HAL_UARTWriteString>
    517a:	0f b6       	in	r0, 0x3f	; 63
    517c:	f8 94       	cli
    517e:	de bf       	out	0x3e, r29	; 62
    5180:	0f be       	out	0x3f, r0	; 63
    5182:	cd bf       	out	0x3d, r28	; 61
    5184:	ff cf       	rjmp	.-2      	; 0x5184 <main+0x3d8>
	// counter - 20 sec
	static uint8_t mqtt_20sec_cnt =0;
	
	while(1)
	{
		for (int i = 0; i < 7; i++) {
    5186:	00 e0       	ldi	r16, 0x00	; 0
			SYS_TaskHandler();
    5188:	10 e0       	ldi	r17, 0x00	; 0
    518a:	06 c0       	rjmp	.+12     	; 0x5198 <main+0x3ec>
			HAL_UartTaskHandler();
    518c:	0e 94 01 34 	call	0x6802	; 0x6802 <SYS_TaskHandler>
			APP_TaskHandler();
    5190:	dc d1       	rcall	.+952    	; 0x554a <HAL_UartTaskHandler>
	// counter - 20 sec
	static uint8_t mqtt_20sec_cnt =0;
	
	while(1)
	{
		for (int i = 0; i < 7; i++) {
    5192:	74 dc       	rcall	.-1816   	; 0x4a7c <APP_TaskHandler>
    5194:	0f 5f       	subi	r16, 0xFF	; 255
    5196:	1f 4f       	sbci	r17, 0xFF	; 255
    5198:	07 30       	cpi	r16, 0x07	; 7
    519a:	11 05       	cpc	r17, r1
			HAL_UartTaskHandler();
			APP_TaskHandler();
			}
		
		//Here at least every 1sec
		wdt_reset(); // WDT reset at least every sec
    519c:	bc f3       	brlt	.-18     	; 0x518c <main+0x3e0>
		#endif
		#if defined( _PING )
		ping_srv(2);
		#endif
		
		for (int i = 0; i < 7; i++) {
    519e:	a8 95       	wdr
    51a0:	00 e0       	ldi	r16, 0x00	; 0
    51a2:	10 e0       	ldi	r17, 0x00	; 0
			SYS_TaskHandler();
    51a4:	06 c0       	rjmp	.+12     	; 0x51b2 <main+0x406>
			HAL_UartTaskHandler();
    51a6:	0e 94 01 34 	call	0x6802	; 0x6802 <SYS_TaskHandler>
			APP_TaskHandler();
    51aa:	cf d1       	rcall	.+926    	; 0x554a <HAL_UartTaskHandler>
    51ac:	67 dc       	rcall	.-1842   	; 0x4a7c <APP_TaskHandler>
		#endif
		#if defined( _PING )
		ping_srv(2);
		#endif
		
		for (int i = 0; i < 7; i++) {
    51ae:	0f 5f       	subi	r16, 0xFF	; 255
    51b0:	1f 4f       	sbci	r17, 0xFF	; 255
    51b2:	07 30       	cpi	r16, 0x07	; 7
    51b4:	11 05       	cpc	r17, r1
    51b6:	bc f3       	brlt	.-18     	; 0x51a6 <main+0x3fa>
			HAL_UartTaskHandler();
			APP_TaskHandler();
			}

		// MQTT pub event every 1 sec
		if((millis()-timer_mqtt_pub_1sec)> 1000)
    51b8:	9c dd       	rcall	.-1224   	; 0x4cf2 <millis>
    51ba:	dc 01       	movw	r26, r24
    51bc:	cb 01       	movw	r24, r22
    51be:	8c 19       	sub	r24, r12
    51c0:	9d 09       	sbc	r25, r13
    51c2:	ae 09       	sbc	r26, r14
    51c4:	bf 09       	sbc	r27, r15
    51c6:	89 3e       	cpi	r24, 0xE9	; 233
    51c8:	93 40       	sbci	r25, 0x03	; 3
    51ca:	a1 05       	cpc	r26, r1
    51cc:	b1 05       	cpc	r27, r1
		{
			//here every 1 sec
			timer_mqtt_pub_1sec = millis();
    51ce:	b8 f1       	brcs	.+110    	; 0x523e <main+0x492>
    51d0:	90 dd       	rcall	.-1248   	; 0x4cf2 <millis>
    51d2:	6b 01       	movw	r12, r22
    51d4:	7c 01       	movw	r14, r24
			
			//Every 20sec public message: "Uptime: xxx sec; Free RAM: xxxxx bytes" to "/w5500_avr_dbg"
			if(++mqtt_20sec_cnt>19)
    51d6:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <mqtt_20sec_cnt.3740>
    51da:	8f 5f       	subi	r24, 0xFF	; 255
    51dc:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <mqtt_20sec_cnt.3740>
    51e0:	84 31       	cpi	r24, 0x14	; 20
    51e2:	68 f1       	brcs	.+90     	; 0x523e <main+0x492>
			{
				mqtt_20sec_cnt = 0;
    51e4:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <mqtt_20sec_cnt.3740>
				strcpy(_msg, "");
    51e8:	03 e6       	ldi	r16, 0x63	; 99
    51ea:	14 e0       	ldi	r17, 0x04	; 4
    51ec:	d8 01       	movw	r26, r16
    51ee:	1c 92       	st	X, r1
				_len = SPRINTF(_msg, "Uptime: %lu sec; Free RAM: %d bytes\r\n", millis()/1000, freeRam());
    51f0:	42 dd       	rcall	.-1404   	; 0x4c76 <freeRam>
    51f2:	b8 2e       	mov	r11, r24
    51f4:	a9 2e       	mov	r10, r25
    51f6:	7d dd       	rcall	.-1286   	; 0x4cf2 <millis>
    51f8:	af 92       	push	r10
    51fa:	bf 92       	push	r11
    51fc:	28 ee       	ldi	r18, 0xE8	; 232
    51fe:	33 e0       	ldi	r19, 0x03	; 3
    5200:	40 e0       	ldi	r20, 0x00	; 0
    5202:	50 e0       	ldi	r21, 0x00	; 0
    5204:	0e 94 16 35 	call	0x6a2c	; 0x6a2c <__udivmodsi4>
    5208:	5f 93       	push	r21
    520a:	4f 93       	push	r20
    520c:	3f 93       	push	r19
    520e:	2f 93       	push	r18
    5210:	81 e6       	ldi	r24, 0x61	; 97
    5212:	91 e0       	ldi	r25, 0x01	; 1
    5214:	9f 93       	push	r25
    5216:	8f 93       	push	r24
    5218:	1f 93       	push	r17
    521a:	0f 93       	push	r16
    521c:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <sprintf_P>
    5220:	0f b6       	in	r0, 0x3f	; 63
				if(_len > 0)
    5222:	f8 94       	cli
    5224:	de bf       	out	0x3e, r29	; 62
    5226:	0f be       	out	0x3f, r0	; 63
    5228:	cd bf       	out	0x3d, r28	; 61
    522a:	18 16       	cp	r1, r24
    522c:	19 06       	cpc	r1, r25
    522e:	3c f4       	brge	.+14     	; 0x523e <main+0x492>
    5230:	9c 01       	movw	r18, r24
				{
					mqtt_pub(&mqtt_client, PUBLISH, _msg, _len);
    5232:	a8 01       	movw	r20, r16
    5234:	6e e7       	ldi	r22, 0x7E	; 126
    5236:	73 e0       	ldi	r23, 0x03	; 3
    5238:	83 ec       	ldi	r24, 0xC3	; 195
    523a:	94 e0       	ldi	r25, 0x04	; 4
    523c:	56 dc       	rcall	.-1876   	; 0x4aea <mqtt_pub>
    523e:	44 e6       	ldi	r20, 0x64	; 100
    5240:	50 e0       	ldi	r21, 0x00	; 0
				ping_request(2, netInfo.dns);
				#endif
			}
		}
	    // MQTT broker connection and sub receive
	    MQTTYield(&mqtt_client, 100);//~100msec blocking here
    5242:	60 e0       	ldi	r22, 0x00	; 0
    5244:	70 e0       	ldi	r23, 0x00	; 0
    5246:	83 ec       	ldi	r24, 0xC3	; 195
    5248:	94 e0       	ldi	r25, 0x04	; 4
    524a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <MQTTYield>
    524e:	9b cf       	rjmp	.-202    	; 0x5186 <main+0x3da>

00005250 <spi_init>:

void
spi_init(void)
{
  // CS PIN for FLASH
  DDRD	|= _BV(WIZNET_CS); // CS to OUT && Disable
    5250:	8a b1       	in	r24, 0x0a	; 10
    5252:	80 64       	ori	r24, 0x40	; 64
    5254:	8a b9       	out	0x0a, r24	; 10
  SPI_WIZNET_DISABLE();
    5256:	8b b1       	in	r24, 0x0b	; 11
    5258:	80 64       	ori	r24, 0x40	; 64
    525a:	8b b9       	out	0x0b, r24	; 11
  
  /* Initalize ports for communication with SPI units. */
  /* CSN=SS and must be output when master! */
  //DDRB  |= _BV(MOSI) | _BV(SCK) | _BV(CSN);
  DDRB  |= _BV(MOSI) | _BV(SCK);
    525c:	84 b1       	in	r24, 0x04	; 4
    525e:	86 60       	ori	r24, 0x06	; 6
    5260:	84 b9       	out	0x04, r24	; 4
  PORTB |= _BV(MOSI) | _BV(SCK);
    5262:	85 b1       	in	r24, 0x05	; 5
    5264:	86 60       	ori	r24, 0x06	; 6
    5266:	85 b9       	out	0x05, r24	; 5
  DDRD |= _BV(CSN);
    5268:	8a b1       	in	r24, 0x0a	; 10
    526a:	80 61       	ori	r24, 0x10	; 16
    526c:	8a b9       	out	0x0a, r24	; 10
 
  /* Enables SPI, selects "master", clock rate FCK / 4 - 4Mhz, and SPI mode 0 */
  SPCR = _BV(SPE) | _BV(MSTR);
    526e:	80 e5       	ldi	r24, 0x50	; 80
    5270:	8c bd       	out	0x2c, r24	; 44
#if defined(SPI_8_MHZ)
  SPSR = _BV(SPI2X); //FCK / 2 - 8Mhz
#elif defined (SPI_4_MHZ)
  SPSR = 0x0; //FCK / 4 - 4Mhz
#else
  SPSR = 0x0; //FCK / 4 - 4Mhz
    5272:	1d bc       	out	0x2d, r1	; 45
    5274:	08 95       	ret

00005276 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    5276:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    5278:	0f b6       	in	r0, 0x3f	; 63
    527a:	f8 94       	cli
    527c:	a8 95       	wdr
    527e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    5282:	88 61       	ori	r24, 0x18	; 24
    5284:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    5288:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    528c:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    528e:	e1 e6       	ldi	r30, 0x61	; 97
    5290:	f0 e0       	ldi	r31, 0x00	; 0
    5292:	80 e8       	ldi	r24, 0x80	; 128
    5294:	80 83       	st	Z, r24
  CLKPR = 0;
    5296:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    5298:	78 94       	sei

  HAL_TimerInit();
    529a:	01 c0       	rjmp	.+2      	; 0x529e <HAL_TimerInit>
    529c:	08 95       	ret

0000529e <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
    529e:	10 92 70 25 	sts	0x2570, r1	; 0x802570 <halTimerIrqCount>
    52a2:	80 e1       	ldi	r24, 0x10	; 16
    52a4:	97 e2       	ldi	r25, 0x27	; 39
    52a6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    52aa:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
    52ae:	e1 ea       	ldi	r30, 0xA1	; 161
    52b0:	f0 e0       	ldi	r31, 0x00	; 0
    52b2:	88 e0       	ldi	r24, 0x08	; 8
    52b4:	80 83       	st	Z, r24
    52b6:	80 81       	ld	r24, Z
    52b8:	82 60       	ori	r24, 0x02	; 2
    52ba:	80 83       	st	Z, r24
    52bc:	e2 e7       	ldi	r30, 0x72	; 114
    52be:	f0 e0       	ldi	r31, 0x00	; 0
    52c0:	80 81       	ld	r24, Z
    52c2:	82 60       	ori	r24, 0x02	; 2
    52c4:	80 83       	st	Z, r24
    52c6:	08 95       	ret

000052c8 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    52c8:	1f 92       	push	r1
    52ca:	0f 92       	push	r0
    52cc:	0f b6       	in	r0, 0x3f	; 63
    52ce:	0f 92       	push	r0
    52d0:	11 24       	eor	r1, r1
    52d2:	8f 93       	push	r24
  halTimerIrqCount++;
    52d4:	80 91 70 25 	lds	r24, 0x2570	; 0x802570 <halTimerIrqCount>
    52d8:	8f 5f       	subi	r24, 0xFF	; 255
    52da:	80 93 70 25 	sts	0x2570, r24	; 0x802570 <halTimerIrqCount>
}
    52de:	8f 91       	pop	r24
    52e0:	0f 90       	pop	r0
    52e2:	0f be       	out	0x3f, r0	; 63
    52e4:	0f 90       	pop	r0
    52e6:	1f 90       	pop	r1
    52e8:	18 95       	reti

000052ea <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
    52ea:	1f 92       	push	r1
    52ec:	0f 92       	push	r0
    52ee:	0f b6       	in	r0, 0x3f	; 63
    52f0:	0f 92       	push	r0
    52f2:	11 24       	eor	r1, r1
    52f4:	8f 93       	push	r24
  halSleepTimerEvent = true;
    52f6:	81 e0       	ldi	r24, 0x01	; 1
    52f8:	80 93 7a 06 	sts	0x067A, r24	; 0x80067a <halSleepTimerEvent>
}
    52fc:	8f 91       	pop	r24
    52fe:	0f 90       	pop	r0
    5300:	0f be       	out	0x3f, r0	; 63
    5302:	0f 90       	pop	r0
    5304:	1f 90       	pop	r1
    5306:	18 95       	reti

00005308 <HAL_UartInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
    5308:	dc 01       	movw	r26, r24
    530a:	cb 01       	movw	r24, r22
    530c:	88 0f       	add	r24, r24
    530e:	99 1f       	adc	r25, r25
    5310:	aa 1f       	adc	r26, r26
    5312:	bb 1f       	adc	r27, r27
    5314:	88 0f       	add	r24, r24
    5316:	99 1f       	adc	r25, r25
    5318:	aa 1f       	adc	r26, r26
    531a:	bb 1f       	adc	r27, r27
    531c:	9c 01       	movw	r18, r24
    531e:	ad 01       	movw	r20, r26
    5320:	22 0f       	add	r18, r18
    5322:	33 1f       	adc	r19, r19
    5324:	44 1f       	adc	r20, r20
    5326:	55 1f       	adc	r21, r21
    5328:	22 0f       	add	r18, r18
    532a:	33 1f       	adc	r19, r19
    532c:	44 1f       	adc	r20, r20
    532e:	55 1f       	adc	r21, r21
    5330:	60 e0       	ldi	r22, 0x00	; 0
    5332:	74 e2       	ldi	r23, 0x24	; 36
    5334:	84 ef       	ldi	r24, 0xF4	; 244
    5336:	90 e0       	ldi	r25, 0x00	; 0
    5338:	0e 94 16 35 	call	0x6a2c	; 0x6a2c <__udivmodsi4>
    533c:	ba 01       	movw	r22, r20
    533e:	a9 01       	movw	r20, r18
    5340:	41 50       	subi	r20, 0x01	; 1
    5342:	51 09       	sbc	r21, r1
    5344:	61 09       	sbc	r22, r1
    5346:	71 09       	sbc	r23, r1

  UBRRxH = (brr >> 8) & 0xff;
    5348:	bb 27       	eor	r27, r27
    534a:	a7 2f       	mov	r26, r23
    534c:	96 2f       	mov	r25, r22
    534e:	85 2f       	mov	r24, r21
    5350:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
  UBRRxL = (brr & 0xff);
    5354:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
  UCSRxA = (1 << U2X1);
    5358:	82 e0       	ldi	r24, 0x02	; 2
    535a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
    535e:	88 e9       	ldi	r24, 0x98	; 152
    5360:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
  UCSRxC = (3 << UCSZ10);
    5364:	86 e0       	ldi	r24, 0x06	; 6
    5366:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>

  txFifo.data = txData;
    536a:	e9 ea       	ldi	r30, 0xA9	; 169
    536c:	f9 e0       	ldi	r31, 0x09	; 9
    536e:	88 e1       	ldi	r24, 0x18	; 24
    5370:	98 e0       	ldi	r25, 0x08	; 8
    5372:	91 87       	std	Z+9, r25	; 0x09
    5374:	80 87       	std	Z+8, r24	; 0x08
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
    5376:	80 e9       	ldi	r24, 0x90	; 144
    5378:	91 e0       	ldi	r25, 0x01	; 1
    537a:	95 83       	std	Z+5, r25	; 0x05
    537c:	84 83       	std	Z+4, r24	; 0x04
  txFifo.bytes = 0;
    537e:	17 82       	std	Z+7, r1	; 0x07
    5380:	16 82       	std	Z+6, r1	; 0x06
  txFifo.head = 0;
    5382:	11 82       	std	Z+1, r1	; 0x01
    5384:	10 82       	st	Z, r1
  txFifo.tail = 0;
    5386:	13 82       	std	Z+3, r1	; 0x03
    5388:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
    538a:	ee e0       	ldi	r30, 0x0E	; 14
    538c:	f8 e0       	ldi	r31, 0x08	; 8
    538e:	2d e7       	ldi	r18, 0x7D	; 125
    5390:	36 e0       	ldi	r19, 0x06	; 6
    5392:	31 87       	std	Z+9, r19	; 0x09
    5394:	20 87       	std	Z+8, r18	; 0x08
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
    5396:	95 83       	std	Z+5, r25	; 0x05
    5398:	84 83       	std	Z+4, r24	; 0x04
  rxFifo.bytes = 0;
    539a:	17 82       	std	Z+7, r1	; 0x07
    539c:	16 82       	std	Z+6, r1	; 0x06
  rxFifo.head = 0;
    539e:	11 82       	std	Z+1, r1	; 0x01
    53a0:	10 82       	st	Z, r1
  rxFifo.tail = 0;
    53a2:	13 82       	std	Z+3, r1	; 0x03
    53a4:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
    53a6:	81 e0       	ldi	r24, 0x01	; 1
    53a8:	80 93 7c 06 	sts	0x067C, r24	; 0x80067c <udrEmpty>
  newData = false;
    53ac:	10 92 7b 06 	sts	0x067B, r1	; 0x80067b <newData>
    53b0:	08 95       	ret

000053b2 <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
    53b2:	cf 93       	push	r28
    53b4:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
    53b6:	e9 ea       	ldi	r30, 0xA9	; 169
    53b8:	f9 e0       	ldi	r31, 0x09	; 9
    53ba:	26 81       	ldd	r18, Z+6	; 0x06
    53bc:	37 81       	ldd	r19, Z+7	; 0x07
    53be:	64 81       	ldd	r22, Z+4	; 0x04
    53c0:	75 81       	ldd	r23, Z+5	; 0x05
    53c2:	26 17       	cp	r18, r22
    53c4:	37 07       	cpc	r19, r23
    53c6:	c9 f0       	breq	.+50     	; 0x53fa <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
    53c8:	c0 85       	ldd	r28, Z+8	; 0x08
    53ca:	d1 85       	ldd	r29, Z+9	; 0x09
    53cc:	42 81       	ldd	r20, Z+2	; 0x02
    53ce:	53 81       	ldd	r21, Z+3	; 0x03
    53d0:	da 01       	movw	r26, r20
    53d2:	11 96       	adiw	r26, 0x01	; 1
    53d4:	b3 83       	std	Z+3, r27	; 0x03
    53d6:	a2 83       	std	Z+2, r26	; 0x02
    53d8:	fe 01       	movw	r30, r28
    53da:	e4 0f       	add	r30, r20
    53dc:	f5 1f       	adc	r31, r21
    53de:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
    53e0:	6a 17       	cp	r22, r26
    53e2:	7b 07       	cpc	r23, r27
    53e4:	21 f4       	brne	.+8      	; 0x53ee <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
    53e6:	10 92 ac 09 	sts	0x09AC, r1	; 0x8009ac <txFifo+0x3>
    53ea:	10 92 ab 09 	sts	0x09AB, r1	; 0x8009ab <txFifo+0x2>
  txFifo.bytes++;
    53ee:	2f 5f       	subi	r18, 0xFF	; 255
    53f0:	3f 4f       	sbci	r19, 0xFF	; 255
    53f2:	30 93 b0 09 	sts	0x09B0, r19	; 0x8009b0 <txFifo+0x7>
    53f6:	20 93 af 09 	sts	0x09AF, r18	; 0x8009af <txFifo+0x6>
}
    53fa:	df 91       	pop	r29
    53fc:	cf 91       	pop	r28
    53fe:	08 95       	ret

00005400 <HAL_UARTWriteString>:

void HAL_UARTWriteString(char *text)
{
    5400:	cf 93       	push	r28
    5402:	df 93       	push	r29
    5404:	ec 01       	movw	r28, r24
	while (*text != 0x00)
    5406:	02 c0       	rjmp	.+4      	; 0x540c <HAL_UARTWriteString+0xc>
	{
		HAL_UartWriteByte(*text);
    5408:	d4 df       	rcall	.-88     	; 0x53b2 <HAL_UartWriteByte>
		text++;
    540a:	21 96       	adiw	r28, 0x01	; 1
  txFifo.bytes++;
}

void HAL_UARTWriteString(char *text)
{
	while (*text != 0x00)
    540c:	88 81       	ld	r24, Y
    540e:	81 11       	cpse	r24, r1
    5410:	fb cf       	rjmp	.-10     	; 0x5408 <HAL_UARTWriteString+0x8>
	{
		HAL_UartWriteByte(*text);
		text++;
	}
}
    5412:	df 91       	pop	r29
    5414:	cf 91       	pop	r28
    5416:	08 95       	ret

00005418 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
    5418:	4f b7       	in	r20, 0x3f	; 63
    541a:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
    541c:	ee e0       	ldi	r30, 0x0E	; 14
    541e:	f8 e0       	ldi	r31, 0x08	; 8
    5420:	20 85       	ldd	r18, Z+8	; 0x08
    5422:	31 85       	ldd	r19, Z+9	; 0x09
    5424:	80 81       	ld	r24, Z
    5426:	91 81       	ldd	r25, Z+1	; 0x01
    5428:	bc 01       	movw	r22, r24
    542a:	6f 5f       	subi	r22, 0xFF	; 255
    542c:	7f 4f       	sbci	r23, 0xFF	; 255
    542e:	71 83       	std	Z+1, r23	; 0x01
    5430:	60 83       	st	Z, r22
    5432:	d9 01       	movw	r26, r18
    5434:	a8 0f       	add	r26, r24
    5436:	b9 1f       	adc	r27, r25
    5438:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
    543a:	60 81       	ld	r22, Z
    543c:	71 81       	ldd	r23, Z+1	; 0x01
    543e:	24 81       	ldd	r18, Z+4	; 0x04
    5440:	35 81       	ldd	r19, Z+5	; 0x05
    5442:	62 17       	cp	r22, r18
    5444:	73 07       	cpc	r23, r19
    5446:	21 f4       	brne	.+8      	; 0x5450 <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
    5448:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <rxFifo+0x1>
    544c:	10 92 0e 08 	sts	0x080E, r1	; 0x80080e <rxFifo>
    rxFifo.bytes--;
    5450:	ee e0       	ldi	r30, 0x0E	; 14
    5452:	f8 e0       	ldi	r31, 0x08	; 8
    5454:	26 81       	ldd	r18, Z+6	; 0x06
    5456:	37 81       	ldd	r19, Z+7	; 0x07
    5458:	21 50       	subi	r18, 0x01	; 1
    545a:	31 09       	sbc	r19, r1
    545c:	37 83       	std	Z+7, r19	; 0x07
    545e:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
    5460:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
    5462:	08 95       	ret

00005464 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
    5464:	1f 92       	push	r1
    5466:	0f 92       	push	r0
    5468:	0f b6       	in	r0, 0x3f	; 63
    546a:	0f 92       	push	r0
    546c:	11 24       	eor	r1, r1
    546e:	0b b6       	in	r0, 0x3b	; 59
    5470:	0f 92       	push	r0
    5472:	8f 93       	push	r24
    5474:	ef 93       	push	r30
    5476:	ff 93       	push	r31
  udrEmpty = true;
    5478:	81 e0       	ldi	r24, 0x01	; 1
    547a:	80 93 7c 06 	sts	0x067C, r24	; 0x80067c <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
    547e:	e9 ec       	ldi	r30, 0xC9	; 201
    5480:	f0 e0       	ldi	r31, 0x00	; 0
    5482:	80 81       	ld	r24, Z
    5484:	8f 7d       	andi	r24, 0xDF	; 223
    5486:	80 83       	st	Z, r24
}
    5488:	ff 91       	pop	r31
    548a:	ef 91       	pop	r30
    548c:	8f 91       	pop	r24
    548e:	0f 90       	pop	r0
    5490:	0b be       	out	0x3b, r0	; 59
    5492:	0f 90       	pop	r0
    5494:	0f be       	out	0x3f, r0	; 63
    5496:	0f 90       	pop	r0
    5498:	1f 90       	pop	r1
    549a:	18 95       	reti

0000549c <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
    549c:	1f 92       	push	r1
    549e:	0f 92       	push	r0
    54a0:	0f b6       	in	r0, 0x3f	; 63
    54a2:	0f 92       	push	r0
    54a4:	11 24       	eor	r1, r1
    54a6:	0b b6       	in	r0, 0x3b	; 59
    54a8:	0f 92       	push	r0
    54aa:	2f 93       	push	r18
    54ac:	3f 93       	push	r19
    54ae:	4f 93       	push	r20
    54b0:	5f 93       	push	r21
    54b2:	6f 93       	push	r22
    54b4:	7f 93       	push	r23
    54b6:	8f 93       	push	r24
    54b8:	9f 93       	push	r25
    54ba:	af 93       	push	r26
    54bc:	bf 93       	push	r27
    54be:	ef 93       	push	r30
    54c0:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
    54c2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
    54c6:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
    54ca:	8c 71       	andi	r24, 0x1C	; 28
    54cc:	59 f5       	brne	.+86     	; 0x5524 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
    54ce:	ee e0       	ldi	r30, 0x0E	; 14
    54d0:	f8 e0       	ldi	r31, 0x08	; 8
    54d2:	46 81       	ldd	r20, Z+6	; 0x06
    54d4:	57 81       	ldd	r21, Z+7	; 0x07
    54d6:	84 81       	ldd	r24, Z+4	; 0x04
    54d8:	95 81       	ldd	r25, Z+5	; 0x05
    54da:	48 17       	cp	r20, r24
    54dc:	59 07       	cpc	r21, r25
    54de:	11 f1       	breq	.+68     	; 0x5524 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
    54e0:	40 85       	ldd	r20, Z+8	; 0x08
    54e2:	51 85       	ldd	r21, Z+9	; 0x09
    54e4:	82 81       	ldd	r24, Z+2	; 0x02
    54e6:	93 81       	ldd	r25, Z+3	; 0x03
    54e8:	bc 01       	movw	r22, r24
    54ea:	6f 5f       	subi	r22, 0xFF	; 255
    54ec:	7f 4f       	sbci	r23, 0xFF	; 255
    54ee:	73 83       	std	Z+3, r23	; 0x03
    54f0:	62 83       	std	Z+2, r22	; 0x02
    54f2:	da 01       	movw	r26, r20
    54f4:	a8 0f       	add	r26, r24
    54f6:	b9 1f       	adc	r27, r25
    54f8:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
    54fa:	22 81       	ldd	r18, Z+2	; 0x02
    54fc:	33 81       	ldd	r19, Z+3	; 0x03
    54fe:	84 81       	ldd	r24, Z+4	; 0x04
    5500:	95 81       	ldd	r25, Z+5	; 0x05
    5502:	28 17       	cp	r18, r24
    5504:	39 07       	cpc	r19, r25
    5506:	21 f4       	brne	.+8      	; 0x5510 <__vector_36+0x74>
      rxFifo.tail = 0;
    5508:	10 92 11 08 	sts	0x0811, r1	; 0x800811 <rxFifo+0x3>
    550c:	10 92 10 08 	sts	0x0810, r1	; 0x800810 <rxFifo+0x2>
    rxFifo.bytes++;
    5510:	ee e0       	ldi	r30, 0x0E	; 14
    5512:	f8 e0       	ldi	r31, 0x08	; 8
    5514:	86 81       	ldd	r24, Z+6	; 0x06
    5516:	97 81       	ldd	r25, Z+7	; 0x07
    5518:	01 96       	adiw	r24, 0x01	; 1
    551a:	97 83       	std	Z+7, r25	; 0x07
    551c:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
    551e:	81 e0       	ldi	r24, 0x01	; 1
    5520:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <newData>
  }

  PRAGMA(diag_default=Pa082);
}
    5524:	ff 91       	pop	r31
    5526:	ef 91       	pop	r30
    5528:	bf 91       	pop	r27
    552a:	af 91       	pop	r26
    552c:	9f 91       	pop	r25
    552e:	8f 91       	pop	r24
    5530:	7f 91       	pop	r23
    5532:	6f 91       	pop	r22
    5534:	5f 91       	pop	r21
    5536:	4f 91       	pop	r20
    5538:	3f 91       	pop	r19
    553a:	2f 91       	pop	r18
    553c:	0f 90       	pop	r0
    553e:	0b be       	out	0x3b, r0	; 59
    5540:	0f 90       	pop	r0
    5542:	0f be       	out	0x3f, r0	; 63
    5544:	0f 90       	pop	r0
    5546:	1f 90       	pop	r1
    5548:	18 95       	reti

0000554a <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
    554a:	80 91 af 09 	lds	r24, 0x09AF	; 0x8009af <txFifo+0x6>
    554e:	90 91 b0 09 	lds	r25, 0x09B0	; 0x8009b0 <txFifo+0x7>
    5552:	00 97       	sbiw	r24, 0x00	; 0
    5554:	69 f1       	breq	.+90     	; 0x55b0 <HAL_UartTaskHandler+0x66>
    5556:	20 91 7c 06 	lds	r18, 0x067C	; 0x80067c <udrEmpty>
    555a:	22 23       	and	r18, r18
    555c:	49 f1       	breq	.+82     	; 0x55b0 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
    555e:	e9 ea       	ldi	r30, 0xA9	; 169
    5560:	f9 e0       	ldi	r31, 0x09	; 9
    5562:	60 85       	ldd	r22, Z+8	; 0x08
    5564:	71 85       	ldd	r23, Z+9	; 0x09
    5566:	20 81       	ld	r18, Z
    5568:	31 81       	ldd	r19, Z+1	; 0x01
    556a:	a9 01       	movw	r20, r18
    556c:	4f 5f       	subi	r20, 0xFF	; 255
    556e:	5f 4f       	sbci	r21, 0xFF	; 255
    5570:	51 83       	std	Z+1, r21	; 0x01
    5572:	40 83       	st	Z, r20
    5574:	db 01       	movw	r26, r22
    5576:	a2 0f       	add	r26, r18
    5578:	b3 1f       	adc	r27, r19
    557a:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
    557c:	64 81       	ldd	r22, Z+4	; 0x04
    557e:	75 81       	ldd	r23, Z+5	; 0x05
    5580:	46 17       	cp	r20, r22
    5582:	57 07       	cpc	r21, r23
    5584:	21 f4       	brne	.+8      	; 0x558e <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
    5586:	10 92 aa 09 	sts	0x09AA, r1	; 0x8009aa <txFifo+0x1>
    558a:	10 92 a9 09 	sts	0x09A9, r1	; 0x8009a9 <txFifo>
    txFifo.bytes--;
    558e:	01 97       	sbiw	r24, 0x01	; 1
    5590:	90 93 b0 09 	sts	0x09B0, r25	; 0x8009b0 <txFifo+0x7>
    5594:	80 93 af 09 	sts	0x09AF, r24	; 0x8009af <txFifo+0x6>

    ATOMIC_SECTION_ENTER
    5598:	9f b7       	in	r25, 0x3f	; 63
    559a:	f8 94       	cli
      UDRx = byte;
    559c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
    55a0:	e9 ec       	ldi	r30, 0xC9	; 201
    55a2:	f0 e0       	ldi	r31, 0x00	; 0
    55a4:	80 81       	ld	r24, Z
    55a6:	80 62       	ori	r24, 0x20	; 32
    55a8:	80 83       	st	Z, r24
      udrEmpty = false;
    55aa:	10 92 7c 06 	sts	0x067C, r1	; 0x80067c <udrEmpty>
    ATOMIC_SECTION_LEAVE
    55ae:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
    55b0:	2f b7       	in	r18, 0x3f	; 63
    55b2:	f8 94       	cli
      new = newData;
    55b4:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <newData>
      newData = false;
    55b8:	10 92 7b 06 	sts	0x067B, r1	; 0x80067b <newData>
      bytes = rxFifo.bytes;
    55bc:	40 91 14 08 	lds	r20, 0x0814	; 0x800814 <rxFifo+0x6>
    55c0:	50 91 15 08 	lds	r21, 0x0815	; 0x800815 <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
    55c4:	2f bf       	out	0x3f, r18	; 63

    if (new)
    55c6:	99 23       	and	r25, r25
    55c8:	11 f0       	breq	.+4      	; 0x55ce <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
    55ca:	ca 01       	movw	r24, r20
    55cc:	60 ca       	rjmp	.-2880   	; 0x4a8e <HAL_UartBytesReceived>
    55ce:	08 95       	ret

000055d0 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
    55d0:	e1 e7       	ldi	r30, 0x71	; 113
    55d2:	f5 e2       	ldi	r31, 0x25	; 37
    55d4:	14 82       	std	Z+4, r1	; 0x04
    55d6:	15 82       	std	Z+5, r1	; 0x05
    55d8:	11 82       	std	Z+1, r1	; 0x01
    55da:	10 82       	st	Z, r1
    55dc:	17 a2       	std	Z+39, r1	; 0x27
    55de:	16 a2       	std	Z+38, r1	; 0x26
    55e0:	80 e0       	ldi	r24, 0x00	; 0
    55e2:	0a c0       	rjmp	.+20     	; 0x55f8 <NWK_Init+0x28>
    55e4:	e8 2f       	mov	r30, r24
    55e6:	f0 e0       	ldi	r31, 0x00	; 0
    55e8:	33 96       	adiw	r30, 0x03	; 3
    55ea:	ee 0f       	add	r30, r30
    55ec:	ff 1f       	adc	r31, r31
    55ee:	ef 58       	subi	r30, 0x8F	; 143
    55f0:	fa 4d       	sbci	r31, 0xDA	; 218
    55f2:	11 82       	std	Z+1, r1	; 0x01
    55f4:	10 82       	st	Z, r1
    55f6:	8f 5f       	subi	r24, 0xFF	; 255
    55f8:	80 31       	cpi	r24, 0x10	; 16
    55fa:	a0 f3       	brcs	.-24     	; 0x55e4 <NWK_Init+0x14>
    55fc:	39 d6       	rcall	.+3186   	; 0x6270 <nwkTxInit>
    55fe:	8d d5       	rcall	.+2842   	; 0x611a <nwkRxInit>
    5600:	06 d1       	rcall	.+524    	; 0x580e <nwkFrameInit>
    5602:	c5 d0       	rcall	.+394    	; 0x578e <nwkDataReqInit>
    5604:	bd c1       	rjmp	.+890    	; 0x5980 <nwkRouteInit>
    5606:	08 95       	ret

00005608 <NWK_SetAddr>:
    5608:	90 93 72 25 	sts	0x2572, r25	; 0x802572 <nwkIb+0x1>
    560c:	80 93 71 25 	sts	0x2571, r24	; 0x802571 <nwkIb>
    5610:	0c 94 43 33 	jmp	0x6686	; 0x6686 <PHY_SetShortAddr>
    5614:	08 95       	ret

00005616 <NWK_SetPanId>:
    5616:	90 93 74 25 	sts	0x2574, r25	; 0x802574 <nwkIb+0x3>
    561a:	80 93 73 25 	sts	0x2573, r24	; 0x802573 <nwkIb+0x2>
    561e:	0c 94 31 33 	jmp	0x6662	; 0x6662 <PHY_SetPanId>
    5622:	08 95       	ret

00005624 <NWK_OpenEndpoint>:
    5624:	e8 2f       	mov	r30, r24
    5626:	f0 e0       	ldi	r31, 0x00	; 0
    5628:	33 96       	adiw	r30, 0x03	; 3
    562a:	ee 0f       	add	r30, r30
    562c:	ff 1f       	adc	r31, r31
    562e:	ef 58       	subi	r30, 0x8F	; 143
    5630:	fa 4d       	sbci	r31, 0xDA	; 218
    5632:	71 83       	std	Z+1, r23	; 0x01
    5634:	60 83       	st	Z, r22
    5636:	08 95       	ret

00005638 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    5638:	c2 d5       	rcall	.+2948   	; 0x61be <nwkRxTaskHandler>
  nwkTxTaskHandler();
    563a:	44 d7       	rcall	.+3720   	; 0x64c4 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    563c:	d1 c0       	rjmp	.+418    	; 0x57e0 <nwkDataReqTaskHandler>
    563e:	08 95       	ret

00005640 <nwkDataReqConfirm>:
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    5640:	a0 91 b3 09 	lds	r26, 0x09B3	; 0x8009b3 <nwkDataReqQueue>
    5644:	b0 91 b4 09 	lds	r27, 0x09B4	; 0x8009b4 <nwkDataReqQueue+0x1>
    5648:	a8 17       	cp	r26, r24
    564a:	b9 07       	cpc	r27, r25
    564c:	41 f4       	brne	.+16     	; 0x565e <nwkDataReqConfirm+0x1e>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    564e:	2d 91       	ld	r18, X+
    5650:	3c 91       	ld	r19, X
    5652:	30 93 b4 09 	sts	0x09B4, r19	; 0x8009b4 <nwkDataReqQueue+0x1>
    5656:	20 93 b3 09 	sts	0x09B3, r18	; 0x8009b3 <nwkDataReqQueue>
    565a:	0b c0       	rjmp	.+22     	; 0x5672 <nwkDataReqConfirm+0x32>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    565c:	df 01       	movw	r26, r30
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    565e:	ed 91       	ld	r30, X+
    5660:	fc 91       	ld	r31, X
    5662:	11 97       	sbiw	r26, 0x01	; 1
    5664:	8e 17       	cp	r24, r30
    5666:	9f 07       	cpc	r25, r31
    5668:	c9 f7       	brne	.-14     	; 0x565c <nwkDataReqConfirm+0x1c>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    566a:	20 81       	ld	r18, Z
    566c:	31 81       	ldd	r19, Z+1	; 0x01
    566e:	2d 93       	st	X+, r18
    5670:	3c 93       	st	X, r19
  }

  nwkIb.lock--;
    5672:	e1 e7       	ldi	r30, 0x71	; 113
    5674:	f5 e2       	ldi	r31, 0x25	; 37
    5676:	26 a1       	ldd	r18, Z+38	; 0x26
    5678:	37 a1       	ldd	r19, Z+39	; 0x27
    567a:	21 50       	subi	r18, 0x01	; 1
    567c:	31 09       	sbc	r19, r1
    567e:	37 a3       	std	Z+39, r19	; 0x27
    5680:	26 a3       	std	Z+38, r18	; 0x26
  req->confirm(req);
    5682:	dc 01       	movw	r26, r24
    5684:	1d 96       	adiw	r26, 0x0d	; 13
    5686:	ed 91       	ld	r30, X+
    5688:	fc 91       	ld	r31, X
    568a:	1e 97       	sbiw	r26, 0x0e	; 14
    568c:	19 95       	eicall
    568e:	08 95       	ret

00005690 <nwkDataReqSendFrame>:
/*************************************************************************//**
  @brief Prepares and send outgoing frame based on the request @a req parameters
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
    5690:	0f 93       	push	r16
    5692:	1f 93       	push	r17
    5694:	cf 93       	push	r28
    5696:	df 93       	push	r29
    5698:	8c 01       	movw	r16, r24
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    569a:	c6 d0       	rcall	.+396    	; 0x5828 <nwkFrameAlloc>
    569c:	ec 01       	movw	r28, r24
    569e:	00 97       	sbiw	r24, 0x00	; 0
    56a0:	29 f4       	brne	.+10     	; 0x56ac <nwkDataReqSendFrame+0x1c>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    56a2:	82 e0       	ldi	r24, 0x02	; 2
    56a4:	f8 01       	movw	r30, r16
    56a6:	84 83       	std	Z+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    56a8:	87 87       	std	Z+15, r24	; 0x0f
    return;
    56aa:	50 c0       	rjmp	.+160    	; 0x574c <nwkDataReqSendFrame+0xbc>
  }

  req->frame = frame;
    56ac:	f8 01       	movw	r30, r16
    56ae:	93 83       	std	Z+3, r25	; 0x03
    56b0:	82 83       	std	Z+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    56b2:	81 e0       	ldi	r24, 0x01	; 1
    56b4:	84 83       	std	Z+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    56b6:	fe 01       	movw	r30, r28
    56b8:	e9 57       	subi	r30, 0x79	; 121
    56ba:	ff 4f       	sbci	r31, 0xFF	; 255
    56bc:	8b ea       	ldi	r24, 0xAB	; 171
    56be:	9b e2       	ldi	r25, 0x2B	; 43
    56c0:	91 83       	std	Z+1, r25	; 0x01
    56c2:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    56c4:	f8 01       	movw	r30, r16
    56c6:	81 85       	ldd	r24, Z+9	; 0x09
    56c8:	82 fb       	bst	r24, 2
    56ca:	88 27       	eor	r24, r24
    56cc:	80 f9       	bld	r24, 0
    56ce:	fe 01       	movw	r30, r28
    56d0:	ea 57       	subi	r30, 0x7A	; 122
    56d2:	ff 4f       	sbci	r31, 0xFF	; 255
    56d4:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    56d6:	f8 01       	movw	r30, r16
    56d8:	91 85       	ldd	r25, Z+9	; 0x09
    56da:	8b 85       	ldd	r24, Y+11	; 0x0b
    56dc:	90 fb       	bst	r25, 0
    56de:	80 f9       	bld	r24, 0
    56e0:	8b 87       	std	Y+11, r24	; 0x0b
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    56e2:	91 85       	ldd	r25, Z+9	; 0x09
    56e4:	93 fb       	bst	r25, 3
    56e6:	99 27       	eor	r25, r25
    56e8:	90 f9       	bld	r25, 0
    56ea:	90 fb       	bst	r25, 0
    56ec:	82 f9       	bld	r24, 2
    56ee:	8b 87       	std	Y+11, r24	; 0x0b
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    56f0:	e1 e7       	ldi	r30, 0x71	; 113
    56f2:	f5 e2       	ldi	r31, 0x25	; 37
    56f4:	84 81       	ldd	r24, Z+4	; 0x04
    56f6:	8f 5f       	subi	r24, 0xFF	; 255
    56f8:	84 83       	std	Z+4, r24	; 0x04
    56fa:	8c 87       	std	Y+12, r24	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    56fc:	80 81       	ld	r24, Z
    56fe:	91 81       	ldd	r25, Z+1	; 0x01
    5700:	9e 87       	std	Y+14, r25	; 0x0e
    5702:	8d 87       	std	Y+13, r24	; 0x0d
  frame->header.nwkDstAddr = req->dstAddr;
    5704:	f8 01       	movw	r30, r16
    5706:	85 81       	ldd	r24, Z+5	; 0x05
    5708:	96 81       	ldd	r25, Z+6	; 0x06
    570a:	98 8b       	std	Y+16, r25	; 0x10
    570c:	8f 87       	std	Y+15, r24	; 0x0f
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    570e:	80 85       	ldd	r24, Z+8	; 0x08
    5710:	98 2f       	mov	r25, r24
    5712:	9f 70       	andi	r25, 0x0F	; 15
    5714:	89 89       	ldd	r24, Y+17	; 0x11
    5716:	80 7f       	andi	r24, 0xF0	; 240
    5718:	89 2b       	or	r24, r25
    571a:	89 8b       	std	Y+17, r24	; 0x11
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    571c:	97 81       	ldd	r25, Z+7	; 0x07
    571e:	92 95       	swap	r25
    5720:	90 7f       	andi	r25, 0xF0	; 240
    5722:	8f 70       	andi	r24, 0x0F	; 15
    5724:	89 2b       	or	r24, r25
    5726:	89 8b       	std	Y+17, r24	; 0x11

  memcpy(frame->payload, req->data, req->size);
    5728:	44 85       	ldd	r20, Z+12	; 0x0c
    572a:	62 85       	ldd	r22, Z+10	; 0x0a
    572c:	73 85       	ldd	r23, Z+11	; 0x0b
    572e:	fe 01       	movw	r30, r28
    5730:	ef 57       	subi	r30, 0x7F	; 127
    5732:	ff 4f       	sbci	r31, 0xFF	; 255
    5734:	50 e0       	ldi	r21, 0x00	; 0
    5736:	80 81       	ld	r24, Z
    5738:	91 81       	ldd	r25, Z+1	; 0x01
    573a:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <memcpy>
  frame->size += req->size;
    573e:	f8 01       	movw	r30, r16
    5740:	84 85       	ldd	r24, Z+12	; 0x0c
    5742:	99 81       	ldd	r25, Y+1	; 0x01
    5744:	89 0f       	add	r24, r25
    5746:	89 83       	std	Y+1, r24	; 0x01

  nwkTxFrame(frame);
    5748:	ce 01       	movw	r24, r28
    574a:	b5 d5       	rcall	.+2922   	; 0x62b6 <nwkTxFrame>
}
    574c:	df 91       	pop	r29
    574e:	cf 91       	pop	r28
    5750:	1f 91       	pop	r17
    5752:	0f 91       	pop	r16
    5754:	08 95       	ret

00005756 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    5756:	e0 91 b3 09 	lds	r30, 0x09B3	; 0x8009b3 <nwkDataReqQueue>
    575a:	f0 91 b4 09 	lds	r31, 0x09B4	; 0x8009b4 <nwkDataReqQueue+0x1>
    575e:	13 c0       	rjmp	.+38     	; 0x5786 <nwkDataReqTxConf+0x30>
  {
    if (req->frame == frame)
    5760:	22 81       	ldd	r18, Z+2	; 0x02
    5762:	33 81       	ldd	r19, Z+3	; 0x03
    5764:	28 17       	cp	r18, r24
    5766:	39 07       	cpc	r19, r25
    5768:	59 f4       	brne	.+22     	; 0x5780 <nwkDataReqTxConf+0x2a>
    {
      req->status = frame->tx.status;
    576a:	dc 01       	movw	r26, r24
    576c:	ad 57       	subi	r26, 0x7D	; 125
    576e:	bf 4f       	sbci	r27, 0xFF	; 255
    5770:	2c 91       	ld	r18, X
    5772:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
    5774:	13 96       	adiw	r26, 0x03	; 3
    5776:	2c 91       	ld	r18, X
    5778:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
    577a:	22 e0       	ldi	r18, 0x02	; 2
    577c:	24 83       	std	Z+4, r18	; 0x04
      break;
    577e:	05 c0       	rjmp	.+10     	; 0x578a <nwkDataReqTxConf+0x34>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    5780:	01 90       	ld	r0, Z+
    5782:	f0 81       	ld	r31, Z
    5784:	e0 2d       	mov	r30, r0
    5786:	30 97       	sbiw	r30, 0x00	; 0
    5788:	59 f7       	brne	.-42     	; 0x5760 <nwkDataReqTxConf+0xa>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
    578a:	7f c0       	rjmp	.+254    	; 0x588a <nwkFrameFree>
    578c:	08 95       	ret

0000578e <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    578e:	10 92 b4 09 	sts	0x09B4, r1	; 0x8009b4 <nwkDataReqQueue+0x1>
    5792:	10 92 b3 09 	sts	0x09B3, r1	; 0x8009b3 <nwkDataReqQueue>
    5796:	08 95       	ret

00005798 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    5798:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
    579a:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
    579c:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
    579e:	13 82       	std	Z+3, r1	; 0x03
    57a0:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
    57a2:	a1 e7       	ldi	r26, 0x71	; 113
    57a4:	b5 e2       	ldi	r27, 0x25	; 37
    57a6:	96 96       	adiw	r26, 0x26	; 38
    57a8:	8d 91       	ld	r24, X+
    57aa:	9c 91       	ld	r25, X
    57ac:	97 97       	sbiw	r26, 0x27	; 39
    57ae:	01 96       	adiw	r24, 0x01	; 1
    57b0:	97 96       	adiw	r26, 0x27	; 39
    57b2:	9c 93       	st	X, r25
    57b4:	8e 93       	st	-X, r24
    57b6:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
    57b8:	80 91 b3 09 	lds	r24, 0x09B3	; 0x8009b3 <nwkDataReqQueue>
    57bc:	90 91 b4 09 	lds	r25, 0x09B4	; 0x8009b4 <nwkDataReqQueue+0x1>
    57c0:	00 97       	sbiw	r24, 0x00	; 0
    57c2:	39 f4       	brne	.+14     	; 0x57d2 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
    57c4:	11 82       	std	Z+1, r1	; 0x01
    57c6:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
    57c8:	f0 93 b4 09 	sts	0x09B4, r31	; 0x8009b4 <nwkDataReqQueue+0x1>
    57cc:	e0 93 b3 09 	sts	0x09B3, r30	; 0x8009b3 <nwkDataReqQueue>
    57d0:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    57d2:	91 83       	std	Z+1, r25	; 0x01
    57d4:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    57d6:	f0 93 b4 09 	sts	0x09B4, r31	; 0x8009b4 <nwkDataReqQueue+0x1>
    57da:	e0 93 b3 09 	sts	0x09B3, r30	; 0x8009b3 <nwkDataReqQueue>
    57de:	08 95       	ret

000057e0 <nwkDataReqTaskHandler>:
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    57e0:	e0 91 b3 09 	lds	r30, 0x09B3	; 0x8009b3 <nwkDataReqQueue>
    57e4:	f0 91 b4 09 	lds	r31, 0x09B4	; 0x8009b4 <nwkDataReqQueue+0x1>
    57e8:	0f c0       	rjmp	.+30     	; 0x5808 <nwkDataReqTaskHandler+0x28>
  {
    switch (req->state)
    57ea:	84 81       	ldd	r24, Z+4	; 0x04
    57ec:	88 23       	and	r24, r24
    57ee:	19 f0       	breq	.+6      	; 0x57f6 <nwkDataReqTaskHandler+0x16>
    57f0:	82 30       	cpi	r24, 0x02	; 2
    57f2:	21 f0       	breq	.+8      	; 0x57fc <nwkDataReqTaskHandler+0x1c>
    57f4:	06 c0       	rjmp	.+12     	; 0x5802 <nwkDataReqTaskHandler+0x22>
    {
      case NWK_DATA_REQ_STATE_INITIAL:
      {
        nwkDataReqSendFrame(req);
    57f6:	cf 01       	movw	r24, r30
    57f8:	4b cf       	rjmp	.-362    	; 0x5690 <nwkDataReqSendFrame>
        return;
    57fa:	08 95       	ret
      case NWK_DATA_REQ_STATE_WAIT_CONF:
        break;

      case NWK_DATA_REQ_STATE_CONFIRM:
      {
        nwkDataReqConfirm(req);
    57fc:	cf 01       	movw	r24, r30
    57fe:	20 cf       	rjmp	.-448    	; 0x5640 <nwkDataReqConfirm>
        return;
    5800:	08 95       	ret
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    5802:	01 90       	ld	r0, Z+
    5804:	f0 81       	ld	r31, Z
    5806:	e0 2d       	mov	r30, r0
    5808:	30 97       	sbiw	r30, 0x00	; 0
    580a:	79 f7       	brne	.-34     	; 0x57ea <nwkDataReqTaskHandler+0xa>
    580c:	08 95       	ret

0000580e <nwkFrameInit>:
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    580e:	80 e0       	ldi	r24, 0x00	; 0
    5810:	08 c0       	rjmp	.+16     	; 0x5822 <nwkFrameInit+0x14>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    5812:	99 e8       	ldi	r25, 0x89	; 137
    5814:	89 9f       	mul	r24, r25
    5816:	f0 01       	movw	r30, r0
    5818:	11 24       	eor	r1, r1
    581a:	eb 54       	subi	r30, 0x4B	; 75
    581c:	f6 4f       	sbci	r31, 0xF6	; 246
    581e:	10 82       	st	Z, r1
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    5820:	8f 5f       	subi	r24, 0xFF	; 255
    5822:	8e 31       	cpi	r24, 0x1E	; 30
    5824:	b0 f3       	brcs	.-20     	; 0x5812 <nwkFrameInit+0x4>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    5826:	08 95       	ret

00005828 <nwkFrameAlloc>:
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    5828:	80 e0       	ldi	r24, 0x00	; 0
    582a:	2a c0       	rjmp	.+84     	; 0x5880 <nwkFrameAlloc+0x58>
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    582c:	28 2f       	mov	r18, r24
    582e:	30 e0       	ldi	r19, 0x00	; 0
    5830:	99 e8       	ldi	r25, 0x89	; 137
    5832:	92 9f       	mul	r25, r18
    5834:	f0 01       	movw	r30, r0
    5836:	93 9f       	mul	r25, r19
    5838:	f0 0d       	add	r31, r0
    583a:	11 24       	eor	r1, r1
    583c:	eb 54       	subi	r30, 0x4B	; 75
    583e:	f6 4f       	sbci	r31, 0xF6	; 246
    5840:	90 81       	ld	r25, Z
    5842:	91 11       	cpse	r25, r1
    5844:	1c c0       	rjmp	.+56     	; 0x587e <nwkFrameAlloc+0x56>
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    5846:	69 e8       	ldi	r22, 0x89	; 137
    5848:	62 9f       	mul	r22, r18
    584a:	a0 01       	movw	r20, r0
    584c:	63 9f       	mul	r22, r19
    584e:	50 0d       	add	r21, r0
    5850:	11 24       	eor	r1, r1
    5852:	cf 01       	movw	r24, r30
    5854:	11 92       	st	Z+, r1
    5856:	6a 95       	dec	r22
    5858:	e9 f7       	brne	.-6      	; 0x5854 <nwkFrameAlloc+0x2c>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    585a:	20 e1       	ldi	r18, 0x10	; 16
    585c:	fc 01       	movw	r30, r24
    585e:	21 83       	std	Z+1, r18	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    5860:	49 53       	subi	r20, 0x39	; 57
    5862:	56 4f       	sbci	r21, 0xF6	; 246
    5864:	ef 57       	subi	r30, 0x7F	; 127
    5866:	ff 4f       	sbci	r31, 0xFF	; 255
    5868:	51 83       	std	Z+1, r21	; 0x01
    586a:	40 83       	st	Z, r20
      nwkIb.lock++;
    586c:	e1 e7       	ldi	r30, 0x71	; 113
    586e:	f5 e2       	ldi	r31, 0x25	; 37
    5870:	26 a1       	ldd	r18, Z+38	; 0x26
    5872:	37 a1       	ldd	r19, Z+39	; 0x27
    5874:	2f 5f       	subi	r18, 0xFF	; 255
    5876:	3f 4f       	sbci	r19, 0xFF	; 255
    5878:	37 a3       	std	Z+39, r19	; 0x27
    587a:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
    587c:	08 95       	ret
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    587e:	8f 5f       	subi	r24, 0xFF	; 255
    5880:	8e 31       	cpi	r24, 0x1E	; 30
    5882:	a0 f2       	brcs	.-88     	; 0x582c <nwkFrameAlloc+0x4>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    5884:	80 e0       	ldi	r24, 0x00	; 0
    5886:	90 e0       	ldi	r25, 0x00	; 0
}
    5888:	08 95       	ret

0000588a <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    588a:	fc 01       	movw	r30, r24
    588c:	10 82       	st	Z, r1
  nwkIb.lock--;
    588e:	e1 e7       	ldi	r30, 0x71	; 113
    5890:	f5 e2       	ldi	r31, 0x25	; 37
    5892:	86 a1       	ldd	r24, Z+38	; 0x26
    5894:	97 a1       	ldd	r25, Z+39	; 0x27
    5896:	01 97       	sbiw	r24, 0x01	; 1
    5898:	97 a3       	std	Z+39, r25	; 0x27
    589a:	86 a3       	std	Z+38, r24	; 0x26
    589c:	08 95       	ret

0000589e <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    589e:	00 97       	sbiw	r24, 0x00	; 0
    58a0:	21 f0       	breq	.+8      	; 0x58aa <nwkFrameNext+0xc>
    frame = nwkFrameFrames;
  else
    frame++;
    58a2:	fc 01       	movw	r30, r24
    58a4:	e7 57       	subi	r30, 0x77	; 119
    58a6:	ff 4f       	sbci	r31, 0xFF	; 255
    58a8:	08 c0       	rjmp	.+16     	; 0x58ba <nwkFrameNext+0x1c>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    58aa:	e5 eb       	ldi	r30, 0xB5	; 181
    58ac:	f9 e0       	ldi	r31, 0x09	; 9
    58ae:	05 c0       	rjmp	.+10     	; 0x58ba <nwkFrameNext+0x1c>
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    58b0:	80 81       	ld	r24, Z
    58b2:	81 11       	cpse	r24, r1
    58b4:	09 c0       	rjmp	.+18     	; 0x58c8 <nwkFrameNext+0x2a>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    58b6:	e7 57       	subi	r30, 0x77	; 119
    58b8:	ff 4f       	sbci	r31, 0xFF	; 255
    58ba:	89 e1       	ldi	r24, 0x19	; 25
    58bc:	e3 3c       	cpi	r30, 0xC3	; 195
    58be:	f8 07       	cpc	r31, r24
    58c0:	b8 f3       	brcs	.-18     	; 0x58b0 <nwkFrameNext+0x12>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    58c2:	80 e0       	ldi	r24, 0x00	; 0
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	08 95       	ret
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
    58c8:	8e 2f       	mov	r24, r30
    58ca:	9f 2f       	mov	r25, r31
  }

  return NULL;
}
    58cc:	08 95       	ret

000058ce <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    58ce:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    58d0:	dc 01       	movw	r26, r24
    58d2:	ad 57       	subi	r26, 0x7D	; 125
    58d4:	bf 4f       	sbci	r27, 0xFF	; 255
    58d6:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    58d8:	a1 e7       	ldi	r26, 0x71	; 113
    58da:	b5 e2       	ldi	r27, 0x25	; 37
    58dc:	14 96       	adiw	r26, 0x04	; 4
    58de:	9c 91       	ld	r25, X
    58e0:	14 97       	sbiw	r26, 0x04	; 4
    58e2:	9f 5f       	subi	r25, 0xFF	; 255
    58e4:	14 96       	adiw	r26, 0x04	; 4
    58e6:	9c 93       	st	X, r25
    58e8:	14 97       	sbiw	r26, 0x04	; 4
    58ea:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    58ec:	8d 91       	ld	r24, X+
    58ee:	9c 91       	ld	r25, X
    58f0:	96 87       	std	Z+14, r25	; 0x0e
    58f2:	85 87       	std	Z+13, r24	; 0x0d
    58f4:	08 95       	ret

000058f6 <nwkRouteNormalizeRanks>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	12 c0       	rjmp	.+36     	; 0x591e <nwkRouteNormalizeRanks+0x28>
    58fa:	29 2f       	mov	r18, r25
    58fc:	30 e0       	ldi	r19, 0x00	; 0
    58fe:	f9 01       	movw	r30, r18
    5900:	ee 0f       	add	r30, r30
    5902:	ff 1f       	adc	r31, r31
    5904:	ee 0f       	add	r30, r30
    5906:	ff 1f       	adc	r31, r31
    5908:	ee 0f       	add	r30, r30
    590a:	ff 1f       	adc	r31, r31
    590c:	e2 1b       	sub	r30, r18
    590e:	f3 0b       	sbc	r31, r19
    5910:	ed 53       	subi	r30, 0x3D	; 61
    5912:	f6 4e       	sbci	r31, 0xE6	; 230
    5914:	85 81       	ldd	r24, Z+5	; 0x05
    5916:	86 95       	lsr	r24
    5918:	8f 5f       	subi	r24, 0xFF	; 255
    591a:	85 83       	std	Z+5, r24	; 0x05
    591c:	9f 5f       	subi	r25, 0xFF	; 255
    591e:	94 36       	cpi	r25, 0x64	; 100
    5920:	60 f3       	brcs	.-40     	; 0x58fa <nwkRouteNormalizeRanks+0x4>
    5922:	08 95       	ret

00005924 <nwkRouteSendRouteError>:
    5924:	df 92       	push	r13
    5926:	ef 92       	push	r14
    5928:	ff 92       	push	r15
    592a:	0f 93       	push	r16
    592c:	1f 93       	push	r17
    592e:	cf 93       	push	r28
    5930:	df 93       	push	r29
    5932:	8c 01       	movw	r16, r24
    5934:	7b 01       	movw	r14, r22
    5936:	d4 2e       	mov	r13, r20
    5938:	77 df       	rcall	.-274    	; 0x5828 <nwkFrameAlloc>
    593a:	ec 01       	movw	r28, r24
    593c:	00 97       	sbiw	r24, 0x00	; 0
    593e:	c1 f0       	breq	.+48     	; 0x5970 <nwkRouteSendRouteError+0x4c>
    5940:	c6 df       	rcall	.-116    	; 0x58ce <nwkFrameCommandInit>
    5942:	89 81       	ldd	r24, Y+1	; 0x01
    5944:	8a 5f       	subi	r24, 0xFA	; 250
    5946:	89 83       	std	Y+1, r24	; 0x01
    5948:	fe 01       	movw	r30, r28
    594a:	e9 57       	subi	r30, 0x79	; 121
    594c:	ff 4f       	sbci	r31, 0xFF	; 255
    594e:	11 82       	std	Z+1, r1	; 0x01
    5950:	10 82       	st	Z, r1
    5952:	18 8b       	std	Y+16, r17	; 0x10
    5954:	0f 87       	std	Y+15, r16	; 0x0f
    5956:	36 97       	sbiw	r30, 0x06	; 6
    5958:	01 90       	ld	r0, Z+
    595a:	f0 81       	ld	r31, Z
    595c:	e0 2d       	mov	r30, r0
    595e:	81 e0       	ldi	r24, 0x01	; 1
    5960:	80 83       	st	Z, r24
    5962:	12 83       	std	Z+2, r17	; 0x02
    5964:	01 83       	std	Z+1, r16	; 0x01
    5966:	f4 82       	std	Z+4, r15	; 0x04
    5968:	e3 82       	std	Z+3, r14	; 0x03
    596a:	d5 82       	std	Z+5, r13	; 0x05
    596c:	ce 01       	movw	r24, r28
    596e:	a3 d4       	rcall	.+2374   	; 0x62b6 <nwkTxFrame>
    5970:	df 91       	pop	r29
    5972:	cf 91       	pop	r28
    5974:	1f 91       	pop	r17
    5976:	0f 91       	pop	r16
    5978:	ff 90       	pop	r15
    597a:	ef 90       	pop	r14
    597c:	df 90       	pop	r13
    597e:	08 95       	ret

00005980 <nwkRouteInit>:
    5980:	80 e0       	ldi	r24, 0x00	; 0
    5982:	16 c0       	rjmp	.+44     	; 0x59b0 <nwkRouteInit+0x30>
    5984:	28 2f       	mov	r18, r24
    5986:	30 e0       	ldi	r19, 0x00	; 0
    5988:	f9 01       	movw	r30, r18
    598a:	ee 0f       	add	r30, r30
    598c:	ff 1f       	adc	r31, r31
    598e:	ee 0f       	add	r30, r30
    5990:	ff 1f       	adc	r31, r31
    5992:	ee 0f       	add	r30, r30
    5994:	ff 1f       	adc	r31, r31
    5996:	e2 1b       	sub	r30, r18
    5998:	f3 0b       	sbc	r31, r19
    599a:	ed 53       	subi	r30, 0x3D	; 61
    599c:	f6 4e       	sbci	r31, 0xE6	; 230
    599e:	2f ef       	ldi	r18, 0xFF	; 255
    59a0:	3f ef       	ldi	r19, 0xFF	; 255
    59a2:	32 83       	std	Z+2, r19	; 0x02
    59a4:	21 83       	std	Z+1, r18	; 0x01
    59a6:	90 81       	ld	r25, Z
    59a8:	9e 7f       	andi	r25, 0xFE	; 254
    59aa:	90 83       	st	Z, r25
    59ac:	15 82       	std	Z+5, r1	; 0x05
    59ae:	8f 5f       	subi	r24, 0xFF	; 255
    59b0:	84 36       	cpi	r24, 0x64	; 100
    59b2:	40 f3       	brcs	.-48     	; 0x5984 <nwkRouteInit+0x4>
    59b4:	08 95       	ret

000059b6 <NWK_RouteFindEntry>:
    59b6:	cf 93       	push	r28
    59b8:	df 93       	push	r29
    59ba:	ec 01       	movw	r28, r24
    59bc:	90 e0       	ldi	r25, 0x00	; 0
    59be:	2a c0       	rjmp	.+84     	; 0x5a14 <NWK_RouteFindEntry+0x5e>
    59c0:	29 2f       	mov	r18, r25
    59c2:	30 e0       	ldi	r19, 0x00	; 0
    59c4:	f9 01       	movw	r30, r18
    59c6:	ee 0f       	add	r30, r30
    59c8:	ff 1f       	adc	r31, r31
    59ca:	ee 0f       	add	r30, r30
    59cc:	ff 1f       	adc	r31, r31
    59ce:	ee 0f       	add	r30, r30
    59d0:	ff 1f       	adc	r31, r31
    59d2:	e2 1b       	sub	r30, r18
    59d4:	f3 0b       	sbc	r31, r19
    59d6:	ed 53       	subi	r30, 0x3D	; 61
    59d8:	f6 4e       	sbci	r31, 0xE6	; 230
    59da:	41 81       	ldd	r20, Z+1	; 0x01
    59dc:	52 81       	ldd	r21, Z+2	; 0x02
    59de:	4c 17       	cp	r20, r28
    59e0:	5d 07       	cpc	r21, r29
    59e2:	b9 f4       	brne	.+46     	; 0x5a12 <NWK_RouteFindEntry+0x5c>
    59e4:	f9 01       	movw	r30, r18
    59e6:	ee 0f       	add	r30, r30
    59e8:	ff 1f       	adc	r31, r31
    59ea:	ee 0f       	add	r30, r30
    59ec:	ff 1f       	adc	r31, r31
    59ee:	ee 0f       	add	r30, r30
    59f0:	ff 1f       	adc	r31, r31
    59f2:	e2 1b       	sub	r30, r18
    59f4:	f3 0b       	sbc	r31, r19
    59f6:	ed 53       	subi	r30, 0x3D	; 61
    59f8:	f6 4e       	sbci	r31, 0xE6	; 230
    59fa:	80 81       	ld	r24, Z
    59fc:	81 fb       	bst	r24, 1
    59fe:	aa 27       	eor	r26, r26
    5a00:	a0 f9       	bld	r26, 0
    5a02:	b0 e0       	ldi	r27, 0x00	; 0
    5a04:	46 2f       	mov	r20, r22
    5a06:	50 e0       	ldi	r21, 0x00	; 0
    5a08:	a4 17       	cp	r26, r20
    5a0a:	b5 07       	cpc	r27, r21
    5a0c:	11 f4       	brne	.+4      	; 0x5a12 <NWK_RouteFindEntry+0x5c>
    5a0e:	cf 01       	movw	r24, r30
    5a10:	05 c0       	rjmp	.+10     	; 0x5a1c <NWK_RouteFindEntry+0x66>
    5a12:	9f 5f       	subi	r25, 0xFF	; 255
    5a14:	94 36       	cpi	r25, 0x64	; 100
    5a16:	a0 f2       	brcs	.-88     	; 0x59c0 <NWK_RouteFindEntry+0xa>
    5a18:	80 e0       	ldi	r24, 0x00	; 0
    5a1a:	90 e0       	ldi	r25, 0x00	; 0
    5a1c:	df 91       	pop	r29
    5a1e:	cf 91       	pop	r28
    5a20:	08 95       	ret

00005a22 <NWK_RouteNewEntry>:
    5a22:	80 e0       	ldi	r24, 0x00	; 0
    5a24:	a0 e0       	ldi	r26, 0x00	; 0
    5a26:	b0 e0       	ldi	r27, 0x00	; 0
    5a28:	e3 ec       	ldi	r30, 0xC3	; 195
    5a2a:	f9 e1       	ldi	r31, 0x19	; 25
    5a2c:	13 c0       	rjmp	.+38     	; 0x5a54 <NWK_RouteNewEntry+0x32>
    5a2e:	90 81       	ld	r25, Z
    5a30:	90 fd       	sbrc	r25, 0
    5a32:	0e c0       	rjmp	.+28     	; 0x5a50 <NWK_RouteNewEntry+0x2e>
    5a34:	95 81       	ldd	r25, Z+5	; 0x05
    5a36:	99 23       	and	r25, r25
    5a38:	81 f0       	breq	.+32     	; 0x5a5a <NWK_RouteNewEntry+0x38>
    5a3a:	10 97       	sbiw	r26, 0x00	; 0
    5a3c:	31 f0       	breq	.+12     	; 0x5a4a <NWK_RouteNewEntry+0x28>
    5a3e:	15 96       	adiw	r26, 0x05	; 5
    5a40:	2c 91       	ld	r18, X
    5a42:	15 97       	sbiw	r26, 0x05	; 5
    5a44:	92 17       	cp	r25, r18
    5a46:	18 f0       	brcs	.+6      	; 0x5a4e <NWK_RouteNewEntry+0x2c>
    5a48:	03 c0       	rjmp	.+6      	; 0x5a50 <NWK_RouteNewEntry+0x2e>
    5a4a:	df 01       	movw	r26, r30
    5a4c:	01 c0       	rjmp	.+2      	; 0x5a50 <NWK_RouteNewEntry+0x2e>
    5a4e:	df 01       	movw	r26, r30
    5a50:	8f 5f       	subi	r24, 0xFF	; 255
    5a52:	37 96       	adiw	r30, 0x07	; 7
    5a54:	84 36       	cpi	r24, 0x64	; 100
    5a56:	58 f3       	brcs	.-42     	; 0x5a2e <NWK_RouteNewEntry+0xc>
    5a58:	fd 01       	movw	r30, r26
    5a5a:	80 81       	ld	r24, Z
    5a5c:	8d 70       	andi	r24, 0x0D	; 13
    5a5e:	80 63       	ori	r24, 0x30	; 48
    5a60:	80 83       	st	Z, r24
    5a62:	80 e8       	ldi	r24, 0x80	; 128
    5a64:	85 83       	std	Z+5, r24	; 0x05
    5a66:	cf 01       	movw	r24, r30
    5a68:	08 95       	ret

00005a6a <NWK_RouteFreeEntry>:
    5a6a:	fc 01       	movw	r30, r24
    5a6c:	80 81       	ld	r24, Z
    5a6e:	80 fd       	sbrc	r24, 0
    5a70:	05 c0       	rjmp	.+10     	; 0x5a7c <NWK_RouteFreeEntry+0x12>
    5a72:	8f ef       	ldi	r24, 0xFF	; 255
    5a74:	9f ef       	ldi	r25, 0xFF	; 255
    5a76:	92 83       	std	Z+2, r25	; 0x02
    5a78:	81 83       	std	Z+1, r24	; 0x01
    5a7a:	15 82       	std	Z+5, r1	; 0x05
    5a7c:	08 95       	ret

00005a7e <NWK_RouteNextHop>:
    5a7e:	9b df       	rcall	.-202    	; 0x59b6 <NWK_RouteFindEntry>
    5a80:	00 97       	sbiw	r24, 0x00	; 0
    5a82:	21 f0       	breq	.+8      	; 0x5a8c <NWK_RouteNextHop+0xe>
    5a84:	fc 01       	movw	r30, r24
    5a86:	83 81       	ldd	r24, Z+3	; 0x03
    5a88:	94 81       	ldd	r25, Z+4	; 0x04
    5a8a:	08 95       	ret
    5a8c:	8f ef       	ldi	r24, 0xFF	; 255
    5a8e:	9f ef       	ldi	r25, 0xFF	; 255
    5a90:	08 95       	ret

00005a92 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    5a92:	91 df       	rcall	.-222    	; 0x59b6 <NWK_RouteFindEntry>
  if (entry)
    5a94:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
    5a96:	09 f0       	breq	.+2      	; 0x5a9a <nwkRouteRemove+0x8>
    5a98:	e8 cf       	rjmp	.-48     	; 0x5a6a <NWK_RouteFreeEntry>
    5a9a:	08 95       	ret

00005a9c <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    5a9c:	0f 93       	push	r16
    5a9e:	1f 93       	push	r17
    5aa0:	cf 93       	push	r28
    5aa2:	df 93       	push	r29
    5aa4:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    5aa6:	01 85       	ldd	r16, Z+9	; 0x09
    5aa8:	12 85       	ldd	r17, Z+10	; 0x0a
    5aaa:	11 23       	and	r17, r17
    5aac:	34 f4       	brge	.+12     	; 0x5aba <nwkRouteFrameReceived+0x1e>
      (header->macSrcAddr != header->nwkSrcAddr))
    5aae:	85 85       	ldd	r24, Z+13	; 0x0d
    5ab0:	96 85       	ldd	r25, Z+14	; 0x0e
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    5ab2:	08 17       	cp	r16, r24
    5ab4:	19 07       	cpc	r17, r25
    5ab6:	09 f0       	breq	.+2      	; 0x5aba <nwkRouteFrameReceived+0x1e>
    5ab8:	50 c0       	rjmp	.+160    	; 0x5b5a <nwkRouteFrameReceived+0xbe>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    5aba:	85 81       	ldd	r24, Z+5	; 0x05
    5abc:	96 81       	ldd	r25, Z+6	; 0x06
    5abe:	01 96       	adiw	r24, 0x01	; 1
    5ac0:	09 f4       	brne	.+2      	; 0x5ac4 <nwkRouteFrameReceived+0x28>
    5ac2:	4b c0       	rjmp	.+150    	; 0x5b5a <nwkRouteFrameReceived+0xbe>
    5ac4:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    5ac6:	60 e0       	ldi	r22, 0x00	; 0
    5ac8:	85 85       	ldd	r24, Z+13	; 0x0d
    5aca:	96 85       	ldd	r25, Z+14	; 0x0e
    5acc:	74 df       	rcall	.-280    	; 0x59b6 <NWK_RouteFindEntry>
    5ace:	dc 01       	movw	r26, r24

  if (entry)
    5ad0:	89 2b       	or	r24, r25
    5ad2:	79 f1       	breq	.+94     	; 0x5b32 <nwkRouteFrameReceived+0x96>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    5ad4:	8f 81       	ldd	r24, Y+7	; 0x07
    5ad6:	98 85       	ldd	r25, Y+8	; 0x08
    5ad8:	01 96       	adiw	r24, 0x01	; 1
    5ada:	59 f4       	brne	.+22     	; 0x5af2 <nwkRouteFrameReceived+0x56>
        nwkIb.addr == header->nwkDstAddr);
    5adc:	20 91 71 25 	lds	r18, 0x2571	; 0x802571 <nwkIb>
    5ae0:	30 91 72 25 	lds	r19, 0x2572	; 0x802572 <nwkIb+0x1>
    5ae4:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ae6:	98 89       	ldd	r25, Y+16	; 0x10

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    5ae8:	28 17       	cp	r18, r24
    5aea:	39 07       	cpc	r19, r25
    5aec:	21 f0       	breq	.+8      	; 0x5af6 <nwkRouteFrameReceived+0x5a>
    5aee:	80 e0       	ldi	r24, 0x00	; 0
    5af0:	03 c0       	rjmp	.+6      	; 0x5af8 <nwkRouteFrameReceived+0x5c>
    5af2:	80 e0       	ldi	r24, 0x00	; 0
    5af4:	01 c0       	rjmp	.+2      	; 0x5af8 <nwkRouteFrameReceived+0x5c>
    5af6:	81 e0       	ldi	r24, 0x01	; 1
    5af8:	98 2f       	mov	r25, r24
    5afa:	91 70       	andi	r25, 0x01	; 1
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    5afc:	13 96       	adiw	r26, 0x03	; 3
    5afe:	2d 91       	ld	r18, X+
    5b00:	3c 91       	ld	r19, X
    5b02:	14 97       	sbiw	r26, 0x04	; 4
    5b04:	02 17       	cp	r16, r18
    5b06:	13 07       	cpc	r17, r19
    5b08:	49 f0       	breq	.+18     	; 0x5b1c <nwkRouteFrameReceived+0x80>
    5b0a:	fe 01       	movw	r30, r28
    5b0c:	ed 57       	subi	r30, 0x7D	; 125
    5b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b10:	20 81       	ld	r18, Z
    5b12:	16 96       	adiw	r26, 0x06	; 6
    5b14:	8c 91       	ld	r24, X
    5b16:	16 97       	sbiw	r26, 0x06	; 6
    5b18:	82 17       	cp	r24, r18
    5b1a:	10 f0       	brcs	.+4      	; 0x5b20 <nwkRouteFrameReceived+0x84>
    5b1c:	99 23       	and	r25, r25
    5b1e:	b9 f0       	breq	.+46     	; 0x5b4e <nwkRouteFrameReceived+0xb2>
    {
      entry->nextHopAddr = header->macSrcAddr;
    5b20:	14 96       	adiw	r26, 0x04	; 4
    5b22:	1c 93       	st	X, r17
    5b24:	0e 93       	st	-X, r16
    5b26:	13 97       	sbiw	r26, 0x03	; 3
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    5b28:	8c 91       	ld	r24, X
    5b2a:	8f 70       	andi	r24, 0x0F	; 15
    5b2c:	80 63       	ori	r24, 0x30	; 48
    5b2e:	8c 93       	st	X, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    5b30:	0e c0       	rjmp	.+28     	; 0x5b4e <nwkRouteFrameReceived+0xb2>
    5b32:	77 df       	rcall	.-274    	; 0x5a22 <NWK_RouteNewEntry>
    5b34:	dc 01       	movw	r26, r24

    entry->dstAddr = header->nwkSrcAddr;
    5b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b3a:	12 96       	adiw	r26, 0x02	; 2
    5b3c:	9c 93       	st	X, r25
    5b3e:	8e 93       	st	-X, r24
    5b40:	11 97       	sbiw	r26, 0x01	; 1
    entry->nextHopAddr = header->macSrcAddr;
    5b42:	89 85       	ldd	r24, Y+9	; 0x09
    5b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b46:	14 96       	adiw	r26, 0x04	; 4
    5b48:	9c 93       	st	X, r25
    5b4a:	8e 93       	st	-X, r24
    5b4c:	13 97       	sbiw	r26, 0x03	; 3
  }

  entry->lqi = frame->rx.lqi;
    5b4e:	fe 01       	movw	r30, r28
    5b50:	ed 57       	subi	r30, 0x7D	; 125
    5b52:	ff 4f       	sbci	r31, 0xFF	; 255
    5b54:	80 81       	ld	r24, Z
    5b56:	16 96       	adiw	r26, 0x06	; 6
    5b58:	8c 93       	st	X, r24
#else
  (void)frame;
#endif
}
    5b5a:	df 91       	pop	r29
    5b5c:	cf 91       	pop	r28
    5b5e:	1f 91       	pop	r17
    5b60:	0f 91       	pop	r16
    5b62:	08 95       	ret

00005b64 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    5b64:	cf 93       	push	r28
    5b66:	df 93       	push	r29
    5b68:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    5b6a:	87 85       	ldd	r24, Z+15	; 0x0f
    5b6c:	90 89       	ldd	r25, Z+16	; 0x10
    5b6e:	8f 3f       	cpi	r24, 0xFF	; 255
    5b70:	2f ef       	ldi	r18, 0xFF	; 255
    5b72:	92 07       	cpc	r25, r18
    5b74:	81 f1       	breq	.+96     	; 0x5bd6 <nwkRouteFrameSent+0x72>
    5b76:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    5b78:	63 85       	ldd	r22, Z+11	; 0x0b
    5b7a:	63 fb       	bst	r22, 3
    5b7c:	66 27       	eor	r22, r22
    5b7e:	60 f9       	bld	r22, 0
    5b80:	1a df       	rcall	.-460    	; 0x59b6 <NWK_RouteFindEntry>
    5b82:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
    5b84:	89 2b       	or	r24, r25
    5b86:	39 f1       	breq	.+78     	; 0x5bd6 <nwkRouteFrameSent+0x72>
    5b88:	8c 91       	ld	r24, X
    5b8a:	80 fd       	sbrc	r24, 0
    5b8c:	24 c0       	rjmp	.+72     	; 0x5bd6 <nwkRouteFrameSent+0x72>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    5b8e:	fe 01       	movw	r30, r28
    5b90:	ed 57       	subi	r30, 0x7D	; 125
    5b92:	ff 4f       	sbci	r31, 0xFF	; 255
    5b94:	80 81       	ld	r24, Z
    5b96:	81 11       	cpse	r24, r1
    5b98:	0e c0       	rjmp	.+28     	; 0x5bb6 <nwkRouteFrameSent+0x52>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    5b9a:	8c 91       	ld	r24, X
    5b9c:	8f 70       	andi	r24, 0x0F	; 15
    5b9e:	80 63       	ori	r24, 0x30	; 48
    5ba0:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    5ba2:	15 96       	adiw	r26, 0x05	; 5
    5ba4:	8c 91       	ld	r24, X
    5ba6:	15 97       	sbiw	r26, 0x05	; 5
    5ba8:	8f 5f       	subi	r24, 0xFF	; 255
    5baa:	15 96       	adiw	r26, 0x05	; 5
    5bac:	8c 93       	st	X, r24
    5bae:	8f 3f       	cpi	r24, 0xFF	; 255
      nwkRouteNormalizeRanks();
    5bb0:	91 f4       	brne	.+36     	; 0x5bd6 <nwkRouteFrameSent+0x72>
    5bb2:	a1 de       	rcall	.-702    	; 0x58f6 <nwkRouteNormalizeRanks>
    5bb4:	10 c0       	rjmp	.+32     	; 0x5bd6 <nwkRouteFrameSent+0x72>
  }
  else
  {
    if (0 == --entry->score)
    5bb6:	9c 91       	ld	r25, X
    5bb8:	89 2f       	mov	r24, r25
    5bba:	82 95       	swap	r24
    5bbc:	8f 70       	andi	r24, 0x0F	; 15
    5bbe:	81 5f       	subi	r24, 0xF1	; 241
    5bc0:	8f 70       	andi	r24, 0x0F	; 15
    5bc2:	28 2f       	mov	r18, r24
    5bc4:	22 95       	swap	r18
    5bc6:	20 7f       	andi	r18, 0xF0	; 240
    5bc8:	9f 70       	andi	r25, 0x0F	; 15
    5bca:	92 2b       	or	r25, r18
    5bcc:	9c 93       	st	X, r25
    5bce:	81 11       	cpse	r24, r1
      NWK_RouteFreeEntry(entry);
    5bd0:	02 c0       	rjmp	.+4      	; 0x5bd6 <nwkRouteFrameSent+0x72>
    5bd2:	cd 01       	movw	r24, r26
    5bd4:	4a df       	rcall	.-364    	; 0x5a6a <NWK_RouteFreeEntry>
  }
}
    5bd6:	df 91       	pop	r29
    5bd8:	cf 91       	pop	r28
    5bda:	08 95       	ret

00005bdc <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    5bdc:	cf 93       	push	r28
    5bde:	df 93       	push	r29
    5be0:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    5be2:	87 85       	ldd	r24, Z+15	; 0x0f
    5be4:	90 89       	ldd	r25, Z+16	; 0x10
    5be6:	8f 3f       	cpi	r24, 0xFF	; 255
    5be8:	2f ef       	ldi	r18, 0xFF	; 255
    5bea:	92 07       	cpc	r25, r18
    5bec:	29 f4       	brne	.+10     	; 0x5bf8 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    5bee:	8f ef       	ldi	r24, 0xFF	; 255
    5bf0:	9f ef       	ldi	r25, 0xFF	; 255
    5bf2:	90 87       	std	Z+8, r25	; 0x08
    5bf4:	87 83       	std	Z+7, r24	; 0x07
    5bf6:	0e c0       	rjmp	.+28     	; 0x5c14 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
    5bf8:	23 85       	ldd	r18, Z+11	; 0x0b
    5bfa:	22 ff       	sbrs	r18, 2
    5bfc:	03 c0       	rjmp	.+6      	; 0x5c04 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
    5bfe:	90 87       	std	Z+8, r25	; 0x08
    5c00:	87 83       	std	Z+7, r24	; 0x07
    5c02:	08 c0       	rjmp	.+16     	; 0x5c14 <nwkRoutePrepareTx+0x38>
    5c04:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    5c06:	63 85       	ldd	r22, Z+11	; 0x0b
    5c08:	63 fb       	bst	r22, 3
    5c0a:	66 27       	eor	r22, r22
    5c0c:	60 f9       	bld	r22, 0
    5c0e:	37 df       	rcall	.-402    	; 0x5a7e <NWK_RouteNextHop>
    5c10:	98 87       	std	Y+8, r25	; 0x08
    5c12:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    5c14:	df 91       	pop	r29
    5c16:	cf 91       	pop	r28
    5c18:	08 95       	ret

00005c1a <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    5c1a:	ef 92       	push	r14
    5c1c:	ff 92       	push	r15
    5c1e:	1f 93       	push	r17
    5c20:	cf 93       	push	r28
    5c22:	df 93       	push	r29
    5c24:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    5c26:	1b 85       	ldd	r17, Y+11	; 0x0b
    5c28:	13 fb       	bst	r17, 3
    5c2a:	11 27       	eor	r17, r17
    5c2c:	10 f9       	bld	r17, 0
    5c2e:	ef 84       	ldd	r14, Y+15	; 0x0f
    5c30:	f8 88       	ldd	r15, Y+16	; 0x10
    5c32:	61 2f       	mov	r22, r17
    5c34:	c7 01       	movw	r24, r14
    5c36:	23 df       	rcall	.-442    	; 0x5a7e <NWK_RouteNextHop>
    5c38:	01 96       	adiw	r24, 0x01	; 1
    5c3a:	59 f0       	breq	.+22     	; 0x5c52 <nwkRouteFrame+0x38>
  {
    frame->tx.confirm = NULL;
    5c3c:	fe 01       	movw	r30, r28
    5c3e:	e9 57       	subi	r30, 0x79	; 121
    5c40:	ff 4f       	sbci	r31, 0xFF	; 255
    5c42:	11 82       	std	Z+1, r1	; 0x01
    5c44:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    5c46:	31 97       	sbiw	r30, 0x01	; 1
    5c48:	82 e0       	ldi	r24, 0x02	; 2
    5c4a:	80 83       	st	Z, r24
    nwkTxFrame(frame);
    5c4c:	ce 01       	movw	r24, r28
    5c4e:	33 d3       	rcall	.+1638   	; 0x62b6 <nwkTxFrame>
    5c50:	07 c0       	rjmp	.+14     	; 0x5c60 <nwkRouteFrame+0x46>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    5c52:	41 2f       	mov	r20, r17
    5c54:	b7 01       	movw	r22, r14
    5c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    nwkFrameFree(frame);
    5c5a:	64 de       	rcall	.-824    	; 0x5924 <nwkRouteSendRouteError>
    5c5c:	ce 01       	movw	r24, r28
    5c5e:	15 de       	rcall	.-982    	; 0x588a <nwkFrameFree>
  }
}
    5c60:	df 91       	pop	r29
    5c62:	cf 91       	pop	r28
    5c64:	1f 91       	pop	r17
    5c66:	ff 90       	pop	r15
    5c68:	ef 90       	pop	r14
    5c6a:	08 95       	ret

00005c6c <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    5c6c:	dc 01       	movw	r26, r24
    5c6e:	17 96       	adiw	r26, 0x07	; 7
    5c70:	ed 91       	ld	r30, X+
    5c72:	fc 91       	ld	r31, X
    5c74:	18 97       	sbiw	r26, 0x08	; 8

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    5c76:	19 96       	adiw	r26, 0x09	; 9
    5c78:	8c 91       	ld	r24, X
    5c7a:	86 30       	cpi	r24, 0x06	; 6
    5c7c:	31 f4       	brne	.+12     	; 0x5c8a <nwkRouteErrorReceived+0x1e>
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
    5c7e:	65 81       	ldd	r22, Z+5	; 0x05
    5c80:	83 81       	ldd	r24, Z+3	; 0x03
    5c82:	94 81       	ldd	r25, Z+4	; 0x04
    5c84:	06 df       	rcall	.-500    	; 0x5a92 <nwkRouteRemove>

  return true;
    5c86:	81 e0       	ldi	r24, 0x01	; 1
    5c88:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
    5c8a:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
    5c8c:	08 95       	ret

00005c8e <nwkRxIndicateFrame>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    5c8e:	ef 92       	push	r14
    5c90:	ff 92       	push	r15
    5c92:	0f 93       	push	r16
    5c94:	1f 93       	push	r17
    5c96:	cf 93       	push	r28
    5c98:	df 93       	push	r29
    5c9a:	cd b7       	in	r28, 0x3d	; 61
    5c9c:	de b7       	in	r29, 0x3e	; 62
    5c9e:	2c 97       	sbiw	r28, 0x0c	; 12
    5ca0:	0f b6       	in	r0, 0x3f	; 63
    5ca2:	f8 94       	cli
    5ca4:	de bf       	out	0x3e, r29	; 62
    5ca6:	0f be       	out	0x3f, r0	; 63
    5ca8:	cd bf       	out	0x3d, r28	; 61
    5caa:	dc 01       	movw	r26, r24
    5cac:	51 96       	adiw	r26, 0x11	; 17
    5cae:	8c 91       	ld	r24, X
    5cb0:	51 97       	sbiw	r26, 0x11	; 17
    5cb2:	82 95       	swap	r24
    5cb4:	8f 70       	andi	r24, 0x0F	; 15
    5cb6:	e8 2f       	mov	r30, r24
    5cb8:	f0 e0       	ldi	r31, 0x00	; 0
    5cba:	33 96       	adiw	r30, 0x03	; 3
    5cbc:	ee 0f       	add	r30, r30
    5cbe:	ff 1f       	adc	r31, r31
    5cc0:	ef 58       	subi	r30, 0x8F	; 143
    5cc2:	fa 4d       	sbci	r31, 0xDA	; 218
    5cc4:	e0 80       	ld	r14, Z
    5cc6:	f1 80       	ldd	r15, Z+1	; 0x01
    5cc8:	e1 14       	cp	r14, r1
    5cca:	f1 04       	cpc	r15, r1
    5ccc:	09 f4       	brne	.+2      	; 0x5cd0 <nwkRxIndicateFrame+0x42>
    5cce:	67 c0       	rjmp	.+206    	; 0x5d9e <nwkRxIndicateFrame+0x110>
    5cd0:	1d 96       	adiw	r26, 0x0d	; 13
    5cd2:	4d 91       	ld	r20, X+
    5cd4:	5c 91       	ld	r21, X
    5cd6:	1e 97       	sbiw	r26, 0x0e	; 14
    5cd8:	5a 83       	std	Y+2, r21	; 0x02
    5cda:	49 83       	std	Y+1, r20	; 0x01
    5cdc:	1f 96       	adiw	r26, 0x0f	; 15
    5cde:	6d 91       	ld	r22, X+
    5ce0:	7c 91       	ld	r23, X
    5ce2:	50 97       	sbiw	r26, 0x10	; 16
    5ce4:	7c 83       	std	Y+4, r23	; 0x04
    5ce6:	6b 83       	std	Y+3, r22	; 0x03
    5ce8:	51 96       	adiw	r26, 0x11	; 17
    5cea:	9c 91       	ld	r25, X
    5cec:	51 97       	sbiw	r26, 0x11	; 17
    5cee:	9f 70       	andi	r25, 0x0F	; 15
    5cf0:	9d 83       	std	Y+5, r25	; 0x05
    5cf2:	8e 83       	std	Y+6, r24	; 0x06
    5cf4:	cd 01       	movw	r24, r26
    5cf6:	8f 57       	subi	r24, 0x7F	; 127
    5cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    5cfa:	fc 01       	movw	r30, r24
    5cfc:	80 81       	ld	r24, Z
    5cfe:	91 81       	ldd	r25, Z+1	; 0x01
    5d00:	99 87       	std	Y+9, r25	; 0x09
    5d02:	88 87       	std	Y+8, r24	; 0x08
    5d04:	11 96       	adiw	r26, 0x01	; 1
    5d06:	2c 91       	ld	r18, X
    5d08:	11 97       	sbiw	r26, 0x01	; 1
    5d0a:	8d 01       	movw	r16, r26
    5d0c:	0e 5f       	subi	r16, 0xFE	; 254
    5d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    5d10:	80 1b       	sub	r24, r16
    5d12:	91 0b       	sbc	r25, r17
    5d14:	28 1b       	sub	r18, r24
    5d16:	2a 87       	std	Y+10, r18	; 0x0a
    5d18:	cd 01       	movw	r24, r26
    5d1a:	8d 57       	subi	r24, 0x7D	; 125
    5d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d1e:	fc 01       	movw	r30, r24
    5d20:	80 81       	ld	r24, Z
    5d22:	8b 87       	std	Y+11, r24	; 0x0b
    5d24:	cd 01       	movw	r24, r26
    5d26:	8c 57       	subi	r24, 0x7C	; 124
    5d28:	9f 4f       	sbci	r25, 0xFF	; 255
    5d2a:	fc 01       	movw	r30, r24
    5d2c:	80 81       	ld	r24, Z
    5d2e:	8c 87       	std	Y+12, r24	; 0x0c
    5d30:	1b 96       	adiw	r26, 0x0b	; 11
    5d32:	2c 91       	ld	r18, X
    5d34:	1b 97       	sbiw	r26, 0x0b	; 11
    5d36:	92 2f       	mov	r25, r18
    5d38:	91 70       	andi	r25, 0x01	; 1
    5d3a:	82 2f       	mov	r24, r18
    5d3c:	82 70       	andi	r24, 0x02	; 2
    5d3e:	98 2b       	or	r25, r24
    5d40:	22 ff       	sbrs	r18, 2
    5d42:	02 c0       	rjmp	.+4      	; 0x5d48 <nwkRxIndicateFrame+0xba>
    5d44:	80 e2       	ldi	r24, 0x20	; 32
    5d46:	01 c0       	rjmp	.+2      	; 0x5d4a <nwkRxIndicateFrame+0xbc>
    5d48:	80 e0       	ldi	r24, 0x00	; 0
    5d4a:	98 2b       	or	r25, r24
    5d4c:	23 ff       	sbrs	r18, 3
    5d4e:	02 c0       	rjmp	.+4      	; 0x5d54 <nwkRxIndicateFrame+0xc6>
    5d50:	80 e4       	ldi	r24, 0x40	; 64
    5d52:	01 c0       	rjmp	.+2      	; 0x5d56 <nwkRxIndicateFrame+0xc8>
    5d54:	80 e0       	ldi	r24, 0x00	; 0
    5d56:	98 2b       	or	r25, r24
    5d58:	6f 3f       	cpi	r22, 0xFF	; 255
    5d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d5c:	11 f4       	brne	.+4      	; 0x5d62 <nwkRxIndicateFrame+0xd4>
    5d5e:	84 e0       	ldi	r24, 0x04	; 4
    5d60:	01 c0       	rjmp	.+2      	; 0x5d64 <nwkRxIndicateFrame+0xd6>
    5d62:	80 e0       	ldi	r24, 0x00	; 0
    5d64:	98 2b       	or	r25, r24
    5d66:	19 96       	adiw	r26, 0x09	; 9
    5d68:	2d 91       	ld	r18, X+
    5d6a:	3c 91       	ld	r19, X
    5d6c:	1a 97       	sbiw	r26, 0x0a	; 10
    5d6e:	42 17       	cp	r20, r18
    5d70:	53 07       	cpc	r21, r19
    5d72:	11 f4       	brne	.+4      	; 0x5d78 <nwkRxIndicateFrame+0xea>
    5d74:	88 e0       	ldi	r24, 0x08	; 8
    5d76:	01 c0       	rjmp	.+2      	; 0x5d7a <nwkRxIndicateFrame+0xec>
    5d78:	80 e0       	ldi	r24, 0x00	; 0
    5d7a:	98 2b       	or	r25, r24
    5d7c:	15 96       	adiw	r26, 0x05	; 5
    5d7e:	2d 91       	ld	r18, X+
    5d80:	3c 91       	ld	r19, X
    5d82:	16 97       	sbiw	r26, 0x06	; 6
    5d84:	2f 3f       	cpi	r18, 0xFF	; 255
    5d86:	3f 4f       	sbci	r19, 0xFF	; 255
    5d88:	11 f4       	brne	.+4      	; 0x5d8e <nwkRxIndicateFrame+0x100>
    5d8a:	80 e1       	ldi	r24, 0x10	; 16
    5d8c:	01 c0       	rjmp	.+2      	; 0x5d90 <nwkRxIndicateFrame+0x102>
    5d8e:	80 e0       	ldi	r24, 0x00	; 0
    5d90:	89 2b       	or	r24, r25
    5d92:	8f 83       	std	Y+7, r24	; 0x07
    5d94:	ce 01       	movw	r24, r28
    5d96:	01 96       	adiw	r24, 0x01	; 1
    5d98:	f7 01       	movw	r30, r14
    5d9a:	19 95       	eicall
    5d9c:	01 c0       	rjmp	.+2      	; 0x5da0 <nwkRxIndicateFrame+0x112>
    5d9e:	80 e0       	ldi	r24, 0x00	; 0
    5da0:	2c 96       	adiw	r28, 0x0c	; 12
    5da2:	0f b6       	in	r0, 0x3f	; 63
    5da4:	f8 94       	cli
    5da6:	de bf       	out	0x3e, r29	; 62
    5da8:	0f be       	out	0x3f, r0	; 63
    5daa:	cd bf       	out	0x3d, r28	; 61
    5dac:	df 91       	pop	r29
    5dae:	cf 91       	pop	r28
    5db0:	1f 91       	pop	r17
    5db2:	0f 91       	pop	r16
    5db4:	ff 90       	pop	r15
    5db6:	ef 90       	pop	r14
    5db8:	08 95       	ret

00005dba <nwkRxServiceDataInd>:
    5dba:	dc 01       	movw	r26, r24
    5dbc:	19 96       	adiw	r26, 0x09	; 9
    5dbe:	2c 91       	ld	r18, X
    5dc0:	19 97       	sbiw	r26, 0x09	; 9
    5dc2:	22 23       	and	r18, r18
    5dc4:	71 f0       	breq	.+28     	; 0x5de2 <nwkRxServiceDataInd+0x28>
    5dc6:	17 96       	adiw	r26, 0x07	; 7
    5dc8:	ed 91       	ld	r30, X+
    5dca:	fc 91       	ld	r31, X
    5dcc:	18 97       	sbiw	r26, 0x08	; 8
    5dce:	20 81       	ld	r18, Z
    5dd0:	22 23       	and	r18, r18
    5dd2:	19 f0       	breq	.+6      	; 0x5dda <nwkRxServiceDataInd+0x20>
    5dd4:	21 30       	cpi	r18, 0x01	; 1
    5dd6:	19 f0       	breq	.+6      	; 0x5dde <nwkRxServiceDataInd+0x24>
    5dd8:	06 c0       	rjmp	.+12     	; 0x5de6 <nwkRxServiceDataInd+0x2c>
    5dda:	02 c3       	rjmp	.+1540   	; 0x63e0 <nwkTxAckReceived>
    5ddc:	08 95       	ret
    5dde:	46 cf       	rjmp	.-372    	; 0x5c6c <nwkRouteErrorReceived>
    5de0:	08 95       	ret
    5de2:	80 e0       	ldi	r24, 0x00	; 0
    5de4:	08 95       	ret
    5de6:	80 e0       	ldi	r24, 0x00	; 0
    5de8:	08 95       	ret

00005dea <nwkRxDuplicateRejectionTimerHandler>:
    5dea:	bc 01       	movw	r22, r24
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	80 e0       	ldi	r24, 0x00	; 0
    5df0:	1c c0       	rjmp	.+56     	; 0x5e2a <nwkRxDuplicateRejectionTimerHandler+0x40>
    5df2:	29 2f       	mov	r18, r25
    5df4:	30 e0       	ldi	r19, 0x00	; 0
    5df6:	f9 01       	movw	r30, r18
    5df8:	ee 0f       	add	r30, r30
    5dfa:	ff 1f       	adc	r31, r31
    5dfc:	ee 0f       	add	r30, r30
    5dfe:	ff 1f       	adc	r31, r31
    5e00:	e2 0f       	add	r30, r18
    5e02:	f3 1f       	adc	r31, r19
    5e04:	e3 57       	subi	r30, 0x73	; 115
    5e06:	f3 4e       	sbci	r31, 0xE3	; 227
    5e08:	44 81       	ldd	r20, Z+4	; 0x04
    5e0a:	44 23       	and	r20, r20
    5e0c:	69 f0       	breq	.+26     	; 0x5e28 <nwkRxDuplicateRejectionTimerHandler+0x3e>
    5e0e:	f9 01       	movw	r30, r18
    5e10:	ee 0f       	add	r30, r30
    5e12:	ff 1f       	adc	r31, r31
    5e14:	ee 0f       	add	r30, r30
    5e16:	ff 1f       	adc	r31, r31
    5e18:	2e 0f       	add	r18, r30
    5e1a:	3f 1f       	adc	r19, r31
    5e1c:	f9 01       	movw	r30, r18
    5e1e:	e3 57       	subi	r30, 0x73	; 115
    5e20:	f3 4e       	sbci	r31, 0xE3	; 227
    5e22:	41 50       	subi	r20, 0x01	; 1
    5e24:	44 83       	std	Z+4, r20	; 0x04
    5e26:	81 e0       	ldi	r24, 0x01	; 1
    5e28:	9f 5f       	subi	r25, 0xFF	; 255
    5e2a:	9a 30       	cpi	r25, 0x0A	; 10
    5e2c:	10 f3       	brcs	.-60     	; 0x5df2 <nwkRxDuplicateRejectionTimerHandler+0x8>
    5e2e:	88 23       	and	r24, r24
    5e30:	11 f0       	breq	.+4      	; 0x5e36 <nwkRxDuplicateRejectionTimerHandler+0x4c>
    5e32:	cb 01       	movw	r24, r22
    5e34:	91 c5       	rjmp	.+2850   	; 0x6958 <SYS_TimerStart>
    5e36:	08 95       	ret

00005e38 <nwkRxRejectDuplicate>:
    5e38:	0f 93       	push	r16
    5e3a:	1f 93       	push	r17
    5e3c:	cf 93       	push	r28
    5e3e:	df 93       	push	r29
    5e40:	ec 01       	movw	r28, r24
    5e42:	90 e0       	ldi	r25, 0x00	; 0
    5e44:	60 e0       	ldi	r22, 0x00	; 0
    5e46:	70 e0       	ldi	r23, 0x00	; 0
    5e48:	80 c0       	rjmp	.+256    	; 0x5f4a <nwkRxRejectDuplicate+0x112>
    5e4a:	29 2f       	mov	r18, r25
    5e4c:	30 e0       	ldi	r19, 0x00	; 0
    5e4e:	f9 01       	movw	r30, r18
    5e50:	ee 0f       	add	r30, r30
    5e52:	ff 1f       	adc	r31, r31
    5e54:	ee 0f       	add	r30, r30
    5e56:	ff 1f       	adc	r31, r31
    5e58:	e2 0f       	add	r30, r18
    5e5a:	f3 1f       	adc	r31, r19
    5e5c:	e3 57       	subi	r30, 0x73	; 115
    5e5e:	f3 4e       	sbci	r31, 0xE3	; 227
    5e60:	44 81       	ldd	r20, Z+4	; 0x04
    5e62:	44 23       	and	r20, r20
    5e64:	09 f4       	brne	.+2      	; 0x5e68 <nwkRxRejectDuplicate+0x30>
    5e66:	6d c0       	rjmp	.+218    	; 0x5f42 <nwkRxRejectDuplicate+0x10a>
    5e68:	0b 85       	ldd	r16, Y+11	; 0x0b
    5e6a:	1c 85       	ldd	r17, Y+12	; 0x0c
    5e6c:	a0 81       	ld	r26, Z
    5e6e:	b1 81       	ldd	r27, Z+1	; 0x01
    5e70:	0a 17       	cp	r16, r26
    5e72:	1b 07       	cpc	r17, r27
    5e74:	09 f0       	breq	.+2      	; 0x5e78 <nwkRxRejectDuplicate+0x40>
    5e76:	65 c0       	rjmp	.+202    	; 0x5f42 <nwkRxRejectDuplicate+0x10a>
    5e78:	f9 01       	movw	r30, r18
    5e7a:	ee 0f       	add	r30, r30
    5e7c:	ff 1f       	adc	r31, r31
    5e7e:	ee 0f       	add	r30, r30
    5e80:	ff 1f       	adc	r31, r31
    5e82:	e2 0f       	add	r30, r18
    5e84:	f3 1f       	adc	r31, r19
    5e86:	e3 57       	subi	r30, 0x73	; 115
    5e88:	f3 4e       	sbci	r31, 0xE3	; 227
    5e8a:	82 81       	ldd	r24, Z+2	; 0x02
    5e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e8e:	89 1b       	sub	r24, r25
    5e90:	88 30       	cpi	r24, 0x08	; 8
    5e92:	e0 f5       	brcc	.+120    	; 0x5f0c <nwkRxRejectDuplicate+0xd4>
    5e94:	f9 01       	movw	r30, r18
    5e96:	ee 0f       	add	r30, r30
    5e98:	ff 1f       	adc	r31, r31
    5e9a:	ee 0f       	add	r30, r30
    5e9c:	ff 1f       	adc	r31, r31
    5e9e:	e2 0f       	add	r30, r18
    5ea0:	f3 1f       	adc	r31, r19
    5ea2:	e3 57       	subi	r30, 0x73	; 115
    5ea4:	f3 4e       	sbci	r31, 0xE3	; 227
    5ea6:	93 81       	ldd	r25, Z+3	; 0x03
    5ea8:	49 2f       	mov	r20, r25
    5eaa:	50 e0       	ldi	r21, 0x00	; 0
    5eac:	08 2e       	mov	r0, r24
    5eae:	02 c0       	rjmp	.+4      	; 0x5eb4 <nwkRxRejectDuplicate+0x7c>
    5eb0:	55 95       	asr	r21
    5eb2:	47 95       	ror	r20
    5eb4:	0a 94       	dec	r0
    5eb6:	e2 f7       	brpl	.-8      	; 0x5eb0 <nwkRxRejectDuplicate+0x78>
    5eb8:	40 ff       	sbrs	r20, 0
    5eba:	13 c0       	rjmp	.+38     	; 0x5ee2 <nwkRxRejectDuplicate+0xaa>
    5ebc:	20 91 71 25 	lds	r18, 0x2571	; 0x802571 <nwkIb>
    5ec0:	30 91 72 25 	lds	r19, 0x2572	; 0x802572 <nwkIb+0x1>
    5ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    5ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    5ec8:	28 17       	cp	r18, r24
    5eca:	39 07       	cpc	r19, r25
    5ecc:	09 f0       	breq	.+2      	; 0x5ed0 <nwkRxRejectDuplicate+0x98>
    5ece:	53 c0       	rjmp	.+166    	; 0x5f76 <nwkRxRejectDuplicate+0x13e>
    5ed0:	69 85       	ldd	r22, Y+9	; 0x09
    5ed2:	63 fb       	bst	r22, 3
    5ed4:	66 27       	eor	r22, r22
    5ed6:	60 f9       	bld	r22, 0
    5ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5eda:	9e 85       	ldd	r25, Y+14	; 0x0e
    5edc:	da dd       	rcall	.-1100   	; 0x5a92 <nwkRouteRemove>
    5ede:	81 e0       	ldi	r24, 0x01	; 1
    5ee0:	4d c0       	rjmp	.+154    	; 0x5f7c <nwkRxRejectDuplicate+0x144>
    5ee2:	41 e0       	ldi	r20, 0x01	; 1
    5ee4:	50 e0       	ldi	r21, 0x00	; 0
    5ee6:	02 c0       	rjmp	.+4      	; 0x5eec <nwkRxRejectDuplicate+0xb4>
    5ee8:	44 0f       	add	r20, r20
    5eea:	55 1f       	adc	r21, r21
    5eec:	8a 95       	dec	r24
    5eee:	e2 f7       	brpl	.-8      	; 0x5ee8 <nwkRxRejectDuplicate+0xb0>
    5ef0:	f9 01       	movw	r30, r18
    5ef2:	ee 0f       	add	r30, r30
    5ef4:	ff 1f       	adc	r31, r31
    5ef6:	ee 0f       	add	r30, r30
    5ef8:	ff 1f       	adc	r31, r31
    5efa:	2e 0f       	add	r18, r30
    5efc:	3f 1f       	adc	r19, r31
    5efe:	f9 01       	movw	r30, r18
    5f00:	e3 57       	subi	r30, 0x73	; 115
    5f02:	f3 4e       	sbci	r31, 0xE3	; 227
    5f04:	94 2b       	or	r25, r20
    5f06:	93 83       	std	Z+3, r25	; 0x03
    5f08:	80 e0       	ldi	r24, 0x00	; 0
    5f0a:	38 c0       	rjmp	.+112    	; 0x5f7c <nwkRxRejectDuplicate+0x144>
    5f0c:	81 95       	neg	r24
    5f0e:	f9 01       	movw	r30, r18
    5f10:	ee 0f       	add	r30, r30
    5f12:	ff 1f       	adc	r31, r31
    5f14:	ee 0f       	add	r30, r30
    5f16:	ff 1f       	adc	r31, r31
    5f18:	2e 0f       	add	r18, r30
    5f1a:	3f 1f       	adc	r19, r31
    5f1c:	f9 01       	movw	r30, r18
    5f1e:	e3 57       	subi	r30, 0x73	; 115
    5f20:	f3 4e       	sbci	r31, 0xE3	; 227
    5f22:	92 83       	std	Z+2, r25	; 0x02
    5f24:	23 81       	ldd	r18, Z+3	; 0x03
    5f26:	30 e0       	ldi	r19, 0x00	; 0
    5f28:	a9 01       	movw	r20, r18
    5f2a:	02 c0       	rjmp	.+4      	; 0x5f30 <nwkRxRejectDuplicate+0xf8>
    5f2c:	44 0f       	add	r20, r20
    5f2e:	55 1f       	adc	r21, r21
    5f30:	8a 95       	dec	r24
    5f32:	e2 f7       	brpl	.-8      	; 0x5f2c <nwkRxRejectDuplicate+0xf4>
    5f34:	ca 01       	movw	r24, r20
    5f36:	81 60       	ori	r24, 0x01	; 1
    5f38:	83 83       	std	Z+3, r24	; 0x03
    5f3a:	8f e1       	ldi	r24, 0x1F	; 31
    5f3c:	84 83       	std	Z+4, r24	; 0x04
    5f3e:	80 e0       	ldi	r24, 0x00	; 0
    5f40:	1d c0       	rjmp	.+58     	; 0x5f7c <nwkRxRejectDuplicate+0x144>
    5f42:	41 11       	cpse	r20, r1
    5f44:	01 c0       	rjmp	.+2      	; 0x5f48 <nwkRxRejectDuplicate+0x110>
    5f46:	bf 01       	movw	r22, r30
    5f48:	9f 5f       	subi	r25, 0xFF	; 255
    5f4a:	9a 30       	cpi	r25, 0x0A	; 10
    5f4c:	08 f4       	brcc	.+2      	; 0x5f50 <nwkRxRejectDuplicate+0x118>
    5f4e:	7d cf       	rjmp	.-262    	; 0x5e4a <nwkRxRejectDuplicate+0x12>
    5f50:	61 15       	cp	r22, r1
    5f52:	71 05       	cpc	r23, r1
    5f54:	91 f0       	breq	.+36     	; 0x5f7a <nwkRxRejectDuplicate+0x142>
    5f56:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f58:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f5a:	fb 01       	movw	r30, r22
    5f5c:	91 83       	std	Z+1, r25	; 0x01
    5f5e:	80 83       	st	Z, r24
    5f60:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f62:	82 83       	std	Z+2, r24	; 0x02
    5f64:	81 e0       	ldi	r24, 0x01	; 1
    5f66:	83 83       	std	Z+3, r24	; 0x03
    5f68:	8f e1       	ldi	r24, 0x1F	; 31
    5f6a:	84 83       	std	Z+4, r24	; 0x04
    5f6c:	8f e7       	ldi	r24, 0x7F	; 127
    5f6e:	9c e1       	ldi	r25, 0x1C	; 28
    5f70:	f3 d4       	rcall	.+2534   	; 0x6958 <SYS_TimerStart>
    5f72:	80 e0       	ldi	r24, 0x00	; 0
    5f74:	03 c0       	rjmp	.+6      	; 0x5f7c <nwkRxRejectDuplicate+0x144>
    5f76:	81 e0       	ldi	r24, 0x01	; 1
    5f78:	01 c0       	rjmp	.+2      	; 0x5f7c <nwkRxRejectDuplicate+0x144>
    5f7a:	81 e0       	ldi	r24, 0x01	; 1
    5f7c:	df 91       	pop	r29
    5f7e:	cf 91       	pop	r28
    5f80:	1f 91       	pop	r17
    5f82:	0f 91       	pop	r16
    5f84:	08 95       	ret

00005f86 <nwkRxHandleReceivedFrame>:
    5f86:	0f 93       	push	r16
    5f88:	1f 93       	push	r17
    5f8a:	cf 93       	push	r28
    5f8c:	df 93       	push	r29
    5f8e:	fc 01       	movw	r30, r24
    5f90:	8c 01       	movw	r16, r24
    5f92:	0e 5f       	subi	r16, 0xFE	; 254
    5f94:	1f 4f       	sbci	r17, 0xFF	; 255
    5f96:	84 e2       	ldi	r24, 0x24	; 36
    5f98:	80 83       	st	Z, r24
    5f9a:	83 85       	ldd	r24, Z+11	; 0x0b
    5f9c:	81 fd       	sbrc	r24, 1
    5f9e:	54 c0       	rjmp	.+168    	; 0x6048 <nwkRxHandleReceivedFrame+0xc2>
    5fa0:	83 fd       	sbrc	r24, 3
    5fa2:	52 c0       	rjmp	.+164    	; 0x6048 <nwkRxHandleReceivedFrame+0xc2>
    5fa4:	25 81       	ldd	r18, Z+5	; 0x05
    5fa6:	36 81       	ldd	r19, Z+6	; 0x06
    5fa8:	2f 3f       	cpi	r18, 0xFF	; 255
    5faa:	3f 4f       	sbci	r19, 0xFF	; 255
    5fac:	79 f4       	brne	.+30     	; 0x5fcc <nwkRxHandleReceivedFrame+0x46>
    5fae:	20 91 71 25 	lds	r18, 0x2571	; 0x802571 <nwkIb>
    5fb2:	30 91 72 25 	lds	r19, 0x2572	; 0x802572 <nwkIb+0x1>
    5fb6:	87 85       	ldd	r24, Z+15	; 0x0f
    5fb8:	90 89       	ldd	r25, Z+16	; 0x10
    5fba:	28 17       	cp	r18, r24
    5fbc:	39 07       	cpc	r19, r25
    5fbe:	19 f0       	breq	.+6      	; 0x5fc6 <nwkRxHandleReceivedFrame+0x40>
    5fc0:	01 96       	adiw	r24, 0x01	; 1
    5fc2:	09 f0       	breq	.+2      	; 0x5fc6 <nwkRxHandleReceivedFrame+0x40>
    5fc4:	41 c0       	rjmp	.+130    	; 0x6048 <nwkRxHandleReceivedFrame+0xc2>
    5fc6:	82 e2       	ldi	r24, 0x22	; 34
    5fc8:	80 83       	st	Z, r24
    5fca:	3e c0       	rjmp	.+124    	; 0x6048 <nwkRxHandleReceivedFrame+0xc2>
    5fcc:	27 85       	ldd	r18, Z+15	; 0x0f
    5fce:	30 89       	ldd	r19, Z+16	; 0x10
    5fd0:	2f 3f       	cpi	r18, 0xFF	; 255
    5fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    5fd4:	11 f4       	brne	.+4      	; 0x5fda <nwkRxHandleReceivedFrame+0x54>
    5fd6:	80 fd       	sbrc	r24, 0
    5fd8:	37 c0       	rjmp	.+110    	; 0x6048 <nwkRxHandleReceivedFrame+0xc2>
    5fda:	20 91 71 25 	lds	r18, 0x2571	; 0x802571 <nwkIb>
    5fde:	30 91 72 25 	lds	r19, 0x2572	; 0x802572 <nwkIb+0x1>
    5fe2:	85 85       	ldd	r24, Z+13	; 0x0d
    5fe4:	96 85       	ldd	r25, Z+14	; 0x0e
    5fe6:	28 17       	cp	r18, r24
    5fe8:	39 07       	cpc	r19, r25
    5fea:	71 f1       	breq	.+92     	; 0x6048 <nwkRxHandleReceivedFrame+0xc2>
    5fec:	ef 01       	movw	r28, r30
    5fee:	cf 01       	movw	r24, r30
    5ff0:	55 dd       	rcall	.-1366   	; 0x5a9c <nwkRouteFrameReceived>
    5ff2:	c8 01       	movw	r24, r16
    5ff4:	21 df       	rcall	.-446    	; 0x5e38 <nwkRxRejectDuplicate>
    5ff6:	81 11       	cpse	r24, r1
    5ff8:	27 c0       	rjmp	.+78     	; 0x6048 <nwkRxHandleReceivedFrame+0xc2>
    5ffa:	8f 81       	ldd	r24, Y+7	; 0x07
    5ffc:	98 85       	ldd	r25, Y+8	; 0x08
    5ffe:	01 96       	adiw	r24, 0x01	; 1
    6000:	71 f4       	brne	.+28     	; 0x601e <nwkRxHandleReceivedFrame+0x98>
    6002:	20 91 71 25 	lds	r18, 0x2571	; 0x802571 <nwkIb>
    6006:	30 91 72 25 	lds	r19, 0x2572	; 0x802572 <nwkIb+0x1>
    600a:	8f 85       	ldd	r24, Y+15	; 0x0f
    600c:	98 89       	ldd	r25, Y+16	; 0x10
    600e:	28 17       	cp	r18, r24
    6010:	39 07       	cpc	r19, r25
    6012:	29 f0       	breq	.+10     	; 0x601e <nwkRxHandleReceivedFrame+0x98>
    6014:	8b 85       	ldd	r24, Y+11	; 0x0b
    6016:	82 fd       	sbrc	r24, 2
    6018:	02 c0       	rjmp	.+4      	; 0x601e <nwkRxHandleReceivedFrame+0x98>
    601a:	ce 01       	movw	r24, r28
    601c:	9e d1       	rcall	.+828    	; 0x635a <nwkTxBroadcastFrame>
    601e:	20 91 71 25 	lds	r18, 0x2571	; 0x802571 <nwkIb>
    6022:	30 91 72 25 	lds	r19, 0x2572	; 0x802572 <nwkIb+0x1>
    6026:	8f 85       	ldd	r24, Y+15	; 0x0f
    6028:	98 89       	ldd	r25, Y+16	; 0x10
    602a:	28 17       	cp	r18, r24
    602c:	39 07       	cpc	r19, r25
    602e:	11 f0       	breq	.+4      	; 0x6034 <nwkRxHandleReceivedFrame+0xae>
    6030:	01 96       	adiw	r24, 0x01	; 1
    6032:	19 f4       	brne	.+6      	; 0x603a <nwkRxHandleReceivedFrame+0xb4>
    6034:	82 e2       	ldi	r24, 0x22	; 34
    6036:	88 83       	st	Y, r24
    6038:	07 c0       	rjmp	.+14     	; 0x6048 <nwkRxHandleReceivedFrame+0xc2>
    603a:	8f 81       	ldd	r24, Y+7	; 0x07
    603c:	98 85       	ldd	r25, Y+8	; 0x08
    603e:	28 17       	cp	r18, r24
    6040:	39 07       	cpc	r19, r25
    6042:	11 f4       	brne	.+4      	; 0x6048 <nwkRxHandleReceivedFrame+0xc2>
    6044:	83 e2       	ldi	r24, 0x23	; 35
    6046:	88 83       	st	Y, r24
    6048:	df 91       	pop	r29
    604a:	cf 91       	pop	r28
    604c:	1f 91       	pop	r17
    604e:	0f 91       	pop	r16
    6050:	08 95       	ret

00006052 <nwkRxSendAck>:
    6052:	0f 93       	push	r16
    6054:	1f 93       	push	r17
    6056:	cf 93       	push	r28
    6058:	df 93       	push	r29
    605a:	8c 01       	movw	r16, r24
    605c:	e5 db       	rcall	.-2102   	; 0x5828 <nwkFrameAlloc>
    605e:	ec 01       	movw	r28, r24
    6060:	00 97       	sbiw	r24, 0x00	; 0
    6062:	31 f1       	breq	.+76     	; 0x60b0 <nwkRxSendAck+0x5e>
    6064:	34 dc       	rcall	.-1944   	; 0x58ce <nwkFrameCommandInit>
    6066:	89 81       	ldd	r24, Y+1	; 0x01
    6068:	8d 5f       	subi	r24, 0xFD	; 253
    606a:	89 83       	std	Y+1, r24	; 0x01
    606c:	fe 01       	movw	r30, r28
    606e:	e9 57       	subi	r30, 0x79	; 121
    6070:	ff 4f       	sbci	r31, 0xFF	; 255
    6072:	11 82       	std	Z+1, r1	; 0x01
    6074:	10 82       	st	Z, r1
    6076:	d8 01       	movw	r26, r16
    6078:	1b 96       	adiw	r26, 0x0b	; 11
    607a:	8c 91       	ld	r24, X
    607c:	1b 97       	sbiw	r26, 0x0b	; 11
    607e:	86 95       	lsr	r24
    6080:	81 70       	andi	r24, 0x01	; 1
    6082:	9b 85       	ldd	r25, Y+11	; 0x0b
    6084:	80 fb       	bst	r24, 0
    6086:	91 f9       	bld	r25, 1
    6088:	9b 87       	std	Y+11, r25	; 0x0b
    608a:	1d 96       	adiw	r26, 0x0d	; 13
    608c:	8d 91       	ld	r24, X+
    608e:	9c 91       	ld	r25, X
    6090:	1e 97       	sbiw	r26, 0x0e	; 14
    6092:	98 8b       	std	Y+16, r25	; 0x10
    6094:	8f 87       	std	Y+15, r24	; 0x0f
    6096:	36 97       	sbiw	r30, 0x06	; 6
    6098:	01 90       	ld	r0, Z+
    609a:	f0 81       	ld	r31, Z
    609c:	e0 2d       	mov	r30, r0
    609e:	10 82       	st	Z, r1
    60a0:	80 91 8c 1c 	lds	r24, 0x1C8C	; 0x801c8c <nwkRxAckControl>
    60a4:	82 83       	std	Z+2, r24	; 0x02
    60a6:	1c 96       	adiw	r26, 0x0c	; 12
    60a8:	8c 91       	ld	r24, X
    60aa:	81 83       	std	Z+1, r24	; 0x01
    60ac:	ce 01       	movw	r24, r28
    60ae:	03 d1       	rcall	.+518    	; 0x62b6 <nwkTxFrame>
    60b0:	df 91       	pop	r29
    60b2:	cf 91       	pop	r28
    60b4:	1f 91       	pop	r17
    60b6:	0f 91       	pop	r16
    60b8:	08 95       	ret

000060ba <nwkRxHandleIndication>:
    60ba:	cf 93       	push	r28
    60bc:	df 93       	push	r29
    60be:	ec 01       	movw	r28, r24
    60c0:	10 92 8c 1c 	sts	0x1C8C, r1	; 0x801c8c <nwkRxAckControl>
    60c4:	e4 dd       	rcall	.-1080   	; 0x5c8e <nwkRxIndicateFrame>
    60c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    60c8:	90 ff       	sbrs	r25, 0
    60ca:	80 e0       	ldi	r24, 0x00	; 0
    60cc:	2f 81       	ldd	r18, Y+7	; 0x07
    60ce:	38 85       	ldd	r19, Y+8	; 0x08
    60d0:	2f 3f       	cpi	r18, 0xFF	; 255
    60d2:	3f 4f       	sbci	r19, 0xFF	; 255
    60d4:	59 f4       	brne	.+22     	; 0x60ec <nwkRxHandleIndication+0x32>
    60d6:	40 91 71 25 	lds	r20, 0x2571	; 0x802571 <nwkIb>
    60da:	50 91 72 25 	lds	r21, 0x2572	; 0x802572 <nwkIb+0x1>
    60de:	2f 85       	ldd	r18, Y+15	; 0x0f
    60e0:	38 89       	ldd	r19, Y+16	; 0x10
    60e2:	42 17       	cp	r20, r18
    60e4:	53 07       	cpc	r21, r19
    60e6:	11 f4       	brne	.+4      	; 0x60ec <nwkRxHandleIndication+0x32>
    60e8:	93 ff       	sbrs	r25, 3
    60ea:	81 e0       	ldi	r24, 0x01	; 1
    60ec:	2d 81       	ldd	r18, Y+5	; 0x05
    60ee:	3e 81       	ldd	r19, Y+6	; 0x06
    60f0:	2f 3f       	cpi	r18, 0xFF	; 255
    60f2:	3f 4f       	sbci	r19, 0xFF	; 255
    60f4:	09 f4       	brne	.+2      	; 0x60f8 <nwkRxHandleIndication+0x3e>
    60f6:	80 e0       	ldi	r24, 0x00	; 0
    60f8:	20 91 71 25 	lds	r18, 0x2571	; 0x802571 <nwkIb>
    60fc:	30 91 72 25 	lds	r19, 0x2572	; 0x802572 <nwkIb+0x1>
    6100:	2f 3f       	cpi	r18, 0xFF	; 255
    6102:	3f 4f       	sbci	r19, 0xFF	; 255
    6104:	09 f4       	brne	.+2      	; 0x6108 <nwkRxHandleIndication+0x4e>
    6106:	80 e0       	ldi	r24, 0x00	; 0
    6108:	88 23       	and	r24, r24
    610a:	11 f0       	breq	.+4      	; 0x6110 <nwkRxHandleIndication+0x56>
    610c:	ce 01       	movw	r24, r28
    610e:	a1 df       	rcall	.-190    	; 0x6052 <nwkRxSendAck>
    6110:	84 e2       	ldi	r24, 0x24	; 36
    6112:	88 83       	st	Y, r24
    6114:	df 91       	pop	r29
    6116:	cf 91       	pop	r28
    6118:	08 95       	ret

0000611a <nwkRxInit>:
    611a:	20 e0       	ldi	r18, 0x00	; 0
    611c:	0e c0       	rjmp	.+28     	; 0x613a <nwkRxInit+0x20>
    611e:	82 2f       	mov	r24, r18
    6120:	90 e0       	ldi	r25, 0x00	; 0
    6122:	fc 01       	movw	r30, r24
    6124:	ee 0f       	add	r30, r30
    6126:	ff 1f       	adc	r31, r31
    6128:	ee 0f       	add	r30, r30
    612a:	ff 1f       	adc	r31, r31
    612c:	8e 0f       	add	r24, r30
    612e:	9f 1f       	adc	r25, r31
    6130:	fc 01       	movw	r30, r24
    6132:	e3 57       	subi	r30, 0x73	; 115
    6134:	f3 4e       	sbci	r31, 0xE3	; 227
    6136:	14 82       	std	Z+4, r1	; 0x04
    6138:	2f 5f       	subi	r18, 0xFF	; 255
    613a:	2a 30       	cpi	r18, 0x0A	; 10
    613c:	80 f3       	brcs	.-32     	; 0x611e <nwkRxInit+0x4>
    613e:	ef e7       	ldi	r30, 0x7F	; 127
    6140:	fc e1       	ldi	r31, 0x1C	; 28
    6142:	84 e6       	ldi	r24, 0x64	; 100
    6144:	90 e0       	ldi	r25, 0x00	; 0
    6146:	a0 e0       	ldi	r26, 0x00	; 0
    6148:	b0 e0       	ldi	r27, 0x00	; 0
    614a:	86 83       	std	Z+6, r24	; 0x06
    614c:	97 83       	std	Z+7, r25	; 0x07
    614e:	a0 87       	std	Z+8, r26	; 0x08
    6150:	b1 87       	std	Z+9, r27	; 0x09
    6152:	12 86       	std	Z+10, r1	; 0x0a
    6154:	85 ef       	ldi	r24, 0xF5	; 245
    6156:	9e e2       	ldi	r25, 0x2E	; 46
    6158:	94 87       	std	Z+12, r25	; 0x0c
    615a:	83 87       	std	Z+11, r24	; 0x0b
    615c:	6d ed       	ldi	r22, 0xDD	; 221
    615e:	7e e2       	ldi	r23, 0x2E	; 46
    6160:	80 e0       	ldi	r24, 0x00	; 0
    6162:	60 ca       	rjmp	.-2880   	; 0x5624 <NWK_OpenEndpoint>
    6164:	08 95       	ret

00006166 <PHY_DataInd>:
    6166:	cf 93       	push	r28
    6168:	df 93       	push	r29
    616a:	dc 01       	movw	r26, r24
    616c:	ed 91       	ld	r30, X+
    616e:	fc 91       	ld	r31, X
    6170:	21 81       	ldd	r18, Z+1	; 0x01
    6172:	28 38       	cpi	r18, 0x88	; 136
    6174:	09 f5       	brne	.+66     	; 0x61b8 <PHY_DataInd+0x52>
    6176:	20 81       	ld	r18, Z
    6178:	21 36       	cpi	r18, 0x61	; 97
    617a:	11 f0       	breq	.+4      	; 0x6180 <PHY_DataInd+0x1a>
    617c:	21 34       	cpi	r18, 0x41	; 65
    617e:	e1 f4       	brne	.+56     	; 0x61b8 <PHY_DataInd+0x52>
    6180:	fc 01       	movw	r30, r24
    6182:	22 81       	ldd	r18, Z+2	; 0x02
    6184:	20 31       	cpi	r18, 0x10	; 16
    6186:	c0 f0       	brcs	.+48     	; 0x61b8 <PHY_DataInd+0x52>
    6188:	ec 01       	movw	r28, r24
    618a:	4e db       	rcall	.-2404   	; 0x5828 <nwkFrameAlloc>
    618c:	00 97       	sbiw	r24, 0x00	; 0
    618e:	a1 f0       	breq	.+40     	; 0x61b8 <PHY_DataInd+0x52>
    6190:	20 e2       	ldi	r18, 0x20	; 32
    6192:	dc 01       	movw	r26, r24
    6194:	2c 93       	st	X, r18
    6196:	2a 81       	ldd	r18, Y+2	; 0x02
    6198:	11 96       	adiw	r26, 0x01	; 1
    619a:	2c 93       	st	X, r18
    619c:	2b 81       	ldd	r18, Y+3	; 0x03
    619e:	fc 01       	movw	r30, r24
    61a0:	ed 57       	subi	r30, 0x7D	; 125
    61a2:	ff 4f       	sbci	r31, 0xFF	; 255
    61a4:	20 83       	st	Z, r18
    61a6:	2c 81       	ldd	r18, Y+4	; 0x04
    61a8:	31 96       	adiw	r30, 0x01	; 1
    61aa:	20 83       	st	Z, r18
    61ac:	4a 81       	ldd	r20, Y+2	; 0x02
    61ae:	68 81       	ld	r22, Y
    61b0:	79 81       	ldd	r23, Y+1	; 0x01
    61b2:	50 e0       	ldi	r21, 0x00	; 0
    61b4:	02 96       	adiw	r24, 0x02	; 2
    61b6:	d2 d4       	rcall	.+2468   	; 0x6b5c <memcpy>
    61b8:	df 91       	pop	r29
    61ba:	cf 91       	pop	r28
    61bc:	08 95       	ret

000061be <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    61be:	cf 93       	push	r28
    61c0:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    61c2:	c0 e0       	ldi	r28, 0x00	; 0
    61c4:	d0 e0       	ldi	r29, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
    61c6:	17 c0       	rjmp	.+46     	; 0x61f6 <nwkRxTaskHandler+0x38>
  {
    switch (frame->state)
    61c8:	88 81       	ld	r24, Y
    61ca:	82 32       	cpi	r24, 0x22	; 34
    61cc:	61 f0       	breq	.+24     	; 0x61e6 <nwkRxTaskHandler+0x28>
    61ce:	18 f4       	brcc	.+6      	; 0x61d6 <nwkRxTaskHandler+0x18>
    61d0:	80 32       	cpi	r24, 0x20	; 32
    61d2:	31 f0       	breq	.+12     	; 0x61e0 <nwkRxTaskHandler+0x22>
    61d4:	10 c0       	rjmp	.+32     	; 0x61f6 <nwkRxTaskHandler+0x38>
    61d6:	83 32       	cpi	r24, 0x23	; 35
    61d8:	49 f0       	breq	.+18     	; 0x61ec <nwkRxTaskHandler+0x2e>
    61da:	84 32       	cpi	r24, 0x24	; 36
    61dc:	51 f0       	breq	.+20     	; 0x61f2 <nwkRxTaskHandler+0x34>
    61de:	0b c0       	rjmp	.+22     	; 0x61f6 <nwkRxTaskHandler+0x38>
    {
      case NWK_RX_STATE_RECEIVED:
      {
        nwkRxHandleReceivedFrame(frame);
    61e0:	ce 01       	movw	r24, r28
    61e2:	d1 de       	rcall	.-606    	; 0x5f86 <nwkRxHandleReceivedFrame>
      } break;
    61e4:	08 c0       	rjmp	.+16     	; 0x61f6 <nwkRxTaskHandler+0x38>
      } break;
#endif

      case NWK_RX_STATE_INDICATE:
      {
        nwkRxHandleIndication(frame);
    61e6:	ce 01       	movw	r24, r28
    61e8:	68 df       	rcall	.-304    	; 0x60ba <nwkRxHandleIndication>
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    61ea:	05 c0       	rjmp	.+10     	; 0x61f6 <nwkRxTaskHandler+0x38>
    61ec:	ce 01       	movw	r24, r28
      } break;
    61ee:	15 dd       	rcall	.-1494   	; 0x5c1a <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    61f0:	02 c0       	rjmp	.+4      	; 0x61f6 <nwkRxTaskHandler+0x38>
    61f2:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    61f4:	4a db       	rcall	.-2412   	; 0x588a <nwkFrameFree>
    61f6:	ce 01       	movw	r24, r28
    61f8:	52 db       	rcall	.-2396   	; 0x589e <nwkFrameNext>
    61fa:	ec 01       	movw	r28, r24
    61fc:	89 2b       	or	r24, r25
    61fe:	21 f7       	brne	.-56     	; 0x61c8 <nwkRxTaskHandler+0xa>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    6200:	df 91       	pop	r29
    6202:	cf 91       	pop	r28
    6204:	08 95       	ret

00006206 <nwkTxConvertPhyStatus>:

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    6206:	81 30       	cpi	r24, 0x01	; 1
    6208:	51 f0       	breq	.+20     	; 0x621e <nwkTxConvertPhyStatus+0x18>
    620a:	18 f0       	brcs	.+6      	; 0x6212 <nwkTxConvertPhyStatus+0xc>
    620c:	82 30       	cpi	r24, 0x02	; 2
    620e:	19 f0       	breq	.+6      	; 0x6216 <nwkTxConvertPhyStatus+0x10>
    6210:	04 c0       	rjmp	.+8      	; 0x621a <nwkTxConvertPhyStatus+0x14>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    6212:	80 e0       	ldi	r24, 0x00	; 0
    6214:	08 95       	ret

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    6216:	81 e2       	ldi	r24, 0x21	; 33
    6218:	08 95       	ret

    default:
      return NWK_ERROR_STATUS;
    621a:	81 e0       	ldi	r24, 0x01	; 1
    621c:	08 95       	ret
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    621e:	80 e2       	ldi	r24, 0x20	; 32
      return NWK_PHY_NO_ACK_STATUS;

    default:
      return NWK_ERROR_STATUS;
  }
}
    6220:	08 95       	ret

00006222 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    6222:	1f 93       	push	r17
    6224:	cf 93       	push	r28
    6226:	df 93       	push	r29
    6228:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    622a:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    622c:	80 e0       	ldi	r24, 0x00	; 0
    622e:	90 e0       	ldi	r25, 0x00	; 0
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    6230:	14 c0       	rjmp	.+40     	; 0x625a <nwkTxDelayTimerHandler+0x38>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    6232:	fc 01       	movw	r30, r24
    6234:	20 81       	ld	r18, Z
    6236:	21 31       	cpi	r18, 0x11	; 17
    6238:	81 f4       	brne	.+32     	; 0x625a <nwkTxDelayTimerHandler+0x38>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    623a:	ec 57       	subi	r30, 0x7C	; 124
    623c:	ff 4f       	sbci	r31, 0xFF	; 255
    623e:	20 81       	ld	r18, Z
    6240:	31 81       	ldd	r19, Z+1	; 0x01
    6242:	21 50       	subi	r18, 0x01	; 1
    6244:	31 09       	sbc	r19, r1
    6246:	31 83       	std	Z+1, r19	; 0x01
    6248:	20 83       	st	Z, r18
    624a:	23 2b       	or	r18, r19
    624c:	29 f4       	brne	.+10     	; 0x6258 <nwkTxDelayTimerHandler+0x36>
        frame->state = NWK_TX_STATE_SEND;
    624e:	23 e1       	ldi	r18, 0x13	; 19
    6250:	fc 01       	movw	r30, r24
    6252:	20 83       	st	Z, r18

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    6254:	11 e0       	ldi	r17, 0x01	; 1
    6256:	01 c0       	rjmp	.+2      	; 0x625a <nwkTxDelayTimerHandler+0x38>
    6258:	11 e0       	ldi	r17, 0x01	; 1
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    625a:	21 db       	rcall	.-2494   	; 0x589e <nwkFrameNext>
    625c:	00 97       	sbiw	r24, 0x00	; 0
    625e:	49 f7       	brne	.-46     	; 0x6232 <nwkTxDelayTimerHandler+0x10>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    6260:	11 23       	and	r17, r17
    6262:	11 f0       	breq	.+4      	; 0x6268 <nwkTxDelayTimerHandler+0x46>
    SYS_TimerStart(timer);
    6264:	ce 01       	movw	r24, r28
    6266:	78 d3       	rcall	.+1776   	; 0x6958 <SYS_TimerStart>
}
    6268:	df 91       	pop	r29
    626a:	cf 91       	pop	r28
    626c:	1f 91       	pop	r17
    626e:	08 95       	ret

00006270 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    6270:	10 92 da 1c 	sts	0x1CDA, r1	; 0x801cda <nwkTxPhyActiveFrame+0x1>
    6274:	10 92 d9 1c 	sts	0x1CD9, r1	; 0x801cd9 <nwkTxPhyActiveFrame>

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    6278:	ec ec       	ldi	r30, 0xCC	; 204
    627a:	fc e1       	ldi	r31, 0x1C	; 28
    627c:	82 e3       	ldi	r24, 0x32	; 50
    627e:	90 e0       	ldi	r25, 0x00	; 0
    6280:	a0 e0       	ldi	r26, 0x00	; 0
    6282:	b0 e0       	ldi	r27, 0x00	; 0
    6284:	86 83       	std	Z+6, r24	; 0x06
    6286:	97 83       	std	Z+7, r25	; 0x07
    6288:	a0 87       	std	Z+8, r26	; 0x08
    628a:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    628c:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    628e:	8b e1       	ldi	r24, 0x1B	; 27
    6290:	92 e3       	ldi	r25, 0x32	; 50
    6292:	94 87       	std	Z+12, r25	; 0x0c
    6294:	83 87       	std	Z+11, r24	; 0x0b

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    6296:	ef eb       	ldi	r30, 0xBF	; 191
    6298:	fc e1       	ldi	r31, 0x1C	; 28
    629a:	8a e0       	ldi	r24, 0x0A	; 10
    629c:	90 e0       	ldi	r25, 0x00	; 0
    629e:	a0 e0       	ldi	r26, 0x00	; 0
    62a0:	b0 e0       	ldi	r27, 0x00	; 0
    62a2:	86 83       	std	Z+6, r24	; 0x06
    62a4:	97 83       	std	Z+7, r25	; 0x07
    62a6:	a0 87       	std	Z+8, r26	; 0x08
    62a8:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    62aa:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    62ac:	81 e1       	ldi	r24, 0x11	; 17
    62ae:	91 e3       	ldi	r25, 0x31	; 49
    62b0:	94 87       	std	Z+12, r25	; 0x0c
    62b2:	83 87       	std	Z+11, r24	; 0x0b
    62b4:	08 95       	ret

000062b6 <nwkTxFrame>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    62b6:	cf 93       	push	r28
    62b8:	df 93       	push	r29
    62ba:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    62bc:	fc 01       	movw	r30, r24
    62be:	ea 57       	subi	r30, 0x7A	; 122
    62c0:	ff 4f       	sbci	r31, 0xFF	; 255
    62c2:	80 81       	ld	r24, Z
    62c4:	81 ff       	sbrs	r24, 1
    62c6:	03 c0       	rjmp	.+6      	; 0x62ce <nwkTxFrame+0x18>
  {
    frame->state = NWK_TX_STATE_DELAY;
    62c8:	92 e1       	ldi	r25, 0x12	; 18
    62ca:	98 83       	st	Y, r25
    62cc:	02 c0       	rjmp	.+4      	; 0x62d2 <nwkTxFrame+0x1c>
  #ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.security)
      frame->state = NWK_TX_STATE_ENCRYPT;
    else
  #endif
      frame->state = NWK_TX_STATE_DELAY;
    62ce:	92 e1       	ldi	r25, 0x12	; 18
    62d0:	98 83       	st	Y, r25
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    62d2:	fe 01       	movw	r30, r28
    62d4:	ed 57       	subi	r30, 0x7D	; 125
    62d6:	ff 4f       	sbci	r31, 0xFF	; 255
    62d8:	10 82       	st	Z, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    62da:	98 2f       	mov	r25, r24
    62dc:	91 70       	andi	r25, 0x01	; 1
    62de:	80 ff       	sbrs	r24, 0
    62e0:	05 c0       	rjmp	.+10     	; 0x62ec <nwkTxFrame+0x36>
    header->macDstPanId = NWK_BROADCAST_PANID;
    62e2:	2f ef       	ldi	r18, 0xFF	; 255
    62e4:	3f ef       	ldi	r19, 0xFF	; 255
    62e6:	3e 83       	std	Y+6, r19	; 0x06
    62e8:	2d 83       	std	Y+5, r18	; 0x05
    62ea:	06 c0       	rjmp	.+12     	; 0x62f8 <nwkTxFrame+0x42>
  else
    header->macDstPanId = nwkIb.panId;
    62ec:	20 91 73 25 	lds	r18, 0x2573	; 0x802573 <nwkIb+0x2>
    62f0:	30 91 74 25 	lds	r19, 0x2574	; 0x802574 <nwkIb+0x3>
    62f4:	3e 83       	std	Y+6, r19	; 0x06
    62f6:	2d 83       	std	Y+5, r18	; 0x05

#ifdef NWK_ENABLE_ROUTING
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
    62f8:	82 fd       	sbrc	r24, 2
    62fa:	05 c0       	rjmp	.+10     	; 0x6306 <nwkTxFrame+0x50>
    62fc:	91 11       	cpse	r25, r1
    62fe:	03 c0       	rjmp	.+6      	; 0x6306 <nwkTxFrame+0x50>
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    nwkRoutePrepareTx(frame);
    6300:	ce 01       	movw	r24, r28
    6302:	6c dc       	rcall	.-1832   	; 0x5bdc <nwkRoutePrepareTx>
    6304:	04 c0       	rjmp	.+8      	; 0x630e <nwkTxFrame+0x58>
  else
#endif
    header->macDstAddr = header->nwkDstAddr;
    6306:	8f 85       	ldd	r24, Y+15	; 0x0f
    6308:	98 89       	ldd	r25, Y+16	; 0x10
    630a:	98 87       	std	Y+8, r25	; 0x08
    630c:	8f 83       	std	Y+7, r24	; 0x07

  header->macSrcAddr = nwkIb.addr;
    630e:	e1 e7       	ldi	r30, 0x71	; 113
    6310:	f5 e2       	ldi	r31, 0x25	; 37
    6312:	80 81       	ld	r24, Z
    6314:	91 81       	ldd	r25, Z+1	; 0x01
    6316:	9a 87       	std	Y+10, r25	; 0x0a
    6318:	89 87       	std	Y+9, r24	; 0x09
  header->macSeq = ++nwkIb.macSeqNum;
    631a:	85 81       	ldd	r24, Z+5	; 0x05
    631c:	8f 5f       	subi	r24, 0xFF	; 255
    631e:	85 83       	std	Z+5, r24	; 0x05
    6320:	8c 83       	std	Y+4, r24	; 0x04

  if (NWK_BROADCAST_ADDR == header->macDstAddr)
    6322:	8f 81       	ldd	r24, Y+7	; 0x07
    6324:	98 85       	ldd	r25, Y+8	; 0x08
    6326:	01 96       	adiw	r24, 0x01	; 1
    6328:	69 f4       	brne	.+26     	; 0x6344 <nwkTxFrame+0x8e>
  {
    header->macFcf = 0x8841;
    632a:	81 e4       	ldi	r24, 0x41	; 65
    632c:	98 e8       	ldi	r25, 0x88	; 136
    632e:	9b 83       	std	Y+3, r25	; 0x03
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    6330:	8a 83       	std	Y+2, r24	; 0x02
    6332:	06 d4       	rcall	.+2060   	; 0x6b40 <rand>
    6334:	87 70       	andi	r24, 0x07	; 7
    6336:	99 27       	eor	r25, r25
    6338:	01 96       	adiw	r24, 0x01	; 1
    633a:	cc 57       	subi	r28, 0x7C	; 124
    633c:	df 4f       	sbci	r29, 0xFF	; 255
    633e:	99 83       	std	Y+1, r25	; 0x01
    6340:	88 83       	st	Y, r24
    6342:	08 c0       	rjmp	.+16     	; 0x6354 <nwkTxFrame+0x9e>
  }
  else
  {
    header->macFcf = 0x8861;
    6344:	81 e6       	ldi	r24, 0x61	; 97
    6346:	98 e8       	ldi	r25, 0x88	; 136
    6348:	9b 83       	std	Y+3, r25	; 0x03
    634a:	8a 83       	std	Y+2, r24	; 0x02
    frame->tx.timeout = 0;
    634c:	cc 57       	subi	r28, 0x7C	; 124
    634e:	df 4f       	sbci	r29, 0xFF	; 255
    6350:	19 82       	std	Y+1, r1	; 0x01
    6352:	18 82       	st	Y, r1
  }
}
    6354:	df 91       	pop	r29
    6356:	cf 91       	pop	r28
    6358:	08 95       	ret

0000635a <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    635a:	0f 93       	push	r16
    635c:	1f 93       	push	r17
    635e:	cf 93       	push	r28
    6360:	df 93       	push	r29
    6362:	8c 01       	movw	r16, r24
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    6364:	61 da       	rcall	.-2878   	; 0x5828 <nwkFrameAlloc>
    6366:	ec 01       	movw	r28, r24
    6368:	89 2b       	or	r24, r25
    636a:	a9 f1       	breq	.+106    	; 0x63d6 <nwkTxBroadcastFrame+0x7c>
    return;

  newFrame->state = NWK_TX_STATE_DELAY;
    636c:	82 e1       	ldi	r24, 0x12	; 18
    636e:	88 83       	st	Y, r24
  newFrame->size = frame->size;
    6370:	f8 01       	movw	r30, r16
    6372:	81 81       	ldd	r24, Z+1	; 0x01
    6374:	89 83       	std	Y+1, r24	; 0x01
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    6376:	fe 01       	movw	r30, r28
    6378:	ed 57       	subi	r30, 0x7D	; 125
    637a:	ff 4f       	sbci	r31, 0xFF	; 255
  newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    637c:	10 82       	st	Z, r1
    637e:	e0 d3       	rcall	.+1984   	; 0x6b40 <rand>
    6380:	87 70       	andi	r24, 0x07	; 7
    6382:	99 27       	eor	r25, r25
    6384:	01 96       	adiw	r24, 0x01	; 1
    6386:	fe 01       	movw	r30, r28
    6388:	ec 57       	subi	r30, 0x7C	; 124
    638a:	ff 4f       	sbci	r31, 0xFF	; 255
    638c:	91 83       	std	Z+1, r25	; 0x01
    638e:	80 83       	st	Z, r24
  newFrame->tx.confirm = NULL;
    6390:	33 96       	adiw	r30, 0x03	; 3
    6392:	11 82       	std	Z+1, r1	; 0x01
    6394:	10 82       	st	Z, r1
  memcpy(newFrame->data, frame->data, frame->size);
    6396:	f8 01       	movw	r30, r16
    6398:	41 81       	ldd	r20, Z+1	; 0x01
    639a:	b8 01       	movw	r22, r16
    639c:	6e 5f       	subi	r22, 0xFE	; 254
    639e:	7f 4f       	sbci	r23, 0xFF	; 255
    63a0:	50 e0       	ldi	r21, 0x00	; 0
    63a2:	ce 01       	movw	r24, r28
    63a4:	02 96       	adiw	r24, 0x02	; 2
    63a6:	da d3       	rcall	.+1972   	; 0x6b5c <memcpy>

  newFrame->header.macFcf = 0x8841;
    63a8:	81 e4       	ldi	r24, 0x41	; 65
    63aa:	98 e8       	ldi	r25, 0x88	; 136
    63ac:	9b 83       	std	Y+3, r25	; 0x03
    63ae:	8a 83       	std	Y+2, r24	; 0x02
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    63b0:	8f ef       	ldi	r24, 0xFF	; 255
    63b2:	9f ef       	ldi	r25, 0xFF	; 255
    63b4:	98 87       	std	Y+8, r25	; 0x08
    63b6:	8f 83       	std	Y+7, r24	; 0x07
  newFrame->header.macDstPanId = frame->header.macDstPanId;
    63b8:	f8 01       	movw	r30, r16
    63ba:	85 81       	ldd	r24, Z+5	; 0x05
    63bc:	96 81       	ldd	r25, Z+6	; 0x06
    63be:	9e 83       	std	Y+6, r25	; 0x06
    63c0:	8d 83       	std	Y+5, r24	; 0x05
  newFrame->header.macSrcAddr = nwkIb.addr;
    63c2:	e1 e7       	ldi	r30, 0x71	; 113
    63c4:	f5 e2       	ldi	r31, 0x25	; 37
    63c6:	80 81       	ld	r24, Z
    63c8:	91 81       	ldd	r25, Z+1	; 0x01
    63ca:	9a 87       	std	Y+10, r25	; 0x0a
    63cc:	89 87       	std	Y+9, r24	; 0x09
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
    63ce:	85 81       	ldd	r24, Z+5	; 0x05
    63d0:	8f 5f       	subi	r24, 0xFF	; 255
    63d2:	85 83       	std	Z+5, r24	; 0x05
    63d4:	8c 83       	std	Y+4, r24	; 0x04
}
    63d6:	df 91       	pop	r29
    63d8:	cf 91       	pop	r28
    63da:	1f 91       	pop	r17
    63dc:	0f 91       	pop	r16
    63de:	08 95       	ret

000063e0 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    63e0:	cf 93       	push	r28
    63e2:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    63e4:	fc 01       	movw	r30, r24
    63e6:	c7 81       	ldd	r28, Z+7	; 0x07
    63e8:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    63ea:	81 85       	ldd	r24, Z+9	; 0x09
    63ec:	83 30       	cpi	r24, 0x03	; 3
    63ee:	c1 f4       	brne	.+48     	; 0x6420 <nwkTxAckReceived+0x40>
    63f0:	80 e0       	ldi	r24, 0x00	; 0
    63f2:	90 e0       	ldi	r25, 0x00	; 0
    63f4:	10 c0       	rjmp	.+32     	; 0x6416 <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    63f6:	fc 01       	movw	r30, r24
    63f8:	20 81       	ld	r18, Z
    63fa:	26 31       	cpi	r18, 0x16	; 22
    63fc:	61 f4       	brne	.+24     	; 0x6416 <nwkTxAckReceived+0x36>
    63fe:	34 85       	ldd	r19, Z+12	; 0x0c
    6400:	29 81       	ldd	r18, Y+1	; 0x01
    6402:	32 13       	cpse	r19, r18
    6404:	08 c0       	rjmp	.+16     	; 0x6416 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    6406:	27 e1       	ldi	r18, 0x17	; 23
    6408:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    640a:	2a 81       	ldd	r18, Y+2	; 0x02
    640c:	ea 57       	subi	r30, 0x7A	; 122
    640e:	ff 4f       	sbci	r31, 0xFF	; 255
    6410:	20 83       	st	Z, r18
      return true;
    6412:	81 e0       	ldi	r24, 0x01	; 1
    6414:	06 c0       	rjmp	.+12     	; 0x6422 <nwkTxAckReceived+0x42>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    6416:	43 da       	rcall	.-2938   	; 0x589e <nwkFrameNext>
    6418:	00 97       	sbiw	r24, 0x00	; 0
    641a:	69 f7       	brne	.-38     	; 0x63f6 <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    641c:	80 e0       	ldi	r24, 0x00	; 0
    641e:	01 c0       	rjmp	.+2      	; 0x6422 <nwkTxAckReceived+0x42>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    6420:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    6422:	df 91       	pop	r29
    6424:	cf 91       	pop	r28
    6426:	08 95       	ret

00006428 <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    6428:	27 e1       	ldi	r18, 0x17	; 23
    642a:	fc 01       	movw	r30, r24
    642c:	20 83       	st	Z, r18
  frame->tx.status = status;
    642e:	ed 57       	subi	r30, 0x7D	; 125
    6430:	ff 4f       	sbci	r31, 0xFF	; 255
    6432:	60 83       	st	Z, r22
    6434:	08 95       	ret

00006436 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    6436:	ef 92       	push	r14
    6438:	ff 92       	push	r15
    643a:	1f 93       	push	r17
    643c:	cf 93       	push	r28
    643e:	df 93       	push	r29
    6440:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    6442:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    6444:	c0 e0       	ldi	r28, 0x00	; 0
    6446:	d0 e0       	ldi	r29, 0x00	; 0
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    6448:	13 c0       	rjmp	.+38     	; 0x6470 <nwkTxAckWaitTimerHandler+0x3a>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    644a:	88 81       	ld	r24, Y
    644c:	86 31       	cpi	r24, 0x16	; 22
    644e:	81 f4       	brne	.+32     	; 0x6470 <nwkTxAckWaitTimerHandler+0x3a>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    6450:	fe 01       	movw	r30, r28
    6452:	ec 57       	subi	r30, 0x7C	; 124
    6454:	ff 4f       	sbci	r31, 0xFF	; 255
    6456:	80 81       	ld	r24, Z
    6458:	91 81       	ldd	r25, Z+1	; 0x01
    645a:	01 97       	sbiw	r24, 0x01	; 1
    645c:	91 83       	std	Z+1, r25	; 0x01
    645e:	80 83       	st	Z, r24
    6460:	89 2b       	or	r24, r25
    6462:	29 f4       	brne	.+10     	; 0x646e <nwkTxAckWaitTimerHandler+0x38>
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    6464:	60 e1       	ldi	r22, 0x10	; 16
    6466:	ce 01       	movw	r24, r28
    6468:	df df       	rcall	.-66     	; 0x6428 <nwkTxConfirm>

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    646a:	11 e0       	ldi	r17, 0x01	; 1
    646c:	01 c0       	rjmp	.+2      	; 0x6470 <nwkTxAckWaitTimerHandler+0x3a>
    646e:	11 e0       	ldi	r17, 0x01	; 1
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    6470:	ce 01       	movw	r24, r28
    6472:	15 da       	rcall	.-3030   	; 0x589e <nwkFrameNext>
    6474:	ec 01       	movw	r28, r24
    6476:	89 2b       	or	r24, r25
    6478:	41 f7       	brne	.-48     	; 0x644a <nwkTxAckWaitTimerHandler+0x14>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    647a:	11 23       	and	r17, r17
    SYS_TimerStart(timer);
    647c:	11 f0       	breq	.+4      	; 0x6482 <nwkTxAckWaitTimerHandler+0x4c>
    647e:	c7 01       	movw	r24, r14
    6480:	6b d2       	rcall	.+1238   	; 0x6958 <SYS_TimerStart>
}
    6482:	df 91       	pop	r29
    6484:	cf 91       	pop	r28
    6486:	1f 91       	pop	r17
    6488:	ff 90       	pop	r15
    648a:	ef 90       	pop	r14
    648c:	08 95       	ret

0000648e <PHY_DataConf>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
    648e:	cf 93       	push	r28
    6490:	df 93       	push	r29
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    6492:	c0 91 d9 1c 	lds	r28, 0x1CD9	; 0x801cd9 <nwkTxPhyActiveFrame>
    6496:	d0 91 da 1c 	lds	r29, 0x1CDA	; 0x801cda <nwkTxPhyActiveFrame+0x1>
    649a:	b5 de       	rcall	.-662    	; 0x6206 <nwkTxConvertPhyStatus>
    649c:	fe 01       	movw	r30, r28
    649e:	ed 57       	subi	r30, 0x7D	; 125
    64a0:	ff 4f       	sbci	r31, 0xFF	; 255
    64a2:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    64a4:	85 e1       	ldi	r24, 0x15	; 21
    64a6:	88 83       	st	Y, r24
  nwkTxPhyActiveFrame = NULL;
    64a8:	10 92 da 1c 	sts	0x1CDA, r1	; 0x801cda <nwkTxPhyActiveFrame+0x1>
    64ac:	10 92 d9 1c 	sts	0x1CD9, r1	; 0x801cd9 <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    64b0:	e1 e7       	ldi	r30, 0x71	; 113
    64b2:	f5 e2       	ldi	r31, 0x25	; 37
    64b4:	86 a1       	ldd	r24, Z+38	; 0x26
    64b6:	97 a1       	ldd	r25, Z+39	; 0x27
    64b8:	01 97       	sbiw	r24, 0x01	; 1
    64ba:	97 a3       	std	Z+39, r25	; 0x27
    64bc:	86 a3       	std	Z+38, r24	; 0x26
}
    64be:	df 91       	pop	r29
    64c0:	cf 91       	pop	r28
    64c2:	08 95       	ret

000064c4 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    64c4:	cf 93       	push	r28
    64c6:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    64c8:	c0 e0       	ldi	r28, 0x00	; 0
    64ca:	d0 e0       	ldi	r29, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
    64cc:	68 c0       	rjmp	.+208    	; 0x659e <nwkTxTaskHandler+0xda>
  {
    switch (frame->state)
    64ce:	88 81       	ld	r24, Y
    64d0:	83 31       	cpi	r24, 0x13	; 19
    64d2:	d1 f0       	breq	.+52     	; 0x6508 <nwkTxTaskHandler+0x44>
    64d4:	18 f4       	brcc	.+6      	; 0x64dc <nwkTxTaskHandler+0x18>
    64d6:	82 31       	cpi	r24, 0x12	; 18
    64d8:	39 f0       	breq	.+14     	; 0x64e8 <nwkTxTaskHandler+0x24>
    64da:	61 c0       	rjmp	.+194    	; 0x659e <nwkTxTaskHandler+0xda>
    64dc:	85 31       	cpi	r24, 0x15	; 21
    64de:	69 f1       	breq	.+90     	; 0x653a <nwkTxTaskHandler+0x76>
    64e0:	87 31       	cpi	r24, 0x17	; 23
    64e2:	09 f4       	brne	.+2      	; 0x64e6 <nwkTxTaskHandler+0x22>
    64e4:	4d c0       	rjmp	.+154    	; 0x6580 <nwkTxTaskHandler+0xbc>
    64e6:	5b c0       	rjmp	.+182    	; 0x659e <nwkTxTaskHandler+0xda>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    64e8:	fe 01       	movw	r30, r28
    64ea:	ec 57       	subi	r30, 0x7C	; 124
    64ec:	ff 4f       	sbci	r31, 0xFF	; 255
    64ee:	80 81       	ld	r24, Z
    64f0:	91 81       	ldd	r25, Z+1	; 0x01
    64f2:	89 2b       	or	r24, r25
    64f4:	31 f0       	breq	.+12     	; 0x6502 <nwkTxTaskHandler+0x3e>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    64f6:	81 e1       	ldi	r24, 0x11	; 17
    64f8:	88 83       	st	Y, r24
          SYS_TimerStart(&nwkTxDelayTimer);
    64fa:	8f eb       	ldi	r24, 0xBF	; 191
    64fc:	9c e1       	ldi	r25, 0x1C	; 28
    64fe:	2c d2       	rcall	.+1112   	; 0x6958 <SYS_TimerStart>
    6500:	4e c0       	rjmp	.+156    	; 0x659e <nwkTxTaskHandler+0xda>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    6502:	83 e1       	ldi	r24, 0x13	; 19
    6504:	88 83       	st	Y, r24
    6506:	4b c0       	rjmp	.+150    	; 0x659e <nwkTxTaskHandler+0xda>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    6508:	80 91 d9 1c 	lds	r24, 0x1CD9	; 0x801cd9 <nwkTxPhyActiveFrame>
    650c:	90 91 da 1c 	lds	r25, 0x1CDA	; 0x801cda <nwkTxPhyActiveFrame+0x1>
    6510:	89 2b       	or	r24, r25
    6512:	09 f0       	breq	.+2      	; 0x6516 <nwkTxTaskHandler+0x52>
    6514:	44 c0       	rjmp	.+136    	; 0x659e <nwkTxTaskHandler+0xda>
        {
          nwkTxPhyActiveFrame = frame;
    6516:	d0 93 da 1c 	sts	0x1CDA, r29	; 0x801cda <nwkTxPhyActiveFrame+0x1>
    651a:	c0 93 d9 1c 	sts	0x1CD9, r28	; 0x801cd9 <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    651e:	84 e1       	ldi	r24, 0x14	; 20
    6520:	88 83       	st	Y, r24
          PHY_DataReq(frame->data, frame->size);
    6522:	69 81       	ldd	r22, Y+1	; 0x01
    6524:	ce 01       	movw	r24, r28
    6526:	02 96       	adiw	r24, 0x02	; 2
    6528:	c5 d0       	rcall	.+394    	; 0x66b4 <PHY_DataReq>
          nwkIb.lock++;
    652a:	e1 e7       	ldi	r30, 0x71	; 113
    652c:	f5 e2       	ldi	r31, 0x25	; 37
    652e:	86 a1       	ldd	r24, Z+38	; 0x26
    6530:	97 a1       	ldd	r25, Z+39	; 0x27
    6532:	01 96       	adiw	r24, 0x01	; 1
    6534:	97 a3       	std	Z+39, r25	; 0x27
    6536:	86 a3       	std	Z+38, r24	; 0x26
    6538:	32 c0       	rjmp	.+100    	; 0x659e <nwkTxTaskHandler+0xda>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    653a:	fe 01       	movw	r30, r28
    653c:	ed 57       	subi	r30, 0x7D	; 125
    653e:	ff 4f       	sbci	r31, 0xFF	; 255
    6540:	80 81       	ld	r24, Z
    6542:	81 11       	cpse	r24, r1
    6544:	1a c0       	rjmp	.+52     	; 0x657a <nwkTxTaskHandler+0xb6>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    6546:	2d 85       	ldd	r18, Y+13	; 0x0d
    6548:	3e 85       	ldd	r19, Y+14	; 0x0e
    654a:	80 91 71 25 	lds	r24, 0x2571	; 0x802571 <nwkIb>
    654e:	90 91 72 25 	lds	r25, 0x2572	; 0x802572 <nwkIb+0x1>
    6552:	28 17       	cp	r18, r24
    6554:	39 07       	cpc	r19, r25
    6556:	71 f4       	brne	.+28     	; 0x6574 <nwkTxTaskHandler+0xb0>
    6558:	8b 85       	ldd	r24, Y+11	; 0x0b
    655a:	80 ff       	sbrs	r24, 0
    655c:	0b c0       	rjmp	.+22     	; 0x6574 <nwkTxTaskHandler+0xb0>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    655e:	86 e1       	ldi	r24, 0x16	; 22
    6560:	88 83       	st	Y, r24
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    6562:	89 e2       	ldi	r24, 0x29	; 41
    6564:	90 e0       	ldi	r25, 0x00	; 0
    6566:	31 96       	adiw	r30, 0x01	; 1
    6568:	91 83       	std	Z+1, r25	; 0x01
    656a:	80 83       	st	Z, r24
            SYS_TimerStart(&nwkTxAckWaitTimer);
    656c:	8c ec       	ldi	r24, 0xCC	; 204
    656e:	9c e1       	ldi	r25, 0x1C	; 28
    6570:	f3 d1       	rcall	.+998    	; 0x6958 <SYS_TimerStart>
    6572:	15 c0       	rjmp	.+42     	; 0x659e <nwkTxTaskHandler+0xda>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    6574:	87 e1       	ldi	r24, 0x17	; 23
    6576:	88 83       	st	Y, r24
    6578:	12 c0       	rjmp	.+36     	; 0x659e <nwkTxTaskHandler+0xda>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    657a:	87 e1       	ldi	r24, 0x17	; 23
    657c:	88 83       	st	Y, r24
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    657e:	0f c0       	rjmp	.+30     	; 0x659e <nwkTxTaskHandler+0xda>
    6580:	ce 01       	movw	r24, r28
    6582:	f0 da       	rcall	.-2592   	; 0x5b64 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    6584:	fe 01       	movw	r30, r28
    6586:	e9 57       	subi	r30, 0x79	; 121
    6588:	ff 4f       	sbci	r31, 0xFF	; 255
    658a:	01 90       	ld	r0, Z+
    658c:	f0 81       	ld	r31, Z
    658e:	e0 2d       	mov	r30, r0
    6590:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    6592:	19 f4       	brne	.+6      	; 0x659a <nwkTxTaskHandler+0xd6>
    6594:	ce 01       	movw	r24, r28
    6596:	79 d9       	rcall	.-3342   	; 0x588a <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    6598:	02 c0       	rjmp	.+4      	; 0x659e <nwkTxTaskHandler+0xda>
    659a:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    659c:	19 95       	eicall
    659e:	ce 01       	movw	r24, r28
    65a0:	7e d9       	rcall	.-3332   	; 0x589e <nwkFrameNext>
    65a2:	ec 01       	movw	r28, r24
    65a4:	89 2b       	or	r24, r25
    65a6:	09 f0       	breq	.+2      	; 0x65aa <nwkTxTaskHandler+0xe6>
    65a8:	92 cf       	rjmp	.-220    	; 0x64ce <nwkTxTaskHandler+0xa>

      default:
        break;
    };
  }
}
    65aa:	df 91       	pop	r29
    65ac:	cf 91       	pop	r28
    65ae:	08 95       	ret

000065b0 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    65b0:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <phyBand>
    65b4:	98 2f       	mov	r25, r24
    65b6:	9f 70       	andi	r25, 0x0F	; 15
    65b8:	e4 e5       	ldi	r30, 0x54	; 84
    65ba:	f1 e0       	ldi	r31, 0x01	; 1
    65bc:	80 81       	ld	r24, Z
    65be:	80 7f       	andi	r24, 0xF0	; 240
    65c0:	89 2b       	or	r24, r25
    65c2:	80 83       	st	Z, r24
    65c4:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <phyBand>
    65c8:	88 23       	and	r24, r24
    65ca:	29 f0       	breq	.+10     	; 0x65d6 <phySetChannel+0x26>
    65cc:	80 91 dc 1c 	lds	r24, 0x1CDC	; 0x801cdc <phyChannel>
    65d0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    65d4:	08 95       	ret
    65d6:	80 91 dc 1c 	lds	r24, 0x1CDC	; 0x801cdc <phyChannel>
    65da:	98 2f       	mov	r25, r24
    65dc:	9f 71       	andi	r25, 0x1F	; 31
    65de:	e8 e4       	ldi	r30, 0x48	; 72
    65e0:	f1 e0       	ldi	r31, 0x01	; 1
    65e2:	80 81       	ld	r24, Z
    65e4:	80 7e       	andi	r24, 0xE0	; 224
    65e6:	89 2b       	or	r24, r25
    65e8:	80 83       	st	Z, r24
    65ea:	08 95       	ret

000065ec <phyTrxSetState>:
    65ec:	93 e0       	ldi	r25, 0x03	; 3
    65ee:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    65f2:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    65f6:	9f 71       	andi	r25, 0x1F	; 31
    65f8:	98 30       	cpi	r25, 0x08	; 8
    65fa:	d9 f7       	brne	.-10     	; 0x65f2 <phyTrxSetState+0x6>
    65fc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    6600:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    6604:	9f 71       	andi	r25, 0x1F	; 31
    6606:	89 13       	cpse	r24, r25
    6608:	fb cf       	rjmp	.-10     	; 0x6600 <phyTrxSetState+0x14>
    660a:	08 95       	ret

0000660c <phySetRxState>:
    660c:	88 e0       	ldi	r24, 0x08	; 8
    660e:	ee df       	rcall	.-36     	; 0x65ec <phyTrxSetState>
    6610:	8f ef       	ldi	r24, 0xFF	; 255
    6612:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    6616:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <phyRxState>
    661a:	88 23       	and	r24, r24
    661c:	11 f0       	breq	.+4      	; 0x6622 <phySetRxState+0x16>
    661e:	86 e1       	ldi	r24, 0x16	; 22
    6620:	e5 cf       	rjmp	.-54     	; 0x65ec <phyTrxSetState>
    6622:	08 95       	ret

00006624 <PHY_Init>:
    6624:	e9 e3       	ldi	r30, 0x39	; 57
    6626:	f1 e0       	ldi	r31, 0x01	; 1
    6628:	80 81       	ld	r24, Z
    662a:	81 60       	ori	r24, 0x01	; 1
    662c:	80 83       	st	Z, r24
    662e:	10 92 dd 1c 	sts	0x1CDD, r1	; 0x801cdd <phyRxState>
    6632:	10 92 db 1c 	sts	0x1CDB, r1	; 0x801cdb <phyBand>
    6636:	81 e0       	ldi	r24, 0x01	; 1
    6638:	80 93 5e 1d 	sts	0x1D5E, r24	; 0x801d5e <phyState>
    663c:	88 e0       	ldi	r24, 0x08	; 8
    663e:	d6 df       	rcall	.-84     	; 0x65ec <phyTrxSetState>
    6640:	8b ee       	ldi	r24, 0xEB	; 235
    6642:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    6646:	ec e4       	ldi	r30, 0x4C	; 76
    6648:	f1 e0       	ldi	r31, 0x01	; 1
    664a:	80 81       	ld	r24, Z
    664c:	80 68       	ori	r24, 0x80	; 128
    664e:	80 83       	st	Z, r24
    6650:	08 95       	ret

00006652 <PHY_SetRxState>:
    6652:	80 93 dd 1c 	sts	0x1CDD, r24	; 0x801cdd <phyRxState>
    6656:	da cf       	rjmp	.-76     	; 0x660c <phySetRxState>
    6658:	08 95       	ret

0000665a <PHY_SetChannel>:
    665a:	80 93 dc 1c 	sts	0x1CDC, r24	; 0x801cdc <phyChannel>
    665e:	a8 cf       	rjmp	.-176    	; 0x65b0 <phySetChannel>
    6660:	08 95       	ret

00006662 <PHY_SetPanId>:
    6662:	cf 93       	push	r28
    6664:	df 93       	push	r29
    6666:	1f 92       	push	r1
    6668:	1f 92       	push	r1
    666a:	cd b7       	in	r28, 0x3d	; 61
    666c:	de b7       	in	r29, 0x3e	; 62
    666e:	9a 83       	std	Y+2, r25	; 0x02
    6670:	89 83       	std	Y+1, r24	; 0x01
    6672:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    6676:	8a 81       	ldd	r24, Y+2	; 0x02
    6678:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    667c:	0f 90       	pop	r0
    667e:	0f 90       	pop	r0
    6680:	df 91       	pop	r29
    6682:	cf 91       	pop	r28
    6684:	08 95       	ret

00006686 <PHY_SetShortAddr>:
    6686:	cf 93       	push	r28
    6688:	df 93       	push	r29
    668a:	1f 92       	push	r1
    668c:	1f 92       	push	r1
    668e:	cd b7       	in	r28, 0x3d	; 61
    6690:	de b7       	in	r29, 0x3e	; 62
    6692:	9a 83       	std	Y+2, r25	; 0x02
    6694:	89 83       	std	Y+1, r24	; 0x01
    6696:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    669a:	8a 81       	ldd	r24, Y+2	; 0x02
    669c:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    66a0:	99 81       	ldd	r25, Y+1	; 0x01
    66a2:	8a 81       	ldd	r24, Y+2	; 0x02
    66a4:	89 0f       	add	r24, r25
    66a6:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    66aa:	0f 90       	pop	r0
    66ac:	0f 90       	pop	r0
    66ae:	df 91       	pop	r29
    66b0:	cf 91       	pop	r28
    66b2:	08 95       	ret

000066b4 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    66b4:	0f 93       	push	r16
    66b6:	1f 93       	push	r17
    66b8:	cf 93       	push	r28
    66ba:	8c 01       	movw	r16, r24
    66bc:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    66be:	89 e1       	ldi	r24, 0x19	; 25
    66c0:	95 df       	rcall	.-214    	; 0x65ec <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    66c2:	8f ef       	ldi	r24, 0xFF	; 255
    66c4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    66c8:	82 e0       	ldi	r24, 0x02	; 2
    66ca:	8c 0f       	add	r24, r28
    66cc:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    66d0:	20 e0       	ldi	r18, 0x00	; 0
    66d2:	0b c0       	rjmp	.+22     	; 0x66ea <PHY_DataReq+0x36>
    TRX_FRAME_BUFFER(i+1) = data[i];
    66d4:	82 2f       	mov	r24, r18
    66d6:	90 e0       	ldi	r25, 0x00	; 0
    66d8:	fc 01       	movw	r30, r24
    66da:	ef 57       	subi	r30, 0x7F	; 127
    66dc:	fe 4f       	sbci	r31, 0xFE	; 254
    66de:	d8 01       	movw	r26, r16
    66e0:	a8 0f       	add	r26, r24
    66e2:	b9 1f       	adc	r27, r25
    66e4:	8c 91       	ld	r24, X
    66e6:	80 83       	st	Z, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    66e8:	2f 5f       	subi	r18, 0xFF	; 255
    66ea:	2c 17       	cp	r18, r28
    66ec:	98 f3       	brcs	.-26     	; 0x66d4 <PHY_DataReq+0x20>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    66ee:	83 e0       	ldi	r24, 0x03	; 3
    66f0:	80 93 5e 1d 	sts	0x1D5E, r24	; 0x801d5e <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    66f4:	82 e0       	ldi	r24, 0x02	; 2
    66f6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    66fa:	cf 91       	pop	r28
    66fc:	1f 91       	pop	r17
    66fe:	0f 91       	pop	r16
    6700:	08 95       	ret

00006702 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    6702:	1f 93       	push	r17
    6704:	cf 93       	push	r28
    6706:	df 93       	push	r29
    6708:	00 d0       	rcall	.+0      	; 0x670a <PHY_TaskHandler+0x8>
    670a:	1f 92       	push	r1
    670c:	1f 92       	push	r1
    670e:	cd b7       	in	r28, 0x3d	; 61
    6710:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    6712:	80 91 5e 1d 	lds	r24, 0x1D5E	; 0x801d5e <phyState>
    6716:	82 30       	cpi	r24, 0x02	; 2
    6718:	09 f4       	brne	.+2      	; 0x671c <PHY_TaskHandler+0x1a>
    671a:	63 c0       	rjmp	.+198    	; 0x67e2 <PHY_TaskHandler+0xe0>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    671c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    6720:	83 ff       	sbrs	r24, 3
    6722:	3c c0       	rjmp	.+120    	; 0x679c <PHY_TaskHandler+0x9a>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    6724:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    6728:	20 e0       	ldi	r18, 0x00	; 0
    672a:	09 c0       	rjmp	.+18     	; 0x673e <PHY_TaskHandler+0x3c>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    672c:	fc 01       	movw	r30, r24
    672e:	e0 58       	subi	r30, 0x80	; 128
    6730:	fe 4f       	sbci	r31, 0xFE	; 254
    6732:	30 81       	ld	r19, Z
    6734:	fc 01       	movw	r30, r24
    6736:	e2 52       	subi	r30, 0x22	; 34
    6738:	f3 4e       	sbci	r31, 0xE3	; 227
    673a:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    673c:	2f 5f       	subi	r18, 0xFF	; 255
    673e:	82 2f       	mov	r24, r18
    6740:	90 e0       	ldi	r25, 0x00	; 0
    6742:	4a 2f       	mov	r20, r26
    6744:	50 e0       	ldi	r21, 0x00	; 0
    6746:	ba 01       	movw	r22, r20
    6748:	6f 5f       	subi	r22, 0xFF	; 255
    674a:	7f 4f       	sbci	r23, 0xFF	; 255
    674c:	86 17       	cp	r24, r22
    674e:	97 07       	cpc	r25, r23
    6750:	6c f3       	brlt	.-38     	; 0x672c <PHY_TaskHandler+0x2a>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    6752:	8e ed       	ldi	r24, 0xDE	; 222
    6754:	9c e1       	ldi	r25, 0x1C	; 28
    6756:	9a 83       	std	Y+2, r25	; 0x02
    6758:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    675a:	a2 50       	subi	r26, 0x02	; 2
    675c:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    675e:	fa 01       	movw	r30, r20
    6760:	e2 52       	subi	r30, 0x22	; 34
    6762:	f3 4e       	sbci	r31, 0xE3	; 227
    6764:	80 81       	ld	r24, Z
    6766:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    6768:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    676c:	8a 55       	subi	r24, 0x5A	; 90
    676e:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    6770:	ce 01       	movw	r24, r28
    6772:	01 96       	adiw	r24, 0x01	; 1
    6774:	f8 dc       	rcall	.-1552   	; 0x6166 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    6776:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    677a:	8f 71       	andi	r24, 0x1F	; 31
    677c:	86 31       	cpi	r24, 0x16	; 22
    677e:	d9 f7       	brne	.-10     	; 0x6776 <PHY_TaskHandler+0x74>

    IRQ_STATUS_REG_s.rxEnd = 1;
    6780:	ef e4       	ldi	r30, 0x4F	; 79
    6782:	f1 e0       	ldi	r31, 0x01	; 1
    6784:	80 81       	ld	r24, Z
    6786:	88 60       	ori	r24, 0x08	; 8
    6788:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    678a:	ec e4       	ldi	r30, 0x4C	; 76
    678c:	f1 e0       	ldi	r31, 0x01	; 1
    678e:	80 81       	ld	r24, Z
    6790:	8f 77       	andi	r24, 0x7F	; 127
    6792:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    6794:	80 81       	ld	r24, Z
    6796:	80 68       	ori	r24, 0x80	; 128
    6798:	80 83       	st	Z, r24
    679a:	23 c0       	rjmp	.+70     	; 0x67e2 <PHY_TaskHandler+0xe0>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    679c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    67a0:	86 ff       	sbrs	r24, 6
    67a2:	1f c0       	rjmp	.+62     	; 0x67e2 <PHY_TaskHandler+0xe0>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    67a4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    67a8:	8f 71       	andi	r24, 0x1F	; 31
    67aa:	89 31       	cpi	r24, 0x19	; 25
    67ac:	a9 f4       	brne	.+42     	; 0x67d8 <PHY_TaskHandler+0xd6>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    67ae:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    67b2:	12 95       	swap	r17
    67b4:	16 95       	lsr	r17
    67b6:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    67b8:	49 f0       	breq	.+18     	; 0x67cc <PHY_TaskHandler+0xca>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    67ba:	13 30       	cpi	r17, 0x03	; 3
    67bc:	21 f0       	breq	.+8      	; 0x67c6 <PHY_TaskHandler+0xc4>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    67be:	15 30       	cpi	r17, 0x05	; 5
    67c0:	21 f4       	brne	.+8      	; 0x67ca <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_NO_ACK;
    67c2:	12 e0       	ldi	r17, 0x02	; 2
    67c4:	03 c0       	rjmp	.+6      	; 0x67cc <PHY_TaskHandler+0xca>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    67c6:	11 e0       	ldi	r17, 0x01	; 1
    67c8:	01 c0       	rjmp	.+2      	; 0x67cc <PHY_TaskHandler+0xca>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    67ca:	13 e0       	ldi	r17, 0x03	; 3
    67cc:	1f df       	rcall	.-450    	; 0x660c <phySetRxState>
      phyState = PHY_STATE_IDLE;
    67ce:	81 e0       	ldi	r24, 0x01	; 1
    67d0:	80 93 5e 1d 	sts	0x1D5E, r24	; 0x801d5e <phyState>

      PHY_DataConf(status);
    67d4:	81 2f       	mov	r24, r17
    67d6:	5b de       	rcall	.-842    	; 0x648e <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    67d8:	ef e4       	ldi	r30, 0x4F	; 79
    67da:	f1 e0       	ldi	r31, 0x01	; 1
    67dc:	80 81       	ld	r24, Z
    67de:	80 64       	ori	r24, 0x40	; 64
    67e0:	80 83       	st	Z, r24
  }
}
    67e2:	0f 90       	pop	r0
    67e4:	0f 90       	pop	r0
    67e6:	0f 90       	pop	r0
    67e8:	0f 90       	pop	r0
    67ea:	0f 90       	pop	r0
    67ec:	df 91       	pop	r29
    67ee:	cf 91       	pop	r28
    67f0:	1f 91       	pop	r17
    67f2:	08 95       	ret

000067f4 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    67f4:	0e 94 3b 29 	call	0x5276	; 0x5276 <HAL_Init>
  SYS_TimerInit();
    67f8:	60 d0       	rcall	.+192    	; 0x68ba <SYS_TimerInit>
  PHY_Init();
    67fa:	14 df       	rcall	.-472    	; 0x6624 <PHY_Init>
    67fc:	0c 94 e8 2a 	jmp	0x55d0	; 0x55d0 <NWK_Init>
  NWK_Init();
    6800:	08 95       	ret

00006802 <SYS_TaskHandler>:
    6802:	7f df       	rcall	.-258    	; 0x6702 <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    6804:	0e 94 1c 2b 	call	0x5638	; 0x5638 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    6808:	b2 c0       	rjmp	.+356    	; 0x696e <SYS_TimerTaskHandler>
    680a:	08 95       	ret

0000680c <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    680c:	0f 93       	push	r16
    680e:	1f 93       	push	r17
    6810:	cf 93       	push	r28
    6812:	df 93       	push	r29
    6814:	ec 01       	movw	r28, r24
  if (timers)
    6816:	80 91 5f 1d 	lds	r24, 0x1D5F	; 0x801d5f <timers>
    681a:	90 91 60 1d 	lds	r25, 0x1D60	; 0x801d60 <timers+0x1>
    681e:	00 97       	sbiw	r24, 0x00	; 0
    6820:	c9 f1       	breq	.+114    	; 0x6894 <placeTimer+0x88>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    6822:	4e 81       	ldd	r20, Y+6	; 0x06
    6824:	5f 81       	ldd	r21, Y+7	; 0x07
    6826:	68 85       	ldd	r22, Y+8	; 0x08
    6828:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    682a:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    682c:	a0 e0       	ldi	r26, 0x00	; 0
    682e:	b0 e0       	ldi	r27, 0x00	; 0
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    6830:	1a c0       	rjmp	.+52     	; 0x6866 <placeTimer+0x5a>
    {
      if (timeout < t->timeout)
    6832:	02 81       	ldd	r16, Z+2	; 0x02
    6834:	13 81       	ldd	r17, Z+3	; 0x03
    6836:	24 81       	ldd	r18, Z+4	; 0x04
    6838:	35 81       	ldd	r19, Z+5	; 0x05
    683a:	40 17       	cp	r20, r16
    683c:	51 07       	cpc	r21, r17
    683e:	62 07       	cpc	r22, r18
    6840:	73 07       	cpc	r23, r19
    6842:	48 f4       	brcc	.+18     	; 0x6856 <placeTimer+0x4a>
      {
         t->timeout -= timeout;
    6844:	04 1b       	sub	r16, r20
    6846:	15 0b       	sbc	r17, r21
    6848:	26 0b       	sbc	r18, r22
    684a:	37 0b       	sbc	r19, r23
    684c:	02 83       	std	Z+2, r16	; 0x02
    684e:	13 83       	std	Z+3, r17	; 0x03
    6850:	24 83       	std	Z+4, r18	; 0x04
    6852:	35 83       	std	Z+5, r19	; 0x05
         break;
    6854:	0a c0       	rjmp	.+20     	; 0x686a <placeTimer+0x5e>
      }
      else
        timeout -= t->timeout;
    6856:	40 1b       	sub	r20, r16
    6858:	51 0b       	sbc	r21, r17
    685a:	62 0b       	sbc	r22, r18
    685c:	73 0b       	sbc	r23, r19

      prev = t;
    685e:	df 01       	movw	r26, r30
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    6860:	01 90       	ld	r0, Z+
    6862:	f0 81       	ld	r31, Z
    6864:	e0 2d       	mov	r30, r0
    6866:	30 97       	sbiw	r30, 0x00	; 0
    6868:	21 f7       	brne	.-56     	; 0x6832 <placeTimer+0x26>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    686a:	4a 83       	std	Y+2, r20	; 0x02
    686c:	5b 83       	std	Y+3, r21	; 0x03
    686e:	6c 83       	std	Y+4, r22	; 0x04
    6870:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    6872:	10 97       	sbiw	r26, 0x00	; 0
    6874:	41 f0       	breq	.+16     	; 0x6886 <placeTimer+0x7a>
    {
      timer->next = prev->next;
    6876:	8d 91       	ld	r24, X+
    6878:	9c 91       	ld	r25, X
    687a:	11 97       	sbiw	r26, 0x01	; 1
    687c:	99 83       	std	Y+1, r25	; 0x01
    687e:	88 83       	st	Y, r24
      prev->next = timer;
    6880:	cd 93       	st	X+, r28
    6882:	dc 93       	st	X, r29
    6884:	15 c0       	rjmp	.+42     	; 0x68b0 <placeTimer+0xa4>
    }
    else
    {
      timer->next = timers;
    6886:	99 83       	std	Y+1, r25	; 0x01
    6888:	88 83       	st	Y, r24
      timers = timer;
    688a:	d0 93 60 1d 	sts	0x1D60, r29	; 0x801d60 <timers+0x1>
    688e:	c0 93 5f 1d 	sts	0x1D5F, r28	; 0x801d5f <timers>
    6892:	0e c0       	rjmp	.+28     	; 0x68b0 <placeTimer+0xa4>
    }
  }
  else
  {
    timer->next = NULL;
    6894:	19 82       	std	Y+1, r1	; 0x01
    6896:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    6898:	8e 81       	ldd	r24, Y+6	; 0x06
    689a:	9f 81       	ldd	r25, Y+7	; 0x07
    689c:	a8 85       	ldd	r26, Y+8	; 0x08
    689e:	b9 85       	ldd	r27, Y+9	; 0x09
    68a0:	8a 83       	std	Y+2, r24	; 0x02
    68a2:	9b 83       	std	Y+3, r25	; 0x03
    68a4:	ac 83       	std	Y+4, r26	; 0x04
    68a6:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    68a8:	d0 93 60 1d 	sts	0x1D60, r29	; 0x801d60 <timers+0x1>
    68ac:	c0 93 5f 1d 	sts	0x1D5F, r28	; 0x801d5f <timers>
  }
}
    68b0:	df 91       	pop	r29
    68b2:	cf 91       	pop	r28
    68b4:	1f 91       	pop	r17
    68b6:	0f 91       	pop	r16
    68b8:	08 95       	ret

000068ba <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    68ba:	10 92 60 1d 	sts	0x1D60, r1	; 0x801d60 <timers+0x1>
    68be:	10 92 5f 1d 	sts	0x1D5F, r1	; 0x801d5f <timers>
    68c2:	08 95       	ret

000068c4 <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    68c4:	cf 93       	push	r28
    68c6:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    68c8:	e0 91 5f 1d 	lds	r30, 0x1D5F	; 0x801d5f <timers>
    68cc:	f0 91 60 1d 	lds	r31, 0x1D60	; 0x801d60 <timers+0x1>

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;
    68d0:	a0 e0       	ldi	r26, 0x00	; 0
    68d2:	b0 e0       	ldi	r27, 0x00	; 0

  for (SYS_Timer_t *t = timers; t; t = t->next)
    68d4:	2b c0       	rjmp	.+86     	; 0x692c <SYS_TimerStop+0x68>
  {
    if (t == timer)
    68d6:	e8 17       	cp	r30, r24
    68d8:	f9 07       	cpc	r31, r25
    68da:	21 f5       	brne	.+72     	; 0x6924 <SYS_TimerStop+0x60>
    {
      if (prev)
    68dc:	10 97       	sbiw	r26, 0x00	; 0
    68de:	29 f0       	breq	.+10     	; 0x68ea <SYS_TimerStop+0x26>
        prev->next = t->next;
    68e0:	20 81       	ld	r18, Z
    68e2:	31 81       	ldd	r19, Z+1	; 0x01
    68e4:	2d 93       	st	X+, r18
    68e6:	3c 93       	st	X, r19
    68e8:	06 c0       	rjmp	.+12     	; 0x68f6 <SYS_TimerStop+0x32>
      else
        timers = t->next;
    68ea:	20 81       	ld	r18, Z
    68ec:	31 81       	ldd	r19, Z+1	; 0x01
    68ee:	30 93 60 1d 	sts	0x1D60, r19	; 0x801d60 <timers+0x1>
    68f2:	20 93 5f 1d 	sts	0x1D5F, r18	; 0x801d5f <timers>

      if (t->next)
    68f6:	01 90       	ld	r0, Z+
    68f8:	f0 81       	ld	r31, Z
    68fa:	e0 2d       	mov	r30, r0
    68fc:	30 97       	sbiw	r30, 0x00	; 0
    68fe:	c1 f0       	breq	.+48     	; 0x6930 <SYS_TimerStop+0x6c>
        t->next->timeout += timer->timeout;
    6900:	ec 01       	movw	r28, r24
    6902:	8a 81       	ldd	r24, Y+2	; 0x02
    6904:	9b 81       	ldd	r25, Y+3	; 0x03
    6906:	ac 81       	ldd	r26, Y+4	; 0x04
    6908:	bd 81       	ldd	r27, Y+5	; 0x05
    690a:	42 81       	ldd	r20, Z+2	; 0x02
    690c:	53 81       	ldd	r21, Z+3	; 0x03
    690e:	64 81       	ldd	r22, Z+4	; 0x04
    6910:	75 81       	ldd	r23, Z+5	; 0x05
    6912:	84 0f       	add	r24, r20
    6914:	95 1f       	adc	r25, r21
    6916:	a6 1f       	adc	r26, r22
    6918:	b7 1f       	adc	r27, r23
    691a:	82 83       	std	Z+2, r24	; 0x02
    691c:	93 83       	std	Z+3, r25	; 0x03
    691e:	a4 83       	std	Z+4, r26	; 0x04
    6920:	b5 83       	std	Z+5, r27	; 0x05
    6922:	06 c0       	rjmp	.+12     	; 0x6930 <SYS_TimerStop+0x6c>

      break;
    }
    prev = t;
    6924:	df 01       	movw	r26, r30
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    6926:	01 90       	ld	r0, Z+
    6928:	f0 81       	ld	r31, Z
    692a:	e0 2d       	mov	r30, r0
    692c:	30 97       	sbiw	r30, 0x00	; 0
    692e:	99 f6       	brne	.-90     	; 0x68d6 <SYS_TimerStop+0x12>

      break;
    }
    prev = t;
  }
}
    6930:	df 91       	pop	r29
    6932:	cf 91       	pop	r28
    6934:	08 95       	ret

00006936 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    6936:	e0 91 5f 1d 	lds	r30, 0x1D5F	; 0x801d5f <timers>
    693a:	f0 91 60 1d 	lds	r31, 0x1D60	; 0x801d60 <timers+0x1>
    693e:	06 c0       	rjmp	.+12     	; 0x694c <SYS_TimerStarted+0x16>
    if (t == timer)
    6940:	e8 17       	cp	r30, r24
    6942:	f9 07       	cpc	r31, r25
    6944:	39 f0       	breq	.+14     	; 0x6954 <SYS_TimerStarted+0x1e>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    6946:	01 90       	ld	r0, Z+
    6948:	f0 81       	ld	r31, Z
    694a:	e0 2d       	mov	r30, r0
    694c:	30 97       	sbiw	r30, 0x00	; 0
    694e:	c1 f7       	brne	.-16     	; 0x6940 <SYS_TimerStarted+0xa>
    if (t == timer)
      return true;
  return false;
    6950:	80 e0       	ldi	r24, 0x00	; 0
    6952:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    6954:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    6956:	08 95       	ret

00006958 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    6958:	cf 93       	push	r28
    695a:	df 93       	push	r29
    695c:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    695e:	eb df       	rcall	.-42     	; 0x6936 <SYS_TimerStarted>
    6960:	81 11       	cpse	r24, r1
    6962:	02 c0       	rjmp	.+4      	; 0x6968 <SYS_TimerStart+0x10>
    placeTimer(timer);
    6964:	ce 01       	movw	r24, r28
    6966:	52 df       	rcall	.-348    	; 0x680c <placeTimer>
}
    6968:	df 91       	pop	r29
    696a:	cf 91       	pop	r28
    696c:	08 95       	ret

0000696e <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    696e:	cf 92       	push	r12
    6970:	df 92       	push	r13
    6972:	ef 92       	push	r14
    6974:	ff 92       	push	r15
    6976:	cf 93       	push	r28
    6978:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    697a:	80 91 70 25 	lds	r24, 0x2570	; 0x802570 <halTimerIrqCount>
    697e:	88 23       	and	r24, r24
    6980:	09 f4       	brne	.+2      	; 0x6984 <SYS_TimerTaskHandler+0x16>
    6982:	4d c0       	rjmp	.+154    	; 0x6a1e <SYS_TimerTaskHandler+0xb0>
    return;

  ATOMIC_SECTION_ENTER
    6984:	8f b7       	in	r24, 0x3f	; 63
    6986:	f8 94       	cli
    cnt = halTimerIrqCount;
    6988:	c0 90 70 25 	lds	r12, 0x2570	; 0x802570 <halTimerIrqCount>
    halTimerIrqCount = 0;
    698c:	10 92 70 25 	sts	0x2570, r1	; 0x802570 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    6990:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    6992:	d1 2c       	mov	r13, r1
    6994:	e1 2c       	mov	r14, r1
    6996:	f1 2c       	mov	r15, r1
    6998:	cc 0c       	add	r12, r12
    699a:	dd 1c       	adc	r13, r13
    699c:	ee 1c       	adc	r14, r14
    699e:	ff 1c       	adc	r15, r15
    69a0:	d7 01       	movw	r26, r14
    69a2:	c6 01       	movw	r24, r12
    69a4:	88 0f       	add	r24, r24
    69a6:	99 1f       	adc	r25, r25
    69a8:	aa 1f       	adc	r26, r26
    69aa:	bb 1f       	adc	r27, r27
    69ac:	88 0f       	add	r24, r24
    69ae:	99 1f       	adc	r25, r25
    69b0:	aa 1f       	adc	r26, r26
    69b2:	bb 1f       	adc	r27, r27
    69b4:	c8 0e       	add	r12, r24
    69b6:	d9 1e       	adc	r13, r25
    69b8:	ea 1e       	adc	r14, r26
    69ba:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    69bc:	13 c0       	rjmp	.+38     	; 0x69e4 <SYS_TimerTaskHandler+0x76>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    69be:	c8 1a       	sub	r12, r24
    69c0:	d9 0a       	sbc	r13, r25
    69c2:	ea 0a       	sbc	r14, r26
    69c4:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    69c6:	88 81       	ld	r24, Y
    69c8:	99 81       	ldd	r25, Y+1	; 0x01
    69ca:	90 93 60 1d 	sts	0x1D60, r25	; 0x801d60 <timers+0x1>
    69ce:	80 93 5f 1d 	sts	0x1D5F, r24	; 0x801d5f <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    69d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    69d4:	81 30       	cpi	r24, 0x01	; 1
    69d6:	11 f4       	brne	.+4      	; 0x69dc <SYS_TimerTaskHandler+0x6e>
      placeTimer(timer);
    69d8:	ce 01       	movw	r24, r28
    69da:	18 df       	rcall	.-464    	; 0x680c <placeTimer>
    timer->handler(timer);
    69dc:	eb 85       	ldd	r30, Y+11	; 0x0b
    69de:	fc 85       	ldd	r31, Y+12	; 0x0c
    69e0:	ce 01       	movw	r24, r28
    69e2:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    69e4:	c0 91 5f 1d 	lds	r28, 0x1D5F	; 0x801d5f <timers>
    69e8:	d0 91 60 1d 	lds	r29, 0x1D60	; 0x801d60 <timers+0x1>
    69ec:	20 97       	sbiw	r28, 0x00	; 0
    69ee:	49 f0       	breq	.+18     	; 0x6a02 <SYS_TimerTaskHandler+0x94>
    69f0:	8a 81       	ldd	r24, Y+2	; 0x02
    69f2:	9b 81       	ldd	r25, Y+3	; 0x03
    69f4:	ac 81       	ldd	r26, Y+4	; 0x04
    69f6:	bd 81       	ldd	r27, Y+5	; 0x05
    69f8:	c8 16       	cp	r12, r24
    69fa:	d9 06       	cpc	r13, r25
    69fc:	ea 06       	cpc	r14, r26
    69fe:	fb 06       	cpc	r15, r27
    6a00:	f0 f6       	brcc	.-68     	; 0x69be <SYS_TimerTaskHandler+0x50>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    6a02:	20 97       	sbiw	r28, 0x00	; 0
    6a04:	61 f0       	breq	.+24     	; 0x6a1e <SYS_TimerTaskHandler+0xb0>
    timers->timeout -= elapsed;
    6a06:	8a 81       	ldd	r24, Y+2	; 0x02
    6a08:	9b 81       	ldd	r25, Y+3	; 0x03
    6a0a:	ac 81       	ldd	r26, Y+4	; 0x04
    6a0c:	bd 81       	ldd	r27, Y+5	; 0x05
    6a0e:	8c 19       	sub	r24, r12
    6a10:	9d 09       	sbc	r25, r13
    6a12:	ae 09       	sbc	r26, r14
    6a14:	bf 09       	sbc	r27, r15
    6a16:	8a 83       	std	Y+2, r24	; 0x02
    6a18:	9b 83       	std	Y+3, r25	; 0x03
    6a1a:	ac 83       	std	Y+4, r26	; 0x04
    6a1c:	bd 83       	std	Y+5, r27	; 0x05
}
    6a1e:	df 91       	pop	r29
    6a20:	cf 91       	pop	r28
    6a22:	ff 90       	pop	r15
    6a24:	ef 90       	pop	r14
    6a26:	df 90       	pop	r13
    6a28:	cf 90       	pop	r12
    6a2a:	08 95       	ret

00006a2c <__udivmodsi4>:
    6a2c:	a1 e2       	ldi	r26, 0x21	; 33
    6a2e:	1a 2e       	mov	r1, r26
    6a30:	aa 1b       	sub	r26, r26
    6a32:	bb 1b       	sub	r27, r27
    6a34:	fd 01       	movw	r30, r26
    6a36:	0d c0       	rjmp	.+26     	; 0x6a52 <__udivmodsi4_ep>

00006a38 <__udivmodsi4_loop>:
    6a38:	aa 1f       	adc	r26, r26
    6a3a:	bb 1f       	adc	r27, r27
    6a3c:	ee 1f       	adc	r30, r30
    6a3e:	ff 1f       	adc	r31, r31
    6a40:	a2 17       	cp	r26, r18
    6a42:	b3 07       	cpc	r27, r19
    6a44:	e4 07       	cpc	r30, r20
    6a46:	f5 07       	cpc	r31, r21
    6a48:	20 f0       	brcs	.+8      	; 0x6a52 <__udivmodsi4_ep>
    6a4a:	a2 1b       	sub	r26, r18
    6a4c:	b3 0b       	sbc	r27, r19
    6a4e:	e4 0b       	sbc	r30, r20
    6a50:	f5 0b       	sbc	r31, r21

00006a52 <__udivmodsi4_ep>:
    6a52:	66 1f       	adc	r22, r22
    6a54:	77 1f       	adc	r23, r23
    6a56:	88 1f       	adc	r24, r24
    6a58:	99 1f       	adc	r25, r25
    6a5a:	1a 94       	dec	r1
    6a5c:	69 f7       	brne	.-38     	; 0x6a38 <__udivmodsi4_loop>
    6a5e:	60 95       	com	r22
    6a60:	70 95       	com	r23
    6a62:	80 95       	com	r24
    6a64:	90 95       	com	r25
    6a66:	9b 01       	movw	r18, r22
    6a68:	ac 01       	movw	r20, r24
    6a6a:	bd 01       	movw	r22, r26
    6a6c:	cf 01       	movw	r24, r30
    6a6e:	08 95       	ret

00006a70 <__tablejump2__>:
    6a70:	ee 0f       	add	r30, r30
    6a72:	ff 1f       	adc	r31, r31
    6a74:	88 1f       	adc	r24, r24
    6a76:	8b bf       	out	0x3b, r24	; 59
    6a78:	07 90       	elpm	r0, Z+
    6a7a:	f6 91       	elpm	r31, Z
    6a7c:	e0 2d       	mov	r30, r0
    6a7e:	19 94       	eijmp

00006a80 <__muluhisi3>:
    6a80:	09 d0       	rcall	.+18     	; 0x6a94 <__umulhisi3>
    6a82:	a5 9f       	mul	r26, r21
    6a84:	90 0d       	add	r25, r0
    6a86:	b4 9f       	mul	r27, r20
    6a88:	90 0d       	add	r25, r0
    6a8a:	a4 9f       	mul	r26, r20
    6a8c:	80 0d       	add	r24, r0
    6a8e:	91 1d       	adc	r25, r1
    6a90:	11 24       	eor	r1, r1
    6a92:	08 95       	ret

00006a94 <__umulhisi3>:
    6a94:	a2 9f       	mul	r26, r18
    6a96:	b0 01       	movw	r22, r0
    6a98:	b3 9f       	mul	r27, r19
    6a9a:	c0 01       	movw	r24, r0
    6a9c:	a3 9f       	mul	r26, r19
    6a9e:	70 0d       	add	r23, r0
    6aa0:	81 1d       	adc	r24, r1
    6aa2:	11 24       	eor	r1, r1
    6aa4:	91 1d       	adc	r25, r1
    6aa6:	b2 9f       	mul	r27, r18
    6aa8:	70 0d       	add	r23, r0
    6aaa:	81 1d       	adc	r24, r1
    6aac:	11 24       	eor	r1, r1
    6aae:	91 1d       	adc	r25, r1
    6ab0:	08 95       	ret

00006ab2 <do_rand>:
    6ab2:	8f 92       	push	r8
    6ab4:	9f 92       	push	r9
    6ab6:	af 92       	push	r10
    6ab8:	bf 92       	push	r11
    6aba:	cf 92       	push	r12
    6abc:	df 92       	push	r13
    6abe:	ef 92       	push	r14
    6ac0:	ff 92       	push	r15
    6ac2:	cf 93       	push	r28
    6ac4:	df 93       	push	r29
    6ac6:	ec 01       	movw	r28, r24
    6ac8:	68 81       	ld	r22, Y
    6aca:	79 81       	ldd	r23, Y+1	; 0x01
    6acc:	8a 81       	ldd	r24, Y+2	; 0x02
    6ace:	9b 81       	ldd	r25, Y+3	; 0x03
    6ad0:	61 15       	cp	r22, r1
    6ad2:	71 05       	cpc	r23, r1
    6ad4:	81 05       	cpc	r24, r1
    6ad6:	91 05       	cpc	r25, r1
    6ad8:	21 f4       	brne	.+8      	; 0x6ae2 <do_rand+0x30>
    6ada:	64 e2       	ldi	r22, 0x24	; 36
    6adc:	79 ed       	ldi	r23, 0xD9	; 217
    6ade:	8b e5       	ldi	r24, 0x5B	; 91
    6ae0:	97 e0       	ldi	r25, 0x07	; 7
    6ae2:	2d e1       	ldi	r18, 0x1D	; 29
    6ae4:	33 ef       	ldi	r19, 0xF3	; 243
    6ae6:	41 e0       	ldi	r20, 0x01	; 1
    6ae8:	50 e0       	ldi	r21, 0x00	; 0
    6aea:	e3 d6       	rcall	.+3526   	; 0x78b2 <__divmodsi4>
    6aec:	49 01       	movw	r8, r18
    6aee:	5a 01       	movw	r10, r20
    6af0:	9b 01       	movw	r18, r22
    6af2:	ac 01       	movw	r20, r24
    6af4:	a7 ea       	ldi	r26, 0xA7	; 167
    6af6:	b1 e4       	ldi	r27, 0x41	; 65
    6af8:	c3 df       	rcall	.-122    	; 0x6a80 <__muluhisi3>
    6afa:	6b 01       	movw	r12, r22
    6afc:	7c 01       	movw	r14, r24
    6afe:	ac ee       	ldi	r26, 0xEC	; 236
    6b00:	b4 ef       	ldi	r27, 0xF4	; 244
    6b02:	a5 01       	movw	r20, r10
    6b04:	94 01       	movw	r18, r8
    6b06:	f3 d6       	rcall	.+3558   	; 0x78ee <__mulohisi3>
    6b08:	dc 01       	movw	r26, r24
    6b0a:	cb 01       	movw	r24, r22
    6b0c:	8c 0d       	add	r24, r12
    6b0e:	9d 1d       	adc	r25, r13
    6b10:	ae 1d       	adc	r26, r14
    6b12:	bf 1d       	adc	r27, r15
    6b14:	b7 ff       	sbrs	r27, 7
    6b16:	03 c0       	rjmp	.+6      	; 0x6b1e <do_rand+0x6c>
    6b18:	01 97       	sbiw	r24, 0x01	; 1
    6b1a:	a1 09       	sbc	r26, r1
    6b1c:	b0 48       	sbci	r27, 0x80	; 128
    6b1e:	88 83       	st	Y, r24
    6b20:	99 83       	std	Y+1, r25	; 0x01
    6b22:	aa 83       	std	Y+2, r26	; 0x02
    6b24:	bb 83       	std	Y+3, r27	; 0x03
    6b26:	9f 77       	andi	r25, 0x7F	; 127
    6b28:	df 91       	pop	r29
    6b2a:	cf 91       	pop	r28
    6b2c:	ff 90       	pop	r15
    6b2e:	ef 90       	pop	r14
    6b30:	df 90       	pop	r13
    6b32:	cf 90       	pop	r12
    6b34:	bf 90       	pop	r11
    6b36:	af 90       	pop	r10
    6b38:	9f 90       	pop	r9
    6b3a:	8f 90       	pop	r8
    6b3c:	08 95       	ret

00006b3e <rand_r>:
    6b3e:	b9 cf       	rjmp	.-142    	; 0x6ab2 <do_rand>

00006b40 <rand>:
    6b40:	80 e0       	ldi	r24, 0x00	; 0
    6b42:	92 e0       	ldi	r25, 0x02	; 2
    6b44:	b6 cf       	rjmp	.-148    	; 0x6ab2 <do_rand>

00006b46 <srand>:
    6b46:	a0 e0       	ldi	r26, 0x00	; 0
    6b48:	b0 e0       	ldi	r27, 0x00	; 0
    6b4a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    6b4e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6b52:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    6b56:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    6b5a:	08 95       	ret

00006b5c <memcpy>:
    6b5c:	fb 01       	movw	r30, r22
    6b5e:	dc 01       	movw	r26, r24
    6b60:	02 c0       	rjmp	.+4      	; 0x6b66 <memcpy+0xa>
    6b62:	01 90       	ld	r0, Z+
    6b64:	0d 92       	st	X+, r0
    6b66:	41 50       	subi	r20, 0x01	; 1
    6b68:	50 40       	sbci	r21, 0x00	; 0
    6b6a:	d8 f7       	brcc	.-10     	; 0x6b62 <memcpy+0x6>
    6b6c:	08 95       	ret

00006b6e <strchr>:
    6b6e:	fc 01       	movw	r30, r24
    6b70:	81 91       	ld	r24, Z+
    6b72:	86 17       	cp	r24, r22
    6b74:	21 f0       	breq	.+8      	; 0x6b7e <strchr+0x10>
    6b76:	88 23       	and	r24, r24
    6b78:	d9 f7       	brne	.-10     	; 0x6b70 <strchr+0x2>
    6b7a:	99 27       	eor	r25, r25
    6b7c:	08 95       	ret
    6b7e:	31 97       	sbiw	r30, 0x01	; 1
    6b80:	cf 01       	movw	r24, r30
    6b82:	08 95       	ret

00006b84 <strcpy>:
    6b84:	fb 01       	movw	r30, r22
    6b86:	dc 01       	movw	r26, r24
    6b88:	01 90       	ld	r0, Z+
    6b8a:	0d 92       	st	X+, r0
    6b8c:	00 20       	and	r0, r0
    6b8e:	e1 f7       	brne	.-8      	; 0x6b88 <strcpy+0x4>
    6b90:	08 95       	ret

00006b92 <strncmp>:
    6b92:	fb 01       	movw	r30, r22
    6b94:	dc 01       	movw	r26, r24
    6b96:	41 50       	subi	r20, 0x01	; 1
    6b98:	50 40       	sbci	r21, 0x00	; 0
    6b9a:	30 f0       	brcs	.+12     	; 0x6ba8 <strncmp+0x16>
    6b9c:	8d 91       	ld	r24, X+
    6b9e:	01 90       	ld	r0, Z+
    6ba0:	80 19       	sub	r24, r0
    6ba2:	19 f4       	brne	.+6      	; 0x6baa <strncmp+0x18>
    6ba4:	00 20       	and	r0, r0
    6ba6:	b9 f7       	brne	.-18     	; 0x6b96 <strncmp+0x4>
    6ba8:	88 1b       	sub	r24, r24
    6baa:	99 0b       	sbc	r25, r25
    6bac:	08 95       	ret

00006bae <strncpy>:
    6bae:	fb 01       	movw	r30, r22
    6bb0:	dc 01       	movw	r26, r24
    6bb2:	41 50       	subi	r20, 0x01	; 1
    6bb4:	50 40       	sbci	r21, 0x00	; 0
    6bb6:	48 f0       	brcs	.+18     	; 0x6bca <strncpy+0x1c>
    6bb8:	01 90       	ld	r0, Z+
    6bba:	0d 92       	st	X+, r0
    6bbc:	00 20       	and	r0, r0
    6bbe:	c9 f7       	brne	.-14     	; 0x6bb2 <strncpy+0x4>
    6bc0:	01 c0       	rjmp	.+2      	; 0x6bc4 <strncpy+0x16>
    6bc2:	1d 92       	st	X+, r1
    6bc4:	41 50       	subi	r20, 0x01	; 1
    6bc6:	50 40       	sbci	r21, 0x00	; 0
    6bc8:	e0 f7       	brcc	.-8      	; 0x6bc2 <strncpy+0x14>
    6bca:	08 95       	ret

00006bcc <strstr>:
    6bcc:	fb 01       	movw	r30, r22
    6bce:	51 91       	ld	r21, Z+
    6bd0:	55 23       	and	r21, r21
    6bd2:	a9 f0       	breq	.+42     	; 0x6bfe <strstr+0x32>
    6bd4:	bf 01       	movw	r22, r30
    6bd6:	dc 01       	movw	r26, r24
    6bd8:	4d 91       	ld	r20, X+
    6bda:	45 17       	cp	r20, r21
    6bdc:	41 11       	cpse	r20, r1
    6bde:	e1 f7       	brne	.-8      	; 0x6bd8 <strstr+0xc>
    6be0:	59 f4       	brne	.+22     	; 0x6bf8 <strstr+0x2c>
    6be2:	cd 01       	movw	r24, r26
    6be4:	01 90       	ld	r0, Z+
    6be6:	00 20       	and	r0, r0
    6be8:	49 f0       	breq	.+18     	; 0x6bfc <strstr+0x30>
    6bea:	4d 91       	ld	r20, X+
    6bec:	40 15       	cp	r20, r0
    6bee:	41 11       	cpse	r20, r1
    6bf0:	c9 f3       	breq	.-14     	; 0x6be4 <strstr+0x18>
    6bf2:	fb 01       	movw	r30, r22
    6bf4:	41 11       	cpse	r20, r1
    6bf6:	ef cf       	rjmp	.-34     	; 0x6bd6 <strstr+0xa>
    6bf8:	81 e0       	ldi	r24, 0x01	; 1
    6bfa:	90 e0       	ldi	r25, 0x00	; 0
    6bfc:	01 97       	sbiw	r24, 0x01	; 1
    6bfe:	08 95       	ret

00006c00 <printf_P>:
    6c00:	0f 93       	push	r16
    6c02:	1f 93       	push	r17
    6c04:	cf 93       	push	r28
    6c06:	df 93       	push	r29
    6c08:	cd b7       	in	r28, 0x3d	; 61
    6c0a:	de b7       	in	r29, 0x3e	; 62
    6c0c:	ae 01       	movw	r20, r28
    6c0e:	48 5f       	subi	r20, 0xF8	; 248
    6c10:	5f 4f       	sbci	r21, 0xFF	; 255
    6c12:	da 01       	movw	r26, r20
    6c14:	6d 91       	ld	r22, X+
    6c16:	7d 91       	ld	r23, X+
    6c18:	ad 01       	movw	r20, r26
    6c1a:	0d e9       	ldi	r16, 0x9D	; 157
    6c1c:	15 e2       	ldi	r17, 0x25	; 37
    6c1e:	f8 01       	movw	r30, r16
    6c20:	82 81       	ldd	r24, Z+2	; 0x02
    6c22:	93 81       	ldd	r25, Z+3	; 0x03
    6c24:	dc 01       	movw	r26, r24
    6c26:	13 96       	adiw	r26, 0x03	; 3
    6c28:	2c 91       	ld	r18, X
    6c2a:	13 97       	sbiw	r26, 0x03	; 3
    6c2c:	28 60       	ori	r18, 0x08	; 8
    6c2e:	13 96       	adiw	r26, 0x03	; 3
    6c30:	2c 93       	st	X, r18
    6c32:	5c d0       	rcall	.+184    	; 0x6cec <vfprintf>
    6c34:	d8 01       	movw	r26, r16
    6c36:	12 96       	adiw	r26, 0x02	; 2
    6c38:	ed 91       	ld	r30, X+
    6c3a:	fc 91       	ld	r31, X
    6c3c:	13 97       	sbiw	r26, 0x03	; 3
    6c3e:	23 81       	ldd	r18, Z+3	; 0x03
    6c40:	27 7f       	andi	r18, 0xF7	; 247
    6c42:	23 83       	std	Z+3, r18	; 0x03
    6c44:	df 91       	pop	r29
    6c46:	cf 91       	pop	r28
    6c48:	1f 91       	pop	r17
    6c4a:	0f 91       	pop	r16
    6c4c:	08 95       	ret

00006c4e <sprintf_P>:
    6c4e:	0f 93       	push	r16
    6c50:	1f 93       	push	r17
    6c52:	cf 93       	push	r28
    6c54:	df 93       	push	r29
    6c56:	cd b7       	in	r28, 0x3d	; 61
    6c58:	de b7       	in	r29, 0x3e	; 62
    6c5a:	2e 97       	sbiw	r28, 0x0e	; 14
    6c5c:	0f b6       	in	r0, 0x3f	; 63
    6c5e:	f8 94       	cli
    6c60:	de bf       	out	0x3e, r29	; 62
    6c62:	0f be       	out	0x3f, r0	; 63
    6c64:	cd bf       	out	0x3d, r28	; 61
    6c66:	0e 89       	ldd	r16, Y+22	; 0x16
    6c68:	1f 89       	ldd	r17, Y+23	; 0x17
    6c6a:	8e e0       	ldi	r24, 0x0E	; 14
    6c6c:	8c 83       	std	Y+4, r24	; 0x04
    6c6e:	1a 83       	std	Y+2, r17	; 0x02
    6c70:	09 83       	std	Y+1, r16	; 0x01
    6c72:	8f ef       	ldi	r24, 0xFF	; 255
    6c74:	9f e7       	ldi	r25, 0x7F	; 127
    6c76:	9e 83       	std	Y+6, r25	; 0x06
    6c78:	8d 83       	std	Y+5, r24	; 0x05
    6c7a:	ae 01       	movw	r20, r28
    6c7c:	46 5e       	subi	r20, 0xE6	; 230
    6c7e:	5f 4f       	sbci	r21, 0xFF	; 255
    6c80:	68 8d       	ldd	r22, Y+24	; 0x18
    6c82:	79 8d       	ldd	r23, Y+25	; 0x19
    6c84:	ce 01       	movw	r24, r28
    6c86:	01 96       	adiw	r24, 0x01	; 1
    6c88:	31 d0       	rcall	.+98     	; 0x6cec <vfprintf>
    6c8a:	ef 81       	ldd	r30, Y+7	; 0x07
    6c8c:	f8 85       	ldd	r31, Y+8	; 0x08
    6c8e:	e0 0f       	add	r30, r16
    6c90:	f1 1f       	adc	r31, r17
    6c92:	10 82       	st	Z, r1
    6c94:	2e 96       	adiw	r28, 0x0e	; 14
    6c96:	0f b6       	in	r0, 0x3f	; 63
    6c98:	f8 94       	cli
    6c9a:	de bf       	out	0x3e, r29	; 62
    6c9c:	0f be       	out	0x3f, r0	; 63
    6c9e:	cd bf       	out	0x3d, r28	; 61
    6ca0:	df 91       	pop	r29
    6ca2:	cf 91       	pop	r28
    6ca4:	1f 91       	pop	r17
    6ca6:	0f 91       	pop	r16
    6ca8:	08 95       	ret

00006caa <sscanf>:
    6caa:	cf 93       	push	r28
    6cac:	df 93       	push	r29
    6cae:	cd b7       	in	r28, 0x3d	; 61
    6cb0:	de b7       	in	r29, 0x3e	; 62
    6cb2:	2e 97       	sbiw	r28, 0x0e	; 14
    6cb4:	0f b6       	in	r0, 0x3f	; 63
    6cb6:	f8 94       	cli
    6cb8:	de bf       	out	0x3e, r29	; 62
    6cba:	0f be       	out	0x3f, r0	; 63
    6cbc:	cd bf       	out	0x3d, r28	; 61
    6cbe:	85 e0       	ldi	r24, 0x05	; 5
    6cc0:	8c 83       	std	Y+4, r24	; 0x04
    6cc2:	8c 89       	ldd	r24, Y+20	; 0x14
    6cc4:	9d 89       	ldd	r25, Y+21	; 0x15
    6cc6:	9a 83       	std	Y+2, r25	; 0x02
    6cc8:	89 83       	std	Y+1, r24	; 0x01
    6cca:	ae 01       	movw	r20, r28
    6ccc:	48 5e       	subi	r20, 0xE8	; 232
    6cce:	5f 4f       	sbci	r21, 0xFF	; 255
    6cd0:	6e 89       	ldd	r22, Y+22	; 0x16
    6cd2:	7f 89       	ldd	r23, Y+23	; 0x17
    6cd4:	ce 01       	movw	r24, r28
    6cd6:	01 96       	adiw	r24, 0x01	; 1
    6cd8:	b8 d3       	rcall	.+1904   	; 0x744a <vfscanf>
    6cda:	2e 96       	adiw	r28, 0x0e	; 14
    6cdc:	0f b6       	in	r0, 0x3f	; 63
    6cde:	f8 94       	cli
    6ce0:	de bf       	out	0x3e, r29	; 62
    6ce2:	0f be       	out	0x3f, r0	; 63
    6ce4:	cd bf       	out	0x3d, r28	; 61
    6ce6:	df 91       	pop	r29
    6ce8:	cf 91       	pop	r28
    6cea:	08 95       	ret

00006cec <vfprintf>:
    6cec:	2f 92       	push	r2
    6cee:	3f 92       	push	r3
    6cf0:	4f 92       	push	r4
    6cf2:	5f 92       	push	r5
    6cf4:	6f 92       	push	r6
    6cf6:	7f 92       	push	r7
    6cf8:	8f 92       	push	r8
    6cfa:	9f 92       	push	r9
    6cfc:	af 92       	push	r10
    6cfe:	bf 92       	push	r11
    6d00:	cf 92       	push	r12
    6d02:	df 92       	push	r13
    6d04:	ef 92       	push	r14
    6d06:	ff 92       	push	r15
    6d08:	0f 93       	push	r16
    6d0a:	1f 93       	push	r17
    6d0c:	cf 93       	push	r28
    6d0e:	df 93       	push	r29
    6d10:	cd b7       	in	r28, 0x3d	; 61
    6d12:	de b7       	in	r29, 0x3e	; 62
    6d14:	2b 97       	sbiw	r28, 0x0b	; 11
    6d16:	0f b6       	in	r0, 0x3f	; 63
    6d18:	f8 94       	cli
    6d1a:	de bf       	out	0x3e, r29	; 62
    6d1c:	0f be       	out	0x3f, r0	; 63
    6d1e:	cd bf       	out	0x3d, r28	; 61
    6d20:	6c 01       	movw	r12, r24
    6d22:	7b 01       	movw	r14, r22
    6d24:	8a 01       	movw	r16, r20
    6d26:	fc 01       	movw	r30, r24
    6d28:	17 82       	std	Z+7, r1	; 0x07
    6d2a:	16 82       	std	Z+6, r1	; 0x06
    6d2c:	83 81       	ldd	r24, Z+3	; 0x03
    6d2e:	81 ff       	sbrs	r24, 1
    6d30:	bf c1       	rjmp	.+894    	; 0x70b0 <vfprintf+0x3c4>
    6d32:	ce 01       	movw	r24, r28
    6d34:	01 96       	adiw	r24, 0x01	; 1
    6d36:	3c 01       	movw	r6, r24
    6d38:	f6 01       	movw	r30, r12
    6d3a:	93 81       	ldd	r25, Z+3	; 0x03
    6d3c:	f7 01       	movw	r30, r14
    6d3e:	93 fd       	sbrc	r25, 3
    6d40:	85 91       	lpm	r24, Z+
    6d42:	93 ff       	sbrs	r25, 3
    6d44:	81 91       	ld	r24, Z+
    6d46:	7f 01       	movw	r14, r30
    6d48:	88 23       	and	r24, r24
    6d4a:	09 f4       	brne	.+2      	; 0x6d4e <vfprintf+0x62>
    6d4c:	ad c1       	rjmp	.+858    	; 0x70a8 <vfprintf+0x3bc>
    6d4e:	85 32       	cpi	r24, 0x25	; 37
    6d50:	39 f4       	brne	.+14     	; 0x6d60 <vfprintf+0x74>
    6d52:	93 fd       	sbrc	r25, 3
    6d54:	85 91       	lpm	r24, Z+
    6d56:	93 ff       	sbrs	r25, 3
    6d58:	81 91       	ld	r24, Z+
    6d5a:	7f 01       	movw	r14, r30
    6d5c:	85 32       	cpi	r24, 0x25	; 37
    6d5e:	21 f4       	brne	.+8      	; 0x6d68 <vfprintf+0x7c>
    6d60:	b6 01       	movw	r22, r12
    6d62:	90 e0       	ldi	r25, 0x00	; 0
    6d64:	f0 d4       	rcall	.+2528   	; 0x7746 <fputc>
    6d66:	e8 cf       	rjmp	.-48     	; 0x6d38 <vfprintf+0x4c>
    6d68:	91 2c       	mov	r9, r1
    6d6a:	21 2c       	mov	r2, r1
    6d6c:	31 2c       	mov	r3, r1
    6d6e:	ff e1       	ldi	r31, 0x1F	; 31
    6d70:	f3 15       	cp	r31, r3
    6d72:	d8 f0       	brcs	.+54     	; 0x6daa <vfprintf+0xbe>
    6d74:	8b 32       	cpi	r24, 0x2B	; 43
    6d76:	79 f0       	breq	.+30     	; 0x6d96 <vfprintf+0xaa>
    6d78:	38 f4       	brcc	.+14     	; 0x6d88 <vfprintf+0x9c>
    6d7a:	80 32       	cpi	r24, 0x20	; 32
    6d7c:	79 f0       	breq	.+30     	; 0x6d9c <vfprintf+0xb0>
    6d7e:	83 32       	cpi	r24, 0x23	; 35
    6d80:	a1 f4       	brne	.+40     	; 0x6daa <vfprintf+0xbe>
    6d82:	23 2d       	mov	r18, r3
    6d84:	20 61       	ori	r18, 0x10	; 16
    6d86:	1d c0       	rjmp	.+58     	; 0x6dc2 <vfprintf+0xd6>
    6d88:	8d 32       	cpi	r24, 0x2D	; 45
    6d8a:	61 f0       	breq	.+24     	; 0x6da4 <vfprintf+0xb8>
    6d8c:	80 33       	cpi	r24, 0x30	; 48
    6d8e:	69 f4       	brne	.+26     	; 0x6daa <vfprintf+0xbe>
    6d90:	23 2d       	mov	r18, r3
    6d92:	21 60       	ori	r18, 0x01	; 1
    6d94:	16 c0       	rjmp	.+44     	; 0x6dc2 <vfprintf+0xd6>
    6d96:	83 2d       	mov	r24, r3
    6d98:	82 60       	ori	r24, 0x02	; 2
    6d9a:	38 2e       	mov	r3, r24
    6d9c:	e3 2d       	mov	r30, r3
    6d9e:	e4 60       	ori	r30, 0x04	; 4
    6da0:	3e 2e       	mov	r3, r30
    6da2:	2a c0       	rjmp	.+84     	; 0x6df8 <vfprintf+0x10c>
    6da4:	f3 2d       	mov	r31, r3
    6da6:	f8 60       	ori	r31, 0x08	; 8
    6da8:	1d c0       	rjmp	.+58     	; 0x6de4 <vfprintf+0xf8>
    6daa:	37 fc       	sbrc	r3, 7
    6dac:	2d c0       	rjmp	.+90     	; 0x6e08 <vfprintf+0x11c>
    6dae:	20 ed       	ldi	r18, 0xD0	; 208
    6db0:	28 0f       	add	r18, r24
    6db2:	2a 30       	cpi	r18, 0x0A	; 10
    6db4:	40 f0       	brcs	.+16     	; 0x6dc6 <vfprintf+0xda>
    6db6:	8e 32       	cpi	r24, 0x2E	; 46
    6db8:	b9 f4       	brne	.+46     	; 0x6de8 <vfprintf+0xfc>
    6dba:	36 fc       	sbrc	r3, 6
    6dbc:	75 c1       	rjmp	.+746    	; 0x70a8 <vfprintf+0x3bc>
    6dbe:	23 2d       	mov	r18, r3
    6dc0:	20 64       	ori	r18, 0x40	; 64
    6dc2:	32 2e       	mov	r3, r18
    6dc4:	19 c0       	rjmp	.+50     	; 0x6df8 <vfprintf+0x10c>
    6dc6:	36 fe       	sbrs	r3, 6
    6dc8:	06 c0       	rjmp	.+12     	; 0x6dd6 <vfprintf+0xea>
    6dca:	8a e0       	ldi	r24, 0x0A	; 10
    6dcc:	98 9e       	mul	r9, r24
    6dce:	20 0d       	add	r18, r0
    6dd0:	11 24       	eor	r1, r1
    6dd2:	92 2e       	mov	r9, r18
    6dd4:	11 c0       	rjmp	.+34     	; 0x6df8 <vfprintf+0x10c>
    6dd6:	ea e0       	ldi	r30, 0x0A	; 10
    6dd8:	2e 9e       	mul	r2, r30
    6dda:	20 0d       	add	r18, r0
    6ddc:	11 24       	eor	r1, r1
    6dde:	22 2e       	mov	r2, r18
    6de0:	f3 2d       	mov	r31, r3
    6de2:	f0 62       	ori	r31, 0x20	; 32
    6de4:	3f 2e       	mov	r3, r31
    6de6:	08 c0       	rjmp	.+16     	; 0x6df8 <vfprintf+0x10c>
    6de8:	8c 36       	cpi	r24, 0x6C	; 108
    6dea:	21 f4       	brne	.+8      	; 0x6df4 <vfprintf+0x108>
    6dec:	83 2d       	mov	r24, r3
    6dee:	80 68       	ori	r24, 0x80	; 128
    6df0:	38 2e       	mov	r3, r24
    6df2:	02 c0       	rjmp	.+4      	; 0x6df8 <vfprintf+0x10c>
    6df4:	88 36       	cpi	r24, 0x68	; 104
    6df6:	41 f4       	brne	.+16     	; 0x6e08 <vfprintf+0x11c>
    6df8:	f7 01       	movw	r30, r14
    6dfa:	93 fd       	sbrc	r25, 3
    6dfc:	85 91       	lpm	r24, Z+
    6dfe:	93 ff       	sbrs	r25, 3
    6e00:	81 91       	ld	r24, Z+
    6e02:	7f 01       	movw	r14, r30
    6e04:	81 11       	cpse	r24, r1
    6e06:	b3 cf       	rjmp	.-154    	; 0x6d6e <vfprintf+0x82>
    6e08:	98 2f       	mov	r25, r24
    6e0a:	9f 7d       	andi	r25, 0xDF	; 223
    6e0c:	95 54       	subi	r25, 0x45	; 69
    6e0e:	93 30       	cpi	r25, 0x03	; 3
    6e10:	28 f4       	brcc	.+10     	; 0x6e1c <vfprintf+0x130>
    6e12:	0c 5f       	subi	r16, 0xFC	; 252
    6e14:	1f 4f       	sbci	r17, 0xFF	; 255
    6e16:	9f e3       	ldi	r25, 0x3F	; 63
    6e18:	99 83       	std	Y+1, r25	; 0x01
    6e1a:	0d c0       	rjmp	.+26     	; 0x6e36 <vfprintf+0x14a>
    6e1c:	83 36       	cpi	r24, 0x63	; 99
    6e1e:	31 f0       	breq	.+12     	; 0x6e2c <vfprintf+0x140>
    6e20:	83 37       	cpi	r24, 0x73	; 115
    6e22:	71 f0       	breq	.+28     	; 0x6e40 <vfprintf+0x154>
    6e24:	83 35       	cpi	r24, 0x53	; 83
    6e26:	09 f0       	breq	.+2      	; 0x6e2a <vfprintf+0x13e>
    6e28:	55 c0       	rjmp	.+170    	; 0x6ed4 <vfprintf+0x1e8>
    6e2a:	20 c0       	rjmp	.+64     	; 0x6e6c <vfprintf+0x180>
    6e2c:	f8 01       	movw	r30, r16
    6e2e:	80 81       	ld	r24, Z
    6e30:	89 83       	std	Y+1, r24	; 0x01
    6e32:	0e 5f       	subi	r16, 0xFE	; 254
    6e34:	1f 4f       	sbci	r17, 0xFF	; 255
    6e36:	88 24       	eor	r8, r8
    6e38:	83 94       	inc	r8
    6e3a:	91 2c       	mov	r9, r1
    6e3c:	53 01       	movw	r10, r6
    6e3e:	12 c0       	rjmp	.+36     	; 0x6e64 <vfprintf+0x178>
    6e40:	28 01       	movw	r4, r16
    6e42:	f2 e0       	ldi	r31, 0x02	; 2
    6e44:	4f 0e       	add	r4, r31
    6e46:	51 1c       	adc	r5, r1
    6e48:	f8 01       	movw	r30, r16
    6e4a:	a0 80       	ld	r10, Z
    6e4c:	b1 80       	ldd	r11, Z+1	; 0x01
    6e4e:	36 fe       	sbrs	r3, 6
    6e50:	03 c0       	rjmp	.+6      	; 0x6e58 <vfprintf+0x16c>
    6e52:	69 2d       	mov	r22, r9
    6e54:	70 e0       	ldi	r23, 0x00	; 0
    6e56:	02 c0       	rjmp	.+4      	; 0x6e5c <vfprintf+0x170>
    6e58:	6f ef       	ldi	r22, 0xFF	; 255
    6e5a:	7f ef       	ldi	r23, 0xFF	; 255
    6e5c:	c5 01       	movw	r24, r10
    6e5e:	2a d4       	rcall	.+2132   	; 0x76b4 <strnlen>
    6e60:	4c 01       	movw	r8, r24
    6e62:	82 01       	movw	r16, r4
    6e64:	f3 2d       	mov	r31, r3
    6e66:	ff 77       	andi	r31, 0x7F	; 127
    6e68:	3f 2e       	mov	r3, r31
    6e6a:	15 c0       	rjmp	.+42     	; 0x6e96 <vfprintf+0x1aa>
    6e6c:	28 01       	movw	r4, r16
    6e6e:	22 e0       	ldi	r18, 0x02	; 2
    6e70:	42 0e       	add	r4, r18
    6e72:	51 1c       	adc	r5, r1
    6e74:	f8 01       	movw	r30, r16
    6e76:	a0 80       	ld	r10, Z
    6e78:	b1 80       	ldd	r11, Z+1	; 0x01
    6e7a:	36 fe       	sbrs	r3, 6
    6e7c:	03 c0       	rjmp	.+6      	; 0x6e84 <vfprintf+0x198>
    6e7e:	69 2d       	mov	r22, r9
    6e80:	70 e0       	ldi	r23, 0x00	; 0
    6e82:	02 c0       	rjmp	.+4      	; 0x6e88 <vfprintf+0x19c>
    6e84:	6f ef       	ldi	r22, 0xFF	; 255
    6e86:	7f ef       	ldi	r23, 0xFF	; 255
    6e88:	c5 01       	movw	r24, r10
    6e8a:	09 d4       	rcall	.+2066   	; 0x769e <strnlen_P>
    6e8c:	4c 01       	movw	r8, r24
    6e8e:	f3 2d       	mov	r31, r3
    6e90:	f0 68       	ori	r31, 0x80	; 128
    6e92:	3f 2e       	mov	r3, r31
    6e94:	82 01       	movw	r16, r4
    6e96:	33 fc       	sbrc	r3, 3
    6e98:	19 c0       	rjmp	.+50     	; 0x6ecc <vfprintf+0x1e0>
    6e9a:	82 2d       	mov	r24, r2
    6e9c:	90 e0       	ldi	r25, 0x00	; 0
    6e9e:	88 16       	cp	r8, r24
    6ea0:	99 06       	cpc	r9, r25
    6ea2:	a0 f4       	brcc	.+40     	; 0x6ecc <vfprintf+0x1e0>
    6ea4:	b6 01       	movw	r22, r12
    6ea6:	80 e2       	ldi	r24, 0x20	; 32
    6ea8:	90 e0       	ldi	r25, 0x00	; 0
    6eaa:	4d d4       	rcall	.+2202   	; 0x7746 <fputc>
    6eac:	2a 94       	dec	r2
    6eae:	f5 cf       	rjmp	.-22     	; 0x6e9a <vfprintf+0x1ae>
    6eb0:	f5 01       	movw	r30, r10
    6eb2:	37 fc       	sbrc	r3, 7
    6eb4:	85 91       	lpm	r24, Z+
    6eb6:	37 fe       	sbrs	r3, 7
    6eb8:	81 91       	ld	r24, Z+
    6eba:	5f 01       	movw	r10, r30
    6ebc:	b6 01       	movw	r22, r12
    6ebe:	90 e0       	ldi	r25, 0x00	; 0
    6ec0:	42 d4       	rcall	.+2180   	; 0x7746 <fputc>
    6ec2:	21 10       	cpse	r2, r1
    6ec4:	2a 94       	dec	r2
    6ec6:	21 e0       	ldi	r18, 0x01	; 1
    6ec8:	82 1a       	sub	r8, r18
    6eca:	91 08       	sbc	r9, r1
    6ecc:	81 14       	cp	r8, r1
    6ece:	91 04       	cpc	r9, r1
    6ed0:	79 f7       	brne	.-34     	; 0x6eb0 <vfprintf+0x1c4>
    6ed2:	e1 c0       	rjmp	.+450    	; 0x7096 <vfprintf+0x3aa>
    6ed4:	84 36       	cpi	r24, 0x64	; 100
    6ed6:	11 f0       	breq	.+4      	; 0x6edc <vfprintf+0x1f0>
    6ed8:	89 36       	cpi	r24, 0x69	; 105
    6eda:	39 f5       	brne	.+78     	; 0x6f2a <vfprintf+0x23e>
    6edc:	f8 01       	movw	r30, r16
    6ede:	37 fe       	sbrs	r3, 7
    6ee0:	07 c0       	rjmp	.+14     	; 0x6ef0 <vfprintf+0x204>
    6ee2:	60 81       	ld	r22, Z
    6ee4:	71 81       	ldd	r23, Z+1	; 0x01
    6ee6:	82 81       	ldd	r24, Z+2	; 0x02
    6ee8:	93 81       	ldd	r25, Z+3	; 0x03
    6eea:	0c 5f       	subi	r16, 0xFC	; 252
    6eec:	1f 4f       	sbci	r17, 0xFF	; 255
    6eee:	08 c0       	rjmp	.+16     	; 0x6f00 <vfprintf+0x214>
    6ef0:	60 81       	ld	r22, Z
    6ef2:	71 81       	ldd	r23, Z+1	; 0x01
    6ef4:	07 2e       	mov	r0, r23
    6ef6:	00 0c       	add	r0, r0
    6ef8:	88 0b       	sbc	r24, r24
    6efa:	99 0b       	sbc	r25, r25
    6efc:	0e 5f       	subi	r16, 0xFE	; 254
    6efe:	1f 4f       	sbci	r17, 0xFF	; 255
    6f00:	f3 2d       	mov	r31, r3
    6f02:	ff 76       	andi	r31, 0x6F	; 111
    6f04:	3f 2e       	mov	r3, r31
    6f06:	97 ff       	sbrs	r25, 7
    6f08:	09 c0       	rjmp	.+18     	; 0x6f1c <vfprintf+0x230>
    6f0a:	90 95       	com	r25
    6f0c:	80 95       	com	r24
    6f0e:	70 95       	com	r23
    6f10:	61 95       	neg	r22
    6f12:	7f 4f       	sbci	r23, 0xFF	; 255
    6f14:	8f 4f       	sbci	r24, 0xFF	; 255
    6f16:	9f 4f       	sbci	r25, 0xFF	; 255
    6f18:	f0 68       	ori	r31, 0x80	; 128
    6f1a:	3f 2e       	mov	r3, r31
    6f1c:	2a e0       	ldi	r18, 0x0A	; 10
    6f1e:	30 e0       	ldi	r19, 0x00	; 0
    6f20:	a3 01       	movw	r20, r6
    6f22:	66 d4       	rcall	.+2252   	; 0x77f0 <__ultoa_invert>
    6f24:	88 2e       	mov	r8, r24
    6f26:	86 18       	sub	r8, r6
    6f28:	44 c0       	rjmp	.+136    	; 0x6fb2 <vfprintf+0x2c6>
    6f2a:	85 37       	cpi	r24, 0x75	; 117
    6f2c:	31 f4       	brne	.+12     	; 0x6f3a <vfprintf+0x24e>
    6f2e:	23 2d       	mov	r18, r3
    6f30:	2f 7e       	andi	r18, 0xEF	; 239
    6f32:	b2 2e       	mov	r11, r18
    6f34:	2a e0       	ldi	r18, 0x0A	; 10
    6f36:	30 e0       	ldi	r19, 0x00	; 0
    6f38:	25 c0       	rjmp	.+74     	; 0x6f84 <vfprintf+0x298>
    6f3a:	93 2d       	mov	r25, r3
    6f3c:	99 7f       	andi	r25, 0xF9	; 249
    6f3e:	b9 2e       	mov	r11, r25
    6f40:	8f 36       	cpi	r24, 0x6F	; 111
    6f42:	c1 f0       	breq	.+48     	; 0x6f74 <vfprintf+0x288>
    6f44:	18 f4       	brcc	.+6      	; 0x6f4c <vfprintf+0x260>
    6f46:	88 35       	cpi	r24, 0x58	; 88
    6f48:	79 f0       	breq	.+30     	; 0x6f68 <vfprintf+0x27c>
    6f4a:	ae c0       	rjmp	.+348    	; 0x70a8 <vfprintf+0x3bc>
    6f4c:	80 37       	cpi	r24, 0x70	; 112
    6f4e:	19 f0       	breq	.+6      	; 0x6f56 <vfprintf+0x26a>
    6f50:	88 37       	cpi	r24, 0x78	; 120
    6f52:	21 f0       	breq	.+8      	; 0x6f5c <vfprintf+0x270>
    6f54:	a9 c0       	rjmp	.+338    	; 0x70a8 <vfprintf+0x3bc>
    6f56:	e9 2f       	mov	r30, r25
    6f58:	e0 61       	ori	r30, 0x10	; 16
    6f5a:	be 2e       	mov	r11, r30
    6f5c:	b4 fe       	sbrs	r11, 4
    6f5e:	0d c0       	rjmp	.+26     	; 0x6f7a <vfprintf+0x28e>
    6f60:	fb 2d       	mov	r31, r11
    6f62:	f4 60       	ori	r31, 0x04	; 4
    6f64:	bf 2e       	mov	r11, r31
    6f66:	09 c0       	rjmp	.+18     	; 0x6f7a <vfprintf+0x28e>
    6f68:	34 fe       	sbrs	r3, 4
    6f6a:	0a c0       	rjmp	.+20     	; 0x6f80 <vfprintf+0x294>
    6f6c:	29 2f       	mov	r18, r25
    6f6e:	26 60       	ori	r18, 0x06	; 6
    6f70:	b2 2e       	mov	r11, r18
    6f72:	06 c0       	rjmp	.+12     	; 0x6f80 <vfprintf+0x294>
    6f74:	28 e0       	ldi	r18, 0x08	; 8
    6f76:	30 e0       	ldi	r19, 0x00	; 0
    6f78:	05 c0       	rjmp	.+10     	; 0x6f84 <vfprintf+0x298>
    6f7a:	20 e1       	ldi	r18, 0x10	; 16
    6f7c:	30 e0       	ldi	r19, 0x00	; 0
    6f7e:	02 c0       	rjmp	.+4      	; 0x6f84 <vfprintf+0x298>
    6f80:	20 e1       	ldi	r18, 0x10	; 16
    6f82:	32 e0       	ldi	r19, 0x02	; 2
    6f84:	f8 01       	movw	r30, r16
    6f86:	b7 fe       	sbrs	r11, 7
    6f88:	07 c0       	rjmp	.+14     	; 0x6f98 <vfprintf+0x2ac>
    6f8a:	60 81       	ld	r22, Z
    6f8c:	71 81       	ldd	r23, Z+1	; 0x01
    6f8e:	82 81       	ldd	r24, Z+2	; 0x02
    6f90:	93 81       	ldd	r25, Z+3	; 0x03
    6f92:	0c 5f       	subi	r16, 0xFC	; 252
    6f94:	1f 4f       	sbci	r17, 0xFF	; 255
    6f96:	06 c0       	rjmp	.+12     	; 0x6fa4 <vfprintf+0x2b8>
    6f98:	60 81       	ld	r22, Z
    6f9a:	71 81       	ldd	r23, Z+1	; 0x01
    6f9c:	80 e0       	ldi	r24, 0x00	; 0
    6f9e:	90 e0       	ldi	r25, 0x00	; 0
    6fa0:	0e 5f       	subi	r16, 0xFE	; 254
    6fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    6fa4:	a3 01       	movw	r20, r6
    6fa6:	24 d4       	rcall	.+2120   	; 0x77f0 <__ultoa_invert>
    6fa8:	88 2e       	mov	r8, r24
    6faa:	86 18       	sub	r8, r6
    6fac:	fb 2d       	mov	r31, r11
    6fae:	ff 77       	andi	r31, 0x7F	; 127
    6fb0:	3f 2e       	mov	r3, r31
    6fb2:	36 fe       	sbrs	r3, 6
    6fb4:	0d c0       	rjmp	.+26     	; 0x6fd0 <vfprintf+0x2e4>
    6fb6:	23 2d       	mov	r18, r3
    6fb8:	2e 7f       	andi	r18, 0xFE	; 254
    6fba:	a2 2e       	mov	r10, r18
    6fbc:	89 14       	cp	r8, r9
    6fbe:	58 f4       	brcc	.+22     	; 0x6fd6 <vfprintf+0x2ea>
    6fc0:	34 fe       	sbrs	r3, 4
    6fc2:	0b c0       	rjmp	.+22     	; 0x6fda <vfprintf+0x2ee>
    6fc4:	32 fc       	sbrc	r3, 2
    6fc6:	09 c0       	rjmp	.+18     	; 0x6fda <vfprintf+0x2ee>
    6fc8:	83 2d       	mov	r24, r3
    6fca:	8e 7e       	andi	r24, 0xEE	; 238
    6fcc:	a8 2e       	mov	r10, r24
    6fce:	05 c0       	rjmp	.+10     	; 0x6fda <vfprintf+0x2ee>
    6fd0:	b8 2c       	mov	r11, r8
    6fd2:	a3 2c       	mov	r10, r3
    6fd4:	03 c0       	rjmp	.+6      	; 0x6fdc <vfprintf+0x2f0>
    6fd6:	b8 2c       	mov	r11, r8
    6fd8:	01 c0       	rjmp	.+2      	; 0x6fdc <vfprintf+0x2f0>
    6fda:	b9 2c       	mov	r11, r9
    6fdc:	a4 fe       	sbrs	r10, 4
    6fde:	0f c0       	rjmp	.+30     	; 0x6ffe <vfprintf+0x312>
    6fe0:	fe 01       	movw	r30, r28
    6fe2:	e8 0d       	add	r30, r8
    6fe4:	f1 1d       	adc	r31, r1
    6fe6:	80 81       	ld	r24, Z
    6fe8:	80 33       	cpi	r24, 0x30	; 48
    6fea:	21 f4       	brne	.+8      	; 0x6ff4 <vfprintf+0x308>
    6fec:	9a 2d       	mov	r25, r10
    6fee:	99 7e       	andi	r25, 0xE9	; 233
    6ff0:	a9 2e       	mov	r10, r25
    6ff2:	09 c0       	rjmp	.+18     	; 0x7006 <vfprintf+0x31a>
    6ff4:	a2 fe       	sbrs	r10, 2
    6ff6:	06 c0       	rjmp	.+12     	; 0x7004 <vfprintf+0x318>
    6ff8:	b3 94       	inc	r11
    6ffa:	b3 94       	inc	r11
    6ffc:	04 c0       	rjmp	.+8      	; 0x7006 <vfprintf+0x31a>
    6ffe:	8a 2d       	mov	r24, r10
    7000:	86 78       	andi	r24, 0x86	; 134
    7002:	09 f0       	breq	.+2      	; 0x7006 <vfprintf+0x31a>
    7004:	b3 94       	inc	r11
    7006:	a3 fc       	sbrc	r10, 3
    7008:	10 c0       	rjmp	.+32     	; 0x702a <vfprintf+0x33e>
    700a:	a0 fe       	sbrs	r10, 0
    700c:	06 c0       	rjmp	.+12     	; 0x701a <vfprintf+0x32e>
    700e:	b2 14       	cp	r11, r2
    7010:	80 f4       	brcc	.+32     	; 0x7032 <vfprintf+0x346>
    7012:	28 0c       	add	r2, r8
    7014:	92 2c       	mov	r9, r2
    7016:	9b 18       	sub	r9, r11
    7018:	0d c0       	rjmp	.+26     	; 0x7034 <vfprintf+0x348>
    701a:	b2 14       	cp	r11, r2
    701c:	58 f4       	brcc	.+22     	; 0x7034 <vfprintf+0x348>
    701e:	b6 01       	movw	r22, r12
    7020:	80 e2       	ldi	r24, 0x20	; 32
    7022:	90 e0       	ldi	r25, 0x00	; 0
    7024:	90 d3       	rcall	.+1824   	; 0x7746 <fputc>
    7026:	b3 94       	inc	r11
    7028:	f8 cf       	rjmp	.-16     	; 0x701a <vfprintf+0x32e>
    702a:	b2 14       	cp	r11, r2
    702c:	18 f4       	brcc	.+6      	; 0x7034 <vfprintf+0x348>
    702e:	2b 18       	sub	r2, r11
    7030:	02 c0       	rjmp	.+4      	; 0x7036 <vfprintf+0x34a>
    7032:	98 2c       	mov	r9, r8
    7034:	21 2c       	mov	r2, r1
    7036:	a4 fe       	sbrs	r10, 4
    7038:	0f c0       	rjmp	.+30     	; 0x7058 <vfprintf+0x36c>
    703a:	b6 01       	movw	r22, r12
    703c:	80 e3       	ldi	r24, 0x30	; 48
    703e:	90 e0       	ldi	r25, 0x00	; 0
    7040:	82 d3       	rcall	.+1796   	; 0x7746 <fputc>
    7042:	a2 fe       	sbrs	r10, 2
    7044:	16 c0       	rjmp	.+44     	; 0x7072 <vfprintf+0x386>
    7046:	a1 fc       	sbrc	r10, 1
    7048:	03 c0       	rjmp	.+6      	; 0x7050 <vfprintf+0x364>
    704a:	88 e7       	ldi	r24, 0x78	; 120
    704c:	90 e0       	ldi	r25, 0x00	; 0
    704e:	02 c0       	rjmp	.+4      	; 0x7054 <vfprintf+0x368>
    7050:	88 e5       	ldi	r24, 0x58	; 88
    7052:	90 e0       	ldi	r25, 0x00	; 0
    7054:	b6 01       	movw	r22, r12
    7056:	0c c0       	rjmp	.+24     	; 0x7070 <vfprintf+0x384>
    7058:	8a 2d       	mov	r24, r10
    705a:	86 78       	andi	r24, 0x86	; 134
    705c:	51 f0       	breq	.+20     	; 0x7072 <vfprintf+0x386>
    705e:	a1 fe       	sbrs	r10, 1
    7060:	02 c0       	rjmp	.+4      	; 0x7066 <vfprintf+0x37a>
    7062:	8b e2       	ldi	r24, 0x2B	; 43
    7064:	01 c0       	rjmp	.+2      	; 0x7068 <vfprintf+0x37c>
    7066:	80 e2       	ldi	r24, 0x20	; 32
    7068:	a7 fc       	sbrc	r10, 7
    706a:	8d e2       	ldi	r24, 0x2D	; 45
    706c:	b6 01       	movw	r22, r12
    706e:	90 e0       	ldi	r25, 0x00	; 0
    7070:	6a d3       	rcall	.+1748   	; 0x7746 <fputc>
    7072:	89 14       	cp	r8, r9
    7074:	30 f4       	brcc	.+12     	; 0x7082 <vfprintf+0x396>
    7076:	b6 01       	movw	r22, r12
    7078:	80 e3       	ldi	r24, 0x30	; 48
    707a:	90 e0       	ldi	r25, 0x00	; 0
    707c:	64 d3       	rcall	.+1736   	; 0x7746 <fputc>
    707e:	9a 94       	dec	r9
    7080:	f8 cf       	rjmp	.-16     	; 0x7072 <vfprintf+0x386>
    7082:	8a 94       	dec	r8
    7084:	f3 01       	movw	r30, r6
    7086:	e8 0d       	add	r30, r8
    7088:	f1 1d       	adc	r31, r1
    708a:	80 81       	ld	r24, Z
    708c:	b6 01       	movw	r22, r12
    708e:	90 e0       	ldi	r25, 0x00	; 0
    7090:	5a d3       	rcall	.+1716   	; 0x7746 <fputc>
    7092:	81 10       	cpse	r8, r1
    7094:	f6 cf       	rjmp	.-20     	; 0x7082 <vfprintf+0x396>
    7096:	22 20       	and	r2, r2
    7098:	09 f4       	brne	.+2      	; 0x709c <vfprintf+0x3b0>
    709a:	4e ce       	rjmp	.-868    	; 0x6d38 <vfprintf+0x4c>
    709c:	b6 01       	movw	r22, r12
    709e:	80 e2       	ldi	r24, 0x20	; 32
    70a0:	90 e0       	ldi	r25, 0x00	; 0
    70a2:	51 d3       	rcall	.+1698   	; 0x7746 <fputc>
    70a4:	2a 94       	dec	r2
    70a6:	f7 cf       	rjmp	.-18     	; 0x7096 <vfprintf+0x3aa>
    70a8:	f6 01       	movw	r30, r12
    70aa:	86 81       	ldd	r24, Z+6	; 0x06
    70ac:	97 81       	ldd	r25, Z+7	; 0x07
    70ae:	02 c0       	rjmp	.+4      	; 0x70b4 <vfprintf+0x3c8>
    70b0:	8f ef       	ldi	r24, 0xFF	; 255
    70b2:	9f ef       	ldi	r25, 0xFF	; 255
    70b4:	2b 96       	adiw	r28, 0x0b	; 11
    70b6:	0f b6       	in	r0, 0x3f	; 63
    70b8:	f8 94       	cli
    70ba:	de bf       	out	0x3e, r29	; 62
    70bc:	0f be       	out	0x3f, r0	; 63
    70be:	cd bf       	out	0x3d, r28	; 61
    70c0:	df 91       	pop	r29
    70c2:	cf 91       	pop	r28
    70c4:	1f 91       	pop	r17
    70c6:	0f 91       	pop	r16
    70c8:	ff 90       	pop	r15
    70ca:	ef 90       	pop	r14
    70cc:	df 90       	pop	r13
    70ce:	cf 90       	pop	r12
    70d0:	bf 90       	pop	r11
    70d2:	af 90       	pop	r10
    70d4:	9f 90       	pop	r9
    70d6:	8f 90       	pop	r8
    70d8:	7f 90       	pop	r7
    70da:	6f 90       	pop	r6
    70dc:	5f 90       	pop	r5
    70de:	4f 90       	pop	r4
    70e0:	3f 90       	pop	r3
    70e2:	2f 90       	pop	r2
    70e4:	08 95       	ret

000070e6 <putval>:
    70e6:	20 fd       	sbrc	r18, 0
    70e8:	09 c0       	rjmp	.+18     	; 0x70fc <putval+0x16>
    70ea:	fc 01       	movw	r30, r24
    70ec:	23 fd       	sbrc	r18, 3
    70ee:	05 c0       	rjmp	.+10     	; 0x70fa <putval+0x14>
    70f0:	22 ff       	sbrs	r18, 2
    70f2:	02 c0       	rjmp	.+4      	; 0x70f8 <putval+0x12>
    70f4:	73 83       	std	Z+3, r23	; 0x03
    70f6:	62 83       	std	Z+2, r22	; 0x02
    70f8:	51 83       	std	Z+1, r21	; 0x01
    70fa:	40 83       	st	Z, r20
    70fc:	08 95       	ret

000070fe <mulacc>:
    70fe:	44 fd       	sbrc	r20, 4
    7100:	17 c0       	rjmp	.+46     	; 0x7130 <mulacc+0x32>
    7102:	46 fd       	sbrc	r20, 6
    7104:	17 c0       	rjmp	.+46     	; 0x7134 <mulacc+0x36>
    7106:	ab 01       	movw	r20, r22
    7108:	bc 01       	movw	r22, r24
    710a:	da 01       	movw	r26, r20
    710c:	fb 01       	movw	r30, r22
    710e:	aa 0f       	add	r26, r26
    7110:	bb 1f       	adc	r27, r27
    7112:	ee 1f       	adc	r30, r30
    7114:	ff 1f       	adc	r31, r31
    7116:	10 94       	com	r1
    7118:	d1 f7       	brne	.-12     	; 0x710e <mulacc+0x10>
    711a:	4a 0f       	add	r20, r26
    711c:	5b 1f       	adc	r21, r27
    711e:	6e 1f       	adc	r22, r30
    7120:	7f 1f       	adc	r23, r31
    7122:	cb 01       	movw	r24, r22
    7124:	ba 01       	movw	r22, r20
    7126:	66 0f       	add	r22, r22
    7128:	77 1f       	adc	r23, r23
    712a:	88 1f       	adc	r24, r24
    712c:	99 1f       	adc	r25, r25
    712e:	09 c0       	rjmp	.+18     	; 0x7142 <mulacc+0x44>
    7130:	33 e0       	ldi	r19, 0x03	; 3
    7132:	01 c0       	rjmp	.+2      	; 0x7136 <mulacc+0x38>
    7134:	34 e0       	ldi	r19, 0x04	; 4
    7136:	66 0f       	add	r22, r22
    7138:	77 1f       	adc	r23, r23
    713a:	88 1f       	adc	r24, r24
    713c:	99 1f       	adc	r25, r25
    713e:	31 50       	subi	r19, 0x01	; 1
    7140:	d1 f7       	brne	.-12     	; 0x7136 <mulacc+0x38>
    7142:	62 0f       	add	r22, r18
    7144:	71 1d       	adc	r23, r1
    7146:	81 1d       	adc	r24, r1
    7148:	91 1d       	adc	r25, r1
    714a:	08 95       	ret

0000714c <skip_spaces>:
    714c:	0f 93       	push	r16
    714e:	1f 93       	push	r17
    7150:	cf 93       	push	r28
    7152:	df 93       	push	r29
    7154:	8c 01       	movw	r16, r24
    7156:	c8 01       	movw	r24, r16
    7158:	b8 d2       	rcall	.+1392   	; 0x76ca <fgetc>
    715a:	ec 01       	movw	r28, r24
    715c:	97 fd       	sbrc	r25, 7
    715e:	06 c0       	rjmp	.+12     	; 0x716c <skip_spaces+0x20>
    7160:	8b d2       	rcall	.+1302   	; 0x7678 <isspace>
    7162:	89 2b       	or	r24, r25
    7164:	c1 f7       	brne	.-16     	; 0x7156 <skip_spaces+0xa>
    7166:	b8 01       	movw	r22, r16
    7168:	ce 01       	movw	r24, r28
    716a:	29 d3       	rcall	.+1618   	; 0x77be <ungetc>
    716c:	ce 01       	movw	r24, r28
    716e:	df 91       	pop	r29
    7170:	cf 91       	pop	r28
    7172:	1f 91       	pop	r17
    7174:	0f 91       	pop	r16
    7176:	08 95       	ret

00007178 <conv_int>:
    7178:	8f 92       	push	r8
    717a:	9f 92       	push	r9
    717c:	af 92       	push	r10
    717e:	bf 92       	push	r11
    7180:	ef 92       	push	r14
    7182:	ff 92       	push	r15
    7184:	0f 93       	push	r16
    7186:	1f 93       	push	r17
    7188:	cf 93       	push	r28
    718a:	df 93       	push	r29
    718c:	8c 01       	movw	r16, r24
    718e:	d6 2f       	mov	r29, r22
    7190:	7a 01       	movw	r14, r20
    7192:	b2 2e       	mov	r11, r18
    7194:	9a d2       	rcall	.+1332   	; 0x76ca <fgetc>
    7196:	9c 01       	movw	r18, r24
    7198:	33 27       	eor	r19, r19
    719a:	2b 32       	cpi	r18, 0x2B	; 43
    719c:	31 05       	cpc	r19, r1
    719e:	31 f0       	breq	.+12     	; 0x71ac <conv_int+0x34>
    71a0:	2d 32       	cpi	r18, 0x2D	; 45
    71a2:	31 05       	cpc	r19, r1
    71a4:	59 f4       	brne	.+22     	; 0x71bc <conv_int+0x44>
    71a6:	8b 2d       	mov	r24, r11
    71a8:	80 68       	ori	r24, 0x80	; 128
    71aa:	b8 2e       	mov	r11, r24
    71ac:	d1 50       	subi	r29, 0x01	; 1
    71ae:	11 f4       	brne	.+4      	; 0x71b4 <conv_int+0x3c>
    71b0:	80 e0       	ldi	r24, 0x00	; 0
    71b2:	61 c0       	rjmp	.+194    	; 0x7276 <conv_int+0xfe>
    71b4:	c8 01       	movw	r24, r16
    71b6:	89 d2       	rcall	.+1298   	; 0x76ca <fgetc>
    71b8:	97 fd       	sbrc	r25, 7
    71ba:	fa cf       	rjmp	.-12     	; 0x71b0 <conv_int+0x38>
    71bc:	cb 2d       	mov	r28, r11
    71be:	cd 7f       	andi	r28, 0xFD	; 253
    71c0:	2b 2d       	mov	r18, r11
    71c2:	20 73       	andi	r18, 0x30	; 48
    71c4:	f9 f4       	brne	.+62     	; 0x7204 <conv_int+0x8c>
    71c6:	80 33       	cpi	r24, 0x30	; 48
    71c8:	e9 f4       	brne	.+58     	; 0x7204 <conv_int+0x8c>
    71ca:	aa 24       	eor	r10, r10
    71cc:	aa 94       	dec	r10
    71ce:	ad 0e       	add	r10, r29
    71d0:	09 f4       	brne	.+2      	; 0x71d4 <conv_int+0x5c>
    71d2:	3e c0       	rjmp	.+124    	; 0x7250 <conv_int+0xd8>
    71d4:	c8 01       	movw	r24, r16
    71d6:	79 d2       	rcall	.+1266   	; 0x76ca <fgetc>
    71d8:	97 fd       	sbrc	r25, 7
    71da:	3a c0       	rjmp	.+116    	; 0x7250 <conv_int+0xd8>
    71dc:	9c 01       	movw	r18, r24
    71de:	2f 7d       	andi	r18, 0xDF	; 223
    71e0:	33 27       	eor	r19, r19
    71e2:	28 35       	cpi	r18, 0x58	; 88
    71e4:	31 05       	cpc	r19, r1
    71e6:	41 f4       	brne	.+16     	; 0x71f8 <conv_int+0x80>
    71e8:	c2 64       	ori	r28, 0x42	; 66
    71ea:	d2 50       	subi	r29, 0x02	; 2
    71ec:	89 f1       	breq	.+98     	; 0x7250 <conv_int+0xd8>
    71ee:	c8 01       	movw	r24, r16
    71f0:	6c d2       	rcall	.+1240   	; 0x76ca <fgetc>
    71f2:	97 ff       	sbrs	r25, 7
    71f4:	07 c0       	rjmp	.+14     	; 0x7204 <conv_int+0x8c>
    71f6:	2c c0       	rjmp	.+88     	; 0x7250 <conv_int+0xd8>
    71f8:	b6 fe       	sbrs	r11, 6
    71fa:	02 c0       	rjmp	.+4      	; 0x7200 <conv_int+0x88>
    71fc:	c2 60       	ori	r28, 0x02	; 2
    71fe:	01 c0       	rjmp	.+2      	; 0x7202 <conv_int+0x8a>
    7200:	c2 61       	ori	r28, 0x12	; 18
    7202:	da 2d       	mov	r29, r10
    7204:	81 2c       	mov	r8, r1
    7206:	91 2c       	mov	r9, r1
    7208:	54 01       	movw	r10, r8
    720a:	20 ed       	ldi	r18, 0xD0	; 208
    720c:	28 0f       	add	r18, r24
    720e:	28 30       	cpi	r18, 0x08	; 8
    7210:	78 f0       	brcs	.+30     	; 0x7230 <conv_int+0xb8>
    7212:	c4 ff       	sbrs	r28, 4
    7214:	03 c0       	rjmp	.+6      	; 0x721c <conv_int+0xa4>
    7216:	b8 01       	movw	r22, r16
    7218:	d2 d2       	rcall	.+1444   	; 0x77be <ungetc>
    721a:	17 c0       	rjmp	.+46     	; 0x724a <conv_int+0xd2>
    721c:	2a 30       	cpi	r18, 0x0A	; 10
    721e:	40 f0       	brcs	.+16     	; 0x7230 <conv_int+0xb8>
    7220:	c6 ff       	sbrs	r28, 6
    7222:	f9 cf       	rjmp	.-14     	; 0x7216 <conv_int+0x9e>
    7224:	2f 7d       	andi	r18, 0xDF	; 223
    7226:	3f ee       	ldi	r19, 0xEF	; 239
    7228:	32 0f       	add	r19, r18
    722a:	36 30       	cpi	r19, 0x06	; 6
    722c:	a0 f7       	brcc	.-24     	; 0x7216 <conv_int+0x9e>
    722e:	27 50       	subi	r18, 0x07	; 7
    7230:	4c 2f       	mov	r20, r28
    7232:	c5 01       	movw	r24, r10
    7234:	b4 01       	movw	r22, r8
    7236:	63 df       	rcall	.-314    	; 0x70fe <mulacc>
    7238:	4b 01       	movw	r8, r22
    723a:	5c 01       	movw	r10, r24
    723c:	c2 60       	ori	r28, 0x02	; 2
    723e:	d1 50       	subi	r29, 0x01	; 1
    7240:	51 f0       	breq	.+20     	; 0x7256 <conv_int+0xde>
    7242:	c8 01       	movw	r24, r16
    7244:	42 d2       	rcall	.+1156   	; 0x76ca <fgetc>
    7246:	97 ff       	sbrs	r25, 7
    7248:	e0 cf       	rjmp	.-64     	; 0x720a <conv_int+0x92>
    724a:	c1 fd       	sbrc	r28, 1
    724c:	04 c0       	rjmp	.+8      	; 0x7256 <conv_int+0xde>
    724e:	b0 cf       	rjmp	.-160    	; 0x71b0 <conv_int+0x38>
    7250:	81 2c       	mov	r8, r1
    7252:	91 2c       	mov	r9, r1
    7254:	54 01       	movw	r10, r8
    7256:	c7 ff       	sbrs	r28, 7
    7258:	08 c0       	rjmp	.+16     	; 0x726a <conv_int+0xf2>
    725a:	b0 94       	com	r11
    725c:	a0 94       	com	r10
    725e:	90 94       	com	r9
    7260:	80 94       	com	r8
    7262:	81 1c       	adc	r8, r1
    7264:	91 1c       	adc	r9, r1
    7266:	a1 1c       	adc	r10, r1
    7268:	b1 1c       	adc	r11, r1
    726a:	2c 2f       	mov	r18, r28
    726c:	b5 01       	movw	r22, r10
    726e:	a4 01       	movw	r20, r8
    7270:	c7 01       	movw	r24, r14
    7272:	39 df       	rcall	.-398    	; 0x70e6 <putval>
    7274:	81 e0       	ldi	r24, 0x01	; 1
    7276:	df 91       	pop	r29
    7278:	cf 91       	pop	r28
    727a:	1f 91       	pop	r17
    727c:	0f 91       	pop	r16
    727e:	ff 90       	pop	r15
    7280:	ef 90       	pop	r14
    7282:	bf 90       	pop	r11
    7284:	af 90       	pop	r10
    7286:	9f 90       	pop	r9
    7288:	8f 90       	pop	r8
    728a:	08 95       	ret

0000728c <conv_brk>:
    728c:	5f 92       	push	r5
    728e:	6f 92       	push	r6
    7290:	7f 92       	push	r7
    7292:	8f 92       	push	r8
    7294:	9f 92       	push	r9
    7296:	af 92       	push	r10
    7298:	bf 92       	push	r11
    729a:	cf 92       	push	r12
    729c:	df 92       	push	r13
    729e:	ef 92       	push	r14
    72a0:	ff 92       	push	r15
    72a2:	0f 93       	push	r16
    72a4:	1f 93       	push	r17
    72a6:	cf 93       	push	r28
    72a8:	df 93       	push	r29
    72aa:	cd b7       	in	r28, 0x3d	; 61
    72ac:	de b7       	in	r29, 0x3e	; 62
    72ae:	a0 97       	sbiw	r28, 0x20	; 32
    72b0:	0f b6       	in	r0, 0x3f	; 63
    72b2:	f8 94       	cli
    72b4:	de bf       	out	0x3e, r29	; 62
    72b6:	0f be       	out	0x3f, r0	; 63
    72b8:	cd bf       	out	0x3d, r28	; 61
    72ba:	5c 01       	movw	r10, r24
    72bc:	96 2e       	mov	r9, r22
    72be:	7a 01       	movw	r14, r20
    72c0:	f9 01       	movw	r30, r18
    72c2:	8e 01       	movw	r16, r28
    72c4:	0f 5f       	subi	r16, 0xFF	; 255
    72c6:	1f 4f       	sbci	r17, 0xFF	; 255
    72c8:	68 01       	movw	r12, r16
    72ca:	80 e2       	ldi	r24, 0x20	; 32
    72cc:	d8 01       	movw	r26, r16
    72ce:	1d 92       	st	X+, r1
    72d0:	8a 95       	dec	r24
    72d2:	e9 f7       	brne	.-6      	; 0x72ce <conv_brk+0x42>
    72d4:	d5 01       	movw	r26, r10
    72d6:	13 96       	adiw	r26, 0x03	; 3
    72d8:	8c 90       	ld	r8, X
    72da:	80 e0       	ldi	r24, 0x00	; 0
    72dc:	90 e0       	ldi	r25, 0x00	; 0
    72de:	61 2c       	mov	r6, r1
    72e0:	71 2c       	mov	r7, r1
    72e2:	30 e0       	ldi	r19, 0x00	; 0
    72e4:	61 e0       	ldi	r22, 0x01	; 1
    72e6:	70 e0       	ldi	r23, 0x00	; 0
    72e8:	83 fc       	sbrc	r8, 3
    72ea:	25 91       	lpm	r18, Z+
    72ec:	83 fe       	sbrs	r8, 3
    72ee:	21 91       	ld	r18, Z+
    72f0:	8f 01       	movw	r16, r30
    72f2:	52 2e       	mov	r5, r18
    72f4:	21 11       	cpse	r18, r1
    72f6:	03 c0       	rjmp	.+6      	; 0x72fe <conv_brk+0x72>
    72f8:	80 e0       	ldi	r24, 0x00	; 0
    72fa:	90 e0       	ldi	r25, 0x00	; 0
    72fc:	90 c0       	rjmp	.+288    	; 0x741e <conv_brk+0x192>
    72fe:	2e 35       	cpi	r18, 0x5E	; 94
    7300:	11 f4       	brne	.+4      	; 0x7306 <conv_brk+0x7a>
    7302:	00 97       	sbiw	r24, 0x00	; 0
    7304:	51 f1       	breq	.+84     	; 0x735a <conv_brk+0xce>
    7306:	43 2f       	mov	r20, r19
    7308:	50 e0       	ldi	r21, 0x00	; 0
    730a:	48 17       	cp	r20, r24
    730c:	59 07       	cpc	r21, r25
    730e:	3c f4       	brge	.+14     	; 0x731e <conv_brk+0x92>
    7310:	2d 35       	cpi	r18, 0x5D	; 93
    7312:	59 f1       	breq	.+86     	; 0x736a <conv_brk+0xde>
    7314:	2d 32       	cpi	r18, 0x2D	; 45
    7316:	19 f4       	brne	.+6      	; 0x731e <conv_brk+0x92>
    7318:	77 20       	and	r7, r7
    731a:	09 f1       	breq	.+66     	; 0x735e <conv_brk+0xd2>
    731c:	03 c0       	rjmp	.+6      	; 0x7324 <conv_brk+0x98>
    731e:	77 20       	and	r7, r7
    7320:	09 f4       	brne	.+2      	; 0x7324 <conv_brk+0x98>
    7322:	68 c0       	rjmp	.+208    	; 0x73f4 <conv_brk+0x168>
    7324:	45 2d       	mov	r20, r5
    7326:	46 95       	lsr	r20
    7328:	46 95       	lsr	r20
    732a:	46 95       	lsr	r20
    732c:	d6 01       	movw	r26, r12
    732e:	a4 0f       	add	r26, r20
    7330:	b1 1d       	adc	r27, r1
    7332:	45 2d       	mov	r20, r5
    7334:	47 70       	andi	r20, 0x07	; 7
    7336:	8b 01       	movw	r16, r22
    7338:	02 c0       	rjmp	.+4      	; 0x733e <conv_brk+0xb2>
    733a:	00 0f       	add	r16, r16
    733c:	11 1f       	adc	r17, r17
    733e:	4a 95       	dec	r20
    7340:	e2 f7       	brpl	.-8      	; 0x733a <conv_brk+0xae>
    7342:	a8 01       	movw	r20, r16
    7344:	5c 91       	ld	r21, X
    7346:	45 2b       	or	r20, r21
    7348:	4c 93       	st	X, r20
    734a:	65 14       	cp	r6, r5
    734c:	59 f0       	breq	.+22     	; 0x7364 <conv_brk+0xd8>
    734e:	56 14       	cp	r5, r6
    7350:	10 f4       	brcc	.+4      	; 0x7356 <conv_brk+0xca>
    7352:	53 94       	inc	r5
    7354:	e7 cf       	rjmp	.-50     	; 0x7324 <conv_brk+0x98>
    7356:	5a 94       	dec	r5
    7358:	e5 cf       	rjmp	.-54     	; 0x7324 <conv_brk+0x98>
    735a:	31 e0       	ldi	r19, 0x01	; 1
    735c:	04 c0       	rjmp	.+8      	; 0x7366 <conv_brk+0xda>
    735e:	77 24       	eor	r7, r7
    7360:	73 94       	inc	r7
    7362:	01 c0       	rjmp	.+2      	; 0x7366 <conv_brk+0xda>
    7364:	71 2c       	mov	r7, r1
    7366:	01 96       	adiw	r24, 0x01	; 1
    7368:	bf cf       	rjmp	.-130    	; 0x72e8 <conv_brk+0x5c>
    736a:	77 20       	and	r7, r7
    736c:	19 f0       	breq	.+6      	; 0x7374 <conv_brk+0xe8>
    736e:	8e 81       	ldd	r24, Y+6	; 0x06
    7370:	80 62       	ori	r24, 0x20	; 32
    7372:	8e 83       	std	Y+6, r24	; 0x06
    7374:	31 11       	cpse	r19, r1
    7376:	03 c0       	rjmp	.+6      	; 0x737e <conv_brk+0xf2>
    7378:	88 24       	eor	r8, r8
    737a:	83 94       	inc	r8
    737c:	17 c0       	rjmp	.+46     	; 0x73ac <conv_brk+0x120>
    737e:	f6 01       	movw	r30, r12
    7380:	9e 01       	movw	r18, r28
    7382:	2f 5d       	subi	r18, 0xDF	; 223
    7384:	3f 4f       	sbci	r19, 0xFF	; 255
    7386:	80 81       	ld	r24, Z
    7388:	80 95       	com	r24
    738a:	81 93       	st	Z+, r24
    738c:	2e 17       	cp	r18, r30
    738e:	3f 07       	cpc	r19, r31
    7390:	d1 f7       	brne	.-12     	; 0x7386 <conv_brk+0xfa>
    7392:	f2 cf       	rjmp	.-28     	; 0x7378 <conv_brk+0xec>
    7394:	e1 14       	cp	r14, r1
    7396:	f1 04       	cpc	r15, r1
    7398:	29 f0       	breq	.+10     	; 0x73a4 <conv_brk+0x118>
    739a:	d7 01       	movw	r26, r14
    739c:	8c 93       	st	X, r24
    739e:	f7 01       	movw	r30, r14
    73a0:	31 96       	adiw	r30, 0x01	; 1
    73a2:	7f 01       	movw	r14, r30
    73a4:	9a 94       	dec	r9
    73a6:	81 2c       	mov	r8, r1
    73a8:	99 20       	and	r9, r9
    73aa:	e9 f0       	breq	.+58     	; 0x73e6 <conv_brk+0x15a>
    73ac:	c5 01       	movw	r24, r10
    73ae:	8d d1       	rcall	.+794    	; 0x76ca <fgetc>
    73b0:	97 fd       	sbrc	r25, 7
    73b2:	17 c0       	rjmp	.+46     	; 0x73e2 <conv_brk+0x156>
    73b4:	fc 01       	movw	r30, r24
    73b6:	ff 27       	eor	r31, r31
    73b8:	23 e0       	ldi	r18, 0x03	; 3
    73ba:	f5 95       	asr	r31
    73bc:	e7 95       	ror	r30
    73be:	2a 95       	dec	r18
    73c0:	e1 f7       	brne	.-8      	; 0x73ba <conv_brk+0x12e>
    73c2:	ec 0d       	add	r30, r12
    73c4:	fd 1d       	adc	r31, r13
    73c6:	20 81       	ld	r18, Z
    73c8:	30 e0       	ldi	r19, 0x00	; 0
    73ca:	ac 01       	movw	r20, r24
    73cc:	47 70       	andi	r20, 0x07	; 7
    73ce:	55 27       	eor	r21, r21
    73d0:	02 c0       	rjmp	.+4      	; 0x73d6 <conv_brk+0x14a>
    73d2:	35 95       	asr	r19
    73d4:	27 95       	ror	r18
    73d6:	4a 95       	dec	r20
    73d8:	e2 f7       	brpl	.-8      	; 0x73d2 <conv_brk+0x146>
    73da:	20 fd       	sbrc	r18, 0
    73dc:	db cf       	rjmp	.-74     	; 0x7394 <conv_brk+0x108>
    73de:	b5 01       	movw	r22, r10
    73e0:	ee d1       	rcall	.+988    	; 0x77be <ungetc>
    73e2:	81 10       	cpse	r8, r1
    73e4:	89 cf       	rjmp	.-238    	; 0x72f8 <conv_brk+0x6c>
    73e6:	e1 14       	cp	r14, r1
    73e8:	f1 04       	cpc	r15, r1
    73ea:	11 f0       	breq	.+4      	; 0x73f0 <conv_brk+0x164>
    73ec:	d7 01       	movw	r26, r14
    73ee:	1c 92       	st	X, r1
    73f0:	c8 01       	movw	r24, r16
    73f2:	15 c0       	rjmp	.+42     	; 0x741e <conv_brk+0x192>
    73f4:	42 2f       	mov	r20, r18
    73f6:	46 95       	lsr	r20
    73f8:	46 95       	lsr	r20
    73fa:	46 95       	lsr	r20
    73fc:	d6 01       	movw	r26, r12
    73fe:	a4 0f       	add	r26, r20
    7400:	b1 1d       	adc	r27, r1
    7402:	42 2f       	mov	r20, r18
    7404:	47 70       	andi	r20, 0x07	; 7
    7406:	8b 01       	movw	r16, r22
    7408:	02 c0       	rjmp	.+4      	; 0x740e <conv_brk+0x182>
    740a:	00 0f       	add	r16, r16
    740c:	11 1f       	adc	r17, r17
    740e:	4a 95       	dec	r20
    7410:	e2 f7       	brpl	.-8      	; 0x740a <conv_brk+0x17e>
    7412:	a8 01       	movw	r20, r16
    7414:	5c 91       	ld	r21, X
    7416:	45 2b       	or	r20, r21
    7418:	4c 93       	st	X, r20
    741a:	62 2e       	mov	r6, r18
    741c:	a4 cf       	rjmp	.-184    	; 0x7366 <conv_brk+0xda>
    741e:	a0 96       	adiw	r28, 0x20	; 32
    7420:	0f b6       	in	r0, 0x3f	; 63
    7422:	f8 94       	cli
    7424:	de bf       	out	0x3e, r29	; 62
    7426:	0f be       	out	0x3f, r0	; 63
    7428:	cd bf       	out	0x3d, r28	; 61
    742a:	df 91       	pop	r29
    742c:	cf 91       	pop	r28
    742e:	1f 91       	pop	r17
    7430:	0f 91       	pop	r16
    7432:	ff 90       	pop	r15
    7434:	ef 90       	pop	r14
    7436:	df 90       	pop	r13
    7438:	cf 90       	pop	r12
    743a:	bf 90       	pop	r11
    743c:	af 90       	pop	r10
    743e:	9f 90       	pop	r9
    7440:	8f 90       	pop	r8
    7442:	7f 90       	pop	r7
    7444:	6f 90       	pop	r6
    7446:	5f 90       	pop	r5
    7448:	08 95       	ret

0000744a <vfscanf>:
    744a:	5f 92       	push	r5
    744c:	6f 92       	push	r6
    744e:	7f 92       	push	r7
    7450:	8f 92       	push	r8
    7452:	9f 92       	push	r9
    7454:	af 92       	push	r10
    7456:	bf 92       	push	r11
    7458:	cf 92       	push	r12
    745a:	df 92       	push	r13
    745c:	ef 92       	push	r14
    745e:	ff 92       	push	r15
    7460:	0f 93       	push	r16
    7462:	1f 93       	push	r17
    7464:	cf 93       	push	r28
    7466:	df 93       	push	r29
    7468:	6c 01       	movw	r12, r24
    746a:	eb 01       	movw	r28, r22
    746c:	5a 01       	movw	r10, r20
    746e:	fc 01       	movw	r30, r24
    7470:	17 82       	std	Z+7, r1	; 0x07
    7472:	16 82       	std	Z+6, r1	; 0x06
    7474:	51 2c       	mov	r5, r1
    7476:	f6 01       	movw	r30, r12
    7478:	e3 80       	ldd	r14, Z+3	; 0x03
    747a:	fe 01       	movw	r30, r28
    747c:	e3 fc       	sbrc	r14, 3
    747e:	85 91       	lpm	r24, Z+
    7480:	e3 fe       	sbrs	r14, 3
    7482:	81 91       	ld	r24, Z+
    7484:	18 2f       	mov	r17, r24
    7486:	ef 01       	movw	r28, r30
    7488:	88 23       	and	r24, r24
    748a:	09 f4       	brne	.+2      	; 0x748e <vfscanf+0x44>
    748c:	e0 c0       	rjmp	.+448    	; 0x764e <vfscanf+0x204>
    748e:	90 e0       	ldi	r25, 0x00	; 0
    7490:	f3 d0       	rcall	.+486    	; 0x7678 <isspace>
    7492:	89 2b       	or	r24, r25
    7494:	19 f0       	breq	.+6      	; 0x749c <vfscanf+0x52>
    7496:	c6 01       	movw	r24, r12
    7498:	59 de       	rcall	.-846    	; 0x714c <skip_spaces>
    749a:	ed cf       	rjmp	.-38     	; 0x7476 <vfscanf+0x2c>
    749c:	15 32       	cpi	r17, 0x25	; 37
    749e:	41 f4       	brne	.+16     	; 0x74b0 <vfscanf+0x66>
    74a0:	fe 01       	movw	r30, r28
    74a2:	e3 fc       	sbrc	r14, 3
    74a4:	15 91       	lpm	r17, Z+
    74a6:	e3 fe       	sbrs	r14, 3
    74a8:	11 91       	ld	r17, Z+
    74aa:	ef 01       	movw	r28, r30
    74ac:	15 32       	cpi	r17, 0x25	; 37
    74ae:	71 f4       	brne	.+28     	; 0x74cc <vfscanf+0x82>
    74b0:	c6 01       	movw	r24, r12
    74b2:	0b d1       	rcall	.+534    	; 0x76ca <fgetc>
    74b4:	97 fd       	sbrc	r25, 7
    74b6:	c9 c0       	rjmp	.+402    	; 0x764a <vfscanf+0x200>
    74b8:	41 2f       	mov	r20, r17
    74ba:	50 e0       	ldi	r21, 0x00	; 0
    74bc:	9c 01       	movw	r18, r24
    74be:	33 27       	eor	r19, r19
    74c0:	24 17       	cp	r18, r20
    74c2:	35 07       	cpc	r19, r21
    74c4:	c1 f2       	breq	.-80     	; 0x7476 <vfscanf+0x2c>
    74c6:	b6 01       	movw	r22, r12
    74c8:	7a d1       	rcall	.+756    	; 0x77be <ungetc>
    74ca:	c1 c0       	rjmp	.+386    	; 0x764e <vfscanf+0x204>
    74cc:	1a 32       	cpi	r17, 0x2A	; 42
    74ce:	39 f4       	brne	.+14     	; 0x74de <vfscanf+0x94>
    74d0:	e3 fc       	sbrc	r14, 3
    74d2:	15 91       	lpm	r17, Z+
    74d4:	e3 fe       	sbrs	r14, 3
    74d6:	11 91       	ld	r17, Z+
    74d8:	ef 01       	movw	r28, r30
    74da:	01 e0       	ldi	r16, 0x01	; 1
    74dc:	01 c0       	rjmp	.+2      	; 0x74e0 <vfscanf+0x96>
    74de:	00 e0       	ldi	r16, 0x00	; 0
    74e0:	f1 2c       	mov	r15, r1
    74e2:	20 ed       	ldi	r18, 0xD0	; 208
    74e4:	21 0f       	add	r18, r17
    74e6:	2a 30       	cpi	r18, 0x0A	; 10
    74e8:	78 f4       	brcc	.+30     	; 0x7508 <vfscanf+0xbe>
    74ea:	02 60       	ori	r16, 0x02	; 2
    74ec:	6f 2d       	mov	r22, r15
    74ee:	70 e0       	ldi	r23, 0x00	; 0
    74f0:	80 e0       	ldi	r24, 0x00	; 0
    74f2:	90 e0       	ldi	r25, 0x00	; 0
    74f4:	40 e2       	ldi	r20, 0x20	; 32
    74f6:	03 de       	rcall	.-1018   	; 0x70fe <mulacc>
    74f8:	f6 2e       	mov	r15, r22
    74fa:	fe 01       	movw	r30, r28
    74fc:	e3 fc       	sbrc	r14, 3
    74fe:	15 91       	lpm	r17, Z+
    7500:	e3 fe       	sbrs	r14, 3
    7502:	11 91       	ld	r17, Z+
    7504:	ef 01       	movw	r28, r30
    7506:	ed cf       	rjmp	.-38     	; 0x74e2 <vfscanf+0x98>
    7508:	01 ff       	sbrs	r16, 1
    750a:	03 c0       	rjmp	.+6      	; 0x7512 <vfscanf+0xc8>
    750c:	f1 10       	cpse	r15, r1
    750e:	03 c0       	rjmp	.+6      	; 0x7516 <vfscanf+0xcc>
    7510:	9e c0       	rjmp	.+316    	; 0x764e <vfscanf+0x204>
    7512:	ff 24       	eor	r15, r15
    7514:	fa 94       	dec	r15
    7516:	18 36       	cpi	r17, 0x68	; 104
    7518:	19 f0       	breq	.+6      	; 0x7520 <vfscanf+0xd6>
    751a:	1c 36       	cpi	r17, 0x6C	; 108
    751c:	51 f0       	breq	.+20     	; 0x7532 <vfscanf+0xe8>
    751e:	10 c0       	rjmp	.+32     	; 0x7540 <vfscanf+0xf6>
    7520:	fe 01       	movw	r30, r28
    7522:	e3 fc       	sbrc	r14, 3
    7524:	15 91       	lpm	r17, Z+
    7526:	e3 fe       	sbrs	r14, 3
    7528:	11 91       	ld	r17, Z+
    752a:	ef 01       	movw	r28, r30
    752c:	18 36       	cpi	r17, 0x68	; 104
    752e:	41 f4       	brne	.+16     	; 0x7540 <vfscanf+0xf6>
    7530:	08 60       	ori	r16, 0x08	; 8
    7532:	04 60       	ori	r16, 0x04	; 4
    7534:	fe 01       	movw	r30, r28
    7536:	e3 fc       	sbrc	r14, 3
    7538:	15 91       	lpm	r17, Z+
    753a:	e3 fe       	sbrs	r14, 3
    753c:	11 91       	ld	r17, Z+
    753e:	ef 01       	movw	r28, r30
    7540:	11 23       	and	r17, r17
    7542:	09 f4       	brne	.+2      	; 0x7546 <vfscanf+0xfc>
    7544:	84 c0       	rjmp	.+264    	; 0x764e <vfscanf+0x204>
    7546:	61 2f       	mov	r22, r17
    7548:	70 e0       	ldi	r23, 0x00	; 0
    754a:	82 e5       	ldi	r24, 0x52	; 82
    754c:	91 e0       	ldi	r25, 0x01	; 1
    754e:	9c d0       	rcall	.+312    	; 0x7688 <strchr_P>
    7550:	89 2b       	or	r24, r25
    7552:	09 f4       	brne	.+2      	; 0x7556 <vfscanf+0x10c>
    7554:	7c c0       	rjmp	.+248    	; 0x764e <vfscanf+0x204>
    7556:	00 fd       	sbrc	r16, 0
    7558:	07 c0       	rjmp	.+14     	; 0x7568 <vfscanf+0x11e>
    755a:	f5 01       	movw	r30, r10
    755c:	80 80       	ld	r8, Z
    755e:	91 80       	ldd	r9, Z+1	; 0x01
    7560:	c5 01       	movw	r24, r10
    7562:	02 96       	adiw	r24, 0x02	; 2
    7564:	5c 01       	movw	r10, r24
    7566:	02 c0       	rjmp	.+4      	; 0x756c <vfscanf+0x122>
    7568:	81 2c       	mov	r8, r1
    756a:	91 2c       	mov	r9, r1
    756c:	1e 36       	cpi	r17, 0x6E	; 110
    756e:	49 f4       	brne	.+18     	; 0x7582 <vfscanf+0x138>
    7570:	f6 01       	movw	r30, r12
    7572:	46 81       	ldd	r20, Z+6	; 0x06
    7574:	57 81       	ldd	r21, Z+7	; 0x07
    7576:	60 e0       	ldi	r22, 0x00	; 0
    7578:	70 e0       	ldi	r23, 0x00	; 0
    757a:	20 2f       	mov	r18, r16
    757c:	c4 01       	movw	r24, r8
    757e:	b3 dd       	rcall	.-1178   	; 0x70e6 <putval>
    7580:	7a cf       	rjmp	.-268    	; 0x7476 <vfscanf+0x2c>
    7582:	13 36       	cpi	r17, 0x63	; 99
    7584:	a1 f4       	brne	.+40     	; 0x75ae <vfscanf+0x164>
    7586:	01 fd       	sbrc	r16, 1
    7588:	02 c0       	rjmp	.+4      	; 0x758e <vfscanf+0x144>
    758a:	ff 24       	eor	r15, r15
    758c:	f3 94       	inc	r15
    758e:	c6 01       	movw	r24, r12
    7590:	9c d0       	rcall	.+312    	; 0x76ca <fgetc>
    7592:	97 fd       	sbrc	r25, 7
    7594:	5a c0       	rjmp	.+180    	; 0x764a <vfscanf+0x200>
    7596:	81 14       	cp	r8, r1
    7598:	91 04       	cpc	r9, r1
    759a:	29 f0       	breq	.+10     	; 0x75a6 <vfscanf+0x15c>
    759c:	f4 01       	movw	r30, r8
    759e:	80 83       	st	Z, r24
    75a0:	c4 01       	movw	r24, r8
    75a2:	01 96       	adiw	r24, 0x01	; 1
    75a4:	4c 01       	movw	r8, r24
    75a6:	fa 94       	dec	r15
    75a8:	f1 10       	cpse	r15, r1
    75aa:	f1 cf       	rjmp	.-30     	; 0x758e <vfscanf+0x144>
    75ac:	4a c0       	rjmp	.+148    	; 0x7642 <vfscanf+0x1f8>
    75ae:	1b 35       	cpi	r17, 0x5B	; 91
    75b0:	51 f4       	brne	.+20     	; 0x75c6 <vfscanf+0x17c>
    75b2:	9e 01       	movw	r18, r28
    75b4:	a4 01       	movw	r20, r8
    75b6:	6f 2d       	mov	r22, r15
    75b8:	c6 01       	movw	r24, r12
    75ba:	68 de       	rcall	.-816    	; 0x728c <conv_brk>
    75bc:	ec 01       	movw	r28, r24
    75be:	89 2b       	or	r24, r25
    75c0:	09 f0       	breq	.+2      	; 0x75c4 <vfscanf+0x17a>
    75c2:	3f c0       	rjmp	.+126    	; 0x7642 <vfscanf+0x1f8>
    75c4:	39 c0       	rjmp	.+114    	; 0x7638 <vfscanf+0x1ee>
    75c6:	c6 01       	movw	r24, r12
    75c8:	c1 dd       	rcall	.-1150   	; 0x714c <skip_spaces>
    75ca:	97 fd       	sbrc	r25, 7
    75cc:	3e c0       	rjmp	.+124    	; 0x764a <vfscanf+0x200>
    75ce:	1f 36       	cpi	r17, 0x6F	; 111
    75d0:	49 f1       	breq	.+82     	; 0x7624 <vfscanf+0x1da>
    75d2:	28 f4       	brcc	.+10     	; 0x75de <vfscanf+0x194>
    75d4:	14 36       	cpi	r17, 0x64	; 100
    75d6:	21 f1       	breq	.+72     	; 0x7620 <vfscanf+0x1d6>
    75d8:	19 36       	cpi	r17, 0x69	; 105
    75da:	39 f1       	breq	.+78     	; 0x762a <vfscanf+0x1e0>
    75dc:	25 c0       	rjmp	.+74     	; 0x7628 <vfscanf+0x1de>
    75de:	13 37       	cpi	r17, 0x73	; 115
    75e0:	71 f0       	breq	.+28     	; 0x75fe <vfscanf+0x1b4>
    75e2:	15 37       	cpi	r17, 0x75	; 117
    75e4:	e9 f0       	breq	.+58     	; 0x7620 <vfscanf+0x1d6>
    75e6:	20 c0       	rjmp	.+64     	; 0x7628 <vfscanf+0x1de>
    75e8:	81 14       	cp	r8, r1
    75ea:	91 04       	cpc	r9, r1
    75ec:	29 f0       	breq	.+10     	; 0x75f8 <vfscanf+0x1ae>
    75ee:	f4 01       	movw	r30, r8
    75f0:	60 82       	st	Z, r6
    75f2:	c4 01       	movw	r24, r8
    75f4:	01 96       	adiw	r24, 0x01	; 1
    75f6:	4c 01       	movw	r8, r24
    75f8:	fa 94       	dec	r15
    75fa:	ff 20       	and	r15, r15
    75fc:	59 f0       	breq	.+22     	; 0x7614 <vfscanf+0x1ca>
    75fe:	c6 01       	movw	r24, r12
    7600:	64 d0       	rcall	.+200    	; 0x76ca <fgetc>
    7602:	3c 01       	movw	r6, r24
    7604:	97 fd       	sbrc	r25, 7
    7606:	06 c0       	rjmp	.+12     	; 0x7614 <vfscanf+0x1ca>
    7608:	37 d0       	rcall	.+110    	; 0x7678 <isspace>
    760a:	89 2b       	or	r24, r25
    760c:	69 f3       	breq	.-38     	; 0x75e8 <vfscanf+0x19e>
    760e:	b6 01       	movw	r22, r12
    7610:	c3 01       	movw	r24, r6
    7612:	d5 d0       	rcall	.+426    	; 0x77be <ungetc>
    7614:	81 14       	cp	r8, r1
    7616:	91 04       	cpc	r9, r1
    7618:	a1 f0       	breq	.+40     	; 0x7642 <vfscanf+0x1f8>
    761a:	f4 01       	movw	r30, r8
    761c:	10 82       	st	Z, r1
    761e:	11 c0       	rjmp	.+34     	; 0x7642 <vfscanf+0x1f8>
    7620:	00 62       	ori	r16, 0x20	; 32
    7622:	03 c0       	rjmp	.+6      	; 0x762a <vfscanf+0x1e0>
    7624:	00 61       	ori	r16, 0x10	; 16
    7626:	01 c0       	rjmp	.+2      	; 0x762a <vfscanf+0x1e0>
    7628:	00 64       	ori	r16, 0x40	; 64
    762a:	20 2f       	mov	r18, r16
    762c:	a4 01       	movw	r20, r8
    762e:	6f 2d       	mov	r22, r15
    7630:	c6 01       	movw	r24, r12
    7632:	a2 dd       	rcall	.-1212   	; 0x7178 <conv_int>
    7634:	81 11       	cpse	r24, r1
    7636:	05 c0       	rjmp	.+10     	; 0x7642 <vfscanf+0x1f8>
    7638:	f6 01       	movw	r30, r12
    763a:	83 81       	ldd	r24, Z+3	; 0x03
    763c:	80 73       	andi	r24, 0x30	; 48
    763e:	29 f4       	brne	.+10     	; 0x764a <vfscanf+0x200>
    7640:	06 c0       	rjmp	.+12     	; 0x764e <vfscanf+0x204>
    7642:	00 fd       	sbrc	r16, 0
    7644:	18 cf       	rjmp	.-464    	; 0x7476 <vfscanf+0x2c>
    7646:	53 94       	inc	r5
    7648:	16 cf       	rjmp	.-468    	; 0x7476 <vfscanf+0x2c>
    764a:	55 20       	and	r5, r5
    764c:	19 f0       	breq	.+6      	; 0x7654 <vfscanf+0x20a>
    764e:	85 2d       	mov	r24, r5
    7650:	90 e0       	ldi	r25, 0x00	; 0
    7652:	02 c0       	rjmp	.+4      	; 0x7658 <vfscanf+0x20e>
    7654:	8f ef       	ldi	r24, 0xFF	; 255
    7656:	9f ef       	ldi	r25, 0xFF	; 255
    7658:	df 91       	pop	r29
    765a:	cf 91       	pop	r28
    765c:	1f 91       	pop	r17
    765e:	0f 91       	pop	r16
    7660:	ff 90       	pop	r15
    7662:	ef 90       	pop	r14
    7664:	df 90       	pop	r13
    7666:	cf 90       	pop	r12
    7668:	bf 90       	pop	r11
    766a:	af 90       	pop	r10
    766c:	9f 90       	pop	r9
    766e:	8f 90       	pop	r8
    7670:	7f 90       	pop	r7
    7672:	6f 90       	pop	r6
    7674:	5f 90       	pop	r5
    7676:	08 95       	ret

00007678 <isspace>:
    7678:	91 11       	cpse	r25, r1
    767a:	18 c1       	rjmp	.+560    	; 0x78ac <__ctype_isfalse>
    767c:	80 32       	cpi	r24, 0x20	; 32
    767e:	19 f0       	breq	.+6      	; 0x7686 <isspace+0xe>
    7680:	89 50       	subi	r24, 0x09	; 9
    7682:	85 50       	subi	r24, 0x05	; 5
    7684:	d0 f7       	brcc	.-12     	; 0x767a <isspace+0x2>
    7686:	08 95       	ret

00007688 <strchr_P>:
    7688:	fc 01       	movw	r30, r24
    768a:	05 90       	lpm	r0, Z+
    768c:	06 16       	cp	r0, r22
    768e:	21 f0       	breq	.+8      	; 0x7698 <strchr_P+0x10>
    7690:	00 20       	and	r0, r0
    7692:	d9 f7       	brne	.-10     	; 0x768a <strchr_P+0x2>
    7694:	c0 01       	movw	r24, r0
    7696:	08 95       	ret
    7698:	31 97       	sbiw	r30, 0x01	; 1
    769a:	cf 01       	movw	r24, r30
    769c:	08 95       	ret

0000769e <strnlen_P>:
    769e:	fc 01       	movw	r30, r24
    76a0:	05 90       	lpm	r0, Z+
    76a2:	61 50       	subi	r22, 0x01	; 1
    76a4:	70 40       	sbci	r23, 0x00	; 0
    76a6:	01 10       	cpse	r0, r1
    76a8:	d8 f7       	brcc	.-10     	; 0x76a0 <strnlen_P+0x2>
    76aa:	80 95       	com	r24
    76ac:	90 95       	com	r25
    76ae:	8e 0f       	add	r24, r30
    76b0:	9f 1f       	adc	r25, r31
    76b2:	08 95       	ret

000076b4 <strnlen>:
    76b4:	fc 01       	movw	r30, r24
    76b6:	61 50       	subi	r22, 0x01	; 1
    76b8:	70 40       	sbci	r23, 0x00	; 0
    76ba:	01 90       	ld	r0, Z+
    76bc:	01 10       	cpse	r0, r1
    76be:	d8 f7       	brcc	.-10     	; 0x76b6 <strnlen+0x2>
    76c0:	80 95       	com	r24
    76c2:	90 95       	com	r25
    76c4:	8e 0f       	add	r24, r30
    76c6:	9f 1f       	adc	r25, r31
    76c8:	08 95       	ret

000076ca <fgetc>:
    76ca:	cf 93       	push	r28
    76cc:	df 93       	push	r29
    76ce:	ec 01       	movw	r28, r24
    76d0:	2b 81       	ldd	r18, Y+3	; 0x03
    76d2:	20 ff       	sbrs	r18, 0
    76d4:	33 c0       	rjmp	.+102    	; 0x773c <fgetc+0x72>
    76d6:	26 ff       	sbrs	r18, 6
    76d8:	0a c0       	rjmp	.+20     	; 0x76ee <fgetc+0x24>
    76da:	2f 7b       	andi	r18, 0xBF	; 191
    76dc:	2b 83       	std	Y+3, r18	; 0x03
    76de:	8e 81       	ldd	r24, Y+6	; 0x06
    76e0:	9f 81       	ldd	r25, Y+7	; 0x07
    76e2:	01 96       	adiw	r24, 0x01	; 1
    76e4:	9f 83       	std	Y+7, r25	; 0x07
    76e6:	8e 83       	std	Y+6, r24	; 0x06
    76e8:	8a 81       	ldd	r24, Y+2	; 0x02
    76ea:	90 e0       	ldi	r25, 0x00	; 0
    76ec:	29 c0       	rjmp	.+82     	; 0x7740 <fgetc+0x76>
    76ee:	22 ff       	sbrs	r18, 2
    76f0:	0f c0       	rjmp	.+30     	; 0x7710 <fgetc+0x46>
    76f2:	e8 81       	ld	r30, Y
    76f4:	f9 81       	ldd	r31, Y+1	; 0x01
    76f6:	80 81       	ld	r24, Z
    76f8:	08 2e       	mov	r0, r24
    76fa:	00 0c       	add	r0, r0
    76fc:	99 0b       	sbc	r25, r25
    76fe:	00 97       	sbiw	r24, 0x00	; 0
    7700:	19 f4       	brne	.+6      	; 0x7708 <fgetc+0x3e>
    7702:	20 62       	ori	r18, 0x20	; 32
    7704:	2b 83       	std	Y+3, r18	; 0x03
    7706:	1a c0       	rjmp	.+52     	; 0x773c <fgetc+0x72>
    7708:	31 96       	adiw	r30, 0x01	; 1
    770a:	f9 83       	std	Y+1, r31	; 0x01
    770c:	e8 83       	st	Y, r30
    770e:	0e c0       	rjmp	.+28     	; 0x772c <fgetc+0x62>
    7710:	ea 85       	ldd	r30, Y+10	; 0x0a
    7712:	fb 85       	ldd	r31, Y+11	; 0x0b
    7714:	19 95       	eicall
    7716:	97 ff       	sbrs	r25, 7
    7718:	09 c0       	rjmp	.+18     	; 0x772c <fgetc+0x62>
    771a:	2b 81       	ldd	r18, Y+3	; 0x03
    771c:	01 96       	adiw	r24, 0x01	; 1
    771e:	11 f0       	breq	.+4      	; 0x7724 <fgetc+0x5a>
    7720:	80 e2       	ldi	r24, 0x20	; 32
    7722:	01 c0       	rjmp	.+2      	; 0x7726 <fgetc+0x5c>
    7724:	80 e1       	ldi	r24, 0x10	; 16
    7726:	82 2b       	or	r24, r18
    7728:	8b 83       	std	Y+3, r24	; 0x03
    772a:	08 c0       	rjmp	.+16     	; 0x773c <fgetc+0x72>
    772c:	2e 81       	ldd	r18, Y+6	; 0x06
    772e:	3f 81       	ldd	r19, Y+7	; 0x07
    7730:	2f 5f       	subi	r18, 0xFF	; 255
    7732:	3f 4f       	sbci	r19, 0xFF	; 255
    7734:	3f 83       	std	Y+7, r19	; 0x07
    7736:	2e 83       	std	Y+6, r18	; 0x06
    7738:	99 27       	eor	r25, r25
    773a:	02 c0       	rjmp	.+4      	; 0x7740 <fgetc+0x76>
    773c:	8f ef       	ldi	r24, 0xFF	; 255
    773e:	9f ef       	ldi	r25, 0xFF	; 255
    7740:	df 91       	pop	r29
    7742:	cf 91       	pop	r28
    7744:	08 95       	ret

00007746 <fputc>:
    7746:	0f 93       	push	r16
    7748:	1f 93       	push	r17
    774a:	cf 93       	push	r28
    774c:	df 93       	push	r29
    774e:	fb 01       	movw	r30, r22
    7750:	23 81       	ldd	r18, Z+3	; 0x03
    7752:	21 fd       	sbrc	r18, 1
    7754:	03 c0       	rjmp	.+6      	; 0x775c <fputc+0x16>
    7756:	8f ef       	ldi	r24, 0xFF	; 255
    7758:	9f ef       	ldi	r25, 0xFF	; 255
    775a:	2c c0       	rjmp	.+88     	; 0x77b4 <fputc+0x6e>
    775c:	22 ff       	sbrs	r18, 2
    775e:	16 c0       	rjmp	.+44     	; 0x778c <fputc+0x46>
    7760:	46 81       	ldd	r20, Z+6	; 0x06
    7762:	57 81       	ldd	r21, Z+7	; 0x07
    7764:	24 81       	ldd	r18, Z+4	; 0x04
    7766:	35 81       	ldd	r19, Z+5	; 0x05
    7768:	42 17       	cp	r20, r18
    776a:	53 07       	cpc	r21, r19
    776c:	44 f4       	brge	.+16     	; 0x777e <fputc+0x38>
    776e:	a0 81       	ld	r26, Z
    7770:	b1 81       	ldd	r27, Z+1	; 0x01
    7772:	9d 01       	movw	r18, r26
    7774:	2f 5f       	subi	r18, 0xFF	; 255
    7776:	3f 4f       	sbci	r19, 0xFF	; 255
    7778:	31 83       	std	Z+1, r19	; 0x01
    777a:	20 83       	st	Z, r18
    777c:	8c 93       	st	X, r24
    777e:	26 81       	ldd	r18, Z+6	; 0x06
    7780:	37 81       	ldd	r19, Z+7	; 0x07
    7782:	2f 5f       	subi	r18, 0xFF	; 255
    7784:	3f 4f       	sbci	r19, 0xFF	; 255
    7786:	37 83       	std	Z+7, r19	; 0x07
    7788:	26 83       	std	Z+6, r18	; 0x06
    778a:	14 c0       	rjmp	.+40     	; 0x77b4 <fputc+0x6e>
    778c:	8b 01       	movw	r16, r22
    778e:	ec 01       	movw	r28, r24
    7790:	fb 01       	movw	r30, r22
    7792:	00 84       	ldd	r0, Z+8	; 0x08
    7794:	f1 85       	ldd	r31, Z+9	; 0x09
    7796:	e0 2d       	mov	r30, r0
    7798:	19 95       	eicall
    779a:	89 2b       	or	r24, r25
    779c:	e1 f6       	brne	.-72     	; 0x7756 <fputc+0x10>
    779e:	d8 01       	movw	r26, r16
    77a0:	16 96       	adiw	r26, 0x06	; 6
    77a2:	8d 91       	ld	r24, X+
    77a4:	9c 91       	ld	r25, X
    77a6:	17 97       	sbiw	r26, 0x07	; 7
    77a8:	01 96       	adiw	r24, 0x01	; 1
    77aa:	17 96       	adiw	r26, 0x07	; 7
    77ac:	9c 93       	st	X, r25
    77ae:	8e 93       	st	-X, r24
    77b0:	16 97       	sbiw	r26, 0x06	; 6
    77b2:	ce 01       	movw	r24, r28
    77b4:	df 91       	pop	r29
    77b6:	cf 91       	pop	r28
    77b8:	1f 91       	pop	r17
    77ba:	0f 91       	pop	r16
    77bc:	08 95       	ret

000077be <ungetc>:
    77be:	fb 01       	movw	r30, r22
    77c0:	23 81       	ldd	r18, Z+3	; 0x03
    77c2:	20 ff       	sbrs	r18, 0
    77c4:	12 c0       	rjmp	.+36     	; 0x77ea <ungetc+0x2c>
    77c6:	26 fd       	sbrc	r18, 6
    77c8:	10 c0       	rjmp	.+32     	; 0x77ea <ungetc+0x2c>
    77ca:	8f 3f       	cpi	r24, 0xFF	; 255
    77cc:	3f ef       	ldi	r19, 0xFF	; 255
    77ce:	93 07       	cpc	r25, r19
    77d0:	61 f0       	breq	.+24     	; 0x77ea <ungetc+0x2c>
    77d2:	82 83       	std	Z+2, r24	; 0x02
    77d4:	2f 7d       	andi	r18, 0xDF	; 223
    77d6:	20 64       	ori	r18, 0x40	; 64
    77d8:	23 83       	std	Z+3, r18	; 0x03
    77da:	26 81       	ldd	r18, Z+6	; 0x06
    77dc:	37 81       	ldd	r19, Z+7	; 0x07
    77de:	21 50       	subi	r18, 0x01	; 1
    77e0:	31 09       	sbc	r19, r1
    77e2:	37 83       	std	Z+7, r19	; 0x07
    77e4:	26 83       	std	Z+6, r18	; 0x06
    77e6:	99 27       	eor	r25, r25
    77e8:	08 95       	ret
    77ea:	8f ef       	ldi	r24, 0xFF	; 255
    77ec:	9f ef       	ldi	r25, 0xFF	; 255
    77ee:	08 95       	ret

000077f0 <__ultoa_invert>:
    77f0:	fa 01       	movw	r30, r20
    77f2:	aa 27       	eor	r26, r26
    77f4:	28 30       	cpi	r18, 0x08	; 8
    77f6:	51 f1       	breq	.+84     	; 0x784c <__ultoa_invert+0x5c>
    77f8:	20 31       	cpi	r18, 0x10	; 16
    77fa:	81 f1       	breq	.+96     	; 0x785c <__ultoa_invert+0x6c>
    77fc:	e8 94       	clt
    77fe:	6f 93       	push	r22
    7800:	6e 7f       	andi	r22, 0xFE	; 254
    7802:	6e 5f       	subi	r22, 0xFE	; 254
    7804:	7f 4f       	sbci	r23, 0xFF	; 255
    7806:	8f 4f       	sbci	r24, 0xFF	; 255
    7808:	9f 4f       	sbci	r25, 0xFF	; 255
    780a:	af 4f       	sbci	r26, 0xFF	; 255
    780c:	b1 e0       	ldi	r27, 0x01	; 1
    780e:	3e d0       	rcall	.+124    	; 0x788c <__ultoa_invert+0x9c>
    7810:	b4 e0       	ldi	r27, 0x04	; 4
    7812:	3c d0       	rcall	.+120    	; 0x788c <__ultoa_invert+0x9c>
    7814:	67 0f       	add	r22, r23
    7816:	78 1f       	adc	r23, r24
    7818:	89 1f       	adc	r24, r25
    781a:	9a 1f       	adc	r25, r26
    781c:	a1 1d       	adc	r26, r1
    781e:	68 0f       	add	r22, r24
    7820:	79 1f       	adc	r23, r25
    7822:	8a 1f       	adc	r24, r26
    7824:	91 1d       	adc	r25, r1
    7826:	a1 1d       	adc	r26, r1
    7828:	6a 0f       	add	r22, r26
    782a:	71 1d       	adc	r23, r1
    782c:	81 1d       	adc	r24, r1
    782e:	91 1d       	adc	r25, r1
    7830:	a1 1d       	adc	r26, r1
    7832:	20 d0       	rcall	.+64     	; 0x7874 <__ultoa_invert+0x84>
    7834:	09 f4       	brne	.+2      	; 0x7838 <__ultoa_invert+0x48>
    7836:	68 94       	set
    7838:	3f 91       	pop	r19
    783a:	2a e0       	ldi	r18, 0x0A	; 10
    783c:	26 9f       	mul	r18, r22
    783e:	11 24       	eor	r1, r1
    7840:	30 19       	sub	r19, r0
    7842:	30 5d       	subi	r19, 0xD0	; 208
    7844:	31 93       	st	Z+, r19
    7846:	de f6       	brtc	.-74     	; 0x77fe <__ultoa_invert+0xe>
    7848:	cf 01       	movw	r24, r30
    784a:	08 95       	ret
    784c:	46 2f       	mov	r20, r22
    784e:	47 70       	andi	r20, 0x07	; 7
    7850:	40 5d       	subi	r20, 0xD0	; 208
    7852:	41 93       	st	Z+, r20
    7854:	b3 e0       	ldi	r27, 0x03	; 3
    7856:	0f d0       	rcall	.+30     	; 0x7876 <__ultoa_invert+0x86>
    7858:	c9 f7       	brne	.-14     	; 0x784c <__ultoa_invert+0x5c>
    785a:	f6 cf       	rjmp	.-20     	; 0x7848 <__ultoa_invert+0x58>
    785c:	46 2f       	mov	r20, r22
    785e:	4f 70       	andi	r20, 0x0F	; 15
    7860:	40 5d       	subi	r20, 0xD0	; 208
    7862:	4a 33       	cpi	r20, 0x3A	; 58
    7864:	18 f0       	brcs	.+6      	; 0x786c <__ultoa_invert+0x7c>
    7866:	49 5d       	subi	r20, 0xD9	; 217
    7868:	31 fd       	sbrc	r19, 1
    786a:	40 52       	subi	r20, 0x20	; 32
    786c:	41 93       	st	Z+, r20
    786e:	02 d0       	rcall	.+4      	; 0x7874 <__ultoa_invert+0x84>
    7870:	a9 f7       	brne	.-22     	; 0x785c <__ultoa_invert+0x6c>
    7872:	ea cf       	rjmp	.-44     	; 0x7848 <__ultoa_invert+0x58>
    7874:	b4 e0       	ldi	r27, 0x04	; 4
    7876:	a6 95       	lsr	r26
    7878:	97 95       	ror	r25
    787a:	87 95       	ror	r24
    787c:	77 95       	ror	r23
    787e:	67 95       	ror	r22
    7880:	ba 95       	dec	r27
    7882:	c9 f7       	brne	.-14     	; 0x7876 <__ultoa_invert+0x86>
    7884:	00 97       	sbiw	r24, 0x00	; 0
    7886:	61 05       	cpc	r22, r1
    7888:	71 05       	cpc	r23, r1
    788a:	08 95       	ret
    788c:	9b 01       	movw	r18, r22
    788e:	ac 01       	movw	r20, r24
    7890:	0a 2e       	mov	r0, r26
    7892:	06 94       	lsr	r0
    7894:	57 95       	ror	r21
    7896:	47 95       	ror	r20
    7898:	37 95       	ror	r19
    789a:	27 95       	ror	r18
    789c:	ba 95       	dec	r27
    789e:	c9 f7       	brne	.-14     	; 0x7892 <__ultoa_invert+0xa2>
    78a0:	62 0f       	add	r22, r18
    78a2:	73 1f       	adc	r23, r19
    78a4:	84 1f       	adc	r24, r20
    78a6:	95 1f       	adc	r25, r21
    78a8:	a0 1d       	adc	r26, r0
    78aa:	08 95       	ret

000078ac <__ctype_isfalse>:
    78ac:	99 27       	eor	r25, r25
    78ae:	88 27       	eor	r24, r24

000078b0 <__ctype_istrue>:
    78b0:	08 95       	ret

000078b2 <__divmodsi4>:
    78b2:	05 2e       	mov	r0, r21
    78b4:	97 fb       	bst	r25, 7
    78b6:	16 f4       	brtc	.+4      	; 0x78bc <__divmodsi4+0xa>
    78b8:	00 94       	com	r0
    78ba:	0f d0       	rcall	.+30     	; 0x78da <__negsi2>
    78bc:	57 fd       	sbrc	r21, 7
    78be:	05 d0       	rcall	.+10     	; 0x78ca <__divmodsi4_neg2>
    78c0:	b5 d8       	rcall	.-3734   	; 0x6a2c <__udivmodsi4>
    78c2:	07 fc       	sbrc	r0, 7
    78c4:	02 d0       	rcall	.+4      	; 0x78ca <__divmodsi4_neg2>
    78c6:	46 f4       	brtc	.+16     	; 0x78d8 <__divmodsi4_exit>
    78c8:	08 c0       	rjmp	.+16     	; 0x78da <__negsi2>

000078ca <__divmodsi4_neg2>:
    78ca:	50 95       	com	r21
    78cc:	40 95       	com	r20
    78ce:	30 95       	com	r19
    78d0:	21 95       	neg	r18
    78d2:	3f 4f       	sbci	r19, 0xFF	; 255
    78d4:	4f 4f       	sbci	r20, 0xFF	; 255
    78d6:	5f 4f       	sbci	r21, 0xFF	; 255

000078d8 <__divmodsi4_exit>:
    78d8:	08 95       	ret

000078da <__negsi2>:
    78da:	90 95       	com	r25
    78dc:	80 95       	com	r24
    78de:	70 95       	com	r23
    78e0:	61 95       	neg	r22
    78e2:	7f 4f       	sbci	r23, 0xFF	; 255
    78e4:	8f 4f       	sbci	r24, 0xFF	; 255
    78e6:	9f 4f       	sbci	r25, 0xFF	; 255
    78e8:	08 95       	ret

000078ea <__mulshisi3>:
    78ea:	b7 ff       	sbrs	r27, 7
    78ec:	c9 c8       	rjmp	.-3694   	; 0x6a80 <__muluhisi3>

000078ee <__mulohisi3>:
    78ee:	c8 d8       	rcall	.-3696   	; 0x6a80 <__muluhisi3>
    78f0:	82 1b       	sub	r24, r18
    78f2:	93 0b       	sbc	r25, r19
    78f4:	08 95       	ret

000078f6 <_exit>:
    78f6:	f8 94       	cli

000078f8 <__stop_program>:
    78f8:	ff cf       	rjmp	.-2      	; 0x78f8 <__stop_program>
