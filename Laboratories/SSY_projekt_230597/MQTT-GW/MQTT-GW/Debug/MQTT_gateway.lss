
MQTT_gateway.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000262  00800200  000078d2  00007966  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000078d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000216f  00800462  00800462  00007bc8  2**0
                  ALLOC
  3 .noinit       00000001  008025d1  008025d1  00007bc8  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00007bc8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007c24  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000a48  00000000  00000000  00007c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000100eb  00000000  00000000  000086ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000045c0  00000000  00000000  00018797  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006f5f  00000000  00000000  0001cd57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000027b4  00000000  00000000  00023cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000036f8  00000000  00000000  0002646c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000cfdd  00000000  00000000  00029b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a18  00000000  00000000  00036b41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c1 c1       	rjmp	.+898    	; 0x384 <__ctors_end>
       2:	00 00       	nop
       4:	ef c1       	rjmp	.+990    	; 0x3e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	eb c1       	rjmp	.+982    	; 0x3e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	e9 c1       	rjmp	.+978    	; 0x3e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	e7 c1       	rjmp	.+974    	; 0x3e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	e5 c1       	rjmp	.+970    	; 0x3e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e3 c1       	rjmp	.+966    	; 0x3e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e1 c1       	rjmp	.+962    	; 0x3e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	df c1       	rjmp	.+958    	; 0x3e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	dd c1       	rjmp	.+954    	; 0x3e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	db c1       	rjmp	.+950    	; 0x3e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d9 c1       	rjmp	.+946    	; 0x3e4 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 61 29 	jmp	0x52c2	; 0x52c2 <__vector_13>
      38:	d5 c1       	rjmp	.+938    	; 0x3e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d3 c1       	rjmp	.+934    	; 0x3e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d1 c1       	rjmp	.+930    	; 0x3e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	cf c1       	rjmp	.+926    	; 0x3e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	cd c1       	rjmp	.+922    	; 0x3e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	cb c1       	rjmp	.+918    	; 0x3e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c9 c1       	rjmp	.+914    	; 0x3e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 35 26 	jmp	0x4c6a	; 0x4c6a <__vector_21>
      58:	c5 c1       	rjmp	.+906    	; 0x3e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c3 c1       	rjmp	.+902    	; 0x3e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c1 c1       	rjmp	.+898    	; 0x3e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	bf c1       	rjmp	.+894    	; 0x3e4 <__bad_interrupt>
      66:	00 00       	nop
      68:	bd c1       	rjmp	.+890    	; 0x3e4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	bb c1       	rjmp	.+886    	; 0x3e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b9 c1       	rjmp	.+882    	; 0x3e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	b7 c1       	rjmp	.+878    	; 0x3e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	b5 c1       	rjmp	.+874    	; 0x3e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b3 c1       	rjmp	.+870    	; 0x3e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b1 c1       	rjmp	.+866    	; 0x3e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	af c1       	rjmp	.+862    	; 0x3e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	ad c1       	rjmp	.+858    	; 0x3e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ab c1       	rjmp	.+854    	; 0x3e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 3a 2a 	jmp	0x5474	; 0x5474 <__vector_36>
      94:	0c 94 1e 2a 	jmp	0x543c	; 0x543c <__vector_37>
      98:	a5 c1       	rjmp	.+842    	; 0x3e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	a3 c1       	rjmp	.+838    	; 0x3e4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	a1 c1       	rjmp	.+834    	; 0x3e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	9f c1       	rjmp	.+830    	; 0x3e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 50 29 	jmp	0x52a0	; 0x52a0 <__vector_42>
      ac:	9b c1       	rjmp	.+822    	; 0x3e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	99 c1       	rjmp	.+818    	; 0x3e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	97 c1       	rjmp	.+814    	; 0x3e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	95 c1       	rjmp	.+810    	; 0x3e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	93 c1       	rjmp	.+806    	; 0x3e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	91 c1       	rjmp	.+802    	; 0x3e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	8f c1       	rjmp	.+798    	; 0x3e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	8d c1       	rjmp	.+794    	; 0x3e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	8b c1       	rjmp	.+790    	; 0x3e4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	89 c1       	rjmp	.+786    	; 0x3e4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	87 c1       	rjmp	.+782    	; 0x3e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	85 c1       	rjmp	.+778    	; 0x3e4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	83 c1       	rjmp	.+774    	; 0x3e4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	81 c1       	rjmp	.+770    	; 0x3e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	7f c1       	rjmp	.+766    	; 0x3e4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	7d c1       	rjmp	.+762    	; 0x3e4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	7b c1       	rjmp	.+758    	; 0x3e4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	79 c1       	rjmp	.+754    	; 0x3e4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	77 c1       	rjmp	.+750    	; 0x3e4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	75 c1       	rjmp	.+746    	; 0x3e4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	73 c1       	rjmp	.+742    	; 0x3e4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	71 c1       	rjmp	.+738    	; 0x3e4 <__bad_interrupt>
     102:	00 00       	nop
     104:	6f c1       	rjmp	.+734    	; 0x3e4 <__bad_interrupt>
     106:	00 00       	nop
     108:	6d c1       	rjmp	.+730    	; 0x3e4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	6b c1       	rjmp	.+726    	; 0x3e4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	69 c1       	rjmp	.+722    	; 0x3e4 <__bad_interrupt>
     112:	00 00       	nop
     114:	67 c1       	rjmp	.+718    	; 0x3e4 <__bad_interrupt>
     116:	00 00       	nop
     118:	65 c1       	rjmp	.+714    	; 0x3e4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	63 c1       	rjmp	.+710    	; 0x3e4 <__bad_interrupt>
     11e:	00 00       	nop
     120:	61 c1       	rjmp	.+706    	; 0x3e4 <__bad_interrupt>
     122:	00 00       	nop
     124:	5f c1       	rjmp	.+702    	; 0x3e4 <__bad_interrupt>
     126:	00 00       	nop
     128:	5d c1       	rjmp	.+698    	; 0x3e4 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	5b c1       	rjmp	.+694    	; 0x3e4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	59 c1       	rjmp	.+690    	; 0x3e4 <__bad_interrupt>
     132:	00 00       	nop
     134:	c5 0f       	add	r28, r21
     136:	d8 0f       	add	r29, r24
     138:	2a 10       	cpse	r2, r10
     13a:	2a 10       	cpse	r2, r10
     13c:	d8 0f       	add	r29, r24
     13e:	09 10       	cpse	r0, r9
     140:	d8 0f       	add	r29, r24
     142:	d8 0f       	add	r29, r24
     144:	d8 0f       	add	r29, r24
     146:	2a 10       	cpse	r2, r10
     148:	2a 10       	cpse	r2, r10
     14a:	d8 0f       	add	r29, r24
     14c:	e8 0f       	add	r30, r24
     14e:	2a 10       	cpse	r2, r10
     150:	f8 0f       	add	r31, r24

00000152 <__trampolines_end>:
     152:	63 64       	ori	r22, 0x43	; 67
     154:	69 6e       	ori	r22, 0xE9	; 233
     156:	6f 70       	andi	r22, 0x0F	; 15
     158:	73 75       	andi	r23, 0x53	; 83
     15a:	78 58       	subi	r23, 0x88	; 136
     15c:	5b 00       	.word	0x005b	; ????

0000015e <__c.3519>:
     15e:	25 73 00                                            %s.

00000161 <__c.3727>:
     161:	55 70 74 69 6d 65 3a 20 25 6c 75 20 73 65 63 3b     Uptime: %lu sec;
     171:	20 46 72 65 65 20 52 41 4d 3a 20 25 64 20 62 79      Free RAM: %d by
     181:	74 65 73 0d 0a 00                                   tes...

00000187 <__c.3711>:
     187:	2d 2d 4d 51 54 54 20 43 6f 6e 6e 65 63 74 65 64     --MQTT Connected
     197:	20 45 52 52 4f 52 3a 20 25 6c 64 0d 0a 00            ERROR: %ld...

000001a5 <__c.3715>:
     1a5:	53 75 62 73 63 72 69 62 65 64 20 28 25 73 29 20     Subscribed (%s) 
     1b5:	25 64 0d 0a 00                                      %d...

000001ba <__c.3709>:
     1ba:	2b 2b 4d 51 54 54 20 43 6f 6e 6e 65 63 74 65 64     ++MQTT Connected
     1ca:	20 53 55 43 43 45 53 53 3a 20 25 6c 64 0d 0a 00      SUCCESS: %ld...

000001da <__c.3706>:
     1da:	3e 3e 54 72 79 69 6e 67 20 63 6f 6e 6e 65 63 74     >>Trying connect
     1ea:	20 74 6f 20 4d 51 54 54 20 62 72 6f 6b 65 72 3a      to MQTT broker:
     1fa:	20 25 64 2e 25 64 2e 25 64 2e 25 64 20 2e 2e 0d      %d.%d.%d.%d ...
     20a:	0a 00                                               ..

0000020c <__c.3701>:
     20c:	3e 20 54 72 61 6e 73 6c 61 74 65 64 20 25 73 20     > Translated %s 
     21c:	74 6f 20 5b 25 64 2e 25 64 2e 25 64 2e 25 64 5d     to [%d.%d.%d.%d]
     22c:	0d 0a 0d 0a 00                                      .....

00000231 <__c.3699>:
     231:	3e 20 44 4e 53 20 46 61 69 6c 65 64 0d 0a 00        > DNS Failed...

00000240 <__c.3697>:
     240:	3e 20 4d 41 58 5f 44 4f 4d 41 49 4e 5f 4e 41 4d     > MAX_DOMAIN_NAM
     250:	45 20 69 73 20 74 6f 6f 20 73 6d 61 6c 6c 2e 20     E is too small. 
     260:	53 68 6f 75 6c 64 20 62 65 20 72 65 64 65 66 69     Should be redefi
     270:	6e 65 64 20 69 74 2e 0d 0a 00                       ned it....

0000027a <__c.3695>:
     27a:	3e 20 32 6e 64 20 44 4e 53 20 52 65 73 70 6f 6e     > 2nd DNS Respon
     28a:	64 0d 0a 00                                         d...

0000028e <__c.3693>:
     28e:	3e 20 31 73 74 20 44 4e 53 20 52 65 73 70 6f 6e     > 1st DNS Respon
     29e:	64 0d 0a 00                                         d...

000002a2 <__c.3690>:
     2a2:	3e 20 54 61 72 67 65 74 20 44 6f 6d 61 69 6e 20     > Target Domain 
     2b2:	4e 61 6d 65 20 3a 20 25 73 0d 0a 00                 Name : %s...

000002be <__c.3579>:
     2be:	43 6f 6e 6e 65 63 74 69 6f 6e 20 77 69 74 68 20     Connection with 
     2ce:	4d 51 54 54 20 42 72 6f 6b 65 72 20 77 61 73 20     MQTT Broker was 
     2de:	6c 6f 73 74 21 21 0d 0a 52 65 62 6f 6f 74 20 74     lost!!..Reboot t
     2ee:	68 65 20 62 6f 61 72 64 2e 2e 0d 0a 00              he board.....

000002fb <__c.3577>:
     2fb:	20 2d 20 45 52 52 4f 52 0d 0a 00                     - ERROR...

00000306 <__c.3575>:
     306:	20 2d 20 4f 4b 0d 0a 00                              - OK...

0000030e <__c.3572>:
     30e:	3e 3e 4d 51 54 54 20 70 75 62 20 6d 73 67 20 25     >>MQTT pub msg %
     31e:	6c 75 20 00                                         lu .

00000322 <__c.3561>:
     322:	0d 0a 48 6f 64 6e 6f 74 61 20 70 72 6f 6d 65 6e     ..Hodnota promen
     332:	6e 65 20 6d 71 74 74 5f 74 69 6d 65 72 20 6a 65     ne mqtt_timer je
     342:	3a 20 25 64 0d 0a 00                                : %d...

00000349 <__c.3559>:
     349:	0d 0a 48 6f 64 6e 6f 74 61 20 70 72 6f 6d 65 6e     ..Hodnota promen
     359:	6e 65 20 6d 71 74 74 5f 74 69 6d 65 72 20 6a 65     ne mqtt_timer je
     369:	3a 20 25 64 0d 0a 00                                : %d...

00000370 <__c.3549>:
     370:	3c 3c 4d 51 54 54 20 53 75 62 3a 20 5b 25 73 5d     <<MQTT Sub: [%s]
     380:	20 25 73 00                                          %s.

00000384 <__ctors_end>:
     384:	11 24       	eor	r1, r1
     386:	1f be       	out	0x3f, r1	; 63
     388:	cf ef       	ldi	r28, 0xFF	; 255
     38a:	d1 e8       	ldi	r29, 0x81	; 129
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	cd bf       	out	0x3d, r28	; 61
     390:	00 e0       	ldi	r16, 0x00	; 0
     392:	0c bf       	out	0x3c, r16	; 60

00000394 <get_mcusr>:
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
	printf("SM Mask	   : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
}
     394:	84 b7       	in	r24, 0x34	; 52
     396:	80 93 d1 25 	sts	0x25D1, r24	; 0x8025d1 <__bss_end>
     39a:	14 be       	out	0x34, r1	; 52
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	a8 95       	wdr
     3a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3a6:	88 61       	ori	r24, 0x18	; 24
     3a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3ac:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3b0:	0f be       	out	0x3f, r0	; 63

000003b2 <__do_copy_data>:
     3b2:	14 e0       	ldi	r17, 0x04	; 4
     3b4:	a0 e0       	ldi	r26, 0x00	; 0
     3b6:	b2 e0       	ldi	r27, 0x02	; 2
     3b8:	e2 ed       	ldi	r30, 0xD2	; 210
     3ba:	f8 e7       	ldi	r31, 0x78	; 120
     3bc:	00 e0       	ldi	r16, 0x00	; 0
     3be:	0b bf       	out	0x3b, r16	; 59
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <__do_copy_data+0x14>
     3c2:	07 90       	elpm	r0, Z+
     3c4:	0d 92       	st	X+, r0
     3c6:	a2 36       	cpi	r26, 0x62	; 98
     3c8:	b1 07       	cpc	r27, r17
     3ca:	d9 f7       	brne	.-10     	; 0x3c2 <__do_copy_data+0x10>

000003cc <__do_clear_bss>:
     3cc:	25 e2       	ldi	r18, 0x25	; 37
     3ce:	a2 e6       	ldi	r26, 0x62	; 98
     3d0:	b4 e0       	ldi	r27, 0x04	; 4
     3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <.do_clear_bss_start>

000003d4 <.do_clear_bss_loop>:
     3d4:	1d 92       	st	X+, r1

000003d6 <.do_clear_bss_start>:
     3d6:	a1 3d       	cpi	r26, 0xD1	; 209
     3d8:	b2 07       	cpc	r27, r18
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <.do_clear_bss_loop>
     3dc:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <main>
     3e0:	0c 94 67 3c 	jmp	0x78ce	; 0x78ce <_exit>

000003e4 <__bad_interrupt>:
     3e4:	0d ce       	rjmp	.-998    	; 0x0 <__vectors>

000003e6 <close>:
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
}
     3e6:	bf 92       	push	r11
     3e8:	cf 92       	push	r12
     3ea:	df 92       	push	r13
     3ec:	ef 92       	push	r14
     3ee:	ff 92       	push	r15
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	89 30       	cpi	r24, 0x09	; 9
     3fa:	08 f0       	brcs	.+2      	; 0x3fe <close+0x18>
     3fc:	59 c0       	rjmp	.+178    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     3fe:	b8 2e       	mov	r11, r24
     400:	08 2f       	mov	r16, r24
     402:	10 e0       	ldi	r17, 0x00	; 0
     404:	e8 01       	movw	r28, r16
     406:	cc 0f       	add	r28, r28
     408:	dd 1f       	adc	r29, r29
     40a:	cc 0f       	add	r28, r28
     40c:	dd 1f       	adc	r29, r29
     40e:	21 96       	adiw	r28, 0x01	; 1
     410:	cc 0f       	add	r28, r28
     412:	dd 1f       	adc	r29, r29
     414:	cc 0f       	add	r28, r28
     416:	dd 1f       	adc	r29, r29
     418:	cc 0f       	add	r28, r28
     41a:	dd 1f       	adc	r29, r29
     41c:	6e 01       	movw	r12, r28
     41e:	d3 94       	inc	r13
     420:	0d 2c       	mov	r0, r13
     422:	00 0c       	add	r0, r0
     424:	ee 08       	sbc	r14, r14
     426:	ff 08       	sbc	r15, r15
     428:	40 e1       	ldi	r20, 0x10	; 16
     42a:	c7 01       	movw	r24, r14
     42c:	b6 01       	movw	r22, r12
     42e:	d4 d7       	rcall	.+4008   	; 0x13d8 <WIZCHIP_WRITE>
     430:	c7 01       	movw	r24, r14
     432:	b6 01       	movw	r22, r12
     434:	6a d7       	rcall	.+3796   	; 0x130a <WIZCHIP_READ>
     436:	81 11       	cpse	r24, r1
     438:	fb cf       	rjmp	.-10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     43a:	be 01       	movw	r22, r28
     43c:	7e 5f       	subi	r23, 0xFE	; 254
     43e:	07 2e       	mov	r0, r23
     440:	00 0c       	add	r0, r0
     442:	88 0b       	sbc	r24, r24
     444:	99 0b       	sbc	r25, r25
     446:	4f e1       	ldi	r20, 0x1F	; 31
     448:	c7 d7       	rcall	.+3982   	; 0x13d8 <WIZCHIP_WRITE>
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	02 c0       	rjmp	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	ba 94       	dec	r11
     456:	e2 f7       	brpl	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     458:	80 95       	com	r24
     45a:	90 95       	com	r25
     45c:	20 91 7c 04 	lds	r18, 0x047C	; 0x80047c <sock_io_mode>
     460:	30 91 7d 04 	lds	r19, 0x047D	; 0x80047d <sock_io_mode+0x1>
     464:	28 23       	and	r18, r24
     466:	39 23       	and	r19, r25
     468:	30 93 7d 04 	sts	0x047D, r19	; 0x80047d <sock_io_mode+0x1>
     46c:	20 93 7c 04 	sts	0x047C, r18	; 0x80047c <sock_io_mode>
     470:	20 91 7a 04 	lds	r18, 0x047A	; 0x80047a <sock_is_sending>
     474:	30 91 7b 04 	lds	r19, 0x047B	; 0x80047b <sock_is_sending+0x1>
     478:	82 23       	and	r24, r18
     47a:	93 23       	and	r25, r19
     47c:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <sock_is_sending+0x1>
     480:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <sock_is_sending>
     484:	f8 01       	movw	r30, r16
     486:	ee 0f       	add	r30, r30
     488:	ff 1f       	adc	r31, r31
     48a:	e6 59       	subi	r30, 0x96	; 150
     48c:	fb 4f       	sbci	r31, 0xFB	; 251
     48e:	11 82       	std	Z+1, r1	; 0x01
     490:	10 82       	st	Z, r1
     492:	f8 01       	movw	r30, r16
     494:	ee 59       	subi	r30, 0x9E	; 158
     496:	fb 4f       	sbci	r31, 0xFB	; 251
     498:	10 82       	st	Z, r1
     49a:	be 01       	movw	r22, r28
     49c:	7d 5f       	subi	r23, 0xFD	; 253
     49e:	07 2e       	mov	r0, r23
     4a0:	00 0c       	add	r0, r0
     4a2:	88 0b       	sbc	r24, r24
     4a4:	99 0b       	sbc	r25, r25
     4a6:	31 d7       	rcall	.+3682   	; 0x130a <WIZCHIP_READ>
     4a8:	81 11       	cpse	r24, r1
     4aa:	f7 cf       	rjmp	.-18     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	df 90       	pop	r13
     4c0:	cf 90       	pop	r12
     4c2:	bf 90       	pop	r11
     4c4:	08 95       	ret

000004c6 <socket>:
     4c6:	4f 92       	push	r4
     4c8:	5f 92       	push	r5
     4ca:	6f 92       	push	r6
     4cc:	7f 92       	push	r7
     4ce:	af 92       	push	r10
     4d0:	bf 92       	push	r11
     4d2:	cf 92       	push	r12
     4d4:	df 92       	push	r13
     4d6:	ef 92       	push	r14
     4d8:	ff 92       	push	r15
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	00 d0       	rcall	.+0      	; 0x4e4 <socket+0x1e>
     4e4:	1f 92       	push	r1
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	f8 2e       	mov	r15, r24
     4ec:	56 2e       	mov	r5, r22
     4ee:	3a 01       	movw	r6, r20
     4f0:	e2 2e       	mov	r14, r18
     4f2:	28 e0       	ldi	r18, 0x08	; 8
     4f4:	28 17       	cp	r18, r24
     4f6:	08 f4       	brcc	.+2      	; 0x4fa <socket+0x34>
     4f8:	c5 c0       	rjmp	.+394    	; 0x684 <socket+0x1be>
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	68 17       	cp	r22, r24
     4fe:	39 f0       	breq	.+14     	; 0x50e <socket+0x48>
     500:	68 17       	cp	r22, r24
     502:	08 f4       	brcc	.+2      	; 0x506 <socket+0x40>
     504:	c1 c0       	rjmp	.+386    	; 0x688 <socket+0x1c2>
     506:	24 e0       	ldi	r18, 0x04	; 4
     508:	26 17       	cp	r18, r22
     50a:	a8 f4       	brcc	.+42     	; 0x536 <socket+0x70>
     50c:	bd c0       	rjmp	.+378    	; 0x688 <socket+0x1c2>
     50e:	24 e0       	ldi	r18, 0x04	; 4
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	ae 01       	movw	r20, r28
     514:	4f 5f       	subi	r20, 0xFF	; 255
     516:	5f 4f       	sbci	r21, 0xFF	; 255
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	7f e0       	ldi	r23, 0x0F	; 15
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	cd d7       	rcall	.+3994   	; 0x14bc <WIZCHIP_READ_BUF>
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	ab 81       	ldd	r26, Y+3	; 0x03
     528:	bc 81       	ldd	r27, Y+4	; 0x04
     52a:	89 2b       	or	r24, r25
     52c:	8a 2b       	or	r24, r26
     52e:	8b 2b       	or	r24, r27
     530:	11 f4       	brne	.+4      	; 0x536 <socket+0x70>
     532:	8d ef       	ldi	r24, 0xFD	; 253
     534:	b2 c0       	rjmp	.+356    	; 0x69a <socket+0x1d4>
     536:	e2 fc       	sbrc	r14, 2
     538:	a9 c0       	rjmp	.+338    	; 0x68c <socket+0x1c6>
     53a:	ee 20       	and	r14, r14
     53c:	a9 f0       	breq	.+42     	; 0x568 <socket+0xa2>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	58 16       	cp	r5, r24
     542:	21 f0       	breq	.+8      	; 0x54c <socket+0x86>
     544:	22 e0       	ldi	r18, 0x02	; 2
     546:	52 16       	cp	r5, r18
     548:	29 f0       	breq	.+10     	; 0x554 <socket+0x8e>
     54a:	0e c0       	rjmp	.+28     	; 0x568 <socket+0xa2>
     54c:	8e 2d       	mov	r24, r14
     54e:	81 72       	andi	r24, 0x21	; 33
     550:	59 f4       	brne	.+22     	; 0x568 <socket+0xa2>
     552:	9e c0       	rjmp	.+316    	; 0x690 <socket+0x1ca>
     554:	e5 fe       	sbrs	r14, 5
     556:	03 c0       	rjmp	.+6      	; 0x55e <socket+0x98>
     558:	ee 20       	and	r14, r14
     55a:	0c f0       	brlt	.+2      	; 0x55e <socket+0x98>
     55c:	9b c0       	rjmp	.+310    	; 0x694 <socket+0x1ce>
     55e:	e4 fe       	sbrs	r14, 4
     560:	03 c0       	rjmp	.+6      	; 0x568 <socket+0xa2>
     562:	ee 20       	and	r14, r14
     564:	0c f0       	brlt	.+2      	; 0x568 <socket+0xa2>
     566:	98 c0       	rjmp	.+304    	; 0x698 <socket+0x1d2>
     568:	8f 2d       	mov	r24, r15
     56a:	3d df       	rcall	.-390    	; 0x3e6 <close>
     56c:	cf 2c       	mov	r12, r15
     56e:	d1 2c       	mov	r13, r1
     570:	86 01       	movw	r16, r12
     572:	00 0f       	add	r16, r16
     574:	11 1f       	adc	r17, r17
     576:	00 0f       	add	r16, r16
     578:	11 1f       	adc	r17, r17
     57a:	0f 5f       	subi	r16, 0xFF	; 255
     57c:	1f 4f       	sbci	r17, 0xFF	; 255
     57e:	00 0f       	add	r16, r16
     580:	11 1f       	adc	r17, r17
     582:	00 0f       	add	r16, r16
     584:	11 1f       	adc	r17, r17
     586:	00 0f       	add	r16, r16
     588:	11 1f       	adc	r17, r17
     58a:	4e 2d       	mov	r20, r14
     58c:	40 7f       	andi	r20, 0xF0	; 240
     58e:	45 29       	or	r20, r5
     590:	b8 01       	movw	r22, r16
     592:	01 2e       	mov	r0, r17
     594:	00 0c       	add	r0, r0
     596:	88 0b       	sbc	r24, r24
     598:	99 0b       	sbc	r25, r25
     59a:	1e d7       	rcall	.+3644   	; 0x13d8 <WIZCHIP_WRITE>
     59c:	61 14       	cp	r6, r1
     59e:	71 04       	cpc	r7, r1
     5a0:	91 f4       	brne	.+36     	; 0x5c6 <socket+0x100>
     5a2:	60 90 04 02 	lds	r6, 0x0204	; 0x800204 <sock_any_port>
     5a6:	70 90 05 02 	lds	r7, 0x0205	; 0x800205 <sock_any_port+0x1>
     5aa:	c3 01       	movw	r24, r6
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sock_any_port+0x1>
     5b2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sock_any_port>
     5b6:	40 96       	adiw	r24, 0x10	; 16
     5b8:	31 f4       	brne	.+12     	; 0x5c6 <socket+0x100>
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 ec       	ldi	r25, 0xC0	; 192
     5be:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sock_any_port+0x1>
     5c2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sock_any_port>
     5c6:	b8 01       	movw	r22, r16
     5c8:	7c 5f       	subi	r23, 0xFC	; 252
     5ca:	07 2e       	mov	r0, r23
     5cc:	00 0c       	add	r0, r0
     5ce:	88 0b       	sbc	r24, r24
     5d0:	99 0b       	sbc	r25, r25
     5d2:	47 2d       	mov	r20, r7
     5d4:	01 d7       	rcall	.+3586   	; 0x13d8 <WIZCHIP_WRITE>
     5d6:	b8 01       	movw	r22, r16
     5d8:	7b 5f       	subi	r23, 0xFB	; 251
     5da:	07 2e       	mov	r0, r23
     5dc:	00 0c       	add	r0, r0
     5de:	88 0b       	sbc	r24, r24
     5e0:	99 0b       	sbc	r25, r25
     5e2:	46 2d       	mov	r20, r6
     5e4:	f9 d6       	rcall	.+3570   	; 0x13d8 <WIZCHIP_WRITE>
     5e6:	28 01       	movw	r4, r16
     5e8:	53 94       	inc	r5
     5ea:	05 2c       	mov	r0, r5
     5ec:	00 0c       	add	r0, r0
     5ee:	66 08       	sbc	r6, r6
     5f0:	77 08       	sbc	r7, r7
     5f2:	41 e0       	ldi	r20, 0x01	; 1
     5f4:	c3 01       	movw	r24, r6
     5f6:	b2 01       	movw	r22, r4
     5f8:	ef d6       	rcall	.+3550   	; 0x13d8 <WIZCHIP_WRITE>
     5fa:	c3 01       	movw	r24, r6
     5fc:	b2 01       	movw	r22, r4
     5fe:	85 d6       	rcall	.+3338   	; 0x130a <WIZCHIP_READ>
     600:	81 11       	cpse	r24, r1
     602:	fb cf       	rjmp	.-10     	; 0x5fa <socket+0x134>
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0f 2c       	mov	r0, r15
     60a:	02 c0       	rjmp	.+4      	; 0x610 <socket+0x14a>
     60c:	88 0f       	add	r24, r24
     60e:	99 1f       	adc	r25, r25
     610:	0a 94       	dec	r0
     612:	e2 f7       	brpl	.-8      	; 0x60c <socket+0x146>
     614:	80 95       	com	r24
     616:	90 95       	com	r25
     618:	20 91 7c 04 	lds	r18, 0x047C	; 0x80047c <sock_io_mode>
     61c:	30 91 7d 04 	lds	r19, 0x047D	; 0x80047d <sock_io_mode+0x1>
     620:	28 23       	and	r18, r24
     622:	39 23       	and	r19, r25
     624:	e0 fa       	bst	r14, 0
     626:	aa 24       	eor	r10, r10
     628:	a0 f8       	bld	r10, 0
     62a:	b1 2c       	mov	r11, r1
     62c:	0f 2c       	mov	r0, r15
     62e:	02 c0       	rjmp	.+4      	; 0x634 <socket+0x16e>
     630:	aa 0c       	add	r10, r10
     632:	bb 1c       	adc	r11, r11
     634:	0a 94       	dec	r0
     636:	e2 f7       	brpl	.-8      	; 0x630 <socket+0x16a>
     638:	a2 2a       	or	r10, r18
     63a:	b3 2a       	or	r11, r19
     63c:	b0 92 7d 04 	sts	0x047D, r11	; 0x80047d <sock_io_mode+0x1>
     640:	a0 92 7c 04 	sts	0x047C, r10	; 0x80047c <sock_io_mode>
     644:	20 91 7a 04 	lds	r18, 0x047A	; 0x80047a <sock_is_sending>
     648:	30 91 7b 04 	lds	r19, 0x047B	; 0x80047b <sock_is_sending+0x1>
     64c:	82 23       	and	r24, r18
     64e:	93 23       	and	r25, r19
     650:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <sock_is_sending+0x1>
     654:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <sock_is_sending>
     658:	f6 01       	movw	r30, r12
     65a:	ee 0f       	add	r30, r30
     65c:	ff 1f       	adc	r31, r31
     65e:	e6 59       	subi	r30, 0x96	; 150
     660:	fb 4f       	sbci	r31, 0xFB	; 251
     662:	11 82       	std	Z+1, r1	; 0x01
     664:	10 82       	st	Z, r1
     666:	f6 01       	movw	r30, r12
     668:	ee 59       	subi	r30, 0x9E	; 158
     66a:	fb 4f       	sbci	r31, 0xFB	; 251
     66c:	10 82       	st	Z, r1
     66e:	b8 01       	movw	r22, r16
     670:	7d 5f       	subi	r23, 0xFD	; 253
     672:	07 2e       	mov	r0, r23
     674:	00 0c       	add	r0, r0
     676:	88 0b       	sbc	r24, r24
     678:	99 0b       	sbc	r25, r25
     67a:	47 d6       	rcall	.+3214   	; 0x130a <WIZCHIP_READ>
     67c:	88 23       	and	r24, r24
     67e:	b9 f3       	breq	.-18     	; 0x66e <socket+0x1a8>
     680:	8f 2d       	mov	r24, r15
     682:	0b c0       	rjmp	.+22     	; 0x69a <socket+0x1d4>
     684:	8f ef       	ldi	r24, 0xFF	; 255
     686:	09 c0       	rjmp	.+18     	; 0x69a <socket+0x1d4>
     688:	8b ef       	ldi	r24, 0xFB	; 251
     68a:	07 c0       	rjmp	.+14     	; 0x69a <socket+0x1d4>
     68c:	8a ef       	ldi	r24, 0xFA	; 250
     68e:	05 c0       	rjmp	.+10     	; 0x69a <socket+0x1d4>
     690:	8a ef       	ldi	r24, 0xFA	; 250
     692:	03 c0       	rjmp	.+6      	; 0x69a <socket+0x1d4>
     694:	8a ef       	ldi	r24, 0xFA	; 250
     696:	01 c0       	rjmp	.+2      	; 0x69a <socket+0x1d4>
     698:	8a ef       	ldi	r24, 0xFA	; 250
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	df 90       	pop	r13
     6b0:	cf 90       	pop	r12
     6b2:	bf 90       	pop	r11
     6b4:	af 90       	pop	r10
     6b6:	7f 90       	pop	r7
     6b8:	6f 90       	pop	r6
     6ba:	5f 90       	pop	r5
     6bc:	4f 90       	pop	r4
     6be:	08 95       	ret

000006c0 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
     6c0:	8f 92       	push	r8
     6c2:	9f 92       	push	r9
     6c4:	af 92       	push	r10
     6c6:	bf 92       	push	r11
     6c8:	cf 92       	push	r12
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
   CHECK_SOCKNUM();
     6d6:	89 30       	cpi	r24, 0x09	; 9
     6d8:	08 f0       	brcs	.+2      	; 0x6dc <connect+0x1c>
     6da:	ac c0       	rjmp	.+344    	; 0x834 <connect+0x174>
     6dc:	6a 01       	movw	r12, r20
     6de:	7b 01       	movw	r14, r22
     6e0:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     6e2:	c8 2f       	mov	r28, r24
     6e4:	d0 e0       	ldi	r29, 0x00	; 0
     6e6:	cc 0f       	add	r28, r28
     6e8:	dd 1f       	adc	r29, r29
     6ea:	cc 0f       	add	r28, r28
     6ec:	dd 1f       	adc	r29, r29
     6ee:	21 96       	adiw	r28, 0x01	; 1
     6f0:	cc 0f       	add	r28, r28
     6f2:	dd 1f       	adc	r29, r29
     6f4:	cc 0f       	add	r28, r28
     6f6:	dd 1f       	adc	r29, r29
     6f8:	cc 0f       	add	r28, r28
     6fa:	dd 1f       	adc	r29, r29
     6fc:	be 01       	movw	r22, r28
     6fe:	0d 2e       	mov	r0, r29
     700:	00 0c       	add	r0, r0
     702:	88 0b       	sbc	r24, r24
     704:	99 0b       	sbc	r25, r25
     706:	01 d6       	rcall	.+3074   	; 0x130a <WIZCHIP_READ>
     708:	8f 70       	andi	r24, 0x0F	; 15
     70a:	81 30       	cpi	r24, 0x01	; 1
     70c:	09 f0       	breq	.+2      	; 0x710 <connect+0x50>
     70e:	94 c0       	rjmp	.+296    	; 0x838 <connect+0x178>
   CHECK_SOCKINIT();
     710:	4e 01       	movw	r8, r28
     712:	8d ef       	ldi	r24, 0xFD	; 253
     714:	98 1a       	sub	r9, r24
     716:	09 2c       	mov	r0, r9
     718:	00 0c       	add	r0, r0
     71a:	aa 08       	sbc	r10, r10
     71c:	bb 08       	sbc	r11, r11
     71e:	c5 01       	movw	r24, r10
     720:	b4 01       	movw	r22, r8
     722:	f3 d5       	rcall	.+3046   	; 0x130a <WIZCHIP_READ>
     724:	83 31       	cpi	r24, 0x13	; 19
     726:	09 f0       	breq	.+2      	; 0x72a <connect+0x6a>
     728:	89 c0       	rjmp	.+274    	; 0x83c <connect+0x17c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
     72a:	f7 01       	movw	r30, r14
     72c:	40 81       	ld	r20, Z
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	70 e0       	ldi	r23, 0x00	; 0
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
     734:	76 2f       	mov	r23, r22
     736:	65 2f       	mov	r22, r21
     738:	54 2f       	mov	r21, r20
     73a:	44 27       	eor	r20, r20
     73c:	81 81       	ldd	r24, Z+1	; 0x01
     73e:	48 0f       	add	r20, r24
     740:	51 1d       	adc	r21, r1
     742:	61 1d       	adc	r22, r1
     744:	71 1d       	adc	r23, r1
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
     746:	76 2f       	mov	r23, r22
     748:	65 2f       	mov	r22, r21
     74a:	54 2f       	mov	r21, r20
     74c:	44 27       	eor	r20, r20
     74e:	82 81       	ldd	r24, Z+2	; 0x02
     750:	48 0f       	add	r20, r24
     752:	51 1d       	adc	r21, r1
     754:	61 1d       	adc	r22, r1
     756:	71 1d       	adc	r23, r1
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
     758:	76 2f       	mov	r23, r22
     75a:	65 2f       	mov	r22, r21
     75c:	54 2f       	mov	r21, r20
     75e:	44 27       	eor	r20, r20
     760:	83 81       	ldd	r24, Z+3	; 0x03
     762:	48 0f       	add	r20, r24
     764:	51 1d       	adc	r21, r1
     766:	61 1d       	adc	r22, r1
     768:	71 1d       	adc	r23, r1
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
     76a:	41 50       	subi	r20, 0x01	; 1
     76c:	51 09       	sbc	r21, r1
     76e:	61 09       	sbc	r22, r1
     770:	71 09       	sbc	r23, r1
     772:	4e 3f       	cpi	r20, 0xFE	; 254
     774:	5f 4f       	sbci	r21, 0xFF	; 255
     776:	6f 4f       	sbci	r22, 0xFF	; 255
     778:	7f 4f       	sbci	r23, 0xFF	; 255
     77a:	08 f0       	brcs	.+2      	; 0x77e <connect+0xbe>
     77c:	61 c0       	rjmp	.+194    	; 0x840 <connect+0x180>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
     77e:	c1 14       	cp	r12, r1
     780:	d1 04       	cpc	r13, r1
     782:	09 f4       	brne	.+2      	; 0x786 <connect+0xc6>
     784:	5f c0       	rjmp	.+190    	; 0x844 <connect+0x184>
	setSn_DIPR(sn,addr);
     786:	be 01       	movw	r22, r28
     788:	74 5f       	subi	r23, 0xF4	; 244
     78a:	07 2e       	mov	r0, r23
     78c:	00 0c       	add	r0, r0
     78e:	88 0b       	sbc	r24, r24
     790:	99 0b       	sbc	r25, r25
     792:	24 e0       	ldi	r18, 0x04	; 4
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	a7 01       	movw	r20, r14
     798:	13 d7       	rcall	.+3622   	; 0x15c0 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
     79a:	be 01       	movw	r22, r28
     79c:	70 5f       	subi	r23, 0xF0	; 240
     79e:	07 2e       	mov	r0, r23
     7a0:	00 0c       	add	r0, r0
     7a2:	88 0b       	sbc	r24, r24
     7a4:	99 0b       	sbc	r25, r25
     7a6:	4d 2d       	mov	r20, r13
     7a8:	17 d6       	rcall	.+3118   	; 0x13d8 <WIZCHIP_WRITE>
     7aa:	be 01       	movw	r22, r28
     7ac:	7f 5e       	subi	r23, 0xEF	; 239
     7ae:	07 2e       	mov	r0, r23
     7b0:	00 0c       	add	r0, r0
     7b2:	88 0b       	sbc	r24, r24
     7b4:	99 0b       	sbc	r25, r25
     7b6:	4c 2d       	mov	r20, r12
     7b8:	0f d6       	rcall	.+3102   	; 0x13d8 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
     7ba:	6e 01       	movw	r12, r28
     7bc:	d3 94       	inc	r13
     7be:	0d 2c       	mov	r0, r13
     7c0:	00 0c       	add	r0, r0
     7c2:	ee 08       	sbc	r14, r14
     7c4:	ff 08       	sbc	r15, r15
     7c6:	44 e0       	ldi	r20, 0x04	; 4
     7c8:	c7 01       	movw	r24, r14
     7ca:	b6 01       	movw	r22, r12
   while(getSn_CR(sn));
     7cc:	05 d6       	rcall	.+3082   	; 0x13d8 <WIZCHIP_WRITE>
     7ce:	c7 01       	movw	r24, r14
     7d0:	b6 01       	movw	r22, r12
     7d2:	9b d5       	rcall	.+2870   	; 0x130a <WIZCHIP_READ>
     7d4:	81 11       	cpse	r24, r1
     7d6:	fb cf       	rjmp	.-10     	; 0x7ce <connect+0x10e>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <connect+0x122>
     7de:	88 0f       	add	r24, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	1a 95       	dec	r17
     7e4:	e2 f7       	brpl	.-8      	; 0x7de <connect+0x11e>
     7e6:	20 91 7c 04 	lds	r18, 0x047C	; 0x80047c <sock_io_mode>
     7ea:	30 91 7d 04 	lds	r19, 0x047D	; 0x80047d <sock_io_mode+0x1>
     7ee:	82 23       	and	r24, r18
     7f0:	93 23       	and	r25, r19
     7f2:	89 2b       	or	r24, r25
     7f4:	c1 f0       	breq	.+48     	; 0x826 <connect+0x166>
     7f6:	28 c0       	rjmp	.+80     	; 0x848 <connect+0x188>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
     7f8:	6e 01       	movw	r12, r28
     7fa:	ee ef       	ldi	r30, 0xFE	; 254
     7fc:	de 1a       	sub	r13, r30
     7fe:	0d 2c       	mov	r0, r13
     800:	00 0c       	add	r0, r0
     802:	ee 08       	sbc	r14, r14
     804:	ff 08       	sbc	r15, r15
     806:	c7 01       	movw	r24, r14
     808:	b6 01       	movw	r22, r12
     80a:	7f d5       	rcall	.+2814   	; 0x130a <WIZCHIP_READ>
     80c:	83 ff       	sbrs	r24, 3
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
     80e:	06 c0       	rjmp	.+12     	; 0x81c <connect+0x15c>
     810:	48 e0       	ldi	r20, 0x08	; 8
     812:	c7 01       	movw	r24, r14
     814:	b6 01       	movw	r22, r12
            return SOCKERR_TIMEOUT;
     816:	e0 d5       	rcall	.+3008   	; 0x13d8 <WIZCHIP_WRITE>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
     818:	83 ef       	ldi	r24, 0xF3	; 243
     81a:	19 c0       	rjmp	.+50     	; 0x84e <connect+0x18e>
     81c:	c5 01       	movw	r24, r10
     81e:	b4 01       	movw	r22, r8
     820:	74 d5       	rcall	.+2792   	; 0x130a <WIZCHIP_READ>
     822:	88 23       	and	r24, r24
	setSn_DIPR(sn,addr);
	setSn_DPORT(sn,port);
	setSn_CR(sn,Sn_CR_CONNECT);
   while(getSn_CR(sn));
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
     824:	99 f0       	breq	.+38     	; 0x84c <connect+0x18c>
     826:	c5 01       	movw	r24, r10
     828:	b4 01       	movw	r22, r8
     82a:	6f d5       	rcall	.+2782   	; 0x130a <WIZCHIP_READ>
     82c:	87 31       	cpi	r24, 0x17	; 23
     82e:	21 f7       	brne	.-56     	; 0x7f8 <connect+0x138>
		{
			return SOCKERR_SOCKCLOSED;
		}
	}
   
   return SOCK_OK;
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	0d c0       	rjmp	.+26     	; 0x84e <connect+0x18e>
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
   CHECK_SOCKNUM();
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	0b c0       	rjmp	.+22     	; 0x84e <connect+0x18e>
   CHECK_SOCKMODE(Sn_MR_TCP);
     838:	8b ef       	ldi	r24, 0xFB	; 251
     83a:	09 c0       	rjmp	.+18     	; 0x84e <connect+0x18e>
   CHECK_SOCKINIT();
     83c:	8d ef       	ldi	r24, 0xFD	; 253
     83e:	07 c0       	rjmp	.+14     	; 0x84e <connect+0x18e>
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
     840:	84 ef       	ldi	r24, 0xF4	; 244
     842:	05 c0       	rjmp	.+10     	; 0x84e <connect+0x18e>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
     844:	85 ef       	ldi	r24, 0xF5	; 245
     846:	03 c0       	rjmp	.+6      	; 0x84e <connect+0x18e>
	setSn_DIPR(sn,addr);
	setSn_DPORT(sn,port);
	setSn_CR(sn,Sn_CR_CONNECT);
   while(getSn_CR(sn));
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	01 c0       	rjmp	.+2      	; 0x84e <connect+0x18e>
            return SOCKERR_TIMEOUT;
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
		{
			return SOCKERR_SOCKCLOSED;
     84c:	8c ef       	ldi	r24, 0xFC	; 252
		}
	}
   
   return SOCK_OK;
}
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	ff 90       	pop	r15
     856:	ef 90       	pop	r14
     858:	df 90       	pop	r13
     85a:	cf 90       	pop	r12
     85c:	bf 90       	pop	r11
     85e:	af 90       	pop	r10
     860:	9f 90       	pop	r9
     862:	8f 90       	pop	r8
     864:	08 95       	ret

00000866 <disconnect>:

int8_t disconnect(uint8_t sn)
{
     866:	cf 92       	push	r12
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
   CHECK_SOCKNUM();
     874:	89 30       	cpi	r24, 0x09	; 9
     876:	08 f0       	brcs	.+2      	; 0x87a <disconnect+0x14>
     878:	5d c0       	rjmp	.+186    	; 0x934 <disconnect+0xce>
     87a:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     87c:	c8 2f       	mov	r28, r24
     87e:	d0 e0       	ldi	r29, 0x00	; 0
     880:	cc 0f       	add	r28, r28
     882:	dd 1f       	adc	r29, r29
     884:	cc 0f       	add	r28, r28
     886:	dd 1f       	adc	r29, r29
     888:	21 96       	adiw	r28, 0x01	; 1
     88a:	cc 0f       	add	r28, r28
     88c:	dd 1f       	adc	r29, r29
     88e:	cc 0f       	add	r28, r28
     890:	dd 1f       	adc	r29, r29
     892:	cc 0f       	add	r28, r28
     894:	dd 1f       	adc	r29, r29
     896:	be 01       	movw	r22, r28
     898:	0d 2e       	mov	r0, r29
     89a:	00 0c       	add	r0, r0
     89c:	88 0b       	sbc	r24, r24
     89e:	99 0b       	sbc	r25, r25
     8a0:	34 d5       	rcall	.+2664   	; 0x130a <WIZCHIP_READ>
     8a2:	8f 70       	andi	r24, 0x0F	; 15
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	09 f0       	breq	.+2      	; 0x8aa <disconnect+0x44>
     8a8:	47 c0       	rjmp	.+142    	; 0x938 <disconnect+0xd2>
	setSn_CR(sn,Sn_CR_DISCON);
     8aa:	6e 01       	movw	r12, r28
     8ac:	d3 94       	inc	r13
     8ae:	0d 2c       	mov	r0, r13
     8b0:	00 0c       	add	r0, r0
     8b2:	ee 08       	sbc	r14, r14
     8b4:	ff 08       	sbc	r15, r15
     8b6:	48 e0       	ldi	r20, 0x08	; 8
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	8d d5       	rcall	.+2842   	; 0x13d8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
     8be:	c7 01       	movw	r24, r14
     8c0:	b6 01       	movw	r22, r12
     8c2:	23 d5       	rcall	.+2630   	; 0x130a <WIZCHIP_READ>
     8c4:	81 11       	cpse	r24, r1
     8c6:	fb cf       	rjmp	.-10     	; 0x8be <disconnect+0x58>
	sock_is_sending &= ~(1<<sn);
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	01 2e       	mov	r0, r17
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <disconnect+0x6e>
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	0a 94       	dec	r0
     8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <disconnect+0x6a>
     8d8:	9c 01       	movw	r18, r24
     8da:	20 95       	com	r18
     8dc:	30 95       	com	r19
     8de:	40 91 7a 04 	lds	r20, 0x047A	; 0x80047a <sock_is_sending>
     8e2:	50 91 7b 04 	lds	r21, 0x047B	; 0x80047b <sock_is_sending+0x1>
     8e6:	24 23       	and	r18, r20
     8e8:	35 23       	and	r19, r21
     8ea:	30 93 7b 04 	sts	0x047B, r19	; 0x80047b <sock_is_sending+0x1>
     8ee:	20 93 7a 04 	sts	0x047A, r18	; 0x80047a <sock_is_sending>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     8f2:	20 91 7c 04 	lds	r18, 0x047C	; 0x80047c <sock_io_mode>
     8f6:	30 91 7d 04 	lds	r19, 0x047D	; 0x80047d <sock_io_mode+0x1>
     8fa:	82 23       	and	r24, r18
     8fc:	93 23       	and	r25, r19
     8fe:	89 2b       	or	r24, r25
     900:	71 f0       	breq	.+28     	; 0x91e <disconnect+0xb8>
     902:	1c c0       	rjmp	.+56     	; 0x93c <disconnect+0xd6>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
     904:	be 01       	movw	r22, r28
     906:	7e 5f       	subi	r23, 0xFE	; 254
     908:	07 2e       	mov	r0, r23
     90a:	00 0c       	add	r0, r0
     90c:	88 0b       	sbc	r24, r24
     90e:	99 0b       	sbc	r25, r25
     910:	fc d4       	rcall	.+2552   	; 0x130a <WIZCHIP_READ>
     912:	83 ff       	sbrs	r24, 3
	   {
	      close(sn);
     914:	04 c0       	rjmp	.+8      	; 0x91e <disconnect+0xb8>
     916:	81 2f       	mov	r24, r17
     918:	66 dd       	rcall	.-1332   	; 0x3e6 <close>
	      return SOCKERR_TIMEOUT;
     91a:	83 ef       	ldi	r24, 0xF3	; 243
     91c:	10 c0       	rjmp	.+32     	; 0x93e <disconnect+0xd8>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
	while(getSn_SR(sn) != SOCK_CLOSED)
     91e:	be 01       	movw	r22, r28
     920:	7d 5f       	subi	r23, 0xFD	; 253
     922:	07 2e       	mov	r0, r23
     924:	00 0c       	add	r0, r0
     926:	88 0b       	sbc	r24, r24
     928:	99 0b       	sbc	r25, r25
     92a:	ef d4       	rcall	.+2526   	; 0x130a <WIZCHIP_READ>
     92c:	81 11       	cpse	r24, r1
     92e:	ea cf       	rjmp	.-44     	; 0x904 <disconnect+0x9e>
	   {
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	05 c0       	rjmp	.+10     	; 0x93e <disconnect+0xd8>
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	03 c0       	rjmp	.+6      	; 0x93e <disconnect+0xd8>
   CHECK_SOCKMODE(Sn_MR_TCP);
     938:	8b ef       	ldi	r24, 0xFB	; 251
     93a:	01 c0       	rjmp	.+2      	; 0x93e <disconnect+0xd8>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     93c:	80 e0       	ldi	r24, 0x00	; 0
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	ff 90       	pop	r15
     946:	ef 90       	pop	r14
     948:	df 90       	pop	r13
     94a:	cf 90       	pop	r12
     94c:	08 95       	ret

0000094e <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
     94e:	2f 92       	push	r2
     950:	3f 92       	push	r3
     952:	4f 92       	push	r4
     954:	5f 92       	push	r5
     956:	6f 92       	push	r6
     958:	7f 92       	push	r7
     95a:	8f 92       	push	r8
     95c:	9f 92       	push	r9
     95e:	af 92       	push	r10
     960:	bf 92       	push	r11
     962:	cf 92       	push	r12
     964:	df 92       	push	r13
     966:	ef 92       	push	r14
     968:	ff 92       	push	r15
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	00 d0       	rcall	.+0      	; 0x974 <send+0x26>
     974:	00 d0       	rcall	.+0      	; 0x976 <send+0x28>
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
     97a:	89 30       	cpi	r24, 0x09	; 9
     97c:	08 f0       	brcs	.+2      	; 0x980 <send+0x32>
     97e:	c7 c0       	rjmp	.+398    	; 0xb0e <send+0x1c0>
     980:	5e 83       	std	Y+6, r21	; 0x06
     982:	4d 83       	std	Y+5, r20	; 0x05
     984:	1b 01       	movw	r2, r22
     986:	f8 2e       	mov	r15, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     988:	c8 2e       	mov	r12, r24
     98a:	d1 2c       	mov	r13, r1
     98c:	cc 0c       	add	r12, r12
     98e:	dd 1c       	adc	r13, r13
     990:	cc 0c       	add	r12, r12
     992:	dd 1c       	adc	r13, r13
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	c2 1a       	sub	r12, r18
     998:	d2 0a       	sbc	r13, r18
     99a:	cc 0c       	add	r12, r12
     99c:	dd 1c       	adc	r13, r13
     99e:	cc 0c       	add	r12, r12
     9a0:	dd 1c       	adc	r13, r13
     9a2:	cc 0c       	add	r12, r12
     9a4:	dd 1c       	adc	r13, r13
     9a6:	b6 01       	movw	r22, r12
     9a8:	0d 2c       	mov	r0, r13
     9aa:	00 0c       	add	r0, r0
     9ac:	88 0b       	sbc	r24, r24
     9ae:	99 0b       	sbc	r25, r25
     9b0:	ac d4       	rcall	.+2392   	; 0x130a <WIZCHIP_READ>
     9b2:	8f 70       	andi	r24, 0x0F	; 15
     9b4:	81 30       	cpi	r24, 0x01	; 1
     9b6:	09 f0       	breq	.+2      	; 0x9ba <send+0x6c>
     9b8:	ae c0       	rjmp	.+348    	; 0xb16 <send+0x1c8>
   CHECK_SOCKDATA();
     9ba:	4d 81       	ldd	r20, Y+5	; 0x05
     9bc:	5e 81       	ldd	r21, Y+6	; 0x06
     9be:	45 2b       	or	r20, r21
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <send+0x76>
     9c2:	ae c0       	rjmp	.+348    	; 0xb20 <send+0x1d2>
   tmp = getSn_SR(sn);
     9c4:	26 01       	movw	r4, r12
     9c6:	5d ef       	ldi	r21, 0xFD	; 253
     9c8:	55 1a       	sub	r5, r21
     9ca:	05 2c       	mov	r0, r5
     9cc:	00 0c       	add	r0, r0
     9ce:	66 08       	sbc	r6, r6
     9d0:	77 08       	sbc	r7, r7
     9d2:	c3 01       	movw	r24, r6
     9d4:	b2 01       	movw	r22, r4
     9d6:	99 d4       	rcall	.+2354   	; 0x130a <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
     9d8:	87 31       	cpi	r24, 0x17	; 23
     9da:	19 f0       	breq	.+6      	; 0x9e2 <send+0x94>
     9dc:	8c 31       	cpi	r24, 0x1C	; 28
     9de:	09 f0       	breq	.+2      	; 0x9e2 <send+0x94>
     9e0:	a4 c0       	rjmp	.+328    	; 0xb2a <send+0x1dc>
   if( sock_is_sending & (1<<sn) )
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	4c 01       	movw	r8, r24
     9e8:	0f 2c       	mov	r0, r15
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <send+0xa2>
     9ec:	88 0c       	add	r8, r8
     9ee:	99 1c       	adc	r9, r9
     9f0:	0a 94       	dec	r0
     9f2:	e2 f7       	brpl	.-8      	; 0x9ec <send+0x9e>
     9f4:	54 01       	movw	r10, r8
     9f6:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <sock_is_sending>
     9fa:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <sock_is_sending+0x1>
     9fe:	88 21       	and	r24, r8
     a00:	99 21       	and	r25, r9
     a02:	89 2b       	or	r24, r25
     a04:	61 f1       	breq	.+88     	; 0xa5e <send+0x110>
   {
      tmp = getSn_IR(sn);
     a06:	c6 01       	movw	r24, r12
     a08:	9e 5f       	subi	r25, 0xFE	; 254
     a0a:	9c 01       	movw	r18, r24
     a0c:	99 0f       	add	r25, r25
     a0e:	44 0b       	sbc	r20, r20
     a10:	55 0b       	sbc	r21, r21
     a12:	29 83       	std	Y+1, r18	; 0x01
     a14:	3a 83       	std	Y+2, r19	; 0x02
     a16:	4b 83       	std	Y+3, r20	; 0x03
     a18:	5c 83       	std	Y+4, r21	; 0x04
     a1a:	ca 01       	movw	r24, r20
     a1c:	b9 01       	movw	r22, r18
     a1e:	75 d4       	rcall	.+2282   	; 0x130a <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
     a20:	84 ff       	sbrs	r24, 4
     a22:	14 c0       	rjmp	.+40     	; 0xa4c <send+0xfe>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
     a24:	40 e1       	ldi	r20, 0x10	; 16
     a26:	69 81       	ldd	r22, Y+1	; 0x01
     a28:	7a 81       	ldd	r23, Y+2	; 0x02
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	9c 81       	ldd	r25, Y+4	; 0x04
     a2e:	d4 d4       	rcall	.+2472   	; 0x13d8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
     a30:	20 91 7a 04 	lds	r18, 0x047A	; 0x80047a <sock_is_sending>
     a34:	30 91 7b 04 	lds	r19, 0x047B	; 0x80047b <sock_is_sending+0x1>
     a38:	c4 01       	movw	r24, r8
     a3a:	80 95       	com	r24
     a3c:	90 95       	com	r25
     a3e:	82 23       	and	r24, r18
     a40:	93 23       	and	r25, r19
     a42:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <sock_is_sending+0x1>
     a46:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <sock_is_sending>
      }
      else if(tmp & Sn_IR_TIMEOUT)
     a4a:	09 c0       	rjmp	.+18     	; 0xa5e <send+0x110>
     a4c:	83 ff       	sbrs	r24, 3
      {
         close(sn);
     a4e:	72 c0       	rjmp	.+228    	; 0xb34 <send+0x1e6>
     a50:	8f 2d       	mov	r24, r15
     a52:	c9 dc       	rcall	.-1646   	; 0x3e6 <close>
         return SOCKERR_TIMEOUT;
     a54:	63 ef       	ldi	r22, 0xF3	; 243
     a56:	7f ef       	ldi	r23, 0xFF	; 255
     a58:	8f ef       	ldi	r24, 0xFF	; 255
     a5a:	9f ef       	ldi	r25, 0xFF	; 255
     a5c:	72 c0       	rjmp	.+228    	; 0xb42 <send+0x1f4>
      }
      else return SOCK_BUSY;
   }
   freesize = getSn_TxMAX(sn);
     a5e:	b6 01       	movw	r22, r12
     a60:	71 5e       	subi	r23, 0xE1	; 225
     a62:	07 2e       	mov	r0, r23
     a64:	00 0c       	add	r0, r0
     a66:	88 0b       	sbc	r24, r24
     a68:	99 0b       	sbc	r25, r25
     a6a:	4f d4       	rcall	.+2206   	; 0x130a <WIZCHIP_READ>
     a6c:	08 2f       	mov	r16, r24
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	10 2f       	mov	r17, r16
     a72:	00 27       	eor	r16, r16
     a74:	11 0f       	add	r17, r17
     a76:	11 0f       	add	r17, r17
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
     a78:	4d 81       	ldd	r20, Y+5	; 0x05
     a7a:	5e 81       	ldd	r21, Y+6	; 0x06
     a7c:	04 17       	cp	r16, r20
     a7e:	15 07       	cpc	r17, r21
     a80:	08 f0       	brcs	.+2      	; 0xa84 <send+0x136>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
     a82:	8a 01       	movw	r16, r20
     a84:	8f 2d       	mov	r24, r15
     a86:	23 d6       	rcall	.+3142   	; 0x16ce <getSn_TX_FSR>
     a88:	9a 83       	std	Y+2, r25	; 0x02
      tmp = getSn_SR(sn);
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	c3 01       	movw	r24, r6
     a8e:	b2 01       	movw	r22, r4
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
     a90:	3c d4       	rcall	.+2168   	; 0x130a <WIZCHIP_READ>
     a92:	87 31       	cpi	r24, 0x17	; 23
     a94:	49 f0       	breq	.+18     	; 0xaa8 <send+0x15a>
     a96:	8c 31       	cpi	r24, 0x1C	; 28
      {
         close(sn);
     a98:	39 f0       	breq	.+14     	; 0xaa8 <send+0x15a>
     a9a:	8f 2d       	mov	r24, r15
     a9c:	a4 dc       	rcall	.-1720   	; 0x3e6 <close>
         return SOCKERR_SOCKSTATUS;
     a9e:	69 ef       	ldi	r22, 0xF9	; 249
     aa0:	7f ef       	ldi	r23, 0xFF	; 255
     aa2:	8f ef       	ldi	r24, 0xFF	; 255
     aa4:	9f ef       	ldi	r25, 0xFF	; 255
     aa6:	4d c0       	rjmp	.+154    	; 0xb42 <send+0x1f4>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     aa8:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <sock_io_mode>
     aac:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <sock_io_mode+0x1>
     ab0:	8a 21       	and	r24, r10
     ab2:	9b 21       	and	r25, r11
     ab4:	89 2b       	or	r24, r25
     ab6:	31 f0       	breq	.+12     	; 0xac4 <send+0x176>
     ab8:	89 81       	ldd	r24, Y+1	; 0x01
     aba:	9a 81       	ldd	r25, Y+2	; 0x02
     abc:	80 17       	cp	r24, r16
     abe:	91 07       	cpc	r25, r17
     ac0:	08 f4       	brcc	.+2      	; 0xac4 <send+0x176>
      if(len <= freesize) break;
     ac2:	3c c0       	rjmp	.+120    	; 0xb3c <send+0x1ee>
     ac4:	29 81       	ldd	r18, Y+1	; 0x01
     ac6:	3a 81       	ldd	r19, Y+2	; 0x02
     ac8:	20 17       	cp	r18, r16
     aca:	31 07       	cpc	r19, r17
   }
   wiz_send_data(sn, buf, len);
     acc:	d8 f2       	brcs	.-74     	; 0xa84 <send+0x136>
     ace:	a8 01       	movw	r20, r16
     ad0:	b1 01       	movw	r22, r2
     ad2:	8f 2d       	mov	r24, r15

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
     ad4:	ac d6       	rcall	.+3416   	; 0x182e <wiz_send_data>
     ad6:	d3 94       	inc	r13
     ad8:	0d 2c       	mov	r0, r13
     ada:	00 0c       	add	r0, r0
     adc:	ee 08       	sbc	r14, r14
     ade:	ff 08       	sbc	r15, r15
     ae0:	40 e2       	ldi	r20, 0x20	; 32
     ae2:	c7 01       	movw	r24, r14
     ae4:	b6 01       	movw	r22, r12
   /* wait to process the command... */
   while(getSn_CR(sn));
     ae6:	78 d4       	rcall	.+2288   	; 0x13d8 <WIZCHIP_WRITE>
     ae8:	c7 01       	movw	r24, r14
     aea:	b6 01       	movw	r22, r12
     aec:	0e d4       	rcall	.+2076   	; 0x130a <WIZCHIP_READ>
     aee:	81 11       	cpse	r24, r1
     af0:	fb cf       	rjmp	.-10     	; 0xae8 <send+0x19a>
   sock_is_sending |= (1 << sn);
     af2:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <sock_is_sending>
     af6:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <sock_is_sending+0x1>
     afa:	88 2a       	or	r8, r24
     afc:	99 2a       	or	r9, r25
     afe:	90 92 7b 04 	sts	0x047B, r9	; 0x80047b <sock_is_sending+0x1>
     b02:	80 92 7a 04 	sts	0x047A, r8	; 0x80047a <sock_is_sending>
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
     b06:	b8 01       	movw	r22, r16
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	1a c0       	rjmp	.+52     	; 0xb42 <send+0x1f4>
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
     b0e:	6f ef       	ldi	r22, 0xFF	; 255
     b10:	7f ef       	ldi	r23, 0xFF	; 255
     b12:	cb 01       	movw	r24, r22
     b14:	16 c0       	rjmp	.+44     	; 0xb42 <send+0x1f4>
   CHECK_SOCKMODE(Sn_MR_TCP);
     b16:	6b ef       	ldi	r22, 0xFB	; 251
     b18:	7f ef       	ldi	r23, 0xFF	; 255
     b1a:	8f ef       	ldi	r24, 0xFF	; 255
     b1c:	9f ef       	ldi	r25, 0xFF	; 255
     b1e:	11 c0       	rjmp	.+34     	; 0xb42 <send+0x1f4>
   CHECK_SOCKDATA();
     b20:	62 ef       	ldi	r22, 0xF2	; 242
     b22:	7f ef       	ldi	r23, 0xFF	; 255
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	0c c0       	rjmp	.+24     	; 0xb42 <send+0x1f4>
   tmp = getSn_SR(sn);
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
     b2a:	69 ef       	ldi	r22, 0xF9	; 249
     b2c:	7f ef       	ldi	r23, 0xFF	; 255
     b2e:	8f ef       	ldi	r24, 0xFF	; 255
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	07 c0       	rjmp	.+14     	; 0xb42 <send+0x1f4>
      else if(tmp & Sn_IR_TIMEOUT)
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	cb 01       	movw	r24, r22
     b3a:	03 c0       	rjmp	.+6      	; 0xb42 <send+0x1f4>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
      {
         close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     b42:	26 96       	adiw	r28, 0x06	; 6
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	cf 90       	pop	r12
     b5e:	bf 90       	pop	r11
     b60:	af 90       	pop	r10
     b62:	9f 90       	pop	r9
     b64:	8f 90       	pop	r8
     b66:	7f 90       	pop	r7
     b68:	6f 90       	pop	r6
     b6a:	5f 90       	pop	r5
     b6c:	4f 90       	pop	r4
     b6e:	3f 90       	pop	r3
     b70:	2f 90       	pop	r2
     b72:	08 95       	ret

00000b74 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
     b74:	7f 92       	push	r7
     b76:	8f 92       	push	r8
     b78:	9f 92       	push	r9
     b7a:	af 92       	push	r10
     b7c:	bf 92       	push	r11
     b7e:	cf 92       	push	r12
     b80:	df 92       	push	r13
     b82:	ef 92       	push	r14
     b84:	ff 92       	push	r15
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
     b8e:	89 30       	cpi	r24, 0x09	; 9
     b90:	08 f0       	brcs	.+2      	; 0xb94 <recv+0x20>
     b92:	90 c0       	rjmp	.+288    	; 0xcb4 <recv+0x140>
     b94:	ea 01       	movw	r28, r20
     b96:	4b 01       	movw	r8, r22
     b98:	78 2e       	mov	r7, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
     b9a:	c8 2e       	mov	r12, r24
     b9c:	d1 2c       	mov	r13, r1
     b9e:	86 01       	movw	r16, r12
     ba0:	00 0f       	add	r16, r16
     ba2:	11 1f       	adc	r17, r17
     ba4:	00 0f       	add	r16, r16
     ba6:	11 1f       	adc	r17, r17
     ba8:	0f 5f       	subi	r16, 0xFF	; 255
     baa:	1f 4f       	sbci	r17, 0xFF	; 255
     bac:	00 0f       	add	r16, r16
     bae:	11 1f       	adc	r17, r17
     bb0:	00 0f       	add	r16, r16
     bb2:	11 1f       	adc	r17, r17
     bb4:	00 0f       	add	r16, r16
     bb6:	11 1f       	adc	r17, r17
     bb8:	b8 01       	movw	r22, r16
     bba:	01 2e       	mov	r0, r17
     bbc:	00 0c       	add	r0, r0
     bbe:	88 0b       	sbc	r24, r24
     bc0:	99 0b       	sbc	r25, r25
     bc2:	a3 d3       	rcall	.+1862   	; 0x130a <WIZCHIP_READ>
     bc4:	8f 70       	andi	r24, 0x0F	; 15
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	09 f0       	breq	.+2      	; 0xbcc <recv+0x58>
     bca:	78 c0       	rjmp	.+240    	; 0xcbc <recv+0x148>
   CHECK_SOCKDATA();
     bcc:	20 97       	sbiw	r28, 0x00	; 0
     bce:	09 f4       	brne	.+2      	; 0xbd2 <recv+0x5e>
     bd0:	7a c0       	rjmp	.+244    	; 0xcc6 <recv+0x152>
   
   recvsize = getSn_RxMAX(sn);
     bd2:	b8 01       	movw	r22, r16
     bd4:	72 5e       	subi	r23, 0xE2	; 226
     bd6:	07 2e       	mov	r0, r23
     bd8:	00 0c       	add	r0, r0
     bda:	88 0b       	sbc	r24, r24
     bdc:	99 0b       	sbc	r25, r25
     bde:	95 d3       	rcall	.+1834   	; 0x130a <WIZCHIP_READ>
     be0:	a8 2e       	mov	r10, r24
     be2:	b1 2c       	mov	r11, r1
     be4:	ba 2c       	mov	r11, r10
     be6:	aa 24       	eor	r10, r10
     be8:	bb 0c       	add	r11, r11
     bea:	bb 0c       	add	r11, r11
   if(recvsize < len) len = recvsize;
     bec:	ac 16       	cp	r10, r28
     bee:	bd 06       	cpc	r11, r29
     bf0:	08 f0       	brcs	.+2      	; 0xbf4 <recv+0x80>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
     bf2:	5e 01       	movw	r10, r28
     bf4:	87 2d       	mov	r24, r7
     bf6:	c3 d5       	rcall	.+2950   	; 0x177e <getSn_RX_RSR>
     bf8:	ec 01       	movw	r28, r24
         tmp = getSn_SR(sn);
     bfa:	b8 01       	movw	r22, r16
     bfc:	7d 5f       	subi	r23, 0xFD	; 253
     bfe:	07 2e       	mov	r0, r23
     c00:	00 0c       	add	r0, r0
     c02:	88 0b       	sbc	r24, r24
     c04:	99 0b       	sbc	r25, r25
     c06:	81 d3       	rcall	.+1794   	; 0x130a <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
     c08:	87 31       	cpi	r24, 0x17	; 23
     c0a:	21 f1       	breq	.+72     	; 0xc54 <recv+0xe0>
         {
            if(tmp == SOCK_CLOSE_WAIT)
     c0c:	8c 31       	cpi	r24, 0x1C	; 28
            {
               if(recvsize != 0) break;
     c0e:	d9 f4       	brne	.+54     	; 0xc46 <recv+0xd2>
     c10:	20 97       	sbiw	r28, 0x00	; 0
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
     c12:	a9 f5       	brne	.+106    	; 0xc7e <recv+0x10a>
     c14:	87 2d       	mov	r24, r7
     c16:	5b d5       	rcall	.+2742   	; 0x16ce <getSn_TX_FSR>
     c18:	7c 01       	movw	r14, r24
     c1a:	b8 01       	movw	r22, r16
     c1c:	71 5e       	subi	r23, 0xE1	; 225
     c1e:	07 2e       	mov	r0, r23
     c20:	00 0c       	add	r0, r0
     c22:	88 0b       	sbc	r24, r24
     c24:	99 0b       	sbc	r25, r25
     c26:	71 d3       	rcall	.+1762   	; 0x130a <WIZCHIP_READ>
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	98 2f       	mov	r25, r24
     c2c:	88 27       	eor	r24, r24
     c2e:	99 0f       	add	r25, r25
     c30:	99 0f       	add	r25, r25
     c32:	e8 16       	cp	r14, r24
     c34:	f9 06       	cpc	r15, r25
               {
                  close(sn);
     c36:	71 f4       	brne	.+28     	; 0xc54 <recv+0xe0>
     c38:	87 2d       	mov	r24, r7
                  return SOCKERR_SOCKSTATUS;
     c3a:	d5 db       	rcall	.-2134   	; 0x3e6 <close>
     c3c:	69 ef       	ldi	r22, 0xF9	; 249
     c3e:	7f ef       	ldi	r23, 0xFF	; 255
     c40:	8f ef       	ldi	r24, 0xFF	; 255
     c42:	9f ef       	ldi	r25, 0xFF	; 255
               }
            }
            else
            {
               close(sn);
     c44:	48 c0       	rjmp	.+144    	; 0xcd6 <recv+0x162>
     c46:	87 2d       	mov	r24, r7
     c48:	ce db       	rcall	.-2148   	; 0x3e6 <close>
               return SOCKERR_SOCKSTATUS;
     c4a:	69 ef       	ldi	r22, 0xF9	; 249
     c4c:	7f ef       	ldi	r23, 0xFF	; 255
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	9f ef       	ldi	r25, 0xFF	; 255
     c52:	41 c0       	rjmp	.+130    	; 0xcd6 <recv+0x162>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0c 2c       	mov	r0, r12
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <recv+0xec>
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	0a 94       	dec	r0
     c62:	e2 f7       	brpl	.-8      	; 0xc5c <recv+0xe8>
     c64:	20 91 7c 04 	lds	r18, 0x047C	; 0x80047c <sock_io_mode>
     c68:	30 91 7d 04 	lds	r19, 0x047D	; 0x80047d <sock_io_mode+0x1>
     c6c:	82 23       	and	r24, r18
     c6e:	93 23       	and	r25, r19
     c70:	89 2b       	or	r24, r25
     c72:	11 f0       	breq	.+4      	; 0xc78 <recv+0x104>
     c74:	20 97       	sbiw	r28, 0x00	; 0
     c76:	61 f1       	breq	.+88     	; 0xcd0 <recv+0x15c>
         if(recvsize != 0) break;
     c78:	20 97       	sbiw	r28, 0x00	; 0
     c7a:	09 f4       	brne	.+2      	; 0xc7e <recv+0x10a>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
     c7c:	bb cf       	rjmp	.-138    	; 0xbf4 <recv+0x80>
     c7e:	ca 15       	cp	r28, r10
     c80:	db 05       	cpc	r29, r11
     c82:	08 f0       	brcs	.+2      	; 0xc86 <recv+0x112>
   wiz_recv_data(sn, buf, len);
     c84:	e5 01       	movw	r28, r10
     c86:	ae 01       	movw	r20, r28
     c88:	b4 01       	movw	r22, r8
     c8a:	87 2d       	mov	r24, r7
     c8c:	57 d6       	rcall	.+3246   	; 0x193c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
     c8e:	68 01       	movw	r12, r16
     c90:	d3 94       	inc	r13
     c92:	0d 2c       	mov	r0, r13
     c94:	00 0c       	add	r0, r0
     c96:	ee 08       	sbc	r14, r14
     c98:	ff 08       	sbc	r15, r15
     c9a:	40 e4       	ldi	r20, 0x40	; 64
     c9c:	c7 01       	movw	r24, r14
     c9e:	b6 01       	movw	r22, r12
   while(getSn_CR(sn));
     ca0:	9b d3       	rcall	.+1846   	; 0x13d8 <WIZCHIP_WRITE>
     ca2:	c7 01       	movw	r24, r14
     ca4:	b6 01       	movw	r22, r12
     ca6:	31 d3       	rcall	.+1634   	; 0x130a <WIZCHIP_READ>
     ca8:	81 11       	cpse	r24, r1
     caa:	fb cf       	rjmp	.-10     	; 0xca2 <recv+0x12e>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
     cac:	be 01       	movw	r22, r28
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	11 c0       	rjmp	.+34     	; 0xcd6 <recv+0x162>
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
     cb4:	6f ef       	ldi	r22, 0xFF	; 255
     cb6:	7f ef       	ldi	r23, 0xFF	; 255
     cb8:	cb 01       	movw	r24, r22
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <recv+0x162>
   CHECK_SOCKMODE(Sn_MR_TCP);
     cbc:	6b ef       	ldi	r22, 0xFB	; 251
     cbe:	7f ef       	ldi	r23, 0xFF	; 255
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	9f ef       	ldi	r25, 0xFF	; 255
     cc4:	08 c0       	rjmp	.+16     	; 0xcd6 <recv+0x162>
   CHECK_SOCKDATA();
     cc6:	62 ef       	ldi	r22, 0xF2	; 242
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	8f ef       	ldi	r24, 0xFF	; 255
     ccc:	9f ef       	ldi	r25, 0xFF	; 255
     cce:	03 c0       	rjmp	.+6      	; 0xcd6 <recv+0x162>
            {
               close(sn);
               return SOCKERR_SOCKSTATUS;
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	cb 01       	movw	r24, r22
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	bf 90       	pop	r11
     ce8:	af 90       	pop	r10
     cea:	9f 90       	pop	r9
     cec:	8f 90       	pop	r8
     cee:	7f 90       	pop	r7
     cf0:	08 95       	ret

00000cf2 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
     cf2:	2f 92       	push	r2
     cf4:	3f 92       	push	r3
     cf6:	5f 92       	push	r5
     cf8:	6f 92       	push	r6
     cfa:	7f 92       	push	r7
     cfc:	8f 92       	push	r8
     cfe:	9f 92       	push	r9
     d00:	af 92       	push	r10
     d02:	bf 92       	push	r11
     d04:	cf 92       	push	r12
     d06:	df 92       	push	r13
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
     d14:	89 30       	cpi	r24, 0x09	; 9
     d16:	08 f0       	brcs	.+2      	; 0xd1a <sendto+0x28>
     d18:	e3 c0       	rjmp	.+454    	; 0xee0 <sendto+0x1ee>
     d1a:	e9 01       	movw	r28, r18
     d1c:	3a 01       	movw	r6, r20
     d1e:	1b 01       	movw	r2, r22
     d20:	58 2e       	mov	r5, r24
   switch(getSn_MR(sn) & 0x0F)
     d22:	c8 2e       	mov	r12, r24
     d24:	d1 2c       	mov	r13, r1
     d26:	76 01       	movw	r14, r12
     d28:	ee 0c       	add	r14, r14
     d2a:	ff 1c       	adc	r15, r15
     d2c:	ee 0c       	add	r14, r14
     d2e:	ff 1c       	adc	r15, r15
     d30:	8f ef       	ldi	r24, 0xFF	; 255
     d32:	e8 1a       	sub	r14, r24
     d34:	f8 0a       	sbc	r15, r24
     d36:	ee 0c       	add	r14, r14
     d38:	ff 1c       	adc	r15, r15
     d3a:	ee 0c       	add	r14, r14
     d3c:	ff 1c       	adc	r15, r15
     d3e:	ee 0c       	add	r14, r14
     d40:	ff 1c       	adc	r15, r15
     d42:	47 01       	movw	r8, r14
     d44:	0f 2c       	mov	r0, r15
     d46:	00 0c       	add	r0, r0
     d48:	aa 08       	sbc	r10, r10
     d4a:	bb 08       	sbc	r11, r11
     d4c:	c5 01       	movw	r24, r10
     d4e:	b4 01       	movw	r22, r8
     d50:	dc d2       	rcall	.+1464   	; 0x130a <WIZCHIP_READ>
     d52:	8f 70       	andi	r24, 0x0F	; 15
     d54:	82 50       	subi	r24, 0x02	; 2
     d56:	83 30       	cpi	r24, 0x03	; 3
     d58:	08 f0       	brcs	.+2      	; 0xd5c <sendto+0x6a>
     d5a:	c6 c0       	rjmp	.+396    	; 0xee8 <sendto+0x1f6>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
     d5c:	61 14       	cp	r6, r1
     d5e:	71 04       	cpc	r7, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <sendto+0x72>
     d62:	c7 c0       	rjmp	.+398    	; 0xef2 <sendto+0x200>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
     d64:	88 81       	ld	r24, Y
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	a0 e0       	ldi	r26, 0x00	; 0
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
     d6c:	ba 2f       	mov	r27, r26
     d6e:	a9 2f       	mov	r26, r25
     d70:	98 2f       	mov	r25, r24
     d72:	88 27       	eor	r24, r24
     d74:	29 81       	ldd	r18, Y+1	; 0x01
     d76:	82 0f       	add	r24, r18
     d78:	91 1d       	adc	r25, r1
     d7a:	a1 1d       	adc	r26, r1
     d7c:	b1 1d       	adc	r27, r1
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
     d7e:	ba 2f       	mov	r27, r26
     d80:	a9 2f       	mov	r26, r25
     d82:	98 2f       	mov	r25, r24
     d84:	88 27       	eor	r24, r24
     d86:	2a 81       	ldd	r18, Y+2	; 0x02
     d88:	82 0f       	add	r24, r18
     d8a:	91 1d       	adc	r25, r1
     d8c:	a1 1d       	adc	r26, r1
     d8e:	b1 1d       	adc	r27, r1
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
     d90:	ba 2f       	mov	r27, r26
     d92:	a9 2f       	mov	r26, r25
     d94:	98 2f       	mov	r25, r24
     d96:	88 27       	eor	r24, r24
     d98:	2b 81       	ldd	r18, Y+3	; 0x03
     d9a:	82 0f       	add	r24, r18
     d9c:	91 1d       	adc	r25, r1
     d9e:	a1 1d       	adc	r26, r1
     da0:	b1 1d       	adc	r27, r1
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
     da2:	89 2b       	or	r24, r25
     da4:	8a 2b       	or	r24, r26
     da6:	8b 2b       	or	r24, r27
     da8:	29 f4       	brne	.+10     	; 0xdb4 <sendto+0xc2>
     daa:	c5 01       	movw	r24, r10
     dac:	b4 01       	movw	r22, r8
     dae:	ad d2       	rcall	.+1370   	; 0x130a <WIZCHIP_READ>
     db0:	82 ff       	sbrs	r24, 2
     db2:	a4 c0       	rjmp	.+328    	; 0xefc <sendto+0x20a>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
     db4:	01 15       	cp	r16, r1
     db6:	11 05       	cpc	r17, r1
     db8:	29 f4       	brne	.+10     	; 0xdc4 <sendto+0xd2>
     dba:	c5 01       	movw	r24, r10
     dbc:	b4 01       	movw	r22, r8
     dbe:	a5 d2       	rcall	.+1354   	; 0x130a <WIZCHIP_READ>
     dc0:	82 ff       	sbrs	r24, 2
     dc2:	a1 c0       	rjmp	.+322    	; 0xf06 <sendto+0x214>
   tmp = getSn_SR(sn);
     dc4:	47 01       	movw	r8, r14
     dc6:	8d ef       	ldi	r24, 0xFD	; 253
     dc8:	98 1a       	sub	r9, r24
     dca:	09 2c       	mov	r0, r9
     dcc:	00 0c       	add	r0, r0
     dce:	aa 08       	sbc	r10, r10
     dd0:	bb 08       	sbc	r11, r11
     dd2:	c5 01       	movw	r24, r10
     dd4:	b4 01       	movw	r22, r8
     dd6:	99 d2       	rcall	.+1330   	; 0x130a <WIZCHIP_READ>
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
     dd8:	82 34       	cpi	r24, 0x42	; 66
     dda:	29 f0       	breq	.+10     	; 0xde6 <sendto+0xf4>
     ddc:	82 32       	cpi	r24, 0x22	; 34
     dde:	19 f0       	breq	.+6      	; 0xde6 <sendto+0xf4>
     de0:	82 33       	cpi	r24, 0x32	; 50
     de2:	09 f0       	breq	.+2      	; 0xde6 <sendto+0xf4>
     de4:	95 c0       	rjmp	.+298    	; 0xf10 <sendto+0x21e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
     de6:	b7 01       	movw	r22, r14
     de8:	74 5f       	subi	r23, 0xF4	; 244
     dea:	07 2e       	mov	r0, r23
     dec:	00 0c       	add	r0, r0
     dee:	88 0b       	sbc	r24, r24
     df0:	99 0b       	sbc	r25, r25
     df2:	24 e0       	ldi	r18, 0x04	; 4
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	ae 01       	movw	r20, r28
     df8:	e3 d3       	rcall	.+1990   	; 0x15c0 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
     dfa:	b7 01       	movw	r22, r14
     dfc:	70 5f       	subi	r23, 0xF0	; 240
     dfe:	07 2e       	mov	r0, r23
     e00:	00 0c       	add	r0, r0
     e02:	88 0b       	sbc	r24, r24
     e04:	99 0b       	sbc	r25, r25
     e06:	41 2f       	mov	r20, r17
     e08:	e7 d2       	rcall	.+1486   	; 0x13d8 <WIZCHIP_WRITE>
     e0a:	b7 01       	movw	r22, r14
     e0c:	7f 5e       	subi	r23, 0xEF	; 239
     e0e:	07 2e       	mov	r0, r23
     e10:	00 0c       	add	r0, r0
     e12:	88 0b       	sbc	r24, r24
     e14:	99 0b       	sbc	r25, r25
     e16:	40 2f       	mov	r20, r16
     e18:	df d2       	rcall	.+1470   	; 0x13d8 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
     e1a:	b7 01       	movw	r22, r14
     e1c:	71 5e       	subi	r23, 0xE1	; 225
     e1e:	07 2e       	mov	r0, r23
     e20:	00 0c       	add	r0, r0
     e22:	88 0b       	sbc	r24, r24
     e24:	99 0b       	sbc	r25, r25
     e26:	71 d2       	rcall	.+1250   	; 0x130a <WIZCHIP_READ>
     e28:	08 2f       	mov	r16, r24
     e2a:	10 e0       	ldi	r17, 0x00	; 0
     e2c:	10 2f       	mov	r17, r16
     e2e:	00 27       	eor	r16, r16
     e30:	11 0f       	add	r17, r17
     e32:	11 0f       	add	r17, r17
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
     e34:	06 15       	cp	r16, r6
     e36:	17 05       	cpc	r17, r7
     e38:	08 f0       	brcs	.+2      	; 0xe3c <sendto+0x14a>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
     e3a:	83 01       	movw	r16, r6
     e3c:	85 2d       	mov	r24, r5
     e3e:	47 d4       	rcall	.+2190   	; 0x16ce <getSn_TX_FSR>
     e40:	ec 01       	movw	r28, r24
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
     e42:	c5 01       	movw	r24, r10
     e44:	b4 01       	movw	r22, r8
     e46:	61 d2       	rcall	.+1218   	; 0x130a <WIZCHIP_READ>
     e48:	88 23       	and	r24, r24
     e4a:	09 f4       	brne	.+2      	; 0xe4e <sendto+0x15c>
     e4c:	66 c0       	rjmp	.+204    	; 0xf1a <sendto+0x228>
     e4e:	81 e0       	ldi	r24, 0x01	; 1
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0c 2c       	mov	r0, r12
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <sendto+0x168>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <sendto+0x164>
     e5e:	20 91 7c 04 	lds	r18, 0x047C	; 0x80047c <sock_io_mode>
     e62:	30 91 7d 04 	lds	r19, 0x047D	; 0x80047d <sock_io_mode+0x1>
     e66:	82 23       	and	r24, r18
     e68:	93 23       	and	r25, r19
     e6a:	89 2b       	or	r24, r25
     e6c:	21 f0       	breq	.+8      	; 0xe76 <sendto+0x184>
     e6e:	c0 17       	cp	r28, r16
     e70:	d1 07       	cpc	r29, r17
     e72:	08 f4       	brcc	.+2      	; 0xe76 <sendto+0x184>
     e74:	57 c0       	rjmp	.+174    	; 0xf24 <sendto+0x232>
      if(len <= freesize) break;
     e76:	c0 17       	cp	r28, r16
     e78:	d1 07       	cpc	r29, r17
     e7a:	00 f3       	brcs	.-64     	; 0xe3c <sendto+0x14a>
   };
	wiz_send_data(sn, buf, len);
     e7c:	a8 01       	movw	r20, r16
     e7e:	b1 01       	movw	r22, r2
     e80:	85 2d       	mov	r24, r5
     e82:	d5 d4       	rcall	.+2474   	; 0x182e <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
     e84:	47 01       	movw	r8, r14
     e86:	93 94       	inc	r9
     e88:	09 2c       	mov	r0, r9
     e8a:	00 0c       	add	r0, r0
     e8c:	aa 08       	sbc	r10, r10
     e8e:	bb 08       	sbc	r11, r11
     e90:	40 e2       	ldi	r20, 0x20	; 32
     e92:	c5 01       	movw	r24, r10
     e94:	b4 01       	movw	r22, r8
     e96:	a0 d2       	rcall	.+1344   	; 0x13d8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
     e98:	c5 01       	movw	r24, r10
     e9a:	b4 01       	movw	r22, r8
     e9c:	36 d2       	rcall	.+1132   	; 0x130a <WIZCHIP_READ>
     e9e:	81 11       	cpse	r24, r1
     ea0:	fb cf       	rjmp	.-10     	; 0xe98 <sendto+0x1a6>
   while(1)
   {
      tmp = getSn_IR(sn);
     ea2:	47 01       	movw	r8, r14
     ea4:	8e ef       	ldi	r24, 0xFE	; 254
     ea6:	98 1a       	sub	r9, r24
     ea8:	09 2c       	mov	r0, r9
     eaa:	00 0c       	add	r0, r0
     eac:	aa 08       	sbc	r10, r10
     eae:	bb 08       	sbc	r11, r11
     eb0:	c5 01       	movw	r24, r10
     eb2:	b4 01       	movw	r22, r8
     eb4:	2a d2       	rcall	.+1108   	; 0x130a <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
     eb6:	84 ff       	sbrs	r24, 4
      {
         setSn_IR(sn, Sn_IR_SENDOK);
     eb8:	08 c0       	rjmp	.+16     	; 0xeca <sendto+0x1d8>
     eba:	40 e1       	ldi	r20, 0x10	; 16
     ebc:	c5 01       	movw	r24, r10
     ebe:	b4 01       	movw	r22, r8
     ec0:	8b d2       	rcall	.+1302   	; 0x13d8 <WIZCHIP_WRITE>
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
     ec2:	b8 01       	movw	r22, r16
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	30 c0       	rjmp	.+96     	; 0xf2a <sendto+0x238>
         setSn_IR(sn, Sn_IR_SENDOK);
         break;
      }
      //M:20131104
      //else if(tmp & Sn_IR_TIMEOUT) return SOCKERR_TIMEOUT;
      else if(tmp & Sn_IR_TIMEOUT)
     eca:	83 ff       	sbrs	r24, 3
     ecc:	ea cf       	rjmp	.-44     	; 0xea2 <sendto+0x1b0>
      {
         setSn_IR(sn, Sn_IR_TIMEOUT);
     ece:	48 e0       	ldi	r20, 0x08	; 8
     ed0:	c5 01       	movw	r24, r10
     ed2:	b4 01       	movw	r22, r8
     ed4:	81 d2       	rcall	.+1282   	; 0x13d8 <WIZCHIP_WRITE>
     ed6:	63 ef       	ldi	r22, 0xF3	; 243
         //len = (uint16_t)SOCKERR_TIMEOUT;
         //break;
         #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
            if(taddr) setSUBR((uint8_t*)&taddr);
         #endif
         return SOCKERR_TIMEOUT;
     ed8:	7f ef       	ldi	r23, 0xFF	; 255
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	9f ef       	ldi	r25, 0xFF	; 255
     ede:	25 c0       	rjmp	.+74     	; 0xf2a <sendto+0x238>
     ee0:	6f ef       	ldi	r22, 0xFF	; 255
{
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
     ee2:	7f ef       	ldi	r23, 0xFF	; 255
     ee4:	cb 01       	movw	r24, r22
     ee6:	21 c0       	rjmp	.+66     	; 0xf2a <sendto+0x238>
     ee8:	6b ef       	ldi	r22, 0xFB	; 251
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
     eea:	7f ef       	ldi	r23, 0xFF	; 255
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	9f ef       	ldi	r25, 0xFF	; 255
     ef0:	1c c0       	rjmp	.+56     	; 0xf2a <sendto+0x238>
     ef2:	62 ef       	ldi	r22, 0xF2	; 242
   }
   CHECK_SOCKDATA();
     ef4:	7f ef       	ldi	r23, 0xFF	; 255
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	9f ef       	ldi	r25, 0xFF	; 255
     efa:	17 c0       	rjmp	.+46     	; 0xf2a <sendto+0x238>
     efc:	64 ef       	ldi	r22, 0xF4	; 244
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
     efe:	7f ef       	ldi	r23, 0xFF	; 255
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	9f ef       	ldi	r25, 0xFF	; 255
     f04:	12 c0       	rjmp	.+36     	; 0xf2a <sendto+0x238>
     f06:	65 ef       	ldi	r22, 0xF5	; 245
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
     f08:	7f ef       	ldi	r23, 0xFF	; 255
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	9f ef       	ldi	r25, 0xFF	; 255
     f0e:	0d c0       	rjmp	.+26     	; 0xf2a <sendto+0x238>
     f10:	69 ef       	ldi	r22, 0xF9	; 249
   tmp = getSn_SR(sn);
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
     f12:	7f ef       	ldi	r23, 0xFF	; 255
     f14:	8f ef       	ldi	r24, 0xFF	; 255
     f16:	9f ef       	ldi	r25, 0xFF	; 255
     f18:	08 c0       	rjmp	.+16     	; 0xf2a <sendto+0x238>
     f1a:	6c ef       	ldi	r22, 0xFC	; 252
   freesize = getSn_TxMAX(sn);
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
     f1c:	7f ef       	ldi	r23, 0xFF	; 255
     f1e:	8f ef       	ldi	r24, 0xFF	; 255
     f20:	9f ef       	ldi	r25, 0xFF	; 255
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <sendto+0x238>
     f24:	60 e0       	ldi	r22, 0x00	; 0
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	cb 01       	movw	r24, r22
     f2a:	df 91       	pop	r29
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	ff 90       	pop	r15
     f34:	ef 90       	pop	r14
     f36:	df 90       	pop	r13
     f38:	cf 90       	pop	r12
     f3a:	bf 90       	pop	r11
     f3c:	af 90       	pop	r10
     f3e:	9f 90       	pop	r9
     f40:	8f 90       	pop	r8
     f42:	7f 90       	pop	r7
     f44:	6f 90       	pop	r6
     f46:	5f 90       	pop	r5
     f48:	3f 90       	pop	r3
     f4a:	2f 90       	pop	r2
     f4c:	08 95       	ret

00000f4e <recvfrom>:
     f4e:	2f 92       	push	r2



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
     f50:	3f 92       	push	r3
     f52:	4f 92       	push	r4
     f54:	5f 92       	push	r5
     f56:	6f 92       	push	r6
     f58:	7f 92       	push	r7
     f5a:	8f 92       	push	r8
     f5c:	9f 92       	push	r9
     f5e:	af 92       	push	r10
     f60:	bf 92       	push	r11
     f62:	cf 92       	push	r12
     f64:	df 92       	push	r13
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	2c 97       	sbiw	r28, 0x0c	; 12
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
     f82:	89 30       	cpi	r24, 0x09	; 9
     f84:	08 f0       	brcs	.+2      	; 0xf88 <recvfrom+0x3a>
     f86:	92 c1       	rjmp	.+804    	; 0x12ac <recvfrom+0x35e>
     f88:	28 01       	movw	r4, r16
     f8a:	39 01       	movw	r6, r18
     f8c:	5a 01       	movw	r10, r20
     f8e:	4b 01       	movw	r8, r22
     f90:	38 2e       	mov	r3, r24
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
     f92:	c8 2e       	mov	r12, r24
     f94:	d1 2c       	mov	r13, r1
     f96:	86 01       	movw	r16, r12
     f98:	00 0f       	add	r16, r16
     f9a:	11 1f       	adc	r17, r17
     f9c:	00 0f       	add	r16, r16
     f9e:	11 1f       	adc	r17, r17
     fa0:	0f 5f       	subi	r16, 0xFF	; 255
     fa2:	1f 4f       	sbci	r17, 0xFF	; 255
     fa4:	00 0f       	add	r16, r16
     fa6:	11 1f       	adc	r17, r17
     fa8:	00 0f       	add	r16, r16
     faa:	11 1f       	adc	r17, r17
     fac:	00 0f       	add	r16, r16
     fae:	11 1f       	adc	r17, r17
     fb0:	b8 01       	movw	r22, r16
     fb2:	01 2e       	mov	r0, r17
     fb4:	00 0c       	add	r0, r0
     fb6:	88 0b       	sbc	r24, r24
     fb8:	99 0b       	sbc	r25, r25
     fba:	a7 d1       	rcall	.+846    	; 0x130a <WIZCHIP_READ>
     fbc:	28 2e       	mov	r2, r24
     fbe:	8f 70       	andi	r24, 0x0F	; 15
     fc0:	82 50       	subi	r24, 0x02	; 2
     fc2:	83 30       	cpi	r24, 0x03	; 3
     fc4:	08 f0       	brcs	.+2      	; 0xfc8 <recvfrom+0x7a>
     fc6:	76 c1       	rjmp	.+748    	; 0x12b4 <recvfrom+0x366>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
     fc8:	a1 14       	cp	r10, r1
     fca:	b1 04       	cpc	r11, r1
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <recvfrom+0x82>
     fce:	77 c1       	rjmp	.+750    	; 0x12be <recvfrom+0x370>
   if(sock_remained_size[sn] == 0)
     fd0:	f6 01       	movw	r30, r12
     fd2:	ee 0f       	add	r30, r30
     fd4:	ff 1f       	adc	r31, r31
     fd6:	e6 59       	subi	r30, 0x96	; 150
     fd8:	fb 4f       	sbci	r31, 0xFB	; 251
     fda:	80 81       	ld	r24, Z
     fdc:	91 81       	ldd	r25, Z+1	; 0x01
     fde:	89 2b       	or	r24, r25
     fe0:	29 f5       	brne	.+74     	; 0x102c <recvfrom+0xde>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
     fe2:	83 2d       	mov	r24, r3
     fe4:	cc d3       	rcall	.+1944   	; 0x177e <getSn_RX_RSR>
     fe6:	7c 01       	movw	r14, r24
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
     fe8:	b8 01       	movw	r22, r16
     fea:	7d 5f       	subi	r23, 0xFD	; 253
     fec:	07 2e       	mov	r0, r23
     fee:	00 0c       	add	r0, r0
     ff0:	88 0b       	sbc	r24, r24
     ff2:	99 0b       	sbc	r25, r25
     ff4:	8a d1       	rcall	.+788    	; 0x130a <WIZCHIP_READ>
     ff6:	88 23       	and	r24, r24
     ff8:	09 f4       	brne	.+2      	; 0xffc <recvfrom+0xae>
     ffa:	66 c1       	rjmp	.+716    	; 0x12c8 <recvfrom+0x37a>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0c 2c       	mov	r0, r12
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <recvfrom+0xba>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <recvfrom+0xb6>
    100c:	20 91 7c 04 	lds	r18, 0x047C	; 0x80047c <sock_io_mode>
    1010:	30 91 7d 04 	lds	r19, 0x047D	; 0x80047d <sock_io_mode+0x1>
    1014:	82 23       	and	r24, r18
    1016:	93 23       	and	r25, r19
    1018:	89 2b       	or	r24, r25
    101a:	21 f0       	breq	.+8      	; 0x1024 <recvfrom+0xd6>
    101c:	e1 14       	cp	r14, r1
    101e:	f1 04       	cpc	r15, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <recvfrom+0xd6>
    1022:	57 c1       	rjmp	.+686    	; 0x12d2 <recvfrom+0x384>
         if(pack_len != 0) break;
    1024:	e1 14       	cp	r14, r1
    1026:	f1 04       	cpc	r15, r1
    1028:	e1 f2       	breq	.-72     	; 0xfe2 <recvfrom+0x94>
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <recvfrom+0xe2>
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
    102c:	e1 2c       	mov	r14, r1
    102e:	f1 2c       	mov	r15, r1
         if(pack_len != 0) break;
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
    1030:	82 2d       	mov	r24, r2
    1032:	87 70       	andi	r24, 0x07	; 7
    1034:	83 30       	cpi	r24, 0x03	; 3
    1036:	09 f4       	brne	.+2      	; 0x103a <recvfrom+0xec>
    1038:	b1 c0       	rjmp	.+354    	; 0x119c <recvfrom+0x24e>
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	09 f4       	brne	.+2      	; 0x1040 <recvfrom+0xf2>
    103e:	61 c0       	rjmp	.+194    	; 0x1102 <recvfrom+0x1b4>
    1040:	82 30       	cpi	r24, 0x02	; 2
    1042:	09 f0       	breq	.+2      	; 0x1046 <recvfrom+0xf8>
    1044:	fe c0       	rjmp	.+508    	; 0x1242 <recvfrom+0x2f4>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
    1046:	f6 01       	movw	r30, r12
    1048:	ee 0f       	add	r30, r30
    104a:	ff 1f       	adc	r31, r31
    104c:	e6 59       	subi	r30, 0x96	; 150
    104e:	fb 4f       	sbci	r31, 0xFB	; 251
    1050:	80 81       	ld	r24, Z
    1052:	91 81       	ldd	r25, Z+1	; 0x01
    1054:	89 2b       	or	r24, r25
    1056:	09 f0       	breq	.+2      	; 0x105a <recvfrom+0x10c>
    1058:	44 c0       	rjmp	.+136    	; 0x10e2 <recvfrom+0x194>
	      {
   			wiz_recv_data(sn, head, 8);
    105a:	48 e0       	ldi	r20, 0x08	; 8
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	be 01       	movw	r22, r28
    1060:	6f 5f       	subi	r22, 0xFF	; 255
    1062:	7f 4f       	sbci	r23, 0xFF	; 255
    1064:	83 2d       	mov	r24, r3
    1066:	6a d4       	rcall	.+2260   	; 0x193c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
    1068:	c8 01       	movw	r24, r16
    106a:	93 95       	inc	r25
    106c:	9c 01       	movw	r18, r24
    106e:	99 0f       	add	r25, r25
    1070:	44 0b       	sbc	r20, r20
    1072:	55 0b       	sbc	r21, r21
    1074:	29 87       	std	Y+9, r18	; 0x09
    1076:	3a 87       	std	Y+10, r19	; 0x0a
    1078:	4b 87       	std	Y+11, r20	; 0x0b
    107a:	5c 87       	std	Y+12, r21	; 0x0c
    107c:	40 e4       	ldi	r20, 0x40	; 64
    107e:	69 85       	ldd	r22, Y+9	; 0x09
    1080:	7a 85       	ldd	r23, Y+10	; 0x0a
    1082:	8b 85       	ldd	r24, Y+11	; 0x0b
    1084:	9c 85       	ldd	r25, Y+12	; 0x0c
    1086:	a8 d1       	rcall	.+848    	; 0x13d8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    1088:	69 85       	ldd	r22, Y+9	; 0x09
    108a:	7a 85       	ldd	r23, Y+10	; 0x0a
    108c:	8b 85       	ldd	r24, Y+11	; 0x0b
    108e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1090:	3c d1       	rcall	.+632    	; 0x130a <WIZCHIP_READ>
    1092:	81 11       	cpse	r24, r1
    1094:	f9 cf       	rjmp	.-14     	; 0x1088 <recvfrom+0x13a>
    1096:	89 81       	ldd	r24, Y+1	; 0x01
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
    1098:	f3 01       	movw	r30, r6
    109a:	80 83       	st	Z, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
      			addr[1] = head[1];
    109e:	81 83       	std	Z+1, r24	; 0x01
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
      			addr[2] = head[2];
    10a2:	82 83       	std	Z+2, r24	; 0x02
    10a4:	8c 81       	ldd	r24, Y+4	; 0x04
      			addr[3] = head[3];
    10a6:	83 83       	std	Z+3, r24	; 0x03
    10a8:	8d 81       	ldd	r24, Y+5	; 0x05
      			*port = head[4];
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	98 2f       	mov	r25, r24
      			*port = (*port << 8) + head[5];
    10ae:	88 27       	eor	r24, r24
    10b0:	2e 81       	ldd	r18, Y+6	; 0x06
    10b2:	82 0f       	add	r24, r18
    10b4:	91 1d       	adc	r25, r1
    10b6:	f2 01       	movw	r30, r4
    10b8:	91 83       	std	Z+1, r25	; 0x01
    10ba:	80 83       	st	Z, r24
    10bc:	8f 81       	ldd	r24, Y+7	; 0x07
      			sock_remained_size[sn] = head[6];
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	f6 01       	movw	r30, r12
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	e6 59       	subi	r30, 0x96	; 150
    10c8:	fb 4f       	sbci	r31, 0xFB	; 251
    10ca:	98 2f       	mov	r25, r24
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
    10cc:	88 27       	eor	r24, r24
    10ce:	28 85       	ldd	r18, Y+8	; 0x08
    10d0:	82 0f       	add	r24, r18
    10d2:	91 1d       	adc	r25, r1
    10d4:	91 83       	std	Z+1, r25	; 0x01
    10d6:	80 83       	st	Z, r24
    10d8:	80 e8       	ldi	r24, 0x80	; 128
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
    10da:	f6 01       	movw	r30, r12
    10dc:	ee 59       	subi	r30, 0x9E	; 158
    10de:	fb 4f       	sbci	r31, 0xFB	; 251
    10e0:	80 83       	st	Z, r24
    10e2:	f6 01       	movw	r30, r12
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	e6 59       	subi	r30, 0x96	; 150
    10ea:	fb 4f       	sbci	r31, 0xFB	; 251
    10ec:	e0 80       	ld	r14, Z
    10ee:	f1 80       	ldd	r15, Z+1	; 0x01
    10f0:	ae 14       	cp	r10, r14
    10f2:	bf 04       	cpc	r11, r15
    10f4:	08 f4       	brcc	.+2      	; 0x10f8 <recvfrom+0x1aa>
    10f6:	75 01       	movw	r14, r10
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    10f8:	a7 01       	movw	r20, r14
    10fa:	b4 01       	movw	r22, r8
    10fc:	83 2d       	mov	r24, r3
    10fe:	1e d4       	rcall	.+2108   	; 0x193c <wiz_recv_data>
    1100:	aa c0       	rjmp	.+340    	; 0x1256 <recvfrom+0x308>
			break;
    1102:	f6 01       	movw	r30, r12
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
    1104:	ee 0f       	add	r30, r30
    1106:	ff 1f       	adc	r31, r31
    1108:	e6 59       	subi	r30, 0x96	; 150
    110a:	fb 4f       	sbci	r31, 0xFB	; 251
    110c:	80 81       	ld	r24, Z
    110e:	91 81       	ldd	r25, Z+1	; 0x01
    1110:	89 2b       	or	r24, r25
    1112:	a1 f5       	brne	.+104    	; 0x117c <recvfrom+0x22e>
	      {
   			wiz_recv_data(sn, head, 2);
    1114:	42 e0       	ldi	r20, 0x02	; 2
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	be 01       	movw	r22, r28
    111a:	6f 5f       	subi	r22, 0xFF	; 255
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	83 2d       	mov	r24, r3
    1120:	0d d4       	rcall	.+2074   	; 0x193c <wiz_recv_data>
    1122:	28 01       	movw	r4, r16
   			setSn_CR(sn,Sn_CR_RECV);
    1124:	53 94       	inc	r5
    1126:	05 2c       	mov	r0, r5
    1128:	00 0c       	add	r0, r0
    112a:	66 08       	sbc	r6, r6
    112c:	77 08       	sbc	r7, r7
    112e:	40 e4       	ldi	r20, 0x40	; 64
    1130:	c3 01       	movw	r24, r6
    1132:	b2 01       	movw	r22, r4
    1134:	51 d1       	rcall	.+674    	; 0x13d8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    1136:	c3 01       	movw	r24, r6
    1138:	b2 01       	movw	r22, r4
    113a:	e7 d0       	rcall	.+462    	; 0x130a <WIZCHIP_READ>
    113c:	81 11       	cpse	r24, r1
    113e:	fb cf       	rjmp	.-10     	; 0x1136 <recvfrom+0x1e8>
    1140:	89 81       	ldd	r24, Y+1	; 0x01
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	f6 01       	movw	r30, r12
    1146:	ee 0f       	add	r30, r30
    1148:	ff 1f       	adc	r31, r31
    114a:	e6 59       	subi	r30, 0x96	; 150
    114c:	fb 4f       	sbci	r31, 0xFB	; 251
    114e:	98 2f       	mov	r25, r24
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
    1150:	88 27       	eor	r24, r24
    1152:	2a 81       	ldd	r18, Y+2	; 0x02
    1154:	82 0f       	add	r24, r18
    1156:	91 1d       	adc	r25, r1
    1158:	02 97       	sbiw	r24, 0x02	; 2
    115a:	91 83       	std	Z+1, r25	; 0x01
    115c:	80 83       	st	Z, r24
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
    115e:	8b 3e       	cpi	r24, 0xEB	; 235
    1160:	95 40       	sbci	r25, 0x05	; 5
    1162:	38 f0       	brcs	.+14     	; 0x1172 <recvfrom+0x224>
   			{
   			   close(sn);
    1164:	83 2d       	mov	r24, r3
    1166:	3f d9       	rcall	.-3458   	; 0x3e6 <close>
    1168:	67 e1       	ldi	r22, 0x17	; 23
   			   return SOCKFATAL_PACKLEN;
    116a:	7c ef       	ldi	r23, 0xFC	; 252
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	9f ef       	ldi	r25, 0xFF	; 255
    1170:	b3 c0       	rjmp	.+358    	; 0x12d8 <recvfrom+0x38a>
    1172:	80 e8       	ldi	r24, 0x80	; 128
   			}
   			sock_pack_info[sn] = PACK_FIRST;
    1174:	f6 01       	movw	r30, r12
    1176:	ee 59       	subi	r30, 0x9E	; 158
    1178:	fb 4f       	sbci	r31, 0xFB	; 251
    117a:	80 83       	st	Z, r24
    117c:	f6 01       	movw	r30, r12
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	e6 59       	subi	r30, 0x96	; 150
    1184:	fb 4f       	sbci	r31, 0xFB	; 251
    1186:	e0 80       	ld	r14, Z
    1188:	f1 80       	ldd	r15, Z+1	; 0x01
    118a:	ae 14       	cp	r10, r14
    118c:	bf 04       	cpc	r11, r15
    118e:	08 f4       	brcc	.+2      	; 0x1192 <recvfrom+0x244>
    1190:	75 01       	movw	r14, r10
			else pack_len = sock_remained_size[sn];
			wiz_recv_data(sn,buf,pack_len);
    1192:	a7 01       	movw	r20, r14
    1194:	b4 01       	movw	r22, r8
    1196:	83 2d       	mov	r24, r3
    1198:	d1 d3       	rcall	.+1954   	; 0x193c <wiz_recv_data>
    119a:	5d c0       	rjmp	.+186    	; 0x1256 <recvfrom+0x308>
		   break;
    119c:	f6 01       	movw	r30, r12
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
    119e:	ee 0f       	add	r30, r30
    11a0:	ff 1f       	adc	r31, r31
    11a2:	e6 59       	subi	r30, 0x96	; 150
    11a4:	fb 4f       	sbci	r31, 0xFB	; 251
    11a6:	80 81       	ld	r24, Z
    11a8:	91 81       	ldd	r25, Z+1	; 0x01
    11aa:	89 2b       	or	r24, r25
    11ac:	d1 f5       	brne	.+116    	; 0x1222 <recvfrom+0x2d4>
		   {
   			wiz_recv_data(sn, head, 6);
    11ae:	46 e0       	ldi	r20, 0x06	; 6
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	be 01       	movw	r22, r28
    11b4:	6f 5f       	subi	r22, 0xFF	; 255
    11b6:	7f 4f       	sbci	r23, 0xFF	; 255
    11b8:	83 2d       	mov	r24, r3
    11ba:	c0 d3       	rcall	.+1920   	; 0x193c <wiz_recv_data>
    11bc:	c8 01       	movw	r24, r16
   			setSn_CR(sn,Sn_CR_RECV);
    11be:	93 95       	inc	r25
    11c0:	9c 01       	movw	r18, r24
    11c2:	99 0f       	add	r25, r25
    11c4:	44 0b       	sbc	r20, r20
    11c6:	55 0b       	sbc	r21, r21
    11c8:	29 87       	std	Y+9, r18	; 0x09
    11ca:	3a 87       	std	Y+10, r19	; 0x0a
    11cc:	4b 87       	std	Y+11, r20	; 0x0b
    11ce:	5c 87       	std	Y+12, r21	; 0x0c
    11d0:	40 e4       	ldi	r20, 0x40	; 64
    11d2:	69 85       	ldd	r22, Y+9	; 0x09
    11d4:	7a 85       	ldd	r23, Y+10	; 0x0a
    11d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    11d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    11da:	fe d0       	rcall	.+508    	; 0x13d8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    11dc:	69 85       	ldd	r22, Y+9	; 0x09
    11de:	7a 85       	ldd	r23, Y+10	; 0x0a
    11e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    11e4:	92 d0       	rcall	.+292    	; 0x130a <WIZCHIP_READ>
    11e6:	81 11       	cpse	r24, r1
    11e8:	f9 cf       	rjmp	.-14     	; 0x11dc <recvfrom+0x28e>
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
   			addr[0] = head[0];
    11ec:	f3 01       	movw	r30, r6
    11ee:	80 83       	st	Z, r24
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
   			addr[1] = head[1];
    11f2:	81 83       	std	Z+1, r24	; 0x01
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
   			addr[2] = head[2];
    11f6:	82 83       	std	Z+2, r24	; 0x02
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
   			addr[3] = head[3];
    11fa:	83 83       	std	Z+3, r24	; 0x03
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
   			sock_remained_size[sn] = head[4];
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	f6 01       	movw	r30, r12
    1202:	ee 0f       	add	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	e6 59       	subi	r30, 0x96	; 150
    1208:	fb 4f       	sbci	r31, 0xFB	; 251
    120a:	98 2f       	mov	r25, r24
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
    120c:	88 27       	eor	r24, r24
    120e:	2e 81       	ldd	r18, Y+6	; 0x06
    1210:	82 0f       	add	r24, r18
    1212:	91 1d       	adc	r25, r1
    1214:	91 83       	std	Z+1, r25	; 0x01
    1216:	80 83       	st	Z, r24
    1218:	80 e8       	ldi	r24, 0x80	; 128
   			sock_pack_info[sn] = PACK_FIRST;
    121a:	f6 01       	movw	r30, r12
    121c:	ee 59       	subi	r30, 0x9E	; 158
    121e:	fb 4f       	sbci	r31, 0xFB	; 251
    1220:	80 83       	st	Z, r24
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
    1222:	f6 01       	movw	r30, r12
    1224:	ee 0f       	add	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	e6 59       	subi	r30, 0x96	; 150
    122a:	fb 4f       	sbci	r31, 0xFB	; 251
    122c:	e0 80       	ld	r14, Z
    122e:	f1 80       	ldd	r15, Z+1	; 0x01
    1230:	ae 14       	cp	r10, r14
    1232:	bf 04       	cpc	r11, r15
    1234:	08 f4       	brcc	.+2      	; 0x1238 <recvfrom+0x2ea>
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    1236:	75 01       	movw	r14, r10
    1238:	a7 01       	movw	r20, r14
    123a:	b4 01       	movw	r22, r8
    123c:	83 2d       	mov	r24, r3
    123e:	7e d3       	rcall	.+1788   	; 0x193c <wiz_recv_data>
			break;
    1240:	0a c0       	rjmp	.+20     	; 0x1256 <recvfrom+0x308>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
    1242:	b7 01       	movw	r22, r14
    1244:	83 2d       	mov	r24, r3
    1246:	01 d4       	rcall	.+2050   	; 0x1a4a <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
    1248:	f6 01       	movw	r30, r12
    124a:	ee 0f       	add	r30, r30
    124c:	ff 1f       	adc	r31, r31
    124e:	e6 59       	subi	r30, 0x96	; 150
    1250:	fb 4f       	sbci	r31, 0xFB	; 251
    1252:	f1 82       	std	Z+1, r15	; 0x01
         break;
   }
	setSn_CR(sn,Sn_CR_RECV);
    1254:	e0 82       	st	Z, r14
    1256:	48 01       	movw	r8, r16
    1258:	93 94       	inc	r9
    125a:	09 2c       	mov	r0, r9
    125c:	00 0c       	add	r0, r0
    125e:	aa 08       	sbc	r10, r10
    1260:	bb 08       	sbc	r11, r11
    1262:	40 e4       	ldi	r20, 0x40	; 64
    1264:	c5 01       	movw	r24, r10
    1266:	b4 01       	movw	r22, r8
    1268:	b7 d0       	rcall	.+366    	; 0x13d8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
    126a:	c5 01       	movw	r24, r10
    126c:	b4 01       	movw	r22, r8
    126e:	4d d0       	rcall	.+154    	; 0x130a <WIZCHIP_READ>
    1270:	81 11       	cpse	r24, r1
    1272:	fb cf       	rjmp	.-10     	; 0x126a <recvfrom+0x31c>
    1274:	f6 01       	movw	r30, r12
	sock_remained_size[sn] -= pack_len;
    1276:	ee 0f       	add	r30, r30
    1278:	ff 1f       	adc	r31, r31
    127a:	e6 59       	subi	r30, 0x96	; 150
    127c:	fb 4f       	sbci	r31, 0xFB	; 251
    127e:	80 81       	ld	r24, Z
    1280:	91 81       	ldd	r25, Z+1	; 0x01
    1282:	8e 19       	sub	r24, r14
    1284:	9f 09       	sbc	r25, r15
    1286:	91 83       	std	Z+1, r25	; 0x01
    1288:	80 83       	st	Z, r24
    128a:	89 2b       	or	r24, r25
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
    128c:	39 f0       	breq	.+14     	; 0x129c <recvfrom+0x34e>
    128e:	f6 01       	movw	r30, r12
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
    1290:	ee 59       	subi	r30, 0x9E	; 158
    1292:	fb 4f       	sbci	r31, 0xFB	; 251
    1294:	80 81       	ld	r24, Z
    1296:	81 60       	ori	r24, 0x01	; 1
    1298:	80 83       	st	Z, r24
    129a:	04 c0       	rjmp	.+8      	; 0x12a4 <recvfrom+0x356>
    129c:	f6 01       	movw	r30, r12
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
    129e:	ee 59       	subi	r30, 0x9E	; 158
    12a0:	fb 4f       	sbci	r31, 0xFB	; 251
    12a2:	10 82       	st	Z, r1
    12a4:	b7 01       	movw	r22, r14
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	16 c0       	rjmp	.+44     	; 0x12d8 <recvfrom+0x38a>
    12ac:	6f ef       	ldi	r22, 0xFF	; 255
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
    12ae:	7f ef       	ldi	r23, 0xFF	; 255
    12b0:	cb 01       	movw	r24, r22
    12b2:	12 c0       	rjmp	.+36     	; 0x12d8 <recvfrom+0x38a>
    12b4:	6b ef       	ldi	r22, 0xFB	; 251
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
    12b6:	7f ef       	ldi	r23, 0xFF	; 255
    12b8:	8f ef       	ldi	r24, 0xFF	; 255
    12ba:	9f ef       	ldi	r25, 0xFF	; 255
    12bc:	0d c0       	rjmp	.+26     	; 0x12d8 <recvfrom+0x38a>
    12be:	62 ef       	ldi	r22, 0xF2	; 242
   }
   CHECK_SOCKDATA();
    12c0:	7f ef       	ldi	r23, 0xFF	; 255
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	9f ef       	ldi	r25, 0xFF	; 255
    12c6:	08 c0       	rjmp	.+16     	; 0x12d8 <recvfrom+0x38a>
    12c8:	6c ef       	ldi	r22, 0xFC	; 252
   if(sock_remained_size[sn] == 0)
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    12ca:	7f ef       	ldi	r23, 0xFF	; 255
    12cc:	8f ef       	ldi	r24, 0xFF	; 255
    12ce:	9f ef       	ldi	r25, 0xFF	; 255
    12d0:	03 c0       	rjmp	.+6      	; 0x12d8 <recvfrom+0x38a>
    12d2:	60 e0       	ldi	r22, 0x00	; 0
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	cb 01       	movw	r24, r22
    12d8:	2c 96       	adiw	r28, 0x0c	; 12
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
}
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	ff 90       	pop	r15
    12ee:	ef 90       	pop	r14
    12f0:	df 90       	pop	r13
    12f2:	cf 90       	pop	r12
    12f4:	bf 90       	pop	r11
    12f6:	af 90       	pop	r10
    12f8:	9f 90       	pop	r9
    12fa:	8f 90       	pop	r8
    12fc:	7f 90       	pop	r7
    12fe:	6f 90       	pop	r6
    1300:	5f 90       	pop	r5
    1302:	4f 90       	pop	r4
    1304:	3f 90       	pop	r3
    1306:	2f 90       	pop	r2
    1308:	08 95       	ret

0000130a <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	00 d0       	rcall	.+0      	; 0x131a <WIZCHIP_READ+0x10>
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	f6 2e       	mov	r15, r22
    1320:	e7 2e       	mov	r14, r23
    1322:	d8 2e       	mov	r13, r24
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
    1324:	06 e0       	ldi	r16, 0x06	; 6
    1326:	12 e0       	ldi	r17, 0x02	; 2
    1328:	d8 01       	movw	r26, r16
    132a:	18 96       	adiw	r26, 0x08	; 8
    132c:	ed 91       	ld	r30, X+
    132e:	fc 91       	ld	r31, X
    1330:	19 97       	sbiw	r26, 0x09	; 9
    1332:	19 95       	eicall
   WIZCHIP.CS._select();
    1334:	d8 01       	movw	r26, r16
    1336:	1c 96       	adiw	r26, 0x0c	; 12
    1338:	ed 91       	ld	r30, X+
    133a:	fc 91       	ld	r31, X
    133c:	1d 97       	sbiw	r26, 0x0d	; 13
    133e:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    1340:	f8 01       	movw	r30, r16
    1342:	84 89       	ldd	r24, Z+20	; 0x14
    1344:	95 89       	ldd	r25, Z+21	; 0x15
    1346:	89 2b       	or	r24, r25
    1348:	31 f0       	breq	.+12     	; 0x1356 <WIZCHIP_READ+0x4c>
    134a:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
    134e:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
    1352:	30 97       	sbiw	r30, 0x00	; 0
    1354:	c1 f4       	brne	.+48     	; 0x1386 <WIZCHIP_READ+0x7c>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1356:	06 e0       	ldi	r16, 0x06	; 6
    1358:	12 e0       	ldi	r17, 0x02	; 2
    135a:	d8 01       	movw	r26, r16
    135c:	52 96       	adiw	r26, 0x12	; 18
    135e:	ed 91       	ld	r30, X+
    1360:	fc 91       	ld	r31, X
    1362:	53 97       	sbiw	r26, 0x13	; 19
    1364:	8d 2d       	mov	r24, r13
    1366:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    1368:	d8 01       	movw	r26, r16
    136a:	52 96       	adiw	r26, 0x12	; 18
    136c:	ed 91       	ld	r30, X+
    136e:	fc 91       	ld	r31, X
    1370:	53 97       	sbiw	r26, 0x13	; 19
    1372:	8e 2d       	mov	r24, r14
    1374:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    1376:	d8 01       	movw	r26, r16
    1378:	52 96       	adiw	r26, 0x12	; 18
    137a:	ed 91       	ld	r30, X+
    137c:	fc 91       	ld	r31, X
    137e:	53 97       	sbiw	r26, 0x13	; 19
    1380:	8f 2d       	mov	r24, r15
    1382:	19 95       	eicall
    1384:	08 c0       	rjmp	.+16     	; 0x1396 <WIZCHIP_READ+0x8c>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    1386:	d9 82       	std	Y+1, r13	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    1388:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    138a:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    138c:	63 e0       	ldi	r22, 0x03	; 3
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	ce 01       	movw	r24, r28
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	19 95       	eicall
   }
   ret = WIZCHIP.IF.SPI._read_byte();
    1396:	06 e0       	ldi	r16, 0x06	; 6
    1398:	12 e0       	ldi	r17, 0x02	; 2
    139a:	d8 01       	movw	r26, r16
    139c:	50 96       	adiw	r26, 0x10	; 16
    139e:	ed 91       	ld	r30, X+
    13a0:	fc 91       	ld	r31, X
    13a2:	51 97       	sbiw	r26, 0x11	; 17
    13a4:	19 95       	eicall
    13a6:	f8 2e       	mov	r15, r24

   WIZCHIP.CS._deselect();
    13a8:	d8 01       	movw	r26, r16
    13aa:	1e 96       	adiw	r26, 0x0e	; 14
    13ac:	ed 91       	ld	r30, X+
    13ae:	fc 91       	ld	r31, X
    13b0:	1f 97       	sbiw	r26, 0x0f	; 15
    13b2:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    13b4:	d8 01       	movw	r26, r16
    13b6:	1a 96       	adiw	r26, 0x0a	; 10
    13b8:	ed 91       	ld	r30, X+
    13ba:	fc 91       	ld	r31, X
    13bc:	1b 97       	sbiw	r26, 0x0b	; 11
    13be:	19 95       	eicall
   return ret;
}
    13c0:	8f 2d       	mov	r24, r15
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	df 90       	pop	r13
    13d6:	08 95       	ret

000013d8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
    13d8:	4f 92       	push	r4
    13da:	5f 92       	push	r5
    13dc:	6f 92       	push	r6
    13de:	7f 92       	push	r7
    13e0:	bf 92       	push	r11
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <WIZCHIP_WRITE+0x1c>
    13f4:	1f 92       	push	r1
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	6b 01       	movw	r12, r22
    13fc:	7c 01       	movw	r14, r24
    13fe:	b4 2e       	mov	r11, r20
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
    1400:	06 e0       	ldi	r16, 0x06	; 6
    1402:	12 e0       	ldi	r17, 0x02	; 2
    1404:	d8 01       	movw	r26, r16
    1406:	18 96       	adiw	r26, 0x08	; 8
    1408:	ed 91       	ld	r30, X+
    140a:	fc 91       	ld	r31, X
    140c:	19 97       	sbiw	r26, 0x09	; 9
    140e:	19 95       	eicall
   WIZCHIP.CS._select();
    1410:	d8 01       	movw	r26, r16
    1412:	1c 96       	adiw	r26, 0x0c	; 12
    1414:	ed 91       	ld	r30, X+
    1416:	fc 91       	ld	r31, X
    1418:	1d 97       	sbiw	r26, 0x0d	; 13
    141a:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    141c:	26 01       	movw	r4, r12
    141e:	37 01       	movw	r6, r14
    1420:	68 94       	set
    1422:	42 f8       	bld	r4, 2

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    1424:	d8 01       	movw	r26, r16
    1426:	56 96       	adiw	r26, 0x16	; 22
    1428:	ed 91       	ld	r30, X+
    142a:	fc 91       	ld	r31, X
    142c:	57 97       	sbiw	r26, 0x17	; 23
    142e:	30 97       	sbiw	r30, 0x00	; 0
    1430:	e1 f4       	brne	.+56     	; 0x146a <WIZCHIP_WRITE+0x92>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1432:	52 96       	adiw	r26, 0x12	; 18
    1434:	ed 91       	ld	r30, X+
    1436:	fc 91       	ld	r31, X
    1438:	53 97       	sbiw	r26, 0x13	; 19
    143a:	8e 2d       	mov	r24, r14
    143c:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    143e:	d8 01       	movw	r26, r16
    1440:	52 96       	adiw	r26, 0x12	; 18
    1442:	ed 91       	ld	r30, X+
    1444:	fc 91       	ld	r31, X
    1446:	53 97       	sbiw	r26, 0x13	; 19
    1448:	8d 2d       	mov	r24, r13
    144a:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    144c:	d8 01       	movw	r26, r16
    144e:	52 96       	adiw	r26, 0x12	; 18
    1450:	ed 91       	ld	r30, X+
    1452:	fc 91       	ld	r31, X
    1454:	53 97       	sbiw	r26, 0x13	; 19
    1456:	84 2d       	mov	r24, r4
    1458:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte(wb);
    145a:	d8 01       	movw	r26, r16
    145c:	52 96       	adiw	r26, 0x12	; 18
    145e:	ed 91       	ld	r30, X+
    1460:	fc 91       	ld	r31, X
    1462:	53 97       	sbiw	r26, 0x13	; 19
    1464:	8b 2d       	mov	r24, r11
    1466:	19 95       	eicall
    1468:	09 c0       	rjmp	.+18     	; 0x147c <WIZCHIP_WRITE+0xa4>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    146a:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    146c:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    146e:	4b 82       	std	Y+3, r4	; 0x03
		spi_data[3] = wb;
    1470:	bc 82       	std	Y+4, r11	; 0x04
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
    1472:	64 e0       	ldi	r22, 0x04	; 4
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	ce 01       	movw	r24, r28
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    147c:	06 e0       	ldi	r16, 0x06	; 6
    147e:	12 e0       	ldi	r17, 0x02	; 2
    1480:	d8 01       	movw	r26, r16
    1482:	1e 96       	adiw	r26, 0x0e	; 14
    1484:	ed 91       	ld	r30, X+
    1486:	fc 91       	ld	r31, X
    1488:	1f 97       	sbiw	r26, 0x0f	; 15
    148a:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    148c:	d8 01       	movw	r26, r16
    148e:	1a 96       	adiw	r26, 0x0a	; 10
    1490:	ed 91       	ld	r30, X+
    1492:	fc 91       	ld	r31, X
    1494:	1b 97       	sbiw	r26, 0x0b	; 11
    1496:	19 95       	eicall
}
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	ff 90       	pop	r15
    14aa:	ef 90       	pop	r14
    14ac:	df 90       	pop	r13
    14ae:	cf 90       	pop	r12
    14b0:	bf 90       	pop	r11
    14b2:	7f 90       	pop	r7
    14b4:	6f 90       	pop	r6
    14b6:	5f 90       	pop	r5
    14b8:	4f 90       	pop	r4
    14ba:	08 95       	ret

000014bc <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    14bc:	9f 92       	push	r9
    14be:	af 92       	push	r10
    14c0:	bf 92       	push	r11
    14c2:	cf 92       	push	r12
    14c4:	df 92       	push	r13
    14c6:	ef 92       	push	r14
    14c8:	ff 92       	push	r15
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <WIZCHIP_READ_BUF+0x18>
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	f6 2e       	mov	r15, r22
    14da:	e7 2e       	mov	r14, r23
    14dc:	98 2e       	mov	r9, r24
    14de:	5a 01       	movw	r10, r20
    14e0:	69 01       	movw	r12, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    14e2:	06 e0       	ldi	r16, 0x06	; 6
    14e4:	12 e0       	ldi	r17, 0x02	; 2
    14e6:	d8 01       	movw	r26, r16
    14e8:	18 96       	adiw	r26, 0x08	; 8
    14ea:	ed 91       	ld	r30, X+
    14ec:	fc 91       	ld	r31, X
    14ee:	19 97       	sbiw	r26, 0x09	; 9
    14f0:	19 95       	eicall
   WIZCHIP.CS._select();
    14f2:	d8 01       	movw	r26, r16
    14f4:	1c 96       	adiw	r26, 0x0c	; 12
    14f6:	ed 91       	ld	r30, X+
    14f8:	fc 91       	ld	r31, X
    14fa:	1d 97       	sbiw	r26, 0x0d	; 13
    14fc:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    14fe:	f8 01       	movw	r30, r16
    1500:	84 89       	ldd	r24, Z+20	; 0x14
    1502:	95 89       	ldd	r25, Z+21	; 0x15
    1504:	89 2b       	or	r24, r25
    1506:	31 f0       	breq	.+12     	; 0x1514 <WIZCHIP_READ_BUF+0x58>
    1508:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
    150c:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
    1510:	30 97       	sbiw	r30, 0x00	; 0
    1512:	51 f5       	brne	.+84     	; 0x1568 <WIZCHIP_READ_BUF+0xac>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1514:	06 e0       	ldi	r16, 0x06	; 6
    1516:	12 e0       	ldi	r17, 0x02	; 2
    1518:	d8 01       	movw	r26, r16
    151a:	52 96       	adiw	r26, 0x12	; 18
    151c:	ed 91       	ld	r30, X+
    151e:	fc 91       	ld	r31, X
    1520:	53 97       	sbiw	r26, 0x13	; 19
    1522:	89 2d       	mov	r24, r9
    1524:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    1526:	d8 01       	movw	r26, r16
    1528:	52 96       	adiw	r26, 0x12	; 18
    152a:	ed 91       	ld	r30, X+
    152c:	fc 91       	ld	r31, X
    152e:	53 97       	sbiw	r26, 0x13	; 19
    1530:	8e 2d       	mov	r24, r14
    1532:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    1534:	d8 01       	movw	r26, r16
    1536:	52 96       	adiw	r26, 0x12	; 18
    1538:	ed 91       	ld	r30, X+
    153a:	fc 91       	ld	r31, X
    153c:	53 97       	sbiw	r26, 0x13	; 19
    153e:	8f 2d       	mov	r24, r15
    1540:	19 95       	eicall
		for(i = 0; i < len; i++)
    1542:	00 e0       	ldi	r16, 0x00	; 0
    1544:	10 e0       	ldi	r17, 0x00	; 0
    1546:	0c c0       	rjmp	.+24     	; 0x1560 <WIZCHIP_READ_BUF+0xa4>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
    1548:	75 01       	movw	r14, r10
    154a:	e0 0e       	add	r14, r16
    154c:	f1 1e       	adc	r15, r17
    154e:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <WIZCHIP+0x10>
    1552:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <WIZCHIP+0x11>
    1556:	19 95       	eicall
    1558:	f7 01       	movw	r30, r14
    155a:	80 83       	st	Z, r24
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    155c:	0f 5f       	subi	r16, 0xFF	; 255
    155e:	1f 4f       	sbci	r17, 0xFF	; 255
    1560:	0c 15       	cp	r16, r12
    1562:	1d 05       	cpc	r17, r13
    1564:	88 f3       	brcs	.-30     	; 0x1548 <WIZCHIP_READ_BUF+0x8c>
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <WIZCHIP_READ_BUF+0xca>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    1568:	99 82       	std	Y+1, r9	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    156a:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    156c:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    156e:	63 e0       	ldi	r22, 0x03	; 3
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	ce 01       	movw	r24, r28
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	19 95       	eicall
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
    1578:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <WIZCHIP+0x14>
    157c:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <WIZCHIP+0x15>
    1580:	b6 01       	movw	r22, r12
    1582:	c5 01       	movw	r24, r10
    1584:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    1586:	06 e0       	ldi	r16, 0x06	; 6
    1588:	12 e0       	ldi	r17, 0x02	; 2
    158a:	d8 01       	movw	r26, r16
    158c:	1e 96       	adiw	r26, 0x0e	; 14
    158e:	ed 91       	ld	r30, X+
    1590:	fc 91       	ld	r31, X
    1592:	1f 97       	sbiw	r26, 0x0f	; 15
    1594:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    1596:	d8 01       	movw	r26, r16
    1598:	1a 96       	adiw	r26, 0x0a	; 10
    159a:	ed 91       	ld	r30, X+
    159c:	fc 91       	ld	r31, X
    159e:	1b 97       	sbiw	r26, 0x0b	; 11
    15a0:	19 95       	eicall
}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	ff 90       	pop	r15
    15b2:	ef 90       	pop	r14
    15b4:	df 90       	pop	r13
    15b6:	cf 90       	pop	r12
    15b8:	bf 90       	pop	r11
    15ba:	af 90       	pop	r10
    15bc:	9f 90       	pop	r9
    15be:	08 95       	ret

000015c0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    15c0:	4f 92       	push	r4
    15c2:	5f 92       	push	r5
    15c4:	6f 92       	push	r6
    15c6:	7f 92       	push	r7
    15c8:	8f 92       	push	r8
    15ca:	9f 92       	push	r9
    15cc:	af 92       	push	r10
    15ce:	bf 92       	push	r11
    15d0:	cf 92       	push	r12
    15d2:	df 92       	push	r13
    15d4:	ef 92       	push	r14
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <WIZCHIP_WRITE_BUF+0x22>
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	6b 01       	movw	r12, r22
    15e8:	7c 01       	movw	r14, r24
    15ea:	4a 01       	movw	r8, r20
    15ec:	59 01       	movw	r10, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    15ee:	06 e0       	ldi	r16, 0x06	; 6
    15f0:	12 e0       	ldi	r17, 0x02	; 2
    15f2:	d8 01       	movw	r26, r16
    15f4:	18 96       	adiw	r26, 0x08	; 8
    15f6:	ed 91       	ld	r30, X+
    15f8:	fc 91       	ld	r31, X
    15fa:	19 97       	sbiw	r26, 0x09	; 9
    15fc:	19 95       	eicall
   WIZCHIP.CS._select();
    15fe:	d8 01       	movw	r26, r16
    1600:	1c 96       	adiw	r26, 0x0c	; 12
    1602:	ed 91       	ld	r30, X+
    1604:	fc 91       	ld	r31, X
    1606:	1d 97       	sbiw	r26, 0x0d	; 13
    1608:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    160a:	26 01       	movw	r4, r12
    160c:	37 01       	movw	r6, r14
    160e:	68 94       	set
    1610:	42 f8       	bld	r4, 2

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    1612:	d8 01       	movw	r26, r16
    1614:	56 96       	adiw	r26, 0x16	; 22
    1616:	ed 91       	ld	r30, X+
    1618:	fc 91       	ld	r31, X
    161a:	57 97       	sbiw	r26, 0x17	; 23
    161c:	30 97       	sbiw	r30, 0x00	; 0
    161e:	31 f5       	brne	.+76     	; 0x166c <WIZCHIP_WRITE_BUF+0xac>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    1620:	52 96       	adiw	r26, 0x12	; 18
    1622:	ed 91       	ld	r30, X+
    1624:	fc 91       	ld	r31, X
    1626:	53 97       	sbiw	r26, 0x13	; 19
    1628:	8e 2d       	mov	r24, r14
    162a:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    162c:	d8 01       	movw	r26, r16
    162e:	52 96       	adiw	r26, 0x12	; 18
    1630:	ed 91       	ld	r30, X+
    1632:	fc 91       	ld	r31, X
    1634:	53 97       	sbiw	r26, 0x13	; 19
    1636:	8d 2d       	mov	r24, r13
    1638:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    163a:	d8 01       	movw	r26, r16
    163c:	52 96       	adiw	r26, 0x12	; 18
    163e:	ed 91       	ld	r30, X+
    1640:	fc 91       	ld	r31, X
    1642:	53 97       	sbiw	r26, 0x13	; 19
    1644:	84 2d       	mov	r24, r4
    1646:	19 95       	eicall
		for(i = 0; i < len; i++)
    1648:	00 e0       	ldi	r16, 0x00	; 0
    164a:	10 e0       	ldi	r17, 0x00	; 0
    164c:	0b c0       	rjmp	.+22     	; 0x1664 <WIZCHIP_WRITE_BUF+0xa4>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
    164e:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <WIZCHIP+0x12>
    1652:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <WIZCHIP+0x13>
    1656:	d4 01       	movw	r26, r8
    1658:	a0 0f       	add	r26, r16
    165a:	b1 1f       	adc	r27, r17
    165c:	8c 91       	ld	r24, X
    165e:	19 95       	eicall
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    1660:	0f 5f       	subi	r16, 0xFF	; 255
    1662:	1f 4f       	sbci	r17, 0xFF	; 255
    1664:	0a 15       	cp	r16, r10
    1666:	1b 05       	cpc	r17, r11
    1668:	90 f3       	brcs	.-28     	; 0x164e <WIZCHIP_WRITE_BUF+0x8e>
    166a:	0f c0       	rjmp	.+30     	; 0x168a <WIZCHIP_WRITE_BUF+0xca>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    166c:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    166e:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    1670:	4b 82       	std	Y+3, r4	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    1672:	63 e0       	ldi	r22, 0x03	; 3
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	ce 01       	movw	r24, r28
    1678:	01 96       	adiw	r24, 0x01	; 1
    167a:	19 95       	eicall
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
    167c:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <WIZCHIP+0x16>
    1680:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <WIZCHIP+0x17>
    1684:	b5 01       	movw	r22, r10
    1686:	c4 01       	movw	r24, r8
    1688:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    168a:	06 e0       	ldi	r16, 0x06	; 6
    168c:	12 e0       	ldi	r17, 0x02	; 2
    168e:	d8 01       	movw	r26, r16
    1690:	1e 96       	adiw	r26, 0x0e	; 14
    1692:	ed 91       	ld	r30, X+
    1694:	fc 91       	ld	r31, X
    1696:	1f 97       	sbiw	r26, 0x0f	; 15
    1698:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    169a:	d8 01       	movw	r26, r16
    169c:	1a 96       	adiw	r26, 0x0a	; 10
    169e:	ed 91       	ld	r30, X+
    16a0:	fc 91       	ld	r31, X
    16a2:	1b 97       	sbiw	r26, 0x0b	; 11
    16a4:	19 95       	eicall
}
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	df 90       	pop	r13
    16ba:	cf 90       	pop	r12
    16bc:	bf 90       	pop	r11
    16be:	af 90       	pop	r10
    16c0:	9f 90       	pop	r9
    16c2:	8f 90       	pop	r8
    16c4:	7f 90       	pop	r7
    16c6:	6f 90       	pop	r6
    16c8:	5f 90       	pop	r5
    16ca:	4f 90       	pop	r4
    16cc:	08 95       	ret

000016ce <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
    16ce:	7f 92       	push	r7
    16d0:	8f 92       	push	r8
    16d2:	9f 92       	push	r9
    16d4:	af 92       	push	r10
    16d6:	bf 92       	push	r11
    16d8:	cf 92       	push	r12
    16da:	df 92       	push	r13
    16dc:	ef 92       	push	r14
    16de:	ff 92       	push	r15
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	78 2e       	mov	r7, r24
   uint16_t val=0,val1=0;
    16ea:	00 e0       	ldi	r16, 0x00	; 0
    16ec:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    16ee:	c7 2c       	mov	r12, r7
    16f0:	d1 2c       	mov	r13, r1
    16f2:	cc 0c       	add	r12, r12
    16f4:	dd 1c       	adc	r13, r13
    16f6:	cc 0c       	add	r12, r12
    16f8:	dd 1c       	adc	r13, r13
    16fa:	8f ef       	ldi	r24, 0xFF	; 255
    16fc:	c8 1a       	sub	r12, r24
    16fe:	d8 0a       	sbc	r13, r24
    1700:	cc 0c       	add	r12, r12
    1702:	dd 1c       	adc	r13, r13
    1704:	cc 0c       	add	r12, r12
    1706:	dd 1c       	adc	r13, r13
    1708:	cc 0c       	add	r12, r12
    170a:	dd 1c       	adc	r13, r13
    170c:	46 01       	movw	r8, r12
    170e:	80 ee       	ldi	r24, 0xE0	; 224
    1710:	98 1a       	sub	r9, r24
    1712:	09 2c       	mov	r0, r9
    1714:	00 0c       	add	r0, r0
    1716:	aa 08       	sbc	r10, r10
    1718:	bb 08       	sbc	r11, r11
    171a:	c5 01       	movw	r24, r10
    171c:	b4 01       	movw	r22, r8
    171e:	f5 dd       	rcall	.-1046   	; 0x130a <WIZCHIP_READ>
    1720:	c8 2f       	mov	r28, r24
    1722:	d0 e0       	ldi	r29, 0x00	; 0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    1724:	dc 2f       	mov	r29, r28
    1726:	cc 27       	eor	r28, r28
    1728:	8f ed       	ldi	r24, 0xDF	; 223
    172a:	d8 1a       	sub	r13, r24
    172c:	0d 2c       	mov	r0, r13
    172e:	00 0c       	add	r0, r0
    1730:	ee 08       	sbc	r14, r14
    1732:	ff 08       	sbc	r15, r15
    1734:	c7 01       	movw	r24, r14
    1736:	b6 01       	movw	r22, r12
    1738:	e8 dd       	rcall	.-1072   	; 0x130a <WIZCHIP_READ>
    173a:	c8 0f       	add	r28, r24
    173c:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    173e:	20 97       	sbiw	r28, 0x00	; 0
    1740:	61 f0       	breq	.+24     	; 0x175a <getSn_TX_FSR+0x8c>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
    1742:	c5 01       	movw	r24, r10
    1744:	b4 01       	movw	r22, r8
    1746:	e1 dd       	rcall	.-1086   	; 0x130a <WIZCHIP_READ>
    1748:	08 2f       	mov	r16, r24
    174a:	10 e0       	ldi	r17, 0x00	; 0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    174c:	10 2f       	mov	r17, r16
    174e:	00 27       	eor	r16, r16
    1750:	c7 01       	movw	r24, r14
    1752:	b6 01       	movw	r22, r12
    1754:	da dd       	rcall	.-1100   	; 0x130a <WIZCHIP_READ>
    1756:	08 0f       	add	r16, r24
    1758:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    175a:	0c 17       	cp	r16, r28
    175c:	1d 07       	cpc	r17, r29
    175e:	39 f6       	brne	.-114    	; 0x16ee <getSn_TX_FSR+0x20>
   return val;
}
    1760:	c8 01       	movw	r24, r16
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	df 90       	pop	r13
    1770:	cf 90       	pop	r12
    1772:	bf 90       	pop	r11
    1774:	af 90       	pop	r10
    1776:	9f 90       	pop	r9
    1778:	8f 90       	pop	r8
    177a:	7f 90       	pop	r7
    177c:	08 95       	ret

0000177e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
    177e:	7f 92       	push	r7
    1780:	8f 92       	push	r8
    1782:	9f 92       	push	r9
    1784:	af 92       	push	r10
    1786:	bf 92       	push	r11
    1788:	cf 92       	push	r12
    178a:	df 92       	push	r13
    178c:	ef 92       	push	r14
    178e:	ff 92       	push	r15
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	78 2e       	mov	r7, r24
   uint16_t val=0,val1=0;
    179a:	00 e0       	ldi	r16, 0x00	; 0
    179c:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    179e:	c7 2c       	mov	r12, r7
    17a0:	d1 2c       	mov	r13, r1
    17a2:	cc 0c       	add	r12, r12
    17a4:	dd 1c       	adc	r13, r13
    17a6:	cc 0c       	add	r12, r12
    17a8:	dd 1c       	adc	r13, r13
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	c8 1a       	sub	r12, r24
    17ae:	d8 0a       	sbc	r13, r24
    17b0:	cc 0c       	add	r12, r12
    17b2:	dd 1c       	adc	r13, r13
    17b4:	cc 0c       	add	r12, r12
    17b6:	dd 1c       	adc	r13, r13
    17b8:	cc 0c       	add	r12, r12
    17ba:	dd 1c       	adc	r13, r13
    17bc:	46 01       	movw	r8, r12
    17be:	8a ed       	ldi	r24, 0xDA	; 218
    17c0:	98 1a       	sub	r9, r24
    17c2:	09 2c       	mov	r0, r9
    17c4:	00 0c       	add	r0, r0
    17c6:	aa 08       	sbc	r10, r10
    17c8:	bb 08       	sbc	r11, r11
    17ca:	c5 01       	movw	r24, r10
    17cc:	b4 01       	movw	r22, r8
    17ce:	9d dd       	rcall	.-1222   	; 0x130a <WIZCHIP_READ>
    17d0:	c8 2f       	mov	r28, r24
    17d2:	d0 e0       	ldi	r29, 0x00	; 0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    17d4:	dc 2f       	mov	r29, r28
    17d6:	cc 27       	eor	r28, r28
    17d8:	89 ed       	ldi	r24, 0xD9	; 217
    17da:	d8 1a       	sub	r13, r24
    17dc:	0d 2c       	mov	r0, r13
    17de:	00 0c       	add	r0, r0
    17e0:	ee 08       	sbc	r14, r14
    17e2:	ff 08       	sbc	r15, r15
    17e4:	c7 01       	movw	r24, r14
    17e6:	b6 01       	movw	r22, r12
    17e8:	90 dd       	rcall	.-1248   	; 0x130a <WIZCHIP_READ>
    17ea:	c8 0f       	add	r28, r24
    17ec:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    17ee:	20 97       	sbiw	r28, 0x00	; 0
    17f0:	61 f0       	breq	.+24     	; 0x180a <getSn_RX_RSR+0x8c>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
    17f2:	c5 01       	movw	r24, r10
    17f4:	b4 01       	movw	r22, r8
    17f6:	89 dd       	rcall	.-1262   	; 0x130a <WIZCHIP_READ>
    17f8:	08 2f       	mov	r16, r24
    17fa:	10 e0       	ldi	r17, 0x00	; 0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    17fc:	10 2f       	mov	r17, r16
    17fe:	00 27       	eor	r16, r16
    1800:	c7 01       	movw	r24, r14
    1802:	b6 01       	movw	r22, r12
    1804:	82 dd       	rcall	.-1276   	; 0x130a <WIZCHIP_READ>
    1806:	08 0f       	add	r16, r24
    1808:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    180a:	0c 17       	cp	r16, r28
    180c:	1d 07       	cpc	r17, r29
    180e:	39 f6       	brne	.-114    	; 0x179e <getSn_RX_RSR+0x20>
   return val;
}
    1810:	c8 01       	movw	r24, r16
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	df 90       	pop	r13
    1820:	cf 90       	pop	r12
    1822:	bf 90       	pop	r11
    1824:	af 90       	pop	r10
    1826:	9f 90       	pop	r9
    1828:	8f 90       	pop	r8
    182a:	7f 90       	pop	r7
    182c:	08 95       	ret

0000182e <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    182e:	2f 92       	push	r2
    1830:	3f 92       	push	r3
    1832:	4f 92       	push	r4
    1834:	5f 92       	push	r5
    1836:	6f 92       	push	r6
    1838:	7f 92       	push	r7
    183a:	8f 92       	push	r8
    183c:	9f 92       	push	r9
    183e:	af 92       	push	r10
    1840:	bf 92       	push	r11
    1842:	cf 92       	push	r12
    1844:	df 92       	push	r13
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	00 d0       	rcall	.+0      	; 0x1854 <wiz_send_data+0x26>
    1854:	1f 92       	push	r1
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
    185a:	41 15       	cp	r20, r1
    185c:	51 05       	cpc	r21, r1
    185e:	09 f4       	brne	.+2      	; 0x1862 <wiz_send_data+0x34>
    1860:	56 c0       	rjmp	.+172    	; 0x190e <wiz_send_data+0xe0>
    1862:	3a 01       	movw	r6, r20
    1864:	7a 83       	std	Y+2, r23	; 0x02
    1866:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_TX_WR(sn);
    1868:	28 2e       	mov	r2, r24
    186a:	31 2c       	mov	r3, r1
    186c:	22 0c       	add	r2, r2
    186e:	33 1c       	adc	r3, r3
    1870:	22 0c       	add	r2, r2
    1872:	33 1c       	adc	r3, r3
    1874:	61 01       	movw	r12, r2
    1876:	2f ef       	ldi	r18, 0xFF	; 255
    1878:	c2 1a       	sub	r12, r18
    187a:	d2 0a       	sbc	r13, r18
    187c:	cc 0c       	add	r12, r12
    187e:	dd 1c       	adc	r13, r13
    1880:	cc 0c       	add	r12, r12
    1882:	dd 1c       	adc	r13, r13
    1884:	cc 0c       	add	r12, r12
    1886:	dd 1c       	adc	r13, r13
    1888:	46 01       	movw	r8, r12
    188a:	3c ed       	ldi	r19, 0xDC	; 220
    188c:	93 1a       	sub	r9, r19
    188e:	09 2c       	mov	r0, r9
    1890:	00 0c       	add	r0, r0
    1892:	aa 08       	sbc	r10, r10
    1894:	bb 08       	sbc	r11, r11
    1896:	c5 01       	movw	r24, r10
    1898:	b4 01       	movw	r22, r8
    189a:	37 dd       	rcall	.-1426   	; 0x130a <WIZCHIP_READ>
    189c:	08 2f       	mov	r16, r24
    189e:	10 e0       	ldi	r17, 0x00	; 0
    18a0:	10 2f       	mov	r17, r16
    18a2:	00 27       	eor	r16, r16
    18a4:	8b ed       	ldi	r24, 0xDB	; 219
    18a6:	d8 1a       	sub	r13, r24
    18a8:	0d 2c       	mov	r0, r13
    18aa:	00 0c       	add	r0, r0
    18ac:	ee 08       	sbc	r14, r14
    18ae:	ff 08       	sbc	r15, r15
    18b0:	c7 01       	movw	r24, r14
    18b2:	b6 01       	movw	r22, r12
    18b4:	2a dd       	rcall	.-1452   	; 0x130a <WIZCHIP_READ>
    18b6:	08 0f       	add	r16, r24
    18b8:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
    18ba:	c8 01       	movw	r24, r16
    18bc:	a0 e0       	ldi	r26, 0x00	; 0
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	44 27       	eor	r20, r20
    18c2:	58 2f       	mov	r21, r24
    18c4:	69 2f       	mov	r22, r25
    18c6:	7a 2f       	mov	r23, r26
    18c8:	c1 01       	movw	r24, r2
    18ca:	02 96       	adiw	r24, 0x02	; 2
    18cc:	1c 01       	movw	r2, r24
    18ce:	22 0c       	add	r2, r2
    18d0:	33 1c       	adc	r3, r3
    18d2:	22 0c       	add	r2, r2
    18d4:	33 1c       	adc	r3, r3
    18d6:	22 0c       	add	r2, r2
    18d8:	33 1c       	adc	r3, r3
    18da:	c1 01       	movw	r24, r2
    18dc:	33 0c       	add	r3, r3
    18de:	aa 0b       	sbc	r26, r26
    18e0:	bb 0b       	sbc	r27, r27
    18e2:	1a 01       	movw	r2, r20
    18e4:	2b 01       	movw	r4, r22
    18e6:	28 0e       	add	r2, r24
    18e8:	39 1e       	adc	r3, r25
    18ea:	4a 1e       	adc	r4, r26
    18ec:	5b 1e       	adc	r5, r27
    18ee:	c2 01       	movw	r24, r4
    18f0:	b1 01       	movw	r22, r2
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    18f2:	93 01       	movw	r18, r6
    18f4:	49 81       	ldd	r20, Y+1	; 0x01
    18f6:	5a 81       	ldd	r21, Y+2	; 0x02
    18f8:	63 de       	rcall	.-826    	; 0x15c0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
    18fa:	06 0d       	add	r16, r6
    18fc:	17 1d       	adc	r17, r7
   setSn_TX_WR(sn,ptr);
    18fe:	41 2f       	mov	r20, r17
    1900:	c5 01       	movw	r24, r10
    1902:	b4 01       	movw	r22, r8
    1904:	69 dd       	rcall	.-1326   	; 0x13d8 <WIZCHIP_WRITE>
    1906:	40 2f       	mov	r20, r16
    1908:	c7 01       	movw	r24, r14
    190a:	b6 01       	movw	r22, r12
    190c:	65 dd       	rcall	.-1334   	; 0x13d8 <WIZCHIP_WRITE>
}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	1f 91       	pop	r17
    191c:	0f 91       	pop	r16
    191e:	ff 90       	pop	r15
    1920:	ef 90       	pop	r14
    1922:	df 90       	pop	r13
    1924:	cf 90       	pop	r12
    1926:	bf 90       	pop	r11
    1928:	af 90       	pop	r10
    192a:	9f 90       	pop	r9
    192c:	8f 90       	pop	r8
    192e:	7f 90       	pop	r7
    1930:	6f 90       	pop	r6
    1932:	5f 90       	pop	r5
    1934:	4f 90       	pop	r4
    1936:	3f 90       	pop	r3
    1938:	2f 90       	pop	r2
    193a:	08 95       	ret

0000193c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    193c:	2f 92       	push	r2
    193e:	3f 92       	push	r3
    1940:	4f 92       	push	r4
    1942:	5f 92       	push	r5
    1944:	6f 92       	push	r6
    1946:	7f 92       	push	r7
    1948:	8f 92       	push	r8
    194a:	9f 92       	push	r9
    194c:	af 92       	push	r10
    194e:	bf 92       	push	r11
    1950:	cf 92       	push	r12
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	00 d0       	rcall	.+0      	; 0x1962 <wiz_recv_data+0x26>
    1962:	1f 92       	push	r1
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
    1968:	41 15       	cp	r20, r1
    196a:	51 05       	cpc	r21, r1
    196c:	09 f4       	brne	.+2      	; 0x1970 <wiz_recv_data+0x34>
    196e:	56 c0       	rjmp	.+172    	; 0x1a1c <wiz_recv_data+0xe0>
    1970:	3a 01       	movw	r6, r20
    1972:	7a 83       	std	Y+2, r23	; 0x02
    1974:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_RX_RD(sn);
    1976:	28 2e       	mov	r2, r24
    1978:	31 2c       	mov	r3, r1
    197a:	22 0c       	add	r2, r2
    197c:	33 1c       	adc	r3, r3
    197e:	22 0c       	add	r2, r2
    1980:	33 1c       	adc	r3, r3
    1982:	61 01       	movw	r12, r2
    1984:	2f ef       	ldi	r18, 0xFF	; 255
    1986:	c2 1a       	sub	r12, r18
    1988:	d2 0a       	sbc	r13, r18
    198a:	cc 0c       	add	r12, r12
    198c:	dd 1c       	adc	r13, r13
    198e:	cc 0c       	add	r12, r12
    1990:	dd 1c       	adc	r13, r13
    1992:	cc 0c       	add	r12, r12
    1994:	dd 1c       	adc	r13, r13
    1996:	46 01       	movw	r8, r12
    1998:	38 ed       	ldi	r19, 0xD8	; 216
    199a:	93 1a       	sub	r9, r19
    199c:	09 2c       	mov	r0, r9
    199e:	00 0c       	add	r0, r0
    19a0:	aa 08       	sbc	r10, r10
    19a2:	bb 08       	sbc	r11, r11
    19a4:	c5 01       	movw	r24, r10
    19a6:	b4 01       	movw	r22, r8
    19a8:	b0 dc       	rcall	.-1696   	; 0x130a <WIZCHIP_READ>
    19aa:	08 2f       	mov	r16, r24
    19ac:	10 e0       	ldi	r17, 0x00	; 0
    19ae:	10 2f       	mov	r17, r16
    19b0:	00 27       	eor	r16, r16
    19b2:	87 ed       	ldi	r24, 0xD7	; 215
    19b4:	d8 1a       	sub	r13, r24
    19b6:	0d 2c       	mov	r0, r13
    19b8:	00 0c       	add	r0, r0
    19ba:	ee 08       	sbc	r14, r14
    19bc:	ff 08       	sbc	r15, r15
    19be:	c7 01       	movw	r24, r14
    19c0:	b6 01       	movw	r22, r12
    19c2:	a3 dc       	rcall	.-1722   	; 0x130a <WIZCHIP_READ>
    19c4:	08 0f       	add	r16, r24
    19c6:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
    19c8:	c8 01       	movw	r24, r16
    19ca:	a0 e0       	ldi	r26, 0x00	; 0
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	44 27       	eor	r20, r20
    19d0:	58 2f       	mov	r21, r24
    19d2:	69 2f       	mov	r22, r25
    19d4:	7a 2f       	mov	r23, r26
    19d6:	c1 01       	movw	r24, r2
    19d8:	03 96       	adiw	r24, 0x03	; 3
    19da:	1c 01       	movw	r2, r24
    19dc:	22 0c       	add	r2, r2
    19de:	33 1c       	adc	r3, r3
    19e0:	22 0c       	add	r2, r2
    19e2:	33 1c       	adc	r3, r3
    19e4:	22 0c       	add	r2, r2
    19e6:	33 1c       	adc	r3, r3
    19e8:	c1 01       	movw	r24, r2
    19ea:	33 0c       	add	r3, r3
    19ec:	aa 0b       	sbc	r26, r26
    19ee:	bb 0b       	sbc	r27, r27
    19f0:	1a 01       	movw	r2, r20
    19f2:	2b 01       	movw	r4, r22
    19f4:	28 0e       	add	r2, r24
    19f6:	39 1e       	adc	r3, r25
    19f8:	4a 1e       	adc	r4, r26
    19fa:	5b 1e       	adc	r5, r27
    19fc:	c2 01       	movw	r24, r4
    19fe:	b1 01       	movw	r22, r2
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    1a00:	93 01       	movw	r18, r6
    1a02:	49 81       	ldd	r20, Y+1	; 0x01
    1a04:	5a 81       	ldd	r21, Y+2	; 0x02
    1a06:	5a dd       	rcall	.-1356   	; 0x14bc <WIZCHIP_READ_BUF>
   ptr += len;
    1a08:	06 0d       	add	r16, r6
    1a0a:	17 1d       	adc	r17, r7
   
   setSn_RX_RD(sn,ptr);
    1a0c:	41 2f       	mov	r20, r17
    1a0e:	c5 01       	movw	r24, r10
    1a10:	b4 01       	movw	r22, r8
    1a12:	e2 dc       	rcall	.-1596   	; 0x13d8 <WIZCHIP_WRITE>
    1a14:	40 2f       	mov	r20, r16
    1a16:	c7 01       	movw	r24, r14
    1a18:	b6 01       	movw	r22, r12
    1a1a:	de dc       	rcall	.-1604   	; 0x13d8 <WIZCHIP_WRITE>
}
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	df 90       	pop	r13
    1a32:	cf 90       	pop	r12
    1a34:	bf 90       	pop	r11
    1a36:	af 90       	pop	r10
    1a38:	9f 90       	pop	r9
    1a3a:	8f 90       	pop	r8
    1a3c:	7f 90       	pop	r7
    1a3e:	6f 90       	pop	r6
    1a40:	5f 90       	pop	r5
    1a42:	4f 90       	pop	r4
    1a44:	3f 90       	pop	r3
    1a46:	2f 90       	pop	r2
    1a48:	08 95       	ret

00001a4a <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
    1a4a:	8f 92       	push	r8
    1a4c:	9f 92       	push	r9
    1a4e:	af 92       	push	r10
    1a50:	bf 92       	push	r11
    1a52:	cf 92       	push	r12
    1a54:	df 92       	push	r13
    1a56:	ef 92       	push	r14
    1a58:	ff 92       	push	r15
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	eb 01       	movw	r28, r22
   uint16_t ptr = 0;

   ptr = getSn_RX_RD(sn);
    1a64:	c8 2e       	mov	r12, r24
    1a66:	d1 2c       	mov	r13, r1
    1a68:	cc 0c       	add	r12, r12
    1a6a:	dd 1c       	adc	r13, r13
    1a6c:	cc 0c       	add	r12, r12
    1a6e:	dd 1c       	adc	r13, r13
    1a70:	8f ef       	ldi	r24, 0xFF	; 255
    1a72:	c8 1a       	sub	r12, r24
    1a74:	d8 0a       	sbc	r13, r24
    1a76:	cc 0c       	add	r12, r12
    1a78:	dd 1c       	adc	r13, r13
    1a7a:	cc 0c       	add	r12, r12
    1a7c:	dd 1c       	adc	r13, r13
    1a7e:	cc 0c       	add	r12, r12
    1a80:	dd 1c       	adc	r13, r13
    1a82:	46 01       	movw	r8, r12
    1a84:	88 ed       	ldi	r24, 0xD8	; 216
    1a86:	98 1a       	sub	r9, r24
    1a88:	09 2c       	mov	r0, r9
    1a8a:	00 0c       	add	r0, r0
    1a8c:	aa 08       	sbc	r10, r10
    1a8e:	bb 08       	sbc	r11, r11
    1a90:	c5 01       	movw	r24, r10
    1a92:	b4 01       	movw	r22, r8
    1a94:	3a dc       	rcall	.-1932   	; 0x130a <WIZCHIP_READ>
    1a96:	08 2f       	mov	r16, r24
    1a98:	10 e0       	ldi	r17, 0x00	; 0
    1a9a:	10 2f       	mov	r17, r16
    1a9c:	00 27       	eor	r16, r16
    1a9e:	87 ed       	ldi	r24, 0xD7	; 215
    1aa0:	d8 1a       	sub	r13, r24
    1aa2:	0d 2c       	mov	r0, r13
    1aa4:	00 0c       	add	r0, r0
    1aa6:	ee 08       	sbc	r14, r14
    1aa8:	ff 08       	sbc	r15, r15
    1aaa:	c7 01       	movw	r24, r14
    1aac:	b6 01       	movw	r22, r12
    1aae:	2d dc       	rcall	.-1958   	; 0x130a <WIZCHIP_READ>
    1ab0:	08 0f       	add	r16, r24
    1ab2:	11 1d       	adc	r17, r1
   ptr += len;
    1ab4:	c0 0f       	add	r28, r16
    1ab6:	d1 1f       	adc	r29, r17
   setSn_RX_RD(sn,ptr);
    1ab8:	4d 2f       	mov	r20, r29
    1aba:	c5 01       	movw	r24, r10
    1abc:	b4 01       	movw	r22, r8
    1abe:	8c dc       	rcall	.-1768   	; 0x13d8 <WIZCHIP_WRITE>
    1ac0:	4c 2f       	mov	r20, r28
    1ac2:	c7 01       	movw	r24, r14
    1ac4:	b6 01       	movw	r22, r12
    1ac6:	88 dc       	rcall	.-1776   	; 0x13d8 <WIZCHIP_WRITE>
}
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	ff 90       	pop	r15
    1ad2:	ef 90       	pop	r14
    1ad4:	df 90       	pop	r13
    1ad6:	cf 90       	pop	r12
    1ad8:	bf 90       	pop	r11
    1ada:	af 90       	pop	r10
    1adc:	9f 90       	pop	r9
    1ade:	8f 90       	pop	r8
    1ae0:	08 95       	ret

00001ae2 <wizchip_cris_enter>:
   #endif      
      default:
         return -1;
   }
   return 0;
}
    1ae2:	08 95       	ret

00001ae4 <wizchip_cris_exit>:
    1ae4:	08 95       	ret

00001ae6 <wizchip_cs_select>:
    1ae6:	08 95       	ret

00001ae8 <wizchip_cs_deselect>:
    1ae8:	08 95       	ret

00001aea <wizchip_bus_readdata>:
    1aea:	fb 01       	movw	r30, r22
    1aec:	80 81       	ld	r24, Z
    1aee:	08 95       	ret

00001af0 <wizchip_bus_writedata>:
    1af0:	fb 01       	movw	r30, r22
    1af2:	40 83       	st	Z, r20
    1af4:	08 95       	ret

00001af6 <wizchip_spi_readbyte>:
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	08 95       	ret

00001afa <wizchip_spi_writebyte>:
    1afa:	08 95       	ret

00001afc <wizchip_spi_readburst>:
    1afc:	08 95       	ret

00001afe <wizchip_spi_writeburst>:
    1afe:	08 95       	ret

00001b00 <reg_wizchip_cs_cbfunc>:
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	19 f0       	breq	.+6      	; 0x1b0a <reg_wizchip_cs_cbfunc+0xa>
    1b04:	61 15       	cp	r22, r1
    1b06:	71 05       	cpc	r23, r1
    1b08:	59 f4       	brne	.+22     	; 0x1b20 <reg_wizchip_cs_cbfunc+0x20>
    1b0a:	e6 e0       	ldi	r30, 0x06	; 6
    1b0c:	f2 e0       	ldi	r31, 0x02	; 2
    1b0e:	83 e7       	ldi	r24, 0x73	; 115
    1b10:	9d e0       	ldi	r25, 0x0D	; 13
    1b12:	95 87       	std	Z+13, r25	; 0x0d
    1b14:	84 87       	std	Z+12, r24	; 0x0c
    1b16:	84 e7       	ldi	r24, 0x74	; 116
    1b18:	9d e0       	ldi	r25, 0x0D	; 13
    1b1a:	97 87       	std	Z+15, r25	; 0x0f
    1b1c:	86 87       	std	Z+14, r24	; 0x0e
    1b1e:	08 95       	ret
    1b20:	e6 e0       	ldi	r30, 0x06	; 6
    1b22:	f2 e0       	ldi	r31, 0x02	; 2
    1b24:	95 87       	std	Z+13, r25	; 0x0d
    1b26:	84 87       	std	Z+12, r24	; 0x0c
    1b28:	77 87       	std	Z+15, r23	; 0x0f
    1b2a:	66 87       	std	Z+14, r22	; 0x0e
    1b2c:	08 95       	ret

00001b2e <reg_wizchip_spi_cbfunc>:
    1b2e:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <WIZCHIP>
    1b32:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <WIZCHIP+0x1>
    1b36:	31 ff       	sbrs	r19, 1
    1b38:	fa cf       	rjmp	.-12     	; 0x1b2e <reg_wizchip_spi_cbfunc>
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	19 f0       	breq	.+6      	; 0x1b44 <reg_wizchip_spi_cbfunc+0x16>
    1b3e:	61 15       	cp	r22, r1
    1b40:	71 05       	cpc	r23, r1
    1b42:	59 f4       	brne	.+22     	; 0x1b5a <reg_wizchip_spi_cbfunc+0x2c>
    1b44:	e6 e0       	ldi	r30, 0x06	; 6
    1b46:	f2 e0       	ldi	r31, 0x02	; 2
    1b48:	8b e7       	ldi	r24, 0x7B	; 123
    1b4a:	9d e0       	ldi	r25, 0x0D	; 13
    1b4c:	91 8b       	std	Z+17, r25	; 0x11
    1b4e:	80 8b       	std	Z+16, r24	; 0x10
    1b50:	8d e7       	ldi	r24, 0x7D	; 125
    1b52:	9d e0       	ldi	r25, 0x0D	; 13
    1b54:	93 8b       	std	Z+19, r25	; 0x13
    1b56:	82 8b       	std	Z+18, r24	; 0x12
    1b58:	08 95       	ret
    1b5a:	e6 e0       	ldi	r30, 0x06	; 6
    1b5c:	f2 e0       	ldi	r31, 0x02	; 2
    1b5e:	91 8b       	std	Z+17, r25	; 0x11
    1b60:	80 8b       	std	Z+16, r24	; 0x10
    1b62:	73 8b       	std	Z+19, r23	; 0x13
    1b64:	62 8b       	std	Z+18, r22	; 0x12
    1b66:	08 95       	ret

00001b68 <reg_wizchip_spiburst_cbfunc>:
    1b68:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <WIZCHIP>
    1b6c:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <WIZCHIP+0x1>
    1b70:	31 ff       	sbrs	r19, 1
    1b72:	fa cf       	rjmp	.-12     	; 0x1b68 <reg_wizchip_spiburst_cbfunc>
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	19 f0       	breq	.+6      	; 0x1b7e <reg_wizchip_spiburst_cbfunc+0x16>
    1b78:	61 15       	cp	r22, r1
    1b7a:	71 05       	cpc	r23, r1
    1b7c:	59 f4       	brne	.+22     	; 0x1b94 <reg_wizchip_spiburst_cbfunc+0x2c>
    1b7e:	e6 e0       	ldi	r30, 0x06	; 6
    1b80:	f2 e0       	ldi	r31, 0x02	; 2
    1b82:	8e e7       	ldi	r24, 0x7E	; 126
    1b84:	9d e0       	ldi	r25, 0x0D	; 13
    1b86:	95 8b       	std	Z+21, r25	; 0x15
    1b88:	84 8b       	std	Z+20, r24	; 0x14
    1b8a:	8f e7       	ldi	r24, 0x7F	; 127
    1b8c:	9d e0       	ldi	r25, 0x0D	; 13
    1b8e:	97 8b       	std	Z+23, r25	; 0x17
    1b90:	86 8b       	std	Z+22, r24	; 0x16
    1b92:	08 95       	ret
    1b94:	e6 e0       	ldi	r30, 0x06	; 6
    1b96:	f2 e0       	ldi	r31, 0x02	; 2
    1b98:	95 8b       	std	Z+21, r25	; 0x15
    1b9a:	84 8b       	std	Z+20, r24	; 0x14
    1b9c:	77 8b       	std	Z+23, r23	; 0x17
    1b9e:	66 8b       	std	Z+22, r22	; 0x16
    1ba0:	08 95       	ret

00001ba2 <wizchip_sw_reset>:
    1ba2:	cf 93       	push	r28
    1ba4:	df 93       	push	r29
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	62 97       	sbiw	r28, 0x12	; 18
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	26 e0       	ldi	r18, 0x06	; 6
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	ae 01       	movw	r20, r28
    1bbc:	43 5f       	subi	r20, 0xF3	; 243
    1bbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	79 e0       	ldi	r23, 0x09	; 9
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	79 dc       	rcall	.-1806   	; 0x14bc <WIZCHIP_READ_BUF>
    1bca:	24 e0       	ldi	r18, 0x04	; 4
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	ae 01       	movw	r20, r28
    1bd0:	4f 5f       	subi	r20, 0xFF	; 255
    1bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd4:	60 e0       	ldi	r22, 0x00	; 0
    1bd6:	71 e0       	ldi	r23, 0x01	; 1
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	6f dc       	rcall	.-1826   	; 0x14bc <WIZCHIP_READ_BUF>
    1bde:	24 e0       	ldi	r18, 0x04	; 4
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	ae 01       	movw	r20, r28
    1be4:	4b 5f       	subi	r20, 0xFB	; 251
    1be6:	5f 4f       	sbci	r21, 0xFF	; 255
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	75 e0       	ldi	r23, 0x05	; 5
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	65 dc       	rcall	.-1846   	; 0x14bc <WIZCHIP_READ_BUF>
    1bf2:	24 e0       	ldi	r18, 0x04	; 4
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	ae 01       	movw	r20, r28
    1bf8:	47 5f       	subi	r20, 0xF7	; 247
    1bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	7f e0       	ldi	r23, 0x0F	; 15
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	5b dc       	rcall	.-1866   	; 0x14bc <WIZCHIP_READ_BUF>
    1c06:	40 e8       	ldi	r20, 0x80	; 128
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	e4 db       	rcall	.-2104   	; 0x13d8 <WIZCHIP_WRITE>
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	cb 01       	movw	r24, r22
    1c16:	79 db       	rcall	.-2318   	; 0x130a <WIZCHIP_READ>
    1c18:	26 e0       	ldi	r18, 0x06	; 6
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	ae 01       	movw	r20, r28
    1c1e:	43 5f       	subi	r20, 0xF3	; 243
    1c20:	5f 4f       	sbci	r21, 0xFF	; 255
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	79 e0       	ldi	r23, 0x09	; 9
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	ca dc       	rcall	.-1644   	; 0x15c0 <WIZCHIP_WRITE_BUF>
    1c2c:	24 e0       	ldi	r18, 0x04	; 4
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	ae 01       	movw	r20, r28
    1c32:	4f 5f       	subi	r20, 0xFF	; 255
    1c34:	5f 4f       	sbci	r21, 0xFF	; 255
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	71 e0       	ldi	r23, 0x01	; 1
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	c0 dc       	rcall	.-1664   	; 0x15c0 <WIZCHIP_WRITE_BUF>
    1c40:	24 e0       	ldi	r18, 0x04	; 4
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	ae 01       	movw	r20, r28
    1c46:	4b 5f       	subi	r20, 0xFB	; 251
    1c48:	5f 4f       	sbci	r21, 0xFF	; 255
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	75 e0       	ldi	r23, 0x05	; 5
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	b6 dc       	rcall	.-1684   	; 0x15c0 <WIZCHIP_WRITE_BUF>
    1c54:	24 e0       	ldi	r18, 0x04	; 4
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	ae 01       	movw	r20, r28
    1c5a:	47 5f       	subi	r20, 0xF7	; 247
    1c5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	7f e0       	ldi	r23, 0x0F	; 15
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	ac dc       	rcall	.-1704   	; 0x15c0 <WIZCHIP_WRITE_BUF>
    1c68:	62 96       	adiw	r28, 0x12	; 18
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	08 95       	ret

00001c7a <wizchip_init>:
    1c7a:	ff 92       	push	r15
    1c7c:	0f 93       	push	r16
    1c7e:	1f 93       	push	r17
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	ec 01       	movw	r28, r24
    1c86:	8b 01       	movw	r16, r22
    1c88:	8c df       	rcall	.-232    	; 0x1ba2 <wizchip_sw_reset>
    1c8a:	20 97       	sbiw	r28, 0x00	; 0
    1c8c:	69 f4       	brne	.+26     	; 0x1ca8 <wizchip_init+0x2e>
    1c8e:	30 c0       	rjmp	.+96     	; 0x1cf0 <wizchip_init+0x76>
    1c90:	fe 01       	movw	r30, r28
    1c92:	e8 0f       	add	r30, r24
    1c94:	f1 1d       	adc	r31, r1
    1c96:	87 fd       	sbrc	r24, 7
    1c98:	fa 95       	dec	r31
    1c9a:	20 81       	ld	r18, Z
    1c9c:	92 0f       	add	r25, r18
    1c9e:	91 31       	cpi	r25, 0x11	; 17
    1ca0:	0c f0       	brlt	.+2      	; 0x1ca4 <wizchip_init+0x2a>
    1ca2:	5b c0       	rjmp	.+182    	; 0x1d5a <wizchip_init+0xe0>
    1ca4:	8f 5f       	subi	r24, 0xFF	; 255
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <wizchip_init+0x32>
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	88 30       	cpi	r24, 0x08	; 8
    1cae:	84 f3       	brlt	.-32     	; 0x1c90 <wizchip_init+0x16>
    1cb0:	f1 2c       	mov	r15, r1
    1cb2:	1b c0       	rjmp	.+54     	; 0x1cea <wizchip_init+0x70>
    1cb4:	6f 2d       	mov	r22, r15
    1cb6:	0f 2c       	mov	r0, r15
    1cb8:	00 0c       	add	r0, r0
    1cba:	77 0b       	sbc	r23, r23
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	e6 0f       	add	r30, r22
    1cc0:	f7 1f       	adc	r31, r23
    1cc2:	66 0f       	add	r22, r22
    1cc4:	77 1f       	adc	r23, r23
    1cc6:	66 0f       	add	r22, r22
    1cc8:	77 1f       	adc	r23, r23
    1cca:	6f 5f       	subi	r22, 0xFF	; 255
    1ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cce:	66 0f       	add	r22, r22
    1cd0:	77 1f       	adc	r23, r23
    1cd2:	66 0f       	add	r22, r22
    1cd4:	77 1f       	adc	r23, r23
    1cd6:	66 0f       	add	r22, r22
    1cd8:	77 1f       	adc	r23, r23
    1cda:	71 5e       	subi	r23, 0xE1	; 225
    1cdc:	07 2e       	mov	r0, r23
    1cde:	00 0c       	add	r0, r0
    1ce0:	88 0b       	sbc	r24, r24
    1ce2:	99 0b       	sbc	r25, r25
    1ce4:	40 81       	ld	r20, Z
    1ce6:	78 db       	rcall	.-2320   	; 0x13d8 <WIZCHIP_WRITE>
    1ce8:	f3 94       	inc	r15
    1cea:	87 e0       	ldi	r24, 0x07	; 7
    1cec:	8f 15       	cp	r24, r15
    1cee:	14 f7       	brge	.-60     	; 0x1cb4 <wizchip_init+0x3a>
    1cf0:	01 15       	cp	r16, r1
    1cf2:	11 05       	cpc	r17, r1
    1cf4:	69 f4       	brne	.+26     	; 0x1d10 <wizchip_init+0x96>
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	33 c0       	rjmp	.+102    	; 0x1d60 <wizchip_init+0xe6>
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	e8 0f       	add	r30, r24
    1cfe:	f1 1d       	adc	r31, r1
    1d00:	87 fd       	sbrc	r24, 7
    1d02:	fa 95       	dec	r31
    1d04:	20 81       	ld	r18, Z
    1d06:	92 0f       	add	r25, r18
    1d08:	91 31       	cpi	r25, 0x11	; 17
    1d0a:	4c f5       	brge	.+82     	; 0x1d5e <wizchip_init+0xe4>
    1d0c:	8f 5f       	subi	r24, 0xFF	; 255
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <wizchip_init+0x9a>
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	88 30       	cpi	r24, 0x08	; 8
    1d16:	8c f3       	brlt	.-30     	; 0x1cfa <wizchip_init+0x80>
    1d18:	c0 e0       	ldi	r28, 0x00	; 0
    1d1a:	1b c0       	rjmp	.+54     	; 0x1d52 <wizchip_init+0xd8>
    1d1c:	6c 2f       	mov	r22, r28
    1d1e:	0c 2e       	mov	r0, r28
    1d20:	00 0c       	add	r0, r0
    1d22:	77 0b       	sbc	r23, r23
    1d24:	f8 01       	movw	r30, r16
    1d26:	e6 0f       	add	r30, r22
    1d28:	f7 1f       	adc	r31, r23
    1d2a:	66 0f       	add	r22, r22
    1d2c:	77 1f       	adc	r23, r23
    1d2e:	66 0f       	add	r22, r22
    1d30:	77 1f       	adc	r23, r23
    1d32:	6f 5f       	subi	r22, 0xFF	; 255
    1d34:	7f 4f       	sbci	r23, 0xFF	; 255
    1d36:	66 0f       	add	r22, r22
    1d38:	77 1f       	adc	r23, r23
    1d3a:	66 0f       	add	r22, r22
    1d3c:	77 1f       	adc	r23, r23
    1d3e:	66 0f       	add	r22, r22
    1d40:	77 1f       	adc	r23, r23
    1d42:	72 5e       	subi	r23, 0xE2	; 226
    1d44:	07 2e       	mov	r0, r23
    1d46:	00 0c       	add	r0, r0
    1d48:	88 0b       	sbc	r24, r24
    1d4a:	99 0b       	sbc	r25, r25
    1d4c:	40 81       	ld	r20, Z
    1d4e:	44 db       	rcall	.-2424   	; 0x13d8 <WIZCHIP_WRITE>
    1d50:	cf 5f       	subi	r28, 0xFF	; 255
    1d52:	c8 30       	cpi	r28, 0x08	; 8
    1d54:	1c f3       	brlt	.-58     	; 0x1d1c <wizchip_init+0xa2>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	03 c0       	rjmp	.+6      	; 0x1d60 <wizchip_init+0xe6>
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	01 c0       	rjmp	.+2      	; 0x1d60 <wizchip_init+0xe6>
    1d5e:	8f ef       	ldi	r24, 0xFF	; 255
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	1f 91       	pop	r17
    1d66:	0f 91       	pop	r16
    1d68:	ff 90       	pop	r15
    1d6a:	08 95       	ret

00001d6c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	ec 01       	movw	r28, r24
   setSHAR(pnetinfo->mac);
    1d72:	26 e0       	ldi	r18, 0x06	; 6
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	ac 01       	movw	r20, r24
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	79 e0       	ldi	r23, 0x09	; 9
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	1f dc       	rcall	.-1986   	; 0x15c0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
    1d82:	ae 01       	movw	r20, r28
    1d84:	42 5f       	subi	r20, 0xF2	; 242
    1d86:	5f 4f       	sbci	r21, 0xFF	; 255
    1d88:	24 e0       	ldi	r18, 0x04	; 4
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	71 e0       	ldi	r23, 0x01	; 1
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	15 dc       	rcall	.-2006   	; 0x15c0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
    1d96:	ae 01       	movw	r20, r28
    1d98:	46 5f       	subi	r20, 0xF6	; 246
    1d9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9c:	24 e0       	ldi	r18, 0x04	; 4
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	75 e0       	ldi	r23, 0x05	; 5
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	0b dc       	rcall	.-2026   	; 0x15c0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
    1daa:	ae 01       	movw	r20, r28
    1dac:	4a 5f       	subi	r20, 0xFA	; 250
    1dae:	5f 4f       	sbci	r21, 0xFF	; 255
    1db0:	24 e0       	ldi	r18, 0x04	; 4
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	7f e0       	ldi	r23, 0x0F	; 15
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	01 dc       	rcall	.-2046   	; 0x15c0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
    1dbe:	8a 89       	ldd	r24, Y+18	; 0x12
    1dc0:	ef e7       	ldi	r30, 0x7F	; 127
    1dc2:	f4 e0       	ldi	r31, 0x04	; 4
    1dc4:	80 83       	st	Z, r24
   _DNS_[1] = pnetinfo->dns[1];
    1dc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc8:	81 83       	std	Z+1, r24	; 0x01
   _DNS_[2] = pnetinfo->dns[2];
    1dca:	8c 89       	ldd	r24, Y+20	; 0x14
    1dcc:	82 83       	std	Z+2, r24	; 0x02
   _DNS_[3] = pnetinfo->dns[3];
    1dce:	8d 89       	ldd	r24, Y+21	; 0x15
    1dd0:	83 83       	std	Z+3, r24	; 0x03
   _DHCP_   = pnetinfo->dhcp;
    1dd2:	8e 89       	ldd	r24, Y+22	; 0x16
    1dd4:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <_DHCP_>
}
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	08 95       	ret

00001dde <get16>:

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
	uint16_t i;
	i = *s++ << 8;
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	fc 01       	movw	r30, r24
    1de2:	30 81       	ld	r19, Z
	i = i + *s;
    1de4:	81 81       	ldd	r24, Z+1	; 0x01
	return i;
}
    1de6:	a9 01       	movw	r20, r18
    1de8:	48 0f       	add	r20, r24
    1dea:	51 1d       	adc	r21, r1
    1dec:	ca 01       	movw	r24, r20
    1dee:	08 95       	ret

00001df0 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
	*s++ = i >> 8;
    1df0:	fc 01       	movw	r30, r24
    1df2:	70 83       	st	Z, r23
	*s++ = i;
    1df4:	61 83       	std	Z+1, r22	; 0x01
	return s;
}
    1df6:	02 96       	adiw	r24, 0x02	; 2
    1df8:	08 95       	ret

00001dfa <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
    1dfa:	cf 92       	push	r12
    1dfc:	df 92       	push	r13
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	8c 01       	movw	r16, r24
    1e0c:	db 01       	movw	r26, r22
    1e0e:	ea 01       	movw	r28, r20
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
	int indirect = 0;	/* Set if indirection encountered */
	int nseg = 0;		/* Total number of segments in name */
    1e10:	e1 2c       	mov	r14, r1
    1e12:	f1 2c       	mov	r15, r1
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
	int indirect = 0;	/* Set if indirection encountered */
    1e14:	c1 2c       	mov	r12, r1
    1e16:	d1 2c       	mov	r13, r1
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	70 e0       	ldi	r23, 0x00	; 0

	cp = compressed;

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
    1e1c:	ad 01       	movw	r20, r26
    1e1e:	4f 5f       	subi	r20, 0xFF	; 255
    1e20:	5f 4f       	sbci	r21, 0xFF	; 255
    1e22:	8c 91       	ld	r24, X
    1e24:	e8 2f       	mov	r30, r24
    1e26:	f0 e0       	ldi	r31, 0x00	; 0

		if (!indirect) clen++;
    1e28:	c1 14       	cp	r12, r1
    1e2a:	d1 04       	cpc	r13, r1
    1e2c:	11 f4       	brne	.+4      	; 0x1e32 <parse_name+0x38>
    1e2e:	6f 5f       	subi	r22, 0xFF	; 255
    1e30:	7f 4f       	sbci	r23, 0xFF	; 255

		if ((slen & 0xc0) == 0xc0)
    1e32:	98 2f       	mov	r25, r24
    1e34:	90 7c       	andi	r25, 0xC0	; 192
    1e36:	90 3c       	cpi	r25, 0xC0	; 192
    1e38:	c9 f4       	brne	.+50     	; 0x1e6c <parse_name+0x72>
		{
			if (!indirect)
    1e3a:	cd 28       	or	r12, r13
    1e3c:	11 f4       	brne	.+4      	; 0x1e42 <parse_name+0x48>
				clen++;
    1e3e:	6f 5f       	subi	r22, 0xFF	; 255
    1e40:	7f 4f       	sbci	r23, 0xFF	; 255
			indirect = 1;
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
    1e42:	8f 73       	andi	r24, 0x3F	; 63
    1e44:	48 2f       	mov	r20, r24
    1e46:	50 e0       	ldi	r21, 0x00	; 0
    1e48:	54 2f       	mov	r21, r20
    1e4a:	44 27       	eor	r20, r20
    1e4c:	11 96       	adiw	r26, 0x01	; 1
    1e4e:	8c 91       	ld	r24, X
    1e50:	48 0f       	add	r20, r24
    1e52:	51 1d       	adc	r21, r1
    1e54:	f8 01       	movw	r30, r16
    1e56:	e4 0f       	add	r30, r20
    1e58:	f5 1f       	adc	r31, r21
			slen = *cp++;
    1e5a:	4f 5f       	subi	r20, 0xFF	; 255
    1e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e5e:	40 0f       	add	r20, r16
    1e60:	51 1f       	adc	r21, r17
    1e62:	e0 81       	ld	r30, Z
    1e64:	f0 e0       	ldi	r31, 0x00	; 0

		if ((slen & 0xc0) == 0xc0)
		{
			if (!indirect)
				clen++;
			indirect = 1;
    1e66:	cc 24       	eor	r12, r12
    1e68:	c3 94       	inc	r12
    1e6a:	d1 2c       	mov	r13, r1
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
			slen = *cp++;
		}

		if (slen == 0)	/* zero length == all done */
    1e6c:	30 97       	sbiw	r30, 0x00	; 0
    1e6e:	e9 f0       	breq	.+58     	; 0x1eaa <parse_name+0xb0>
			break;

		len -= slen + 1;
    1e70:	2e 1b       	sub	r18, r30
    1e72:	3f 0b       	sbc	r19, r31
    1e74:	21 50       	subi	r18, 0x01	; 1
    1e76:	31 09       	sbc	r19, r1

		if (len < 0) return -1;
    1e78:	0a f1       	brmi	.+66     	; 0x1ebc <parse_name+0xc2>

		if (!indirect) clen += slen;
    1e7a:	c1 14       	cp	r12, r1
    1e7c:	d1 04       	cpc	r13, r1
    1e7e:	11 f4       	brne	.+4      	; 0x1e84 <parse_name+0x8a>
    1e80:	6e 0f       	add	r22, r30
    1e82:	7f 1f       	adc	r23, r31

		if ((slen & 0xc0) == 0xc0)
		{
			if (!indirect)
				clen++;
			indirect = 1;
    1e84:	da 01       	movw	r26, r20
    1e86:	05 c0       	rjmp	.+10     	; 0x1e92 <parse_name+0x98>

		if (len < 0) return -1;

		if (!indirect) clen += slen;

		while (slen-- != 0) *buf++ = (char)*cp++;
    1e88:	9c 91       	ld	r25, X
    1e8a:	98 83       	st	Y, r25
    1e8c:	fa 01       	movw	r30, r20
    1e8e:	11 96       	adiw	r26, 0x01	; 1
    1e90:	21 96       	adiw	r28, 0x01	; 1
    1e92:	af 01       	movw	r20, r30
    1e94:	41 50       	subi	r20, 0x01	; 1
    1e96:	51 09       	sbc	r21, r1
    1e98:	ef 2b       	or	r30, r31
    1e9a:	b1 f7       	brne	.-20     	; 0x1e88 <parse_name+0x8e>
		*buf++ = '.';
    1e9c:	8e e2       	ldi	r24, 0x2E	; 46
    1e9e:	88 83       	st	Y, r24
		nseg++;
    1ea0:	8f ef       	ldi	r24, 0xFF	; 255
    1ea2:	e8 1a       	sub	r14, r24
    1ea4:	f8 0a       	sbc	r15, r24
		if (len < 0) return -1;

		if (!indirect) clen += slen;

		while (slen-- != 0) *buf++ = (char)*cp++;
		*buf++ = '.';
    1ea6:	21 96       	adiw	r28, 0x01	; 1
		nseg++;
	}
    1ea8:	b9 cf       	rjmp	.-142    	; 0x1e1c <parse_name+0x22>

	if (nseg == 0)
    1eaa:	ef 28       	or	r14, r15
    1eac:	19 f4       	brne	.+6      	; 0x1eb4 <parse_name+0xba>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
    1eae:	8e e2       	ldi	r24, 0x2E	; 46
    1eb0:	88 83       	st	Y, r24
    1eb2:	21 96       	adiw	r28, 0x01	; 1
		len--;
	}

	*buf++ = '\0';
    1eb4:	18 82       	st	Y, r1
	len--;

	return clen;	/* Length of compressed message */
    1eb6:	86 2f       	mov	r24, r22
    1eb8:	97 2f       	mov	r25, r23
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <parse_name+0xc6>
		if (slen == 0)	/* zero length == all done */
			break;

		len -= slen + 1;

		if (len < 0) return -1;
    1ebc:	8f ef       	ldi	r24, 0xFF	; 255
    1ebe:	9f ef       	ldi	r25, 0xFF	; 255

	*buf++ = '\0';
	len--;

	return clen;	/* Length of compressed message */
}
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	ff 90       	pop	r15
    1eca:	ef 90       	pop	r14
    1ecc:	df 90       	pop	r13
    1ece:	cf 90       	pop	r12
    1ed0:	08 95       	ret

00001ed2 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
    1ed2:	0f 93       	push	r16
    1ed4:	1f 93       	push	r17
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	68 97       	sbiw	r28, 0x18	; 24
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	8b 01       	movw	r16, r22
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
    1eec:	28 e1       	ldi	r18, 0x18	; 24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	ae 01       	movw	r20, r28
    1ef2:	4f 5f       	subi	r20, 0xFF	; 255
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	81 df       	rcall	.-254    	; 0x1dfa <parse_name>


	if (len == -1) return 0;
    1ef8:	8f 3f       	cpi	r24, 0xFF	; 255
    1efa:	2f ef       	ldi	r18, 0xFF	; 255
    1efc:	92 07       	cpc	r25, r18
    1efe:	21 f0       	breq	.+8      	; 0x1f08 <dns_question+0x36>

	cp += len;
    1f00:	80 0f       	add	r24, r16
    1f02:	91 1f       	adc	r25, r17
	cp += 2;		/* type */
	cp += 2;		/* class */

	return cp;
    1f04:	04 96       	adiw	r24, 0x04	; 4
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <dns_question+0x3a>
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);


	if (len == -1) return 0;
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
	cp += len;
	cp += 2;		/* type */
	cp += 2;		/* class */

	return cp;
}
    1f0c:	68 96       	adiw	r28, 0x18	; 24
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	08 95       	ret

00001f22 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
    1f22:	af 92       	push	r10
    1f24:	bf 92       	push	r11
    1f26:	cf 92       	push	r12
    1f28:	df 92       	push	r13
    1f2a:	ef 92       	push	r14
    1f2c:	ff 92       	push	r15
    1f2e:	0f 93       	push	r16
    1f30:	1f 93       	push	r17
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	68 97       	sbiw	r28, 0x18	; 24
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	7c 01       	movw	r14, r24
    1f48:	8b 01       	movw	r16, r22
    1f4a:	6a 01       	movw	r12, r20
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
    1f4c:	28 e1       	ldi	r18, 0x18	; 24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	ae 01       	movw	r20, r28
    1f52:	4f 5f       	subi	r20, 0xFF	; 255
    1f54:	5f 4f       	sbci	r21, 0xFF	; 255
    1f56:	51 df       	rcall	.-350    	; 0x1dfa <parse_name>

	if (len == -1) return 0;
    1f58:	8f 3f       	cpi	r24, 0xFF	; 255
    1f5a:	2f ef       	ldi	r18, 0xFF	; 255
    1f5c:	92 07       	cpc	r25, r18
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <dns_answer+0x40>
    1f60:	76 c0       	rjmp	.+236    	; 0x204e <__EEPROM_REGION_LENGTH__+0x4e>

	cp += len;
    1f62:	08 0f       	add	r16, r24
    1f64:	19 1f       	adc	r17, r25
	type = get16(cp);
    1f66:	c8 01       	movw	r24, r16
    1f68:	3a df       	rcall	.-396    	; 0x1dde <get16>
	cp += 2;		/* type */
	cp += 2;		/* class */
	cp += 4;		/* ttl */
	cp += 2;		/* len */
    1f6a:	58 01       	movw	r10, r16
    1f6c:	ea e0       	ldi	r30, 0x0A	; 10
    1f6e:	ae 0e       	add	r10, r30
    1f70:	b1 1c       	adc	r11, r1


	switch (type)
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	8f 30       	cpi	r24, 0x0F	; 15
    1f76:	91 05       	cpc	r25, r1
    1f78:	08 f0       	brcs	.+2      	; 0x1f7c <dns_answer+0x5a>
    1f7a:	6c c0       	rjmp	.+216    	; 0x2054 <__EEPROM_REGION_LENGTH__+0x54>
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	88 27       	eor	r24, r24
    1f80:	e6 56       	subi	r30, 0x66	; 102
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	8f 4f       	sbci	r24, 0xFF	; 255
    1f86:	0c 94 24 35 	jmp	0x6a48	; 0x6a48 <__tablejump2__>
	{
	case TYPE_A:
		/* Just read the address directly into the structure */
		ip_from_dns[0] = *cp++;
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	82 85       	ldd	r24, Z+10	; 0x0a
    1f8e:	f6 01       	movw	r30, r12
    1f90:	80 83       	st	Z, r24
		ip_from_dns[1] = *cp++;
    1f92:	f8 01       	movw	r30, r16
    1f94:	83 85       	ldd	r24, Z+11	; 0x0b
    1f96:	f6 01       	movw	r30, r12
    1f98:	81 83       	std	Z+1, r24	; 0x01
		ip_from_dns[2] = *cp++;
    1f9a:	f8 01       	movw	r30, r16
    1f9c:	84 85       	ldd	r24, Z+12	; 0x0c
    1f9e:	f6 01       	movw	r30, r12
    1fa0:	82 83       	std	Z+2, r24	; 0x02
		ip_from_dns[3] = *cp++;
    1fa2:	f8 01       	movw	r30, r16
    1fa4:	85 85       	ldd	r24, Z+13	; 0x0d
    1fa6:	f6 01       	movw	r30, r12
    1fa8:	83 83       	std	Z+3, r24	; 0x03
    1faa:	c8 01       	movw	r24, r16
    1fac:	0e 96       	adiw	r24, 0x0e	; 14
		break;
    1fae:	5f c0       	rjmp	.+190    	; 0x206e <__EEPROM_REGION_LENGTH__+0x6e>
	case TYPE_MR:
	case TYPE_NS:
	case TYPE_PTR:
		/* These types all consist of a single domain name */
		/* convert it to ascii format */
		len = parse_name(msg, cp, name, MAXCNAME);
    1fb0:	28 e1       	ldi	r18, 0x18	; 24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	ae 01       	movw	r20, r28
    1fb6:	4f 5f       	subi	r20, 0xFF	; 255
    1fb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fba:	b5 01       	movw	r22, r10
    1fbc:	c7 01       	movw	r24, r14
    1fbe:	1d df       	rcall	.-454    	; 0x1dfa <parse_name>
		if (len == -1) return 0;
    1fc0:	8f 3f       	cpi	r24, 0xFF	; 255
    1fc2:	ff ef       	ldi	r31, 0xFF	; 255
    1fc4:	9f 07       	cpc	r25, r31
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <dns_answer+0xa8>
    1fc8:	47 c0       	rjmp	.+142    	; 0x2058 <__EEPROM_REGION_LENGTH__+0x58>

		cp += len;
    1fca:	8a 0d       	add	r24, r10
    1fcc:	9b 1d       	adc	r25, r11
		break;
    1fce:	4f c0       	rjmp	.+158    	; 0x206e <__EEPROM_REGION_LENGTH__+0x6e>
	case TYPE_HINFO:
		len = *cp++;
    1fd0:	c8 01       	movw	r24, r16
    1fd2:	0b 96       	adiw	r24, 0x0b	; 11
    1fd4:	f8 01       	movw	r30, r16
    1fd6:	22 85       	ldd	r18, Z+10	; 0x0a
		cp += len;
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	fc 01       	movw	r30, r24
    1fdc:	e2 0f       	add	r30, r18
    1fde:	f3 1f       	adc	r31, r19

		len = *cp++;
    1fe0:	40 81       	ld	r20, Z
		cp += len;
    1fe2:	2f 5f       	subi	r18, 0xFF	; 255
    1fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe6:	24 0f       	add	r18, r20
    1fe8:	31 1d       	adc	r19, r1
    1fea:	82 0f       	add	r24, r18
    1fec:	93 1f       	adc	r25, r19
		break;
    1fee:	3f c0       	rjmp	.+126    	; 0x206e <__EEPROM_REGION_LENGTH__+0x6e>
	case TYPE_MX:
		cp += 2;
    1ff0:	04 5f       	subi	r16, 0xF4	; 244
    1ff2:	1f 4f       	sbci	r17, 0xFF	; 255
		/* Get domain name of exchanger */
		len = parse_name(msg, cp, name, MAXCNAME);
    1ff4:	28 e1       	ldi	r18, 0x18	; 24
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	ae 01       	movw	r20, r28
    1ffa:	4f 5f       	subi	r20, 0xFF	; 255
    1ffc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ffe:	b8 01       	movw	r22, r16
    2000:	c7 01       	movw	r24, r14
    2002:	fb de       	rcall	.-522    	; 0x1dfa <parse_name>
		if (len == -1) return 0;
    2004:	8f 3f       	cpi	r24, 0xFF	; 255
    2006:	ff ef       	ldi	r31, 0xFF	; 255
    2008:	9f 07       	cpc	r25, r31
    200a:	49 f1       	breq	.+82     	; 0x205e <__EEPROM_REGION_LENGTH__+0x5e>

		cp += len;
    200c:	80 0f       	add	r24, r16
    200e:	91 1f       	adc	r25, r17
		break;
    2010:	2e c0       	rjmp	.+92     	; 0x206e <__EEPROM_REGION_LENGTH__+0x6e>
	case TYPE_SOA:
		/* Get domain name of name server */
		len = parse_name(msg, cp, name, MAXCNAME);
    2012:	28 e1       	ldi	r18, 0x18	; 24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	ae 01       	movw	r20, r28
    2018:	4f 5f       	subi	r20, 0xFF	; 255
    201a:	5f 4f       	sbci	r21, 0xFF	; 255
    201c:	b5 01       	movw	r22, r10
    201e:	c7 01       	movw	r24, r14
    2020:	ec de       	rcall	.-552    	; 0x1dfa <parse_name>
		if (len == -1) return 0;
    2022:	8f 3f       	cpi	r24, 0xFF	; 255
    2024:	2f ef       	ldi	r18, 0xFF	; 255
    2026:	92 07       	cpc	r25, r18
    2028:	e9 f0       	breq	.+58     	; 0x2064 <__EEPROM_REGION_LENGTH__+0x64>

		cp += len;
    202a:	a8 0e       	add	r10, r24
    202c:	b9 1e       	adc	r11, r25

		/* Get domain name of responsible person */
		len = parse_name(msg, cp, name, MAXCNAME);
    202e:	28 e1       	ldi	r18, 0x18	; 24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	ae 01       	movw	r20, r28
    2034:	4f 5f       	subi	r20, 0xFF	; 255
    2036:	5f 4f       	sbci	r21, 0xFF	; 255
    2038:	b5 01       	movw	r22, r10
    203a:	c7 01       	movw	r24, r14
    203c:	de de       	rcall	.-580    	; 0x1dfa <parse_name>
		if (len == -1) return 0;
    203e:	8f 3f       	cpi	r24, 0xFF	; 255
    2040:	ef ef       	ldi	r30, 0xFF	; 255
    2042:	9e 07       	cpc	r25, r30
    2044:	91 f0       	breq	.+36     	; 0x206a <__EEPROM_REGION_LENGTH__+0x6a>

		cp += len;
    2046:	8a 0d       	add	r24, r10
    2048:	9b 1d       	adc	r25, r11

		cp += 4;
		cp += 4;
		cp += 4;
		cp += 4;
		cp += 4;
    204a:	44 96       	adiw	r24, 0x14	; 20
		break;
    204c:	10 c0       	rjmp	.+32     	; 0x206e <__EEPROM_REGION_LENGTH__+0x6e>
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);

	if (len == -1) return 0;
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	0d c0       	rjmp	.+26     	; 0x206e <__EEPROM_REGION_LENGTH__+0x6e>
	cp += len;
	type = get16(cp);
	cp += 2;		/* type */
	cp += 2;		/* class */
	cp += 4;		/* ttl */
	cp += 2;		/* len */
    2054:	c5 01       	movw	r24, r10
    2056:	0b c0       	rjmp	.+22     	; 0x206e <__EEPROM_REGION_LENGTH__+0x6e>
	case TYPE_NS:
	case TYPE_PTR:
		/* These types all consist of a single domain name */
		/* convert it to ascii format */
		len = parse_name(msg, cp, name, MAXCNAME);
		if (len == -1) return 0;
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	08 c0       	rjmp	.+16     	; 0x206e <__EEPROM_REGION_LENGTH__+0x6e>
		break;
	case TYPE_MX:
		cp += 2;
		/* Get domain name of exchanger */
		len = parse_name(msg, cp, name, MAXCNAME);
		if (len == -1) return 0;
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	05 c0       	rjmp	.+10     	; 0x206e <__EEPROM_REGION_LENGTH__+0x6e>
		cp += len;
		break;
	case TYPE_SOA:
		/* Get domain name of name server */
		len = parse_name(msg, cp, name, MAXCNAME);
		if (len == -1) return 0;
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	02 c0       	rjmp	.+4      	; 0x206e <__EEPROM_REGION_LENGTH__+0x6e>

		cp += len;

		/* Get domain name of responsible person */
		len = parse_name(msg, cp, name, MAXCNAME);
		if (len == -1) return 0;
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
		/* Ignore */
		break;
	}

	return cp;
}
    206e:	68 96       	adiw	r28, 0x18	; 24
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	1f 91       	pop	r17
    2080:	0f 91       	pop	r16
    2082:	ff 90       	pop	r15
    2084:	ef 90       	pop	r14
    2086:	df 90       	pop	r13
    2088:	cf 90       	pop	r12
    208a:	bf 90       	pop	r11
    208c:	af 90       	pop	r10
    208e:	08 95       	ret

00002090 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big 
 *                0 - Fail (Timout or parse error)
 *                1 - Success, 
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
    2090:	cf 92       	push	r12
    2092:	df 92       	push	r13
    2094:	ef 92       	push	r14
    2096:	ff 92       	push	r15
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
    20a0:	ec 01       	movw	r28, r24
    20a2:	7b 01       	movw	r14, r22
    20a4:	6a 01       	movw	r12, r20
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
	memset(pdhdr, 0, sizeof(*pdhdr));
    20a6:	81 e1       	ldi	r24, 0x11	; 17
    20a8:	fe 01       	movw	r30, r28
    20aa:	11 92       	st	Z+, r1
    20ac:	8a 95       	dec	r24
    20ae:	e9 f7       	brne	.-6      	; 0x20aa <parseDNSMSG+0x1a>

	pdhdr->id = get16(&msg[0]);
    20b0:	cb 01       	movw	r24, r22
    20b2:	95 de       	rcall	.-726    	; 0x1dde <get16>
    20b4:	99 83       	std	Y+1, r25	; 0x01
    20b6:	88 83       	st	Y, r24
	tmp = get16(&msg[2]);
    20b8:	c7 01       	movw	r24, r14
    20ba:	02 96       	adiw	r24, 0x02	; 2
    20bc:	90 de       	rcall	.-736    	; 0x1dde <get16>
	if (tmp & 0x8000) pdhdr->qr = 1;
    20be:	99 23       	and	r25, r25
    20c0:	14 f4       	brge	.+4      	; 0x20c6 <parseDNSMSG+0x36>
    20c2:	21 e0       	ldi	r18, 0x01	; 1
    20c4:	2a 83       	std	Y+2, r18	; 0x02

	pdhdr->opcode = (tmp >> 11) & 0xf;
    20c6:	29 2f       	mov	r18, r25
    20c8:	26 95       	lsr	r18
    20ca:	26 95       	lsr	r18
    20cc:	26 95       	lsr	r18
    20ce:	2f 70       	andi	r18, 0x0F	; 15
    20d0:	2b 83       	std	Y+3, r18	; 0x03

	if (tmp & 0x0400) pdhdr->aa = 1;
    20d2:	92 ff       	sbrs	r25, 2
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <parseDNSMSG+0x4a>
    20d6:	21 e0       	ldi	r18, 0x01	; 1
    20d8:	2c 83       	std	Y+4, r18	; 0x04
	if (tmp & 0x0200) pdhdr->tc = 1;
    20da:	91 ff       	sbrs	r25, 1
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <parseDNSMSG+0x52>
    20de:	21 e0       	ldi	r18, 0x01	; 1
    20e0:	2d 83       	std	Y+5, r18	; 0x05
	if (tmp & 0x0100) pdhdr->rd = 1;
    20e2:	90 ff       	sbrs	r25, 0
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <parseDNSMSG+0x5a>
    20e6:	21 e0       	ldi	r18, 0x01	; 1
    20e8:	2e 83       	std	Y+6, r18	; 0x06
	if (tmp & 0x0080) pdhdr->ra = 1;
    20ea:	87 ff       	sbrs	r24, 7
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <parseDNSMSG+0x62>
    20ee:	21 e0       	ldi	r18, 0x01	; 1
    20f0:	2f 83       	std	Y+7, r18	; 0x07

	pdhdr->rcode = tmp & 0xf;
    20f2:	8f 70       	andi	r24, 0x0F	; 15
    20f4:	88 87       	std	Y+8, r24	; 0x08
	pdhdr->qdcount = get16(&msg[4]);
    20f6:	c7 01       	movw	r24, r14
    20f8:	04 96       	adiw	r24, 0x04	; 4
    20fa:	71 de       	rcall	.-798    	; 0x1dde <get16>
    20fc:	9a 87       	std	Y+10, r25	; 0x0a
    20fe:	89 87       	std	Y+9, r24	; 0x09
	pdhdr->ancount = get16(&msg[6]);
    2100:	c7 01       	movw	r24, r14
    2102:	06 96       	adiw	r24, 0x06	; 6
    2104:	6c de       	rcall	.-808    	; 0x1dde <get16>
    2106:	9c 87       	std	Y+12, r25	; 0x0c
    2108:	8b 87       	std	Y+11, r24	; 0x0b
	pdhdr->nscount = get16(&msg[8]);
    210a:	c7 01       	movw	r24, r14
    210c:	08 96       	adiw	r24, 0x08	; 8
    210e:	67 de       	rcall	.-818    	; 0x1dde <get16>
    2110:	9e 87       	std	Y+14, r25	; 0x0e
    2112:	8d 87       	std	Y+13, r24	; 0x0d
	pdhdr->arcount = get16(&msg[10]);
    2114:	c7 01       	movw	r24, r14
    2116:	0a 96       	adiw	r24, 0x0a	; 10
    2118:	62 de       	rcall	.-828    	; 0x1dde <get16>
    211a:	98 8b       	std	Y+16, r25	; 0x10
    211c:	8f 87       	std	Y+15, r24	; 0x0f
    211e:	c7 01       	movw	r24, r14


	/* Now parse the variable length sections */
	cp = &msg[12];
    2120:	0c 96       	adiw	r24, 0x0c	; 12

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
    2122:	00 e0       	ldi	r16, 0x00	; 0
    2124:	10 e0       	ldi	r17, 0x00	; 0
    2126:	07 c0       	rjmp	.+14     	; 0x2136 <parseDNSMSG+0xa6>
	{
		cp = dns_question(msg, cp);
    2128:	bc 01       	movw	r22, r24
    212a:	c7 01       	movw	r24, r14
    212c:	d2 de       	rcall	.-604    	; 0x1ed2 <dns_question>
    212e:	00 97       	sbiw	r24, 0x00	; 0
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h"
   #endif
		if(!cp) return -1;
    2130:	71 f1       	breq	.+92     	; 0x218e <parseDNSMSG+0xfe>
    2132:	0f 5f       	subi	r16, 0xFF	; 255

	/* Now parse the variable length sections */
	cp = &msg[12];

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
    2134:	1f 4f       	sbci	r17, 0xFF	; 255
    2136:	29 85       	ldd	r18, Y+9	; 0x09
    2138:	3a 85       	ldd	r19, Y+10	; 0x0a
    213a:	02 17       	cp	r16, r18
    213c:	13 07       	cpc	r17, r19
    213e:	a0 f3       	brcs	.-24     	; 0x2128 <parseDNSMSG+0x98>
    2140:	00 e0       	ldi	r16, 0x00	; 0
    2142:	10 e0       	ldi	r17, 0x00	; 0
    2144:	08 c0       	rjmp	.+16     	; 0x2156 <parseDNSMSG+0xc6>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
	{
		cp = dns_answer(msg, cp, ip_from_dns);
    2146:	a6 01       	movw	r20, r12
    2148:	bc 01       	movw	r22, r24
    214a:	c7 01       	movw	r24, r14
    214c:	ea de       	rcall	.-556    	; 0x1f22 <dns_answer>
    214e:	00 97       	sbiw	r24, 0x00	; 0
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h"
   #endif
		if(!cp) return -1;
    2150:	01 f1       	breq	.+64     	; 0x2192 <parseDNSMSG+0x102>
    2152:	0f 5f       	subi	r16, 0xFF	; 255
   #endif
		if(!cp) return -1;
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
    2154:	1f 4f       	sbci	r17, 0xFF	; 255
    2156:	2b 85       	ldd	r18, Y+11	; 0x0b
    2158:	3c 85       	ldd	r19, Y+12	; 0x0c
    215a:	02 17       	cp	r16, r18
    215c:	13 07       	cpc	r17, r19
    215e:	98 f3       	brcs	.-26     	; 0x2146 <parseDNSMSG+0xb6>
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	01 c0       	rjmp	.+2      	; 0x2168 <parseDNSMSG+0xd8>
    2166:	01 96       	adiw	r24, 0x01	; 1
   #endif
		if(!cp) return -1;
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
    2168:	2d 85       	ldd	r18, Y+13	; 0x0d
    216a:	3e 85       	ldd	r19, Y+14	; 0x0e
    216c:	82 17       	cp	r24, r18
    216e:	93 07       	cpc	r25, r19
    2170:	d0 f3       	brcs	.-12     	; 0x2166 <parseDNSMSG+0xd6>
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	01 c0       	rjmp	.+2      	; 0x217a <parseDNSMSG+0xea>
    2178:	01 96       	adiw	r24, 0x01	; 1
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
    217a:	2f 85       	ldd	r18, Y+15	; 0x0f
    217c:	38 89       	ldd	r19, Y+16	; 0x10
    217e:	82 17       	cp	r24, r18
    2180:	93 07       	cpc	r25, r19
    2182:	d0 f3       	brcs	.-12     	; 0x2178 <parseDNSMSG+0xe8>
    2184:	88 85       	ldd	r24, Y+8	; 0x08
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
    2186:	81 11       	cpse	r24, r1
    2188:	06 c0       	rjmp	.+12     	; 0x2196 <parseDNSMSG+0x106>
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	05 c0       	rjmp	.+10     	; 0x2198 <parseDNSMSG+0x108>
    218e:	8f ef       	ldi	r24, 0xFF	; 255
	{
		cp = dns_question(msg, cp);
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h"
   #endif
		if(!cp) return -1;
    2190:	03 c0       	rjmp	.+6      	; 0x2198 <parseDNSMSG+0x108>
    2192:	8f ef       	ldi	r24, 0xFF	; 255
	{
		cp = dns_answer(msg, cp, ip_from_dns);
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h"
   #endif
		if(!cp) return -1;
    2194:	01 c0       	rjmp	.+2      	; 0x2198 <parseDNSMSG+0x108>
    2196:	80 e0       	ldi	r24, 0x00	; 0
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
	else return 0;
    2198:	df 91       	pop	r29
}
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	ff 90       	pop	r15
    21a2:	ef 90       	pop	r14
    21a4:	df 90       	pop	r13
    21a6:	cf 90       	pop	r12
    21a8:	08 95       	ret

000021aa <dns_makequery>:
    21aa:	4f 92       	push	r4
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
    21ac:	5f 92       	push	r5
    21ae:	6f 92       	push	r6
    21b0:	7f 92       	push	r7
    21b2:	8f 92       	push	r8
    21b4:	9f 92       	push	r9
    21b6:	af 92       	push	r10
    21b8:	bf 92       	push	r11
    21ba:	cf 92       	push	r12
    21bc:	df 92       	push	r13
    21be:	ef 92       	push	r14
    21c0:	ff 92       	push	r15
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	68 97       	sbiw	r28, 0x18	; 24
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	f8 2e       	mov	r15, r24
    21dc:	8b 01       	movw	r16, r22
    21de:	2a 01       	movw	r4, r20
	uint16_t p;
	uint16_t dlen;

	cp = buf;

	DNS_MSGID++;
    21e0:	60 91 96 1d 	lds	r22, 0x1D96	; 0x801d96 <DNS_MSGID>
    21e4:	70 91 97 1d 	lds	r23, 0x1D97	; 0x801d97 <DNS_MSGID+0x1>
    21e8:	6f 5f       	subi	r22, 0xFF	; 255
    21ea:	7f 4f       	sbci	r23, 0xFF	; 255
    21ec:	70 93 97 1d 	sts	0x1D97, r23	; 0x801d97 <DNS_MSGID+0x1>
    21f0:	60 93 96 1d 	sts	0x1D96, r22	; 0x801d96 <DNS_MSGID>
	cp = put16(cp, DNS_MSGID);
    21f4:	ca 01       	movw	r24, r20
    21f6:	fc dd       	rcall	.-1032   	; 0x1df0 <put16>
	p = (op << 11) | 0x0100;			/* Recursion desired */
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	7f 2d       	mov	r23, r15
    21fe:	77 0f       	add	r23, r23
    2200:	77 0f       	add	r23, r23
    2202:	77 0f       	add	r23, r23
	cp = put16(cp, p);
    2204:	71 60       	ori	r23, 0x01	; 1
    2206:	f4 dd       	rcall	.-1048   	; 0x1df0 <put16>
	cp = put16(cp, 1);
    2208:	61 e0       	ldi	r22, 0x01	; 1
    220a:	70 e0       	ldi	r23, 0x00	; 0
    220c:	f1 dd       	rcall	.-1054   	; 0x1df0 <put16>
	cp = put16(cp, 0);
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	70 e0       	ldi	r23, 0x00	; 0
    2212:	ee dd       	rcall	.-1060   	; 0x1df0 <put16>
	cp = put16(cp, 0);
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	70 e0       	ldi	r23, 0x00	; 0
    2218:	eb dd       	rcall	.-1066   	; 0x1df0 <put16>
	cp = put16(cp, 0);
    221a:	60 e0       	ldi	r22, 0x00	; 0
    221c:	70 e0       	ldi	r23, 0x00	; 0
    221e:	e8 dd       	rcall	.-1072   	; 0x1df0 <put16>
    2220:	5c 01       	movw	r10, r24
    2222:	b8 01       	movw	r22, r16

	strcpy(sname, name);
    2224:	8e 01       	movw	r16, r28
    2226:	0f 5f       	subi	r16, 0xFF	; 255
    2228:	1f 4f       	sbci	r17, 0xFF	; 255
    222a:	c8 01       	movw	r24, r16
    222c:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <strcpy>
    2230:	f8 01       	movw	r30, r16
	dname = sname;
	dlen = strlen(dname);
    2232:	01 90       	ld	r0, Z+
    2234:	00 20       	and	r0, r0
    2236:	e9 f7       	brne	.-6      	; 0x2232 <dns_makequery+0x88>
    2238:	31 97       	sbiw	r30, 0x01	; 1
    223a:	3f 01       	movw	r6, r30
    223c:	60 1a       	sub	r6, r16
    223e:	71 0a       	sbc	r7, r17
    2240:	78 01       	movw	r14, r16
	cp = put16(cp, 0);
	cp = put16(cp, 0);
	cp = put16(cp, 0);

	strcpy(sname, name);
	dname = sname;
    2242:	6e e2       	ldi	r22, 0x2E	; 46
	dlen = strlen(dname);
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
    2244:	70 e0       	ldi	r23, 0x00	; 0
    2246:	c7 01       	movw	r24, r14
    2248:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <strchr>
    224c:	6c 01       	movw	r12, r24
    224e:	00 97       	sbiw	r24, 0x00	; 0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
    2250:	21 f0       	breq	.+8      	; 0x225a <dns_makequery+0xb0>
    2252:	8c 01       	movw	r16, r24
    2254:	0e 19       	sub	r16, r14
    2256:	1f 09       	sbc	r17, r15
    2258:	01 c0       	rjmp	.+2      	; 0x225c <dns_makequery+0xb2>
    225a:	83 01       	movw	r16, r6
		else len = dlen;			/* Last component */
    225c:	45 01       	movw	r8, r10

		*cp++ = len;				/* Write length of component */
    225e:	8f ef       	ldi	r24, 0xFF	; 255
    2260:	88 1a       	sub	r8, r24
    2262:	98 0a       	sbc	r9, r24
    2264:	f5 01       	movw	r30, r10
    2266:	00 83       	st	Z, r16
    2268:	01 15       	cp	r16, r1
		if (len == 0) break;
    226a:	11 05       	cpc	r17, r1
    226c:	d9 f0       	breq	.+54     	; 0x22a4 <dns_makequery+0xfa>
    226e:	a8 01       	movw	r20, r16

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
    2270:	b7 01       	movw	r22, r14
    2272:	c4 01       	movw	r24, r8
    2274:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <strncpy>
    2278:	54 01       	movw	r10, r8
		cp += len;
    227a:	a0 0e       	add	r10, r16
    227c:	b1 1e       	adc	r11, r17
    227e:	cd 28       	or	r12, r13
		if (cp1 == NULL)
    2280:	39 f4       	brne	.+14     	; 0x2290 <dns_makequery+0xe6>
    2282:	45 01       	movw	r8, r10
		{
			*cp++ = 0;			/* Last one; write null and finish */
    2284:	ff ef       	ldi	r31, 0xFF	; 255
    2286:	8f 1a       	sub	r8, r31
    2288:	9f 0a       	sbc	r9, r31
    228a:	f5 01       	movw	r30, r10
    228c:	10 82       	st	Z, r1
    228e:	0a c0       	rjmp	.+20     	; 0x22a4 <dns_makequery+0xfa>
			break;
    2290:	c8 01       	movw	r24, r16
		}
		dname += len+1;
    2292:	01 96       	adiw	r24, 0x01	; 1
    2294:	e8 0e       	add	r14, r24
    2296:	f9 1e       	adc	r15, r25
    2298:	60 1a       	sub	r6, r16
		dlen -= len+1;
    229a:	71 0a       	sbc	r7, r17
    229c:	f1 e0       	ldi	r31, 0x01	; 1
    229e:	6f 1a       	sub	r6, r31
    22a0:	71 08       	sbc	r7, r1
	}
    22a2:	cf cf       	rjmp	.-98     	; 0x2242 <dns_makequery+0x98>

	cp = put16(cp, 0x0001);				/* type */
    22a4:	61 e0       	ldi	r22, 0x01	; 1
    22a6:	70 e0       	ldi	r23, 0x00	; 0
    22a8:	c4 01       	movw	r24, r8
    22aa:	a2 dd       	rcall	.-1212   	; 0x1df0 <put16>
	cp = put16(cp, 0x0001);				/* class */
    22ac:	61 e0       	ldi	r22, 0x01	; 1
    22ae:	70 e0       	ldi	r23, 0x00	; 0
    22b0:	9f dd       	rcall	.-1218   	; 0x1df0 <put16>
    22b2:	84 19       	sub	r24, r4

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
}
    22b4:	95 09       	sbc	r25, r5
    22b6:	68 96       	adiw	r28, 0x18	; 24
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	1f 91       	pop	r17
    22c8:	0f 91       	pop	r16
    22ca:	ff 90       	pop	r15
    22cc:	ef 90       	pop	r14
    22ce:	df 90       	pop	r13
    22d0:	cf 90       	pop	r12
    22d2:	bf 90       	pop	r11
    22d4:	af 90       	pop	r10
    22d6:	9f 90       	pop	r9
    22d8:	8f 90       	pop	r8
    22da:	7f 90       	pop	r7
    22dc:	6f 90       	pop	r6
    22de:	5f 90       	pop	r5
    22e0:	4f 90       	pop	r4
    22e2:	08 95       	ret

000022e4 <check_DNS_timeout>:
    22e4:	80 91 90 1d 	lds	r24, 0x1D90	; 0x801d90 <dns_1s_tick>
 */

int8_t check_DNS_timeout(void)
{

	if(dns_1s_tick >= DNS_WAIT_TIME)
    22e8:	90 91 91 1d 	lds	r25, 0x1D91	; 0x801d91 <dns_1s_tick+0x1>
    22ec:	a0 91 92 1d 	lds	r26, 0x1D92	; 0x801d92 <dns_1s_tick+0x2>
    22f0:	b0 91 93 1d 	lds	r27, 0x1D93	; 0x801d93 <dns_1s_tick+0x3>
    22f4:	03 97       	sbiw	r24, 0x03	; 3
    22f6:	a1 05       	cpc	r26, r1
    22f8:	b1 05       	cpc	r27, r1
    22fa:	a8 f0       	brcs	.+42     	; 0x2326 <check_DNS_timeout+0x42>
	{
		dns_1s_tick = 0;
    22fc:	10 92 90 1d 	sts	0x1D90, r1	; 0x801d90 <dns_1s_tick>
    2300:	10 92 91 1d 	sts	0x1D91, r1	; 0x801d91 <dns_1s_tick+0x1>
    2304:	10 92 92 1d 	sts	0x1D92, r1	; 0x801d92 <dns_1s_tick+0x2>
    2308:	10 92 93 1d 	sts	0x1D93, r1	; 0x801d93 <dns_1s_tick+0x3>
		if(retry_count >= MAX_DNS_RETRY) {
    230c:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <retry_count>
    2310:	82 30       	cpi	r24, 0x02	; 2
    2312:	20 f0       	brcs	.+8      	; 0x231c <check_DNS_timeout+0x38>
			retry_count = 0;
    2314:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <retry_count>
			return -1; // timeout occurred
    2318:	8f ef       	ldi	r24, 0xFF	; 255
    231a:	08 95       	ret
		}
		retry_count++;
    231c:	8f 5f       	subi	r24, 0xFF	; 255
    231e:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <retry_count>
		return 0; // timer over, but no timeout
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	08 95       	ret
	}

	return 1; // no timer over, no timeout occur
    2326:	81 e0       	ldi	r24, 0x01	; 1
}
    2328:	08 95       	ret

0000232a <DNS_init>:


/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
	DNS_SOCKET = s; // SOCK_DNS
    232a:	80 93 8f 1d 	sts	0x1D8F, r24	; 0x801d8f <DNS_SOCKET>
	pDNSMSG = buf; // User's shared buffer
    232e:	70 93 95 1d 	sts	0x1D95, r23	; 0x801d95 <pDNSMSG+0x1>
    2332:	60 93 94 1d 	sts	0x1D94, r22	; 0x801d94 <pDNSMSG>
	DNS_MSGID = DNS_MSG_ID;
    2336:	82 e2       	ldi	r24, 0x22	; 34
    2338:	91 e1       	ldi	r25, 0x11	; 17
    233a:	90 93 97 1d 	sts	0x1D97, r25	; 0x801d97 <DNS_MSGID+0x1>
    233e:	80 93 96 1d 	sts	0x1D96, r24	; 0x801d96 <DNS_MSGID>
    2342:	08 95       	ret

00002344 <DNS_run>:
}

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
    2344:	af 92       	push	r10
    2346:	bf 92       	push	r11
    2348:	cf 92       	push	r12
    234a:	df 92       	push	r13
    234c:	ef 92       	push	r14
    234e:	ff 92       	push	r15
    2350:	0f 93       	push	r16
    2352:	1f 93       	push	r17
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	67 97       	sbiw	r28, 0x17	; 23
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	6c 01       	movw	r12, r24
    236a:	7b 01       	movw	r14, r22
    236c:	5a 01       	movw	r10, r20
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
    236e:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <retry_count>
	dns_1s_tick = 0;
    2372:	10 92 90 1d 	sts	0x1D90, r1	; 0x801d90 <dns_1s_tick>
    2376:	10 92 91 1d 	sts	0x1D91, r1	; 0x801d91 <dns_1s_tick+0x1>
    237a:	10 92 92 1d 	sts	0x1D92, r1	; 0x801d92 <dns_1s_tick+0x2>
    237e:	10 92 93 1d 	sts	0x1D93, r1	; 0x801d93 <dns_1s_tick+0x3>
   
   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	50 e0       	ldi	r21, 0x00	; 0
    2388:	62 e0       	ldi	r22, 0x02	; 2
    238a:	80 91 8f 1d 	lds	r24, 0x1D8F	; 0x801d8f <DNS_SOCKET>
    238e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif
   
	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
    2392:	40 91 94 1d 	lds	r20, 0x1D94	; 0x801d94 <pDNSMSG>
    2396:	50 91 95 1d 	lds	r21, 0x1D95	; 0x801d95 <pDNSMSG+0x1>
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	31 e0       	ldi	r19, 0x01	; 1
    239e:	b7 01       	movw	r22, r14
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	02 df       	rcall	.-508    	; 0x21aa <dns_makequery>
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
    23a6:	60 91 94 1d 	lds	r22, 0x1D94	; 0x801d94 <pDNSMSG>
    23aa:	70 91 95 1d 	lds	r23, 0x1D95	; 0x801d95 <pDNSMSG+0x1>
    23ae:	05 e3       	ldi	r16, 0x35	; 53
    23b0:	10 e0       	ldi	r17, 0x00	; 0
    23b2:	96 01       	movw	r18, r12
    23b4:	ac 01       	movw	r20, r24
    23b6:	80 91 8f 1d 	lds	r24, 0x1D8F	; 0x801d8f <DNS_SOCKET>
    23ba:	0e 94 79 06 	call	0xcf2	; 0xcf2 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
    23be:	80 91 8f 1d 	lds	r24, 0x1D8F	; 0x801d8f <DNS_SOCKET>
    23c2:	dd d9       	rcall	.-3142   	; 0x177e <getSn_RX_RSR>
    23c4:	7c 01       	movw	r14, r24
    23c6:	89 2b       	or	r24, r25
    23c8:	29 f1       	breq	.+74     	; 0x2414 <DNS_run+0xd0>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	e8 16       	cp	r14, r24
    23ce:	f8 06       	cpc	r15, r24
    23d0:	18 f0       	brcs	.+6      	; 0x23d8 <DNS_run+0x94>
    23d2:	e1 2c       	mov	r14, r1
    23d4:	ff 24       	eor	r15, r15
    23d6:	f3 94       	inc	r15
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
    23d8:	60 91 94 1d 	lds	r22, 0x1D94	; 0x801d94 <pDNSMSG>
    23dc:	70 91 95 1d 	lds	r23, 0x1D95	; 0x801d95 <pDNSMSG+0x1>
    23e0:	8e 01       	movw	r16, r28
    23e2:	0a 5e       	subi	r16, 0xEA	; 234
    23e4:	1f 4f       	sbci	r17, 0xFF	; 255
    23e6:	9e 01       	movw	r18, r28
    23e8:	2e 5e       	subi	r18, 0xEE	; 238
    23ea:	3f 4f       	sbci	r19, 0xFF	; 255
    23ec:	a7 01       	movw	r20, r14
    23ee:	80 91 8f 1d 	lds	r24, 0x1D8F	; 0x801d8f <DNS_SOCKET>
    23f2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <recvfrom>
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
    23f6:	60 91 94 1d 	lds	r22, 0x1D94	; 0x801d94 <pDNSMSG>
    23fa:	70 91 95 1d 	lds	r23, 0x1D95	; 0x801d95 <pDNSMSG+0x1>
    23fe:	a5 01       	movw	r20, r10
    2400:	ce 01       	movw	r24, r28
    2402:	01 96       	adiw	r24, 0x01	; 1
    2404:	45 de       	rcall	.-886    	; 0x2090 <parseDNSMSG>
    2406:	f8 2e       	mov	r15, r24
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
    2408:	80 91 8f 1d 	lds	r24, 0x1D8F	; 0x801d8f <DNS_SOCKET>
    240c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
    2410:	8f 2d       	mov	r24, r15
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
			break;
		}
		// Check Timeout
		ret_check_timeout = check_DNS_timeout();
    2412:	13 c0       	rjmp	.+38     	; 0x243a <DNS_run+0xf6>
    2414:	67 df       	rcall	.-306    	; 0x22e4 <check_DNS_timeout>
		if (ret_check_timeout < 0) {
    2416:	88 23       	and	r24, r24
    2418:	7c f0       	brlt	.+30     	; 0x2438 <DNS_run+0xf4>
#ifdef _DNS_DEBUG_
			printf("> DNS Server is not responding : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif
			return 0; // timeout occurred
		}
		else if (ret_check_timeout == 0) {
    241a:	81 11       	cpse	r24, r1
    241c:	d0 cf       	rjmp	.-96     	; 0x23be <DNS_run+0x7a>

#ifdef _DNS_DEBUG_
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
    241e:	60 91 94 1d 	lds	r22, 0x1D94	; 0x801d94 <pDNSMSG>
    2422:	70 91 95 1d 	lds	r23, 0x1D95	; 0x801d95 <pDNSMSG+0x1>
    2426:	05 e3       	ldi	r16, 0x35	; 53
    2428:	10 e0       	ldi	r17, 0x00	; 0
    242a:	96 01       	movw	r18, r12
    242c:	a7 01       	movw	r20, r14
    242e:	80 91 8f 1d 	lds	r24, 0x1D8F	; 0x801d8f <DNS_SOCKET>
    2432:	0e 94 79 06 	call	0xcf2	; 0xcf2 <sendto>
    2436:	c3 cf       	rjmp	.-122    	; 0x23be <DNS_run+0x7a>
		if (ret_check_timeout < 0) {

#ifdef _DNS_DEBUG_
			printf("> DNS Server is not responding : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif
			return 0; // timeout occurred
    2438:	80 e0       	ldi	r24, 0x00	; 0
	}
	close(DNS_SOCKET);
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
}
    243a:	67 96       	adiw	r28, 0x17	; 23
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	ff 90       	pop	r15
    2450:	ef 90       	pop	r14
    2452:	df 90       	pop	r13
    2454:	cf 90       	pop	r12
    2456:	bf 90       	pop	r11
    2458:	af 90       	pop	r10
    245a:	08 95       	ret

0000245c <NewMessageData>:
  else
    rc = FAILURE;
    
exit:
  return rc;
}
    245c:	fc 01       	movw	r30, r24
    245e:	73 83       	std	Z+3, r23	; 0x03
    2460:	62 83       	std	Z+2, r22	; 0x02
    2462:	51 83       	std	Z+1, r21	; 0x01
    2464:	40 83       	st	Z, r20
    2466:	08 95       	ret

00002468 <getNextPacketId>:
    2468:	fc 01       	movw	r30, r24
    246a:	80 81       	ld	r24, Z
    246c:	91 81       	ldd	r25, Z+1	; 0x01
    246e:	a2 81       	ldd	r26, Z+2	; 0x02
    2470:	b3 81       	ldd	r27, Z+3	; 0x03
    2472:	8f 3f       	cpi	r24, 0xFF	; 255
    2474:	2f ef       	ldi	r18, 0xFF	; 255
    2476:	92 07       	cpc	r25, r18
    2478:	a1 05       	cpc	r26, r1
    247a:	b1 05       	cpc	r27, r1
    247c:	39 f0       	breq	.+14     	; 0x248c <getNextPacketId+0x24>
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	6f 5f       	subi	r22, 0xFF	; 255
    2484:	7f 4f       	sbci	r23, 0xFF	; 255
    2486:	8f 4f       	sbci	r24, 0xFF	; 255
    2488:	9f 4f       	sbci	r25, 0xFF	; 255
    248a:	04 c0       	rjmp	.+8      	; 0x2494 <getNextPacketId+0x2c>
    248c:	61 e0       	ldi	r22, 0x01	; 1
    248e:	70 e0       	ldi	r23, 0x00	; 0
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	60 83       	st	Z, r22
    2496:	71 83       	std	Z+1, r23	; 0x01
    2498:	82 83       	std	Z+2, r24	; 0x02
    249a:	93 83       	std	Z+3, r25	; 0x03
    249c:	08 95       	ret

0000249e <sendPacket>:
    249e:	2f 92       	push	r2
    24a0:	3f 92       	push	r3
    24a2:	4f 92       	push	r4
    24a4:	5f 92       	push	r5
    24a6:	6f 92       	push	r6
    24a8:	7f 92       	push	r7
    24aa:	8f 92       	push	r8
    24ac:	9f 92       	push	r9
    24ae:	af 92       	push	r10
    24b0:	bf 92       	push	r11
    24b2:	cf 92       	push	r12
    24b4:	df 92       	push	r13
    24b6:	ef 92       	push	r14
    24b8:	ff 92       	push	r15
    24ba:	0f 93       	push	r16
    24bc:	1f 93       	push	r17
    24be:	cf 93       	push	r28
    24c0:	df 93       	push	r29
    24c2:	ec 01       	movw	r28, r24
    24c4:	2a 01       	movw	r4, r20
    24c6:	3b 01       	movw	r6, r22
    24c8:	19 01       	movw	r2, r18
    24ca:	81 2c       	mov	r8, r1
    24cc:	91 2c       	mov	r9, r1
    24ce:	54 01       	movw	r10, r8
    24d0:	1a c0       	rjmp	.+52     	; 0x2506 <sendPacket+0x68>
    24d2:	ef a5       	ldd	r30, Y+47	; 0x2f
    24d4:	f8 a9       	ldd	r31, Y+48	; 0x30
    24d6:	c6 80       	ldd	r12, Z+6	; 0x06
    24d8:	d7 80       	ldd	r13, Z+7	; 0x07
    24da:	c1 01       	movw	r24, r2
    24dc:	0e 94 29 23 	call	0x4652	; 0x4652 <left_ms>
    24e0:	7b 01       	movw	r14, r22
    24e2:	8c 01       	movw	r16, r24
    24e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    24e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    24e8:	bc 01       	movw	r22, r24
    24ea:	68 0d       	add	r22, r8
    24ec:	79 1d       	adc	r23, r9
    24ee:	a3 01       	movw	r20, r6
    24f0:	92 01       	movw	r18, r4
    24f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f4:	98 a9       	ldd	r25, Y+48	; 0x30
    24f6:	f6 01       	movw	r30, r12
    24f8:	19 95       	eicall
    24fa:	99 23       	and	r25, r25
    24fc:	74 f0       	brlt	.+28     	; 0x251a <sendPacket+0x7c>
    24fe:	86 0e       	add	r8, r22
    2500:	97 1e       	adc	r9, r23
    2502:	a8 1e       	adc	r10, r24
    2504:	b9 1e       	adc	r11, r25
    2506:	84 14       	cp	r8, r4
    2508:	95 04       	cpc	r9, r5
    250a:	a6 04       	cpc	r10, r6
    250c:	b7 04       	cpc	r11, r7
    250e:	2c f4       	brge	.+10     	; 0x251a <sendPacket+0x7c>
    2510:	c1 01       	movw	r24, r2
    2512:	0e 94 c8 22 	call	0x4590	; 0x4590 <expired>
    2516:	88 23       	and	r24, r24
    2518:	e1 f2       	breq	.-72     	; 0x24d2 <sendPacket+0x34>
    251a:	84 14       	cp	r8, r4
    251c:	95 04       	cpc	r9, r5
    251e:	a6 04       	cpc	r10, r6
    2520:	b7 04       	cpc	r11, r7
    2522:	61 f4       	brne	.+24     	; 0x253c <sendPacket+0x9e>
    2524:	48 89       	ldd	r20, Y+16	; 0x10
    2526:	59 89       	ldd	r21, Y+17	; 0x11
    2528:	6a 89       	ldd	r22, Y+18	; 0x12
    252a:	7b 89       	ldd	r23, Y+19	; 0x13
    252c:	ce 01       	movw	r24, r28
    252e:	c1 96       	adiw	r24, 0x31	; 49
    2530:	0e 94 fe 22 	call	0x45fc	; 0x45fc <countdown>
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	cb 01       	movw	r24, r22
    253a:	03 c0       	rjmp	.+6      	; 0x2542 <sendPacket+0xa4>
    253c:	6f ef       	ldi	r22, 0xFF	; 255
    253e:	7f ef       	ldi	r23, 0xFF	; 255
    2540:	cb 01       	movw	r24, r22
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	1f 91       	pop	r17
    2548:	0f 91       	pop	r16
    254a:	ff 90       	pop	r15
    254c:	ef 90       	pop	r14
    254e:	df 90       	pop	r13
    2550:	cf 90       	pop	r12
    2552:	bf 90       	pop	r11
    2554:	af 90       	pop	r10
    2556:	9f 90       	pop	r9
    2558:	8f 90       	pop	r8
    255a:	7f 90       	pop	r7
    255c:	6f 90       	pop	r6
    255e:	5f 90       	pop	r5
    2560:	4f 90       	pop	r4
    2562:	3f 90       	pop	r3
    2564:	2f 90       	pop	r2
    2566:	08 95       	ret

00002568 <MQTTClient>:
    2568:	4f 92       	push	r4
    256a:	5f 92       	push	r5
    256c:	6f 92       	push	r6
    256e:	7f 92       	push	r7
    2570:	af 92       	push	r10
    2572:	bf 92       	push	r11
    2574:	cf 92       	push	r12
    2576:	df 92       	push	r13
    2578:	ef 92       	push	r14
    257a:	ff 92       	push	r15
    257c:	0f 93       	push	r16
    257e:	1f 93       	push	r17
    2580:	dc 01       	movw	r26, r24
    2582:	d0 96       	adiw	r26, 0x30	; 48
    2584:	7c 93       	st	X, r23
    2586:	6e 93       	st	-X, r22
    2588:	9f 97       	sbiw	r26, 0x2f	; 47
    258a:	41 2c       	mov	r4, r1
    258c:	51 2c       	mov	r5, r1
    258e:	32 01       	movw	r6, r4
    2590:	0e c0       	rjmp	.+28     	; 0x25ae <MQTTClient+0x46>
    2592:	f2 01       	movw	r30, r4
    2594:	ee 0f       	add	r30, r30
    2596:	ff 1f       	adc	r31, r31
    2598:	ee 0f       	add	r30, r30
    259a:	ff 1f       	adc	r31, r31
    259c:	ea 0f       	add	r30, r26
    259e:	fb 1f       	adc	r31, r27
    25a0:	12 8e       	std	Z+26, r1	; 0x1a
    25a2:	11 8e       	std	Z+25, r1	; 0x19
    25a4:	8f ef       	ldi	r24, 0xFF	; 255
    25a6:	48 1a       	sub	r4, r24
    25a8:	58 0a       	sbc	r5, r24
    25aa:	68 0a       	sbc	r6, r24
    25ac:	78 0a       	sbc	r7, r24
    25ae:	85 e0       	ldi	r24, 0x05	; 5
    25b0:	48 16       	cp	r4, r24
    25b2:	51 04       	cpc	r5, r1
    25b4:	61 04       	cpc	r6, r1
    25b6:	71 04       	cpc	r7, r1
    25b8:	64 f3       	brlt	.-40     	; 0x2592 <MQTTClient+0x2a>
    25ba:	14 96       	adiw	r26, 0x04	; 4
    25bc:	2d 93       	st	X+, r18
    25be:	3d 93       	st	X+, r19
    25c0:	4d 93       	st	X+, r20
    25c2:	5c 93       	st	X, r21
    25c4:	17 97       	sbiw	r26, 0x07	; 7
    25c6:	1d 96       	adiw	r26, 0x0d	; 13
    25c8:	1c 93       	st	X, r17
    25ca:	0e 93       	st	-X, r16
    25cc:	1c 97       	sbiw	r26, 0x0c	; 12
    25ce:	19 96       	adiw	r26, 0x09	; 9
    25d0:	fc 92       	st	X, r15
    25d2:	ee 92       	st	-X, r14
    25d4:	18 97       	sbiw	r26, 0x08	; 8
    25d6:	1f 96       	adiw	r26, 0x0f	; 15
    25d8:	dc 92       	st	X, r13
    25da:	ce 92       	st	-X, r12
    25dc:	1e 97       	sbiw	r26, 0x0e	; 14
    25de:	1b 96       	adiw	r26, 0x0b	; 11
    25e0:	bc 92       	st	X, r11
    25e2:	ae 92       	st	-X, r10
    25e4:	1a 97       	sbiw	r26, 0x0a	; 10
    25e6:	55 96       	adiw	r26, 0x15	; 21
    25e8:	1d 92       	st	X+, r1
    25ea:	1d 92       	st	X+, r1
    25ec:	1d 92       	st	X+, r1
    25ee:	1c 92       	st	X, r1
    25f0:	58 97       	sbiw	r26, 0x18	; 24
    25f2:	54 96       	adiw	r26, 0x14	; 20
    25f4:	1c 92       	st	X, r1
    25f6:	54 97       	sbiw	r26, 0x14	; 20
    25f8:	9e 96       	adiw	r26, 0x2e	; 46
    25fa:	1c 92       	st	X, r1
    25fc:	1e 92       	st	-X, r1
    25fe:	9d 97       	sbiw	r26, 0x2d	; 45
    2600:	cd 01       	movw	r24, r26
    2602:	c1 96       	adiw	r24, 0x31	; 49
    2604:	0e 94 44 23 	call	0x4688	; 0x4688 <InitTimer>
    2608:	1f 91       	pop	r17
    260a:	0f 91       	pop	r16
    260c:	ff 90       	pop	r15
    260e:	ef 90       	pop	r14
    2610:	df 90       	pop	r13
    2612:	cf 90       	pop	r12
    2614:	bf 90       	pop	r11
    2616:	af 90       	pop	r10
    2618:	7f 90       	pop	r7
    261a:	6f 90       	pop	r6
    261c:	5f 90       	pop	r5
    261e:	4f 90       	pop	r4
    2620:	08 95       	ret

00002622 <decodePacket>:
    2622:	2f 92       	push	r2
    2624:	3f 92       	push	r3
    2626:	4f 92       	push	r4
    2628:	5f 92       	push	r5
    262a:	6f 92       	push	r6
    262c:	7f 92       	push	r7
    262e:	8f 92       	push	r8
    2630:	9f 92       	push	r9
    2632:	af 92       	push	r10
    2634:	bf 92       	push	r11
    2636:	cf 92       	push	r12
    2638:	df 92       	push	r13
    263a:	ef 92       	push	r14
    263c:	ff 92       	push	r15
    263e:	0f 93       	push	r16
    2640:	1f 93       	push	r17
    2642:	cf 93       	push	r28
    2644:	df 93       	push	r29
    2646:	00 d0       	rcall	.+0      	; 0x2648 <decodePacket+0x26>
    2648:	1f 92       	push	r1
    264a:	1f 92       	push	r1
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
    2650:	1c 01       	movw	r2, r24
    2652:	6b 01       	movw	r12, r22
    2654:	2a 83       	std	Y+2, r18	; 0x02
    2656:	3b 83       	std	Y+3, r19	; 0x03
    2658:	4c 83       	std	Y+4, r20	; 0x04
    265a:	5d 83       	std	Y+5, r21	; 0x05
    265c:	db 01       	movw	r26, r22
    265e:	1d 92       	st	X+, r1
    2660:	1d 92       	st	X+, r1
    2662:	1d 92       	st	X+, r1
    2664:	1c 92       	st	X, r1
    2666:	13 97       	sbiw	r26, 0x03	; 3
    2668:	41 2c       	mov	r4, r1
    266a:	51 2c       	mov	r5, r1
    266c:	32 01       	movw	r6, r4
    266e:	81 2c       	mov	r8, r1
    2670:	91 2c       	mov	r9, r1
    2672:	54 01       	movw	r10, r8
    2674:	83 94       	inc	r8
    2676:	bf ef       	ldi	r27, 0xFF	; 255
    2678:	4b 1a       	sub	r4, r27
    267a:	5b 0a       	sbc	r5, r27
    267c:	6b 0a       	sbc	r6, r27
    267e:	7b 0a       	sbc	r7, r27
    2680:	e5 e0       	ldi	r30, 0x05	; 5
    2682:	4e 16       	cp	r4, r30
    2684:	51 04       	cpc	r5, r1
    2686:	61 04       	cpc	r6, r1
    2688:	71 04       	cpc	r7, r1
    268a:	0c f0       	brlt	.+2      	; 0x268e <decodePacket+0x6c>
    268c:	51 c0       	rjmp	.+162    	; 0x2730 <decodePacket+0x10e>
    268e:	d1 01       	movw	r26, r2
    2690:	9f 96       	adiw	r26, 0x2f	; 47
    2692:	8d 91       	ld	r24, X+
    2694:	9c 91       	ld	r25, X
    2696:	d0 97       	sbiw	r26, 0x30	; 48
    2698:	dc 01       	movw	r26, r24
    269a:	14 96       	adiw	r26, 0x04	; 4
    269c:	ed 91       	ld	r30, X+
    269e:	fc 91       	ld	r31, X
    26a0:	15 97       	sbiw	r26, 0x05	; 5
    26a2:	ea 80       	ldd	r14, Y+2	; 0x02
    26a4:	fb 80       	ldd	r15, Y+3	; 0x03
    26a6:	0c 81       	ldd	r16, Y+4	; 0x04
    26a8:	1d 81       	ldd	r17, Y+5	; 0x05
    26aa:	21 e0       	ldi	r18, 0x01	; 1
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	50 e0       	ldi	r21, 0x00	; 0
    26b2:	be 01       	movw	r22, r28
    26b4:	6f 5f       	subi	r22, 0xFF	; 255
    26b6:	7f 4f       	sbci	r23, 0xFF	; 255
    26b8:	19 95       	eicall
    26ba:	61 30       	cpi	r22, 0x01	; 1
    26bc:	71 05       	cpc	r23, r1
    26be:	81 05       	cpc	r24, r1
    26c0:	91 05       	cpc	r25, r1
    26c2:	b1 f5       	brne	.+108    	; 0x2730 <decodePacket+0x10e>
    26c4:	f9 80       	ldd	r15, Y+1	; 0x01
    26c6:	af 2d       	mov	r26, r15
    26c8:	af 77       	andi	r26, 0x7F	; 127
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	a5 01       	movw	r20, r10
    26ce:	94 01       	movw	r18, r8
    26d0:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <__muluhisi3>
    26d4:	f6 01       	movw	r30, r12
    26d6:	00 81       	ld	r16, Z
    26d8:	11 81       	ldd	r17, Z+1	; 0x01
    26da:	22 81       	ldd	r18, Z+2	; 0x02
    26dc:	33 81       	ldd	r19, Z+3	; 0x03
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	80 0f       	add	r24, r16
    26e4:	91 1f       	adc	r25, r17
    26e6:	a2 1f       	adc	r26, r18
    26e8:	b3 1f       	adc	r27, r19
    26ea:	80 83       	st	Z, r24
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	a2 83       	std	Z+2, r26	; 0x02
    26f0:	b3 83       	std	Z+3, r27	; 0x03
    26f2:	88 0c       	add	r8, r8
    26f4:	99 1c       	adc	r9, r9
    26f6:	aa 1c       	adc	r10, r10
    26f8:	bb 1c       	adc	r11, r11
    26fa:	88 0c       	add	r8, r8
    26fc:	99 1c       	adc	r9, r9
    26fe:	aa 1c       	adc	r10, r10
    2700:	bb 1c       	adc	r11, r11
    2702:	88 0c       	add	r8, r8
    2704:	99 1c       	adc	r9, r9
    2706:	aa 1c       	adc	r10, r10
    2708:	bb 1c       	adc	r11, r11
    270a:	88 0c       	add	r8, r8
    270c:	99 1c       	adc	r9, r9
    270e:	aa 1c       	adc	r10, r10
    2710:	bb 1c       	adc	r11, r11
    2712:	88 0c       	add	r8, r8
    2714:	99 1c       	adc	r9, r9
    2716:	aa 1c       	adc	r10, r10
    2718:	bb 1c       	adc	r11, r11
    271a:	88 0c       	add	r8, r8
    271c:	99 1c       	adc	r9, r9
    271e:	aa 1c       	adc	r10, r10
    2720:	bb 1c       	adc	r11, r11
    2722:	88 0c       	add	r8, r8
    2724:	99 1c       	adc	r9, r9
    2726:	aa 1c       	adc	r10, r10
    2728:	bb 1c       	adc	r11, r11
    272a:	ff 20       	and	r15, r15
    272c:	0c f4       	brge	.+2      	; 0x2730 <decodePacket+0x10e>
    272e:	a3 cf       	rjmp	.-186    	; 0x2676 <decodePacket+0x54>
    2730:	c3 01       	movw	r24, r6
    2732:	b2 01       	movw	r22, r4
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	df 91       	pop	r29
    2740:	cf 91       	pop	r28
    2742:	1f 91       	pop	r17
    2744:	0f 91       	pop	r16
    2746:	ff 90       	pop	r15
    2748:	ef 90       	pop	r14
    274a:	df 90       	pop	r13
    274c:	cf 90       	pop	r12
    274e:	bf 90       	pop	r11
    2750:	af 90       	pop	r10
    2752:	9f 90       	pop	r9
    2754:	8f 90       	pop	r8
    2756:	7f 90       	pop	r7
    2758:	6f 90       	pop	r6
    275a:	5f 90       	pop	r5
    275c:	4f 90       	pop	r4
    275e:	3f 90       	pop	r3
    2760:	2f 90       	pop	r2
    2762:	08 95       	ret

00002764 <readPacket>:
    2764:	4f 92       	push	r4
    2766:	5f 92       	push	r5
    2768:	6f 92       	push	r6
    276a:	7f 92       	push	r7
    276c:	8f 92       	push	r8
    276e:	9f 92       	push	r9
    2770:	af 92       	push	r10
    2772:	bf 92       	push	r11
    2774:	cf 92       	push	r12
    2776:	df 92       	push	r13
    2778:	ef 92       	push	r14
    277a:	ff 92       	push	r15
    277c:	0f 93       	push	r16
    277e:	1f 93       	push	r17
    2780:	cf 93       	push	r28
    2782:	df 93       	push	r29
    2784:	00 d0       	rcall	.+0      	; 0x2786 <readPacket+0x22>
    2786:	1f 92       	push	r1
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
    278c:	6c 01       	movw	r12, r24
    278e:	5b 01       	movw	r10, r22
    2790:	19 82       	std	Y+1, r1	; 0x01
    2792:	1a 82       	std	Y+2, r1	; 0x02
    2794:	1b 82       	std	Y+3, r1	; 0x03
    2796:	1c 82       	std	Y+4, r1	; 0x04
    2798:	dc 01       	movw	r26, r24
    279a:	9f 96       	adiw	r26, 0x2f	; 47
    279c:	ed 91       	ld	r30, X+
    279e:	fc 91       	ld	r31, X
    27a0:	d0 97       	sbiw	r26, 0x30	; 48
    27a2:	84 80       	ldd	r8, Z+4	; 0x04
    27a4:	95 80       	ldd	r9, Z+5	; 0x05
    27a6:	cb 01       	movw	r24, r22
    27a8:	0e 94 29 23 	call	0x4652	; 0x4652 <left_ms>
    27ac:	7b 01       	movw	r14, r22
    27ae:	8c 01       	movw	r16, r24
    27b0:	f6 01       	movw	r30, r12
    27b2:	66 85       	ldd	r22, Z+14	; 0x0e
    27b4:	77 85       	ldd	r23, Z+15	; 0x0f
    27b6:	21 e0       	ldi	r18, 0x01	; 1
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	87 a5       	ldd	r24, Z+47	; 0x2f
    27c0:	90 a9       	ldd	r25, Z+48	; 0x30
    27c2:	f4 01       	movw	r30, r8
    27c4:	19 95       	eicall
    27c6:	61 30       	cpi	r22, 0x01	; 1
    27c8:	71 05       	cpc	r23, r1
    27ca:	81 05       	cpc	r24, r1
    27cc:	91 05       	cpc	r25, r1
    27ce:	09 f0       	breq	.+2      	; 0x27d2 <readPacket+0x6e>
    27d0:	55 c0       	rjmp	.+170    	; 0x287c <readPacket+0x118>
    27d2:	c5 01       	movw	r24, r10
    27d4:	0e 94 29 23 	call	0x4652	; 0x4652 <left_ms>
    27d8:	9b 01       	movw	r18, r22
    27da:	ac 01       	movw	r20, r24
    27dc:	be 01       	movw	r22, r28
    27de:	6f 5f       	subi	r22, 0xFF	; 255
    27e0:	7f 4f       	sbci	r23, 0xFF	; 255
    27e2:	c6 01       	movw	r24, r12
    27e4:	1e df       	rcall	.-452    	; 0x2622 <decodePacket>
    27e6:	d6 01       	movw	r26, r12
    27e8:	1e 96       	adiw	r26, 0x0e	; 14
    27ea:	8d 91       	ld	r24, X+
    27ec:	9c 91       	ld	r25, X
    27ee:	1f 97       	sbiw	r26, 0x0f	; 15
    27f0:	49 81       	ldd	r20, Y+1	; 0x01
    27f2:	5a 81       	ldd	r21, Y+2	; 0x02
    27f4:	6b 81       	ldd	r22, Y+3	; 0x03
    27f6:	7c 81       	ldd	r23, Y+4	; 0x04
    27f8:	01 96       	adiw	r24, 0x01	; 1
    27fa:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <MQTTPacket_encode>
    27fe:	2b 01       	movw	r4, r22
    2800:	3c 01       	movw	r6, r24
    2802:	bf ef       	ldi	r27, 0xFF	; 255
    2804:	4b 1a       	sub	r4, r27
    2806:	5b 0a       	sbc	r5, r27
    2808:	6b 0a       	sbc	r6, r27
    280a:	7b 0a       	sbc	r7, r27
    280c:	49 81       	ldd	r20, Y+1	; 0x01
    280e:	5a 81       	ldd	r21, Y+2	; 0x02
    2810:	6b 81       	ldd	r22, Y+3	; 0x03
    2812:	7c 81       	ldd	r23, Y+4	; 0x04
    2814:	14 16       	cp	r1, r20
    2816:	15 06       	cpc	r1, r21
    2818:	16 06       	cpc	r1, r22
    281a:	17 06       	cpc	r1, r23
    281c:	1c f5       	brge	.+70     	; 0x2864 <readPacket+0x100>
    281e:	d6 01       	movw	r26, r12
    2820:	9f 96       	adiw	r26, 0x2f	; 47
    2822:	ed 91       	ld	r30, X+
    2824:	fc 91       	ld	r31, X
    2826:	d0 97       	sbiw	r26, 0x30	; 48
    2828:	84 80       	ldd	r8, Z+4	; 0x04
    282a:	95 80       	ldd	r9, Z+5	; 0x05
    282c:	c5 01       	movw	r24, r10
    282e:	0e 94 29 23 	call	0x4652	; 0x4652 <left_ms>
    2832:	7b 01       	movw	r14, r22
    2834:	8c 01       	movw	r16, r24
    2836:	f6 01       	movw	r30, r12
    2838:	86 85       	ldd	r24, Z+14	; 0x0e
    283a:	97 85       	ldd	r25, Z+15	; 0x0f
    283c:	29 81       	ldd	r18, Y+1	; 0x01
    283e:	3a 81       	ldd	r19, Y+2	; 0x02
    2840:	4b 81       	ldd	r20, Y+3	; 0x03
    2842:	5c 81       	ldd	r21, Y+4	; 0x04
    2844:	bc 01       	movw	r22, r24
    2846:	64 0d       	add	r22, r4
    2848:	75 1d       	adc	r23, r5
    284a:	87 a5       	ldd	r24, Z+47	; 0x2f
    284c:	90 a9       	ldd	r25, Z+48	; 0x30
    284e:	f4 01       	movw	r30, r8
    2850:	19 95       	eicall
    2852:	09 81       	ldd	r16, Y+1	; 0x01
    2854:	1a 81       	ldd	r17, Y+2	; 0x02
    2856:	2b 81       	ldd	r18, Y+3	; 0x03
    2858:	3c 81       	ldd	r19, Y+4	; 0x04
    285a:	60 17       	cp	r22, r16
    285c:	71 07       	cpc	r23, r17
    285e:	82 07       	cpc	r24, r18
    2860:	93 07       	cpc	r25, r19
    2862:	81 f4       	brne	.+32     	; 0x2884 <readPacket+0x120>
    2864:	d6 01       	movw	r26, r12
    2866:	1e 96       	adiw	r26, 0x0e	; 14
    2868:	ed 91       	ld	r30, X+
    286a:	fc 91       	ld	r31, X
    286c:	1f 97       	sbiw	r26, 0x0f	; 15
    286e:	60 81       	ld	r22, Z
    2870:	62 95       	swap	r22
    2872:	6f 70       	andi	r22, 0x0F	; 15
    2874:	70 e0       	ldi	r23, 0x00	; 0
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	07 c0       	rjmp	.+14     	; 0x288a <readPacket+0x126>
    287c:	6f ef       	ldi	r22, 0xFF	; 255
    287e:	7f ef       	ldi	r23, 0xFF	; 255
    2880:	cb 01       	movw	r24, r22
    2882:	03 c0       	rjmp	.+6      	; 0x288a <readPacket+0x126>
    2884:	6f ef       	ldi	r22, 0xFF	; 255
    2886:	7f ef       	ldi	r23, 0xFF	; 255
    2888:	cb 01       	movw	r24, r22
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	1f 91       	pop	r17
    2898:	0f 91       	pop	r16
    289a:	ff 90       	pop	r15
    289c:	ef 90       	pop	r14
    289e:	df 90       	pop	r13
    28a0:	cf 90       	pop	r12
    28a2:	bf 90       	pop	r11
    28a4:	af 90       	pop	r10
    28a6:	9f 90       	pop	r9
    28a8:	8f 90       	pop	r8
    28aa:	7f 90       	pop	r7
    28ac:	6f 90       	pop	r6
    28ae:	5f 90       	pop	r5
    28b0:	4f 90       	pop	r4
    28b2:	08 95       	ret

000028b4 <isTopicMatched>:
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	ec 01       	movw	r28, r24
    28ba:	db 01       	movw	r26, r22
    28bc:	16 96       	adiw	r26, 0x06	; 6
    28be:	ed 91       	ld	r30, X+
    28c0:	fc 91       	ld	r31, X
    28c2:	17 97       	sbiw	r26, 0x07	; 7
    28c4:	12 96       	adiw	r26, 0x02	; 2
    28c6:	4d 91       	ld	r20, X+
    28c8:	5d 91       	ld	r21, X+
    28ca:	6d 91       	ld	r22, X+
    28cc:	7c 91       	ld	r23, X
    28ce:	15 97       	sbiw	r26, 0x05	; 5
    28d0:	4e 0f       	add	r20, r30
    28d2:	5f 1f       	adc	r21, r31
    28d4:	20 c0       	rjmp	.+64     	; 0x2916 <isTopicMatched+0x62>
    28d6:	80 81       	ld	r24, Z
    28d8:	8f 32       	cpi	r24, 0x2F	; 47
    28da:	11 f4       	brne	.+4      	; 0x28e0 <isTopicMatched+0x2c>
    28dc:	9f 32       	cpi	r25, 0x2F	; 47
    28de:	09 f5       	brne	.+66     	; 0x2922 <isTopicMatched+0x6e>
    28e0:	9b 32       	cpi	r25, 0x2B	; 43
    28e2:	21 f0       	breq	.+8      	; 0x28ec <isTopicMatched+0x38>
    28e4:	93 32       	cpi	r25, 0x23	; 35
    28e6:	11 f0       	breq	.+4      	; 0x28ec <isTopicMatched+0x38>
    28e8:	98 13       	cpse	r25, r24
    28ea:	1b c0       	rjmp	.+54     	; 0x2922 <isTopicMatched+0x6e>
    28ec:	9b 32       	cpi	r25, 0x2B	; 43
    28ee:	69 f4       	brne	.+26     	; 0x290a <isTopicMatched+0x56>
    28f0:	df 01       	movw	r26, r30
    28f2:	11 96       	adiw	r26, 0x01	; 1
    28f4:	03 c0       	rjmp	.+6      	; 0x28fc <isTopicMatched+0x48>
    28f6:	31 96       	adiw	r30, 0x01	; 1
    28f8:	df 01       	movw	r26, r30
    28fa:	11 96       	adiw	r26, 0x01	; 1
    28fc:	a4 17       	cp	r26, r20
    28fe:	b5 07       	cpc	r27, r21
    2900:	40 f4       	brcc	.+16     	; 0x2912 <isTopicMatched+0x5e>
    2902:	9c 91       	ld	r25, X
    2904:	9f 32       	cpi	r25, 0x2F	; 47
    2906:	b9 f7       	brne	.-18     	; 0x28f6 <isTopicMatched+0x42>
    2908:	04 c0       	rjmp	.+8      	; 0x2912 <isTopicMatched+0x5e>
    290a:	93 32       	cpi	r25, 0x23	; 35
    290c:	11 f4       	brne	.+4      	; 0x2912 <isTopicMatched+0x5e>
    290e:	fa 01       	movw	r30, r20
    2910:	31 97       	sbiw	r30, 0x01	; 1
    2912:	21 96       	adiw	r28, 0x01	; 1
    2914:	31 96       	adiw	r30, 0x01	; 1
    2916:	98 81       	ld	r25, Y
    2918:	99 23       	and	r25, r25
    291a:	19 f0       	breq	.+6      	; 0x2922 <isTopicMatched+0x6e>
    291c:	e4 17       	cp	r30, r20
    291e:	f5 07       	cpc	r31, r21
    2920:	d0 f2       	brcs	.-76     	; 0x28d6 <isTopicMatched+0x22>
    2922:	e4 17       	cp	r30, r20
    2924:	f5 07       	cpc	r31, r21
    2926:	21 f4       	brne	.+8      	; 0x2930 <isTopicMatched+0x7c>
    2928:	99 23       	and	r25, r25
    292a:	21 f0       	breq	.+8      	; 0x2934 <isTopicMatched+0x80>
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	03 c0       	rjmp	.+6      	; 0x2936 <isTopicMatched+0x82>
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	01 c0       	rjmp	.+2      	; 0x2936 <isTopicMatched+0x82>
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	08 95       	ret

0000293c <deliverMessage>:
    293c:	4f 92       	push	r4
    293e:	5f 92       	push	r5
    2940:	6f 92       	push	r6
    2942:	7f 92       	push	r7
    2944:	8f 92       	push	r8
    2946:	9f 92       	push	r9
    2948:	af 92       	push	r10
    294a:	bf 92       	push	r11
    294c:	cf 92       	push	r12
    294e:	df 92       	push	r13
    2950:	ef 92       	push	r14
    2952:	ff 92       	push	r15
    2954:	0f 93       	push	r16
    2956:	1f 93       	push	r17
    2958:	cf 93       	push	r28
    295a:	df 93       	push	r29
    295c:	00 d0       	rcall	.+0      	; 0x295e <deliverMessage+0x22>
    295e:	1f 92       	push	r1
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	8c 01       	movw	r16, r24
    2966:	7b 01       	movw	r14, r22
    2968:	6a 01       	movw	r12, r20
    296a:	41 2c       	mov	r4, r1
    296c:	51 2c       	mov	r5, r1
    296e:	32 01       	movw	r6, r4
    2970:	88 24       	eor	r8, r8
    2972:	8a 94       	dec	r8
    2974:	98 2c       	mov	r9, r8
    2976:	54 01       	movw	r10, r8
    2978:	45 c0       	rjmp	.+138    	; 0x2a04 <deliverMessage+0xc8>
    297a:	f2 01       	movw	r30, r4
    297c:	ee 0f       	add	r30, r30
    297e:	ff 1f       	adc	r31, r31
    2980:	ee 0f       	add	r30, r30
    2982:	ff 1f       	adc	r31, r31
    2984:	e0 0f       	add	r30, r16
    2986:	f1 1f       	adc	r31, r17
    2988:	61 8d       	ldd	r22, Z+25	; 0x19
    298a:	72 8d       	ldd	r23, Z+26	; 0x1a
    298c:	61 15       	cp	r22, r1
    298e:	71 05       	cpc	r23, r1
    2990:	a1 f1       	breq	.+104    	; 0x29fa <deliverMessage+0xbe>
    2992:	c7 01       	movw	r24, r14
    2994:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <MQTTPacket_equals>
    2998:	67 2b       	or	r22, r23
    299a:	68 2b       	or	r22, r24
    299c:	69 2b       	or	r22, r25
    299e:	69 f4       	brne	.+26     	; 0x29ba <deliverMessage+0x7e>
    29a0:	f2 01       	movw	r30, r4
    29a2:	ee 0f       	add	r30, r30
    29a4:	ff 1f       	adc	r31, r31
    29a6:	ee 0f       	add	r30, r30
    29a8:	ff 1f       	adc	r31, r31
    29aa:	e0 0f       	add	r30, r16
    29ac:	f1 1f       	adc	r31, r17
    29ae:	b7 01       	movw	r22, r14
    29b0:	81 8d       	ldd	r24, Z+25	; 0x19
    29b2:	92 8d       	ldd	r25, Z+26	; 0x1a
    29b4:	7f df       	rcall	.-258    	; 0x28b4 <isTopicMatched>
    29b6:	88 23       	and	r24, r24
    29b8:	01 f1       	breq	.+64     	; 0x29fa <deliverMessage+0xbe>
    29ba:	f2 01       	movw	r30, r4
    29bc:	ee 0f       	add	r30, r30
    29be:	ff 1f       	adc	r31, r31
    29c0:	ee 0f       	add	r30, r30
    29c2:	ff 1f       	adc	r31, r31
    29c4:	e0 0f       	add	r30, r16
    29c6:	f1 1f       	adc	r31, r17
    29c8:	83 8d       	ldd	r24, Z+27	; 0x1b
    29ca:	94 8d       	ldd	r25, Z+28	; 0x1c
    29cc:	89 2b       	or	r24, r25
    29ce:	a9 f0       	breq	.+42     	; 0x29fa <deliverMessage+0xbe>
    29d0:	a6 01       	movw	r20, r12
    29d2:	b7 01       	movw	r22, r14
    29d4:	ce 01       	movw	r24, r28
    29d6:	01 96       	adiw	r24, 0x01	; 1
    29d8:	41 dd       	rcall	.-1406   	; 0x245c <NewMessageData>
    29da:	f2 01       	movw	r30, r4
    29dc:	ee 0f       	add	r30, r30
    29de:	ff 1f       	adc	r31, r31
    29e0:	ee 0f       	add	r30, r30
    29e2:	ff 1f       	adc	r31, r31
    29e4:	e0 0f       	add	r30, r16
    29e6:	f1 1f       	adc	r31, r17
    29e8:	03 8c       	ldd	r0, Z+27	; 0x1b
    29ea:	f4 8d       	ldd	r31, Z+28	; 0x1c
    29ec:	e0 2d       	mov	r30, r0
    29ee:	ce 01       	movw	r24, r28
    29f0:	01 96       	adiw	r24, 0x01	; 1
    29f2:	19 95       	eicall
    29f4:	81 2c       	mov	r8, r1
    29f6:	91 2c       	mov	r9, r1
    29f8:	54 01       	movw	r10, r8
    29fa:	8f ef       	ldi	r24, 0xFF	; 255
    29fc:	48 1a       	sub	r4, r24
    29fe:	58 0a       	sbc	r5, r24
    2a00:	68 0a       	sbc	r6, r24
    2a02:	78 0a       	sbc	r7, r24
    2a04:	a5 e0       	ldi	r26, 0x05	; 5
    2a06:	4a 16       	cp	r4, r26
    2a08:	51 04       	cpc	r5, r1
    2a0a:	61 04       	cpc	r6, r1
    2a0c:	71 04       	cpc	r7, r1
    2a0e:	0c f4       	brge	.+2      	; 0x2a12 <deliverMessage+0xd6>
    2a10:	b4 cf       	rjmp	.-152    	; 0x297a <deliverMessage+0x3e>
    2a12:	bf ef       	ldi	r27, 0xFF	; 255
    2a14:	8b 16       	cp	r8, r27
    2a16:	9b 06       	cpc	r9, r27
    2a18:	ab 06       	cpc	r10, r27
    2a1a:	bb 06       	cpc	r11, r27
    2a1c:	a9 f4       	brne	.+42     	; 0x2a48 <deliverMessage+0x10c>
    2a1e:	f8 01       	movw	r30, r16
    2a20:	85 a5       	ldd	r24, Z+45	; 0x2d
    2a22:	96 a5       	ldd	r25, Z+46	; 0x2e
    2a24:	89 2b       	or	r24, r25
    2a26:	81 f0       	breq	.+32     	; 0x2a48 <deliverMessage+0x10c>
    2a28:	a6 01       	movw	r20, r12
    2a2a:	b7 01       	movw	r22, r14
    2a2c:	ce 01       	movw	r24, r28
    2a2e:	01 96       	adiw	r24, 0x01	; 1
    2a30:	15 dd       	rcall	.-1494   	; 0x245c <NewMessageData>
    2a32:	d8 01       	movw	r26, r16
    2a34:	9d 96       	adiw	r26, 0x2d	; 45
    2a36:	ed 91       	ld	r30, X+
    2a38:	fc 91       	ld	r31, X
    2a3a:	9e 97       	sbiw	r26, 0x2e	; 46
    2a3c:	ce 01       	movw	r24, r28
    2a3e:	01 96       	adiw	r24, 0x01	; 1
    2a40:	19 95       	eicall
    2a42:	81 2c       	mov	r8, r1
    2a44:	91 2c       	mov	r9, r1
    2a46:	54 01       	movw	r10, r8
    2a48:	c5 01       	movw	r24, r10
    2a4a:	b4 01       	movw	r22, r8
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	df 91       	pop	r29
    2a56:	cf 91       	pop	r28
    2a58:	1f 91       	pop	r17
    2a5a:	0f 91       	pop	r16
    2a5c:	ff 90       	pop	r15
    2a5e:	ef 90       	pop	r14
    2a60:	df 90       	pop	r13
    2a62:	cf 90       	pop	r12
    2a64:	bf 90       	pop	r11
    2a66:	af 90       	pop	r10
    2a68:	9f 90       	pop	r9
    2a6a:	8f 90       	pop	r8
    2a6c:	7f 90       	pop	r7
    2a6e:	6f 90       	pop	r6
    2a70:	5f 90       	pop	r5
    2a72:	4f 90       	pop	r4
    2a74:	08 95       	ret

00002a76 <keepalive>:
    2a76:	0f 93       	push	r16
    2a78:	1f 93       	push	r17
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
    2a82:	28 97       	sbiw	r28, 0x08	; 8
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	fc 01       	movw	r30, r24
    2a90:	40 89       	ldd	r20, Z+16	; 0x10
    2a92:	51 89       	ldd	r21, Z+17	; 0x11
    2a94:	62 89       	ldd	r22, Z+18	; 0x12
    2a96:	73 89       	ldd	r23, Z+19	; 0x13
    2a98:	45 2b       	or	r20, r21
    2a9a:	46 2b       	or	r20, r22
    2a9c:	47 2b       	or	r20, r23
    2a9e:	b9 f1       	breq	.+110    	; 0x2b0e <keepalive+0x98>
    2aa0:	8c 01       	movw	r16, r24
    2aa2:	c1 96       	adiw	r24, 0x31	; 49
    2aa4:	0e 94 c8 22 	call	0x4590	; 0x4590 <expired>
    2aa8:	88 23       	and	r24, r24
    2aaa:	a9 f1       	breq	.+106    	; 0x2b16 <keepalive+0xa0>
    2aac:	f8 01       	movw	r30, r16
    2aae:	84 89       	ldd	r24, Z+20	; 0x14
    2ab0:	81 11       	cpse	r24, r1
    2ab2:	35 c0       	rjmp	.+106    	; 0x2b1e <keepalive+0xa8>
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	01 96       	adiw	r24, 0x01	; 1
    2ab8:	0e 94 44 23 	call	0x4688	; 0x4688 <InitTimer>
    2abc:	48 ee       	ldi	r20, 0xE8	; 232
    2abe:	53 e0       	ldi	r21, 0x03	; 3
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	70 e0       	ldi	r23, 0x00	; 0
    2ac4:	ce 01       	movw	r24, r28
    2ac6:	01 96       	adiw	r24, 0x01	; 1
    2ac8:	0e 94 e5 22 	call	0x45ca	; 0x45ca <countdown_ms>
    2acc:	f8 01       	movw	r30, r16
    2ace:	40 85       	ldd	r20, Z+8	; 0x08
    2ad0:	51 85       	ldd	r21, Z+9	; 0x09
    2ad2:	60 e0       	ldi	r22, 0x00	; 0
    2ad4:	70 e0       	ldi	r23, 0x00	; 0
    2ad6:	84 85       	ldd	r24, Z+12	; 0x0c
    2ad8:	95 85       	ldd	r25, Z+13	; 0x0d
    2ada:	8c d6       	rcall	.+3352   	; 0x37f4 <MQTTSerialize_pingreq>
    2adc:	16 16       	cp	r1, r22
    2ade:	17 06       	cpc	r1, r23
    2ae0:	18 06       	cpc	r1, r24
    2ae2:	19 06       	cpc	r1, r25
    2ae4:	84 f4       	brge	.+32     	; 0x2b06 <keepalive+0x90>
    2ae6:	9e 01       	movw	r18, r28
    2ae8:	2f 5f       	subi	r18, 0xFF	; 255
    2aea:	3f 4f       	sbci	r19, 0xFF	; 255
    2aec:	ab 01       	movw	r20, r22
    2aee:	bc 01       	movw	r22, r24
    2af0:	c8 01       	movw	r24, r16
    2af2:	d5 dc       	rcall	.-1622   	; 0x249e <sendPacket>
    2af4:	61 15       	cp	r22, r1
    2af6:	71 05       	cpc	r23, r1
    2af8:	81 05       	cpc	r24, r1
    2afa:	91 05       	cpc	r25, r1
    2afc:	99 f4       	brne	.+38     	; 0x2b24 <keepalive+0xae>
    2afe:	21 e0       	ldi	r18, 0x01	; 1
    2b00:	f8 01       	movw	r30, r16
    2b02:	24 8b       	std	Z+20, r18	; 0x14
    2b04:	0f c0       	rjmp	.+30     	; 0x2b24 <keepalive+0xae>
    2b06:	6f ef       	ldi	r22, 0xFF	; 255
    2b08:	7f ef       	ldi	r23, 0xFF	; 255
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	0b c0       	rjmp	.+22     	; 0x2b24 <keepalive+0xae>
    2b0e:	60 e0       	ldi	r22, 0x00	; 0
    2b10:	70 e0       	ldi	r23, 0x00	; 0
    2b12:	cb 01       	movw	r24, r22
    2b14:	07 c0       	rjmp	.+14     	; 0x2b24 <keepalive+0xae>
    2b16:	6f ef       	ldi	r22, 0xFF	; 255
    2b18:	7f ef       	ldi	r23, 0xFF	; 255
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	03 c0       	rjmp	.+6      	; 0x2b24 <keepalive+0xae>
    2b1e:	6f ef       	ldi	r22, 0xFF	; 255
    2b20:	7f ef       	ldi	r23, 0xFF	; 255
    2b22:	cb 01       	movw	r24, r22
    2b24:	28 96       	adiw	r28, 0x08	; 8
    2b26:	0f b6       	in	r0, 0x3f	; 63
    2b28:	f8 94       	cli
    2b2a:	de bf       	out	0x3e, r29	; 62
    2b2c:	0f be       	out	0x3f, r0	; 63
    2b2e:	cd bf       	out	0x3d, r28	; 61
    2b30:	df 91       	pop	r29
    2b32:	cf 91       	pop	r28
    2b34:	1f 91       	pop	r17
    2b36:	0f 91       	pop	r16
    2b38:	08 95       	ret

00002b3a <cycle>:
    2b3a:	2f 92       	push	r2
    2b3c:	3f 92       	push	r3
    2b3e:	4f 92       	push	r4
    2b40:	5f 92       	push	r5
    2b42:	6f 92       	push	r6
    2b44:	7f 92       	push	r7
    2b46:	8f 92       	push	r8
    2b48:	9f 92       	push	r9
    2b4a:	af 92       	push	r10
    2b4c:	bf 92       	push	r11
    2b4e:	cf 92       	push	r12
    2b50:	df 92       	push	r13
    2b52:	ef 92       	push	r14
    2b54:	ff 92       	push	r15
    2b56:	0f 93       	push	r16
    2b58:	1f 93       	push	r17
    2b5a:	cf 93       	push	r28
    2b5c:	df 93       	push	r29
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	62 97       	sbiw	r28, 0x12	; 18
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	4c 01       	movw	r8, r24
    2b70:	1b 01       	movw	r2, r22
    2b72:	f8 dd       	rcall	.-1040   	; 0x2764 <readPacket>
    2b74:	2b 01       	movw	r4, r22
    2b76:	3c 01       	movw	r6, r24
    2b78:	65 30       	cpi	r22, 0x05	; 5
    2b7a:	71 05       	cpc	r23, r1
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <cycle+0x46>
    2b7e:	7f c0       	rjmp	.+254    	; 0x2c7e <cycle+0x144>
    2b80:	6d 30       	cpi	r22, 0x0D	; 13
    2b82:	71 05       	cpc	r23, r1
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <cycle+0x4e>
    2b86:	c3 c0       	rjmp	.+390    	; 0x2d0e <cycle+0x1d4>
    2b88:	63 30       	cpi	r22, 0x03	; 3
    2b8a:	71 05       	cpc	r23, r1
    2b8c:	09 f0       	breq	.+2      	; 0x2b90 <cycle+0x56>
    2b8e:	c5 c0       	rjmp	.+394    	; 0x2d1a <cycle+0x1e0>
    2b90:	f4 01       	movw	r30, r8
    2b92:	82 85       	ldd	r24, Z+10	; 0x0a
    2b94:	93 85       	ldd	r25, Z+11	; 0x0b
    2b96:	a6 84       	ldd	r10, Z+14	; 0x0e
    2b98:	b7 84       	ldd	r11, Z+15	; 0x0f
    2b9a:	1f 92       	push	r1
    2b9c:	1f 92       	push	r1
    2b9e:	9f 93       	push	r25
    2ba0:	8f 93       	push	r24
    2ba2:	ce 01       	movw	r24, r28
    2ba4:	08 96       	adiw	r24, 0x08	; 8
    2ba6:	6c 01       	movw	r12, r24
    2ba8:	fe 01       	movw	r30, r28
    2baa:	36 96       	adiw	r30, 0x06	; 6
    2bac:	7f 01       	movw	r14, r30
    2bae:	8e 01       	movw	r16, r28
    2bb0:	06 5f       	subi	r16, 0xF6	; 246
    2bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb4:	9e 01       	movw	r18, r28
    2bb6:	2c 5f       	subi	r18, 0xFC	; 252
    2bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bba:	ae 01       	movw	r20, r28
    2bbc:	4e 5f       	subi	r20, 0xFE	; 254
    2bbe:	5f 4f       	sbci	r21, 0xFF	; 255
    2bc0:	be 01       	movw	r22, r28
    2bc2:	6f 5f       	subi	r22, 0xFF	; 255
    2bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc6:	05 97       	sbiw	r24, 0x05	; 5
    2bc8:	18 d6       	rcall	.+3120   	; 0x37fa <MQTTDeserialize_publish>
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	61 30       	cpi	r22, 0x01	; 1
    2bd4:	71 05       	cpc	r23, r1
    2bd6:	81 05       	cpc	r24, r1
    2bd8:	91 05       	cpc	r25, r1
    2bda:	09 f0       	breq	.+2      	; 0x2bde <cycle+0xa4>
    2bdc:	48 c0       	rjmp	.+144    	; 0x2c6e <cycle+0x134>
    2bde:	ae 01       	movw	r20, r28
    2be0:	4f 5f       	subi	r20, 0xFF	; 255
    2be2:	5f 4f       	sbci	r21, 0xFF	; 255
    2be4:	b8 01       	movw	r22, r16
    2be6:	c4 01       	movw	r24, r8
    2be8:	a9 de       	rcall	.-686    	; 0x293c <deliverMessage>
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	88 23       	and	r24, r24
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <cycle+0xb8>
    2bf0:	42 c0       	rjmp	.+132    	; 0x2c76 <cycle+0x13c>
    2bf2:	81 30       	cpi	r24, 0x01	; 1
    2bf4:	81 f4       	brne	.+32     	; 0x2c16 <cycle+0xdc>
    2bf6:	ec 80       	ldd	r14, Y+4	; 0x04
    2bf8:	fd 80       	ldd	r15, Y+5	; 0x05
    2bfa:	f4 01       	movw	r30, r8
    2bfc:	40 85       	ldd	r20, Z+8	; 0x08
    2bfe:	51 85       	ldd	r21, Z+9	; 0x09
    2c00:	60 e0       	ldi	r22, 0x00	; 0
    2c02:	70 e0       	ldi	r23, 0x00	; 0
    2c04:	00 e0       	ldi	r16, 0x00	; 0
    2c06:	24 e0       	ldi	r18, 0x04	; 4
    2c08:	84 85       	ldd	r24, Z+12	; 0x0c
    2c0a:	95 85       	ldd	r25, Z+13	; 0x0d
    2c0c:	0e 94 68 20 	call	0x40d0	; 0x40d0 <MQTTSerialize_ack>
    2c10:	ab 01       	movw	r20, r22
    2c12:	bc 01       	movw	r22, r24
    2c14:	15 c0       	rjmp	.+42     	; 0x2c40 <cycle+0x106>
    2c16:	82 30       	cpi	r24, 0x02	; 2
    2c18:	81 f4       	brne	.+32     	; 0x2c3a <cycle+0x100>
    2c1a:	ec 80       	ldd	r14, Y+4	; 0x04
    2c1c:	fd 80       	ldd	r15, Y+5	; 0x05
    2c1e:	f4 01       	movw	r30, r8
    2c20:	40 85       	ldd	r20, Z+8	; 0x08
    2c22:	51 85       	ldd	r21, Z+9	; 0x09
    2c24:	60 e0       	ldi	r22, 0x00	; 0
    2c26:	70 e0       	ldi	r23, 0x00	; 0
    2c28:	00 e0       	ldi	r16, 0x00	; 0
    2c2a:	25 e0       	ldi	r18, 0x05	; 5
    2c2c:	84 85       	ldd	r24, Z+12	; 0x0c
    2c2e:	95 85       	ldd	r25, Z+13	; 0x0d
    2c30:	0e 94 68 20 	call	0x40d0	; 0x40d0 <MQTTSerialize_ack>
    2c34:	ab 01       	movw	r20, r22
    2c36:	bc 01       	movw	r22, r24
    2c38:	03 c0       	rjmp	.+6      	; 0x2c40 <cycle+0x106>
    2c3a:	40 e0       	ldi	r20, 0x00	; 0
    2c3c:	50 e0       	ldi	r21, 0x00	; 0
    2c3e:	ba 01       	movw	r22, r20
    2c40:	14 16       	cp	r1, r20
    2c42:	15 06       	cpc	r1, r21
    2c44:	16 06       	cpc	r1, r22
    2c46:	17 06       	cpc	r1, r23
    2c48:	34 f4       	brge	.+12     	; 0x2c56 <cycle+0x11c>
    2c4a:	91 01       	movw	r18, r2
    2c4c:	c4 01       	movw	r24, r8
    2c4e:	27 dc       	rcall	.-1970   	; 0x249e <sendPacket>
    2c50:	6b 01       	movw	r12, r22
    2c52:	7c 01       	movw	r14, r24
    2c54:	04 c0       	rjmp	.+8      	; 0x2c5e <cycle+0x124>
    2c56:	cc 24       	eor	r12, r12
    2c58:	ca 94       	dec	r12
    2c5a:	dc 2c       	mov	r13, r12
    2c5c:	76 01       	movw	r14, r12
    2c5e:	ff ef       	ldi	r31, 0xFF	; 255
    2c60:	cf 16       	cp	r12, r31
    2c62:	df 06       	cpc	r13, r31
    2c64:	ef 06       	cpc	r14, r31
    2c66:	ff 06       	cpc	r15, r31
    2c68:	09 f0       	breq	.+2      	; 0x2c6c <cycle+0x132>
    2c6a:	5a c0       	rjmp	.+180    	; 0x2d20 <cycle+0x1e6>
    2c6c:	5b c0       	rjmp	.+182    	; 0x2d24 <cycle+0x1ea>
    2c6e:	c1 2c       	mov	r12, r1
    2c70:	d1 2c       	mov	r13, r1
    2c72:	76 01       	movw	r14, r12
    2c74:	57 c0       	rjmp	.+174    	; 0x2d24 <cycle+0x1ea>
    2c76:	c1 2c       	mov	r12, r1
    2c78:	d1 2c       	mov	r13, r1
    2c7a:	76 01       	movw	r14, r12
    2c7c:	51 c0       	rjmp	.+162    	; 0x2d20 <cycle+0x1e6>
    2c7e:	f4 01       	movw	r30, r8
    2c80:	e2 84       	ldd	r14, Z+10	; 0x0a
    2c82:	f3 84       	ldd	r15, Z+11	; 0x0b
    2c84:	00 e0       	ldi	r16, 0x00	; 0
    2c86:	10 e0       	ldi	r17, 0x00	; 0
    2c88:	26 85       	ldd	r18, Z+14	; 0x0e
    2c8a:	37 85       	ldd	r19, Z+15	; 0x0f
    2c8c:	ae 01       	movw	r20, r28
    2c8e:	4f 5f       	subi	r20, 0xFF	; 255
    2c90:	5f 4f       	sbci	r21, 0xFF	; 255
    2c92:	be 01       	movw	r22, r28
    2c94:	6e 5e       	subi	r22, 0xEE	; 238
    2c96:	7f 4f       	sbci	r23, 0xFF	; 255
    2c98:	ce 01       	movw	r24, r28
    2c9a:	0a 96       	adiw	r24, 0x0a	; 10
    2c9c:	4b d6       	rcall	.+3222   	; 0x3934 <MQTTDeserialize_ack>
    2c9e:	61 30       	cpi	r22, 0x01	; 1
    2ca0:	71 05       	cpc	r23, r1
    2ca2:	81 05       	cpc	r24, r1
    2ca4:	91 05       	cpc	r25, r1
    2ca6:	f1 f4       	brne	.+60     	; 0x2ce4 <cycle+0x1aa>
    2ca8:	e9 80       	ldd	r14, Y+1	; 0x01
    2caa:	fa 80       	ldd	r15, Y+2	; 0x02
    2cac:	f4 01       	movw	r30, r8
    2cae:	40 85       	ldd	r20, Z+8	; 0x08
    2cb0:	51 85       	ldd	r21, Z+9	; 0x09
    2cb2:	60 e0       	ldi	r22, 0x00	; 0
    2cb4:	70 e0       	ldi	r23, 0x00	; 0
    2cb6:	00 e0       	ldi	r16, 0x00	; 0
    2cb8:	26 e0       	ldi	r18, 0x06	; 6
    2cba:	84 85       	ldd	r24, Z+12	; 0x0c
    2cbc:	95 85       	ldd	r25, Z+13	; 0x0d
    2cbe:	0e 94 68 20 	call	0x40d0	; 0x40d0 <MQTTSerialize_ack>
    2cc2:	16 16       	cp	r1, r22
    2cc4:	17 06       	cpc	r1, r23
    2cc6:	18 06       	cpc	r1, r24
    2cc8:	19 06       	cpc	r1, r25
    2cca:	8c f4       	brge	.+34     	; 0x2cee <cycle+0x1b4>
    2ccc:	91 01       	movw	r18, r2
    2cce:	ab 01       	movw	r20, r22
    2cd0:	bc 01       	movw	r22, r24
    2cd2:	c4 01       	movw	r24, r8
    2cd4:	e4 db       	rcall	.-2104   	; 0x249e <sendPacket>
    2cd6:	6b 01       	movw	r12, r22
    2cd8:	7c 01       	movw	r14, r24
    2cda:	67 2b       	or	r22, r23
    2cdc:	68 2b       	or	r22, r24
    2cde:	69 2b       	or	r22, r25
    2ce0:	59 f4       	brne	.+22     	; 0x2cf8 <cycle+0x1be>
    2ce2:	0e c0       	rjmp	.+28     	; 0x2d00 <cycle+0x1c6>
    2ce4:	cc 24       	eor	r12, r12
    2ce6:	ca 94       	dec	r12
    2ce8:	dc 2c       	mov	r13, r12
    2cea:	76 01       	movw	r14, r12
    2cec:	09 c0       	rjmp	.+18     	; 0x2d00 <cycle+0x1c6>
    2cee:	cc 24       	eor	r12, r12
    2cf0:	ca 94       	dec	r12
    2cf2:	dc 2c       	mov	r13, r12
    2cf4:	76 01       	movw	r14, r12
    2cf6:	04 c0       	rjmp	.+8      	; 0x2d00 <cycle+0x1c6>
    2cf8:	cc 24       	eor	r12, r12
    2cfa:	ca 94       	dec	r12
    2cfc:	dc 2c       	mov	r13, r12
    2cfe:	76 01       	movw	r14, r12
    2d00:	ff ef       	ldi	r31, 0xFF	; 255
    2d02:	cf 16       	cp	r12, r31
    2d04:	df 06       	cpc	r13, r31
    2d06:	ef 06       	cpc	r14, r31
    2d08:	ff 06       	cpc	r15, r31
    2d0a:	51 f4       	brne	.+20     	; 0x2d20 <cycle+0x1e6>
    2d0c:	0b c0       	rjmp	.+22     	; 0x2d24 <cycle+0x1ea>
    2d0e:	f4 01       	movw	r30, r8
    2d10:	14 8a       	std	Z+20, r1	; 0x14
    2d12:	c1 2c       	mov	r12, r1
    2d14:	d1 2c       	mov	r13, r1
    2d16:	76 01       	movw	r14, r12
    2d18:	03 c0       	rjmp	.+6      	; 0x2d20 <cycle+0x1e6>
    2d1a:	c1 2c       	mov	r12, r1
    2d1c:	d1 2c       	mov	r13, r1
    2d1e:	76 01       	movw	r14, r12
    2d20:	c4 01       	movw	r24, r8
    2d22:	a9 de       	rcall	.-686    	; 0x2a76 <keepalive>
    2d24:	c1 14       	cp	r12, r1
    2d26:	d1 04       	cpc	r13, r1
    2d28:	e1 04       	cpc	r14, r1
    2d2a:	f1 04       	cpc	r15, r1
    2d2c:	21 f4       	brne	.+8      	; 0x2d36 <cycle+0x1fc>
    2d2e:	73 01       	movw	r14, r6
    2d30:	62 01       	movw	r12, r4
    2d32:	ee 24       	eor	r14, r14
    2d34:	ff 24       	eor	r15, r15
    2d36:	c7 01       	movw	r24, r14
    2d38:	b6 01       	movw	r22, r12
    2d3a:	62 96       	adiw	r28, 0x12	; 18
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	f8 94       	cli
    2d40:	de bf       	out	0x3e, r29	; 62
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	cd bf       	out	0x3d, r28	; 61
    2d46:	df 91       	pop	r29
    2d48:	cf 91       	pop	r28
    2d4a:	1f 91       	pop	r17
    2d4c:	0f 91       	pop	r16
    2d4e:	ff 90       	pop	r15
    2d50:	ef 90       	pop	r14
    2d52:	df 90       	pop	r13
    2d54:	cf 90       	pop	r12
    2d56:	bf 90       	pop	r11
    2d58:	af 90       	pop	r10
    2d5a:	9f 90       	pop	r9
    2d5c:	8f 90       	pop	r8
    2d5e:	7f 90       	pop	r7
    2d60:	6f 90       	pop	r6
    2d62:	5f 90       	pop	r5
    2d64:	4f 90       	pop	r4
    2d66:	3f 90       	pop	r3
    2d68:	2f 90       	pop	r2
    2d6a:	08 95       	ret

00002d6c <MQTTYield>:
    2d6c:	cf 92       	push	r12
    2d6e:	df 92       	push	r13
    2d70:	ef 92       	push	r14
    2d72:	ff 92       	push	r15
    2d74:	0f 93       	push	r16
    2d76:	1f 93       	push	r17
    2d78:	cf 93       	push	r28
    2d7a:	df 93       	push	r29
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
    2d80:	28 97       	sbiw	r28, 0x08	; 8
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	8c 01       	movw	r16, r24
    2d8e:	6a 01       	movw	r12, r20
    2d90:	7b 01       	movw	r14, r22
    2d92:	ce 01       	movw	r24, r28
    2d94:	01 96       	adiw	r24, 0x01	; 1
    2d96:	0e 94 44 23 	call	0x4688	; 0x4688 <InitTimer>
    2d9a:	b7 01       	movw	r22, r14
    2d9c:	a6 01       	movw	r20, r12
    2d9e:	ce 01       	movw	r24, r28
    2da0:	01 96       	adiw	r24, 0x01	; 1
    2da2:	0e 94 e5 22 	call	0x45ca	; 0x45ca <countdown_ms>
    2da6:	0a c0       	rjmp	.+20     	; 0x2dbc <MQTTYield+0x50>
    2da8:	be 01       	movw	r22, r28
    2daa:	6f 5f       	subi	r22, 0xFF	; 255
    2dac:	7f 4f       	sbci	r23, 0xFF	; 255
    2dae:	c8 01       	movw	r24, r16
    2db0:	c4 de       	rcall	.-632    	; 0x2b3a <cycle>
    2db2:	6f 3f       	cpi	r22, 0xFF	; 255
    2db4:	7f 4f       	sbci	r23, 0xFF	; 255
    2db6:	8f 4f       	sbci	r24, 0xFF	; 255
    2db8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dba:	51 f0       	breq	.+20     	; 0x2dd0 <MQTTYield+0x64>
    2dbc:	ce 01       	movw	r24, r28
    2dbe:	01 96       	adiw	r24, 0x01	; 1
    2dc0:	0e 94 c8 22 	call	0x4590	; 0x4590 <expired>
    2dc4:	88 23       	and	r24, r24
    2dc6:	81 f3       	breq	.-32     	; 0x2da8 <MQTTYield+0x3c>
    2dc8:	60 e0       	ldi	r22, 0x00	; 0
    2dca:	70 e0       	ldi	r23, 0x00	; 0
    2dcc:	cb 01       	movw	r24, r22
    2dce:	03 c0       	rjmp	.+6      	; 0x2dd6 <MQTTYield+0x6a>
    2dd0:	6f ef       	ldi	r22, 0xFF	; 255
    2dd2:	7f ef       	ldi	r23, 0xFF	; 255
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	28 96       	adiw	r28, 0x08	; 8
    2dd8:	0f b6       	in	r0, 0x3f	; 63
    2dda:	f8 94       	cli
    2ddc:	de bf       	out	0x3e, r29	; 62
    2dde:	0f be       	out	0x3f, r0	; 63
    2de0:	cd bf       	out	0x3d, r28	; 61
    2de2:	df 91       	pop	r29
    2de4:	cf 91       	pop	r28
    2de6:	1f 91       	pop	r17
    2de8:	0f 91       	pop	r16
    2dea:	ff 90       	pop	r15
    2dec:	ef 90       	pop	r14
    2dee:	df 90       	pop	r13
    2df0:	cf 90       	pop	r12
    2df2:	08 95       	ret

00002df4 <waitfor>:
    2df4:	8f 92       	push	r8
    2df6:	9f 92       	push	r9
    2df8:	af 92       	push	r10
    2dfa:	bf 92       	push	r11
    2dfc:	cf 92       	push	r12
    2dfe:	df 92       	push	r13
    2e00:	ef 92       	push	r14
    2e02:	ff 92       	push	r15
    2e04:	0f 93       	push	r16
    2e06:	1f 93       	push	r17
    2e08:	cf 93       	push	r28
    2e0a:	df 93       	push	r29
    2e0c:	8c 01       	movw	r16, r24
    2e0e:	4a 01       	movw	r8, r20
    2e10:	5b 01       	movw	r10, r22
    2e12:	e9 01       	movw	r28, r18
    2e14:	cc 24       	eor	r12, r12
    2e16:	ca 94       	dec	r12
    2e18:	dc 2c       	mov	r13, r12
    2e1a:	76 01       	movw	r14, r12
    2e1c:	ce 01       	movw	r24, r28
    2e1e:	0e 94 c8 22 	call	0x4590	; 0x4590 <expired>
    2e22:	81 11       	cpse	r24, r1
    2e24:	0a c0       	rjmp	.+20     	; 0x2e3a <waitfor+0x46>
    2e26:	be 01       	movw	r22, r28
    2e28:	c8 01       	movw	r24, r16
    2e2a:	87 de       	rcall	.-754    	; 0x2b3a <cycle>
    2e2c:	6b 01       	movw	r12, r22
    2e2e:	7c 01       	movw	r14, r24
    2e30:	68 15       	cp	r22, r8
    2e32:	79 05       	cpc	r23, r9
    2e34:	8a 05       	cpc	r24, r10
    2e36:	9b 05       	cpc	r25, r11
    2e38:	89 f7       	brne	.-30     	; 0x2e1c <waitfor+0x28>
    2e3a:	c7 01       	movw	r24, r14
    2e3c:	b6 01       	movw	r22, r12
    2e3e:	df 91       	pop	r29
    2e40:	cf 91       	pop	r28
    2e42:	1f 91       	pop	r17
    2e44:	0f 91       	pop	r16
    2e46:	ff 90       	pop	r15
    2e48:	ef 90       	pop	r14
    2e4a:	df 90       	pop	r13
    2e4c:	cf 90       	pop	r12
    2e4e:	bf 90       	pop	r11
    2e50:	af 90       	pop	r10
    2e52:	9f 90       	pop	r9
    2e54:	8f 90       	pop	r8
    2e56:	08 95       	ret

00002e58 <MQTTConnect>:
    2e58:	ef 92       	push	r14
    2e5a:	ff 92       	push	r15
    2e5c:	0f 93       	push	r16
    2e5e:	1f 93       	push	r17
    2e60:	cf 93       	push	r28
    2e62:	df 93       	push	r29
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	c5 54       	subi	r28, 0x45	; 69
    2e6a:	d1 09       	sbc	r29, r1
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	f8 94       	cli
    2e70:	de bf       	out	0x3e, r29	; 62
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	cd bf       	out	0x3d, r28	; 61
    2e76:	7c 01       	movw	r14, r24
    2e78:	8b 01       	movw	r16, r22
    2e7a:	8b e3       	ldi	r24, 0x3B	; 59
    2e7c:	e8 e8       	ldi	r30, 0x88	; 136
    2e7e:	f2 e0       	ldi	r31, 0x02	; 2
    2e80:	de 01       	movw	r26, r28
    2e82:	19 96       	adiw	r26, 0x09	; 9
    2e84:	01 90       	ld	r0, Z+
    2e86:	0d 92       	st	X+, r0
    2e88:	8a 95       	dec	r24
    2e8a:	e1 f7       	brne	.-8      	; 0x2e84 <MQTTConnect+0x2c>
    2e8c:	ce 01       	movw	r24, r28
    2e8e:	01 96       	adiw	r24, 0x01	; 1
    2e90:	0e 94 44 23 	call	0x4688	; 0x4688 <InitTimer>
    2e94:	f7 01       	movw	r30, r14
    2e96:	44 81       	ldd	r20, Z+4	; 0x04
    2e98:	55 81       	ldd	r21, Z+5	; 0x05
    2e9a:	66 81       	ldd	r22, Z+6	; 0x06
    2e9c:	77 81       	ldd	r23, Z+7	; 0x07
    2e9e:	ce 01       	movw	r24, r28
    2ea0:	01 96       	adiw	r24, 0x01	; 1
    2ea2:	0e 94 e5 22 	call	0x45ca	; 0x45ca <countdown_ms>
    2ea6:	f7 01       	movw	r30, r14
    2ea8:	85 89       	ldd	r24, Z+21	; 0x15
    2eaa:	96 89       	ldd	r25, Z+22	; 0x16
    2eac:	a7 89       	ldd	r26, Z+23	; 0x17
    2eae:	b0 8d       	ldd	r27, Z+24	; 0x18
    2eb0:	89 2b       	or	r24, r25
    2eb2:	8a 2b       	or	r24, r26
    2eb4:	8b 2b       	or	r24, r27
    2eb6:	09 f0       	breq	.+2      	; 0x2eba <MQTTConnect+0x62>
    2eb8:	63 c0       	rjmp	.+198    	; 0x2f80 <MQTTConnect+0x128>
    2eba:	01 15       	cp	r16, r1
    2ebc:	11 05       	cpc	r17, r1
    2ebe:	19 f4       	brne	.+6      	; 0x2ec6 <MQTTConnect+0x6e>
    2ec0:	8e 01       	movw	r16, r28
    2ec2:	07 5f       	subi	r16, 0xF7	; 247
    2ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec6:	f8 01       	movw	r30, r16
    2ec8:	47 85       	ldd	r20, Z+15	; 0x0f
    2eca:	50 89       	ldd	r21, Z+16	; 0x10
    2ecc:	60 e0       	ldi	r22, 0x00	; 0
    2ece:	70 e0       	ldi	r23, 0x00	; 0
    2ed0:	f7 01       	movw	r30, r14
    2ed2:	40 8b       	std	Z+16, r20	; 0x10
    2ed4:	51 8b       	std	Z+17, r21	; 0x11
    2ed6:	62 8b       	std	Z+18, r22	; 0x12
    2ed8:	73 8b       	std	Z+19, r23	; 0x13
    2eda:	c7 01       	movw	r24, r14
    2edc:	c1 96       	adiw	r24, 0x31	; 49
    2ede:	0e 94 fe 22 	call	0x45fc	; 0x45fc <countdown>
    2ee2:	f7 01       	movw	r30, r14
    2ee4:	40 85       	ldd	r20, Z+8	; 0x08
    2ee6:	51 85       	ldd	r21, Z+9	; 0x09
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	70 e0       	ldi	r23, 0x00	; 0
    2eec:	98 01       	movw	r18, r16
    2eee:	84 85       	ldd	r24, Z+12	; 0x0c
    2ef0:	95 85       	ldd	r25, Z+13	; 0x0d
    2ef2:	19 d3       	rcall	.+1586   	; 0x3526 <MQTTSerialize_connect>
    2ef4:	ab 01       	movw	r20, r22
    2ef6:	bc 01       	movw	r22, r24
    2ef8:	14 16       	cp	r1, r20
    2efa:	15 06       	cpc	r1, r21
    2efc:	16 06       	cpc	r1, r22
    2efe:	17 06       	cpc	r1, r23
    2f00:	0c f0       	brlt	.+2      	; 0x2f04 <MQTTConnect+0xac>
    2f02:	42 c0       	rjmp	.+132    	; 0x2f88 <MQTTConnect+0x130>
    2f04:	9e 01       	movw	r18, r28
    2f06:	2f 5f       	subi	r18, 0xFF	; 255
    2f08:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0a:	c7 01       	movw	r24, r14
    2f0c:	c8 da       	rcall	.-2672   	; 0x249e <sendPacket>
    2f0e:	61 15       	cp	r22, r1
    2f10:	71 05       	cpc	r23, r1
    2f12:	81 05       	cpc	r24, r1
    2f14:	91 05       	cpc	r25, r1
    2f16:	09 f0       	breq	.+2      	; 0x2f1a <MQTTConnect+0xc2>
    2f18:	3e c0       	rjmp	.+124    	; 0x2f96 <MQTTConnect+0x13e>
    2f1a:	9e 01       	movw	r18, r28
    2f1c:	2f 5f       	subi	r18, 0xFF	; 255
    2f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f20:	42 e0       	ldi	r20, 0x02	; 2
    2f22:	50 e0       	ldi	r21, 0x00	; 0
    2f24:	60 e0       	ldi	r22, 0x00	; 0
    2f26:	70 e0       	ldi	r23, 0x00	; 0
    2f28:	c7 01       	movw	r24, r14
    2f2a:	64 df       	rcall	.-312    	; 0x2df4 <waitfor>
    2f2c:	62 30       	cpi	r22, 0x02	; 2
    2f2e:	71 05       	cpc	r23, r1
    2f30:	81 05       	cpc	r24, r1
    2f32:	91 05       	cpc	r25, r1
    2f34:	69 f5       	brne	.+90     	; 0x2f90 <MQTTConnect+0x138>
    2f36:	8f ef       	ldi	r24, 0xFF	; 255
    2f38:	26 96       	adiw	r28, 0x06	; 6
    2f3a:	8f af       	std	Y+63, r24	; 0x3f
    2f3c:	26 97       	sbiw	r28, 0x06	; 6
    2f3e:	25 96       	adiw	r28, 0x05	; 5
    2f40:	1f ae       	std	Y+63, r1	; 0x3f
    2f42:	25 97       	sbiw	r28, 0x05	; 5
    2f44:	f7 01       	movw	r30, r14
    2f46:	02 85       	ldd	r16, Z+10	; 0x0a
    2f48:	13 85       	ldd	r17, Z+11	; 0x0b
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	46 85       	ldd	r20, Z+14	; 0x0e
    2f50:	57 85       	ldd	r21, Z+15	; 0x0f
    2f52:	be 01       	movw	r22, r28
    2f54:	6b 5b       	subi	r22, 0xBB	; 187
    2f56:	7f 4f       	sbci	r23, 0xFF	; 255
    2f58:	ce 01       	movw	r24, r28
    2f5a:	8c 5b       	subi	r24, 0xBC	; 188
    2f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f5e:	d1 d3       	rcall	.+1954   	; 0x3702 <MQTTDeserialize_connack>
    2f60:	61 30       	cpi	r22, 0x01	; 1
    2f62:	71 05       	cpc	r23, r1
    2f64:	81 05       	cpc	r24, r1
    2f66:	91 05       	cpc	r25, r1
    2f68:	39 f4       	brne	.+14     	; 0x2f78 <MQTTConnect+0x120>
    2f6a:	26 96       	adiw	r28, 0x06	; 6
    2f6c:	6f ad       	ldd	r22, Y+63	; 0x3f
    2f6e:	26 97       	sbiw	r28, 0x06	; 6
    2f70:	70 e0       	ldi	r23, 0x00	; 0
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	0f c0       	rjmp	.+30     	; 0x2f96 <MQTTConnect+0x13e>
    2f78:	6f ef       	ldi	r22, 0xFF	; 255
    2f7a:	7f ef       	ldi	r23, 0xFF	; 255
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	0b c0       	rjmp	.+22     	; 0x2f96 <MQTTConnect+0x13e>
    2f80:	6f ef       	ldi	r22, 0xFF	; 255
    2f82:	7f ef       	ldi	r23, 0xFF	; 255
    2f84:	cb 01       	movw	r24, r22
    2f86:	07 c0       	rjmp	.+14     	; 0x2f96 <MQTTConnect+0x13e>
    2f88:	6f ef       	ldi	r22, 0xFF	; 255
    2f8a:	7f ef       	ldi	r23, 0xFF	; 255
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	03 c0       	rjmp	.+6      	; 0x2f96 <MQTTConnect+0x13e>
    2f90:	6f ef       	ldi	r22, 0xFF	; 255
    2f92:	7f ef       	ldi	r23, 0xFF	; 255
    2f94:	cb 01       	movw	r24, r22
    2f96:	61 15       	cp	r22, r1
    2f98:	71 05       	cpc	r23, r1
    2f9a:	81 05       	cpc	r24, r1
    2f9c:	91 05       	cpc	r25, r1
    2f9e:	49 f4       	brne	.+18     	; 0x2fb2 <MQTTConnect+0x15a>
    2fa0:	01 e0       	ldi	r16, 0x01	; 1
    2fa2:	10 e0       	ldi	r17, 0x00	; 0
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	f7 01       	movw	r30, r14
    2faa:	05 8b       	std	Z+21, r16	; 0x15
    2fac:	16 8b       	std	Z+22, r17	; 0x16
    2fae:	27 8b       	std	Z+23, r18	; 0x17
    2fb0:	30 8f       	std	Z+24, r19	; 0x18
    2fb2:	cb 5b       	subi	r28, 0xBB	; 187
    2fb4:	df 4f       	sbci	r29, 0xFF	; 255
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	f8 94       	cli
    2fba:	de bf       	out	0x3e, r29	; 62
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	cd bf       	out	0x3d, r28	; 61
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	1f 91       	pop	r17
    2fc6:	0f 91       	pop	r16
    2fc8:	ff 90       	pop	r15
    2fca:	ef 90       	pop	r14
    2fcc:	08 95       	ret

00002fce <MQTTSubscribe>:
    2fce:	2f 92       	push	r2
    2fd0:	3f 92       	push	r3
    2fd2:	4f 92       	push	r4
    2fd4:	5f 92       	push	r5
    2fd6:	6f 92       	push	r6
    2fd8:	7f 92       	push	r7
    2fda:	8f 92       	push	r8
    2fdc:	9f 92       	push	r9
    2fde:	af 92       	push	r10
    2fe0:	bf 92       	push	r11
    2fe2:	cf 92       	push	r12
    2fe4:	df 92       	push	r13
    2fe6:	ef 92       	push	r14
    2fe8:	ff 92       	push	r15
    2fea:	0f 93       	push	r16
    2fec:	1f 93       	push	r17
    2fee:	cf 93       	push	r28
    2ff0:	df 93       	push	r29
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
    2ff6:	6f 97       	sbiw	r28, 0x1f	; 31
    2ff8:	0f b6       	in	r0, 0x3f	; 63
    2ffa:	f8 94       	cli
    2ffc:	de bf       	out	0x3e, r29	; 62
    2ffe:	0f be       	out	0x3f, r0	; 63
    3000:	cd bf       	out	0x3d, r28	; 61
    3002:	3c 01       	movw	r6, r24
    3004:	7d 8f       	std	Y+29, r23	; 0x1d
    3006:	6c 8f       	std	Y+28, r22	; 0x1c
    3008:	4b 8f       	std	Y+27, r20	; 0x1b
    300a:	3f 8f       	std	Y+31, r19	; 0x1f
    300c:	2e 8f       	std	Y+30, r18	; 0x1e
    300e:	1b 86       	std	Y+11, r1	; 0x0b
    3010:	1c 86       	std	Y+12, r1	; 0x0c
    3012:	1d 86       	std	Y+13, r1	; 0x0d
    3014:	1e 86       	std	Y+14, r1	; 0x0e
    3016:	18 8a       	std	Y+16, r1	; 0x10
    3018:	1f 86       	std	Y+15, r1	; 0x0f
    301a:	7a 87       	std	Y+10, r23	; 0x0a
    301c:	69 87       	std	Y+9, r22	; 0x09
    301e:	ce 01       	movw	r24, r28
    3020:	01 96       	adiw	r24, 0x01	; 1
    3022:	0e 94 44 23 	call	0x4688	; 0x4688 <InitTimer>
    3026:	f3 01       	movw	r30, r6
    3028:	44 81       	ldd	r20, Z+4	; 0x04
    302a:	55 81       	ldd	r21, Z+5	; 0x05
    302c:	66 81       	ldd	r22, Z+6	; 0x06
    302e:	77 81       	ldd	r23, Z+7	; 0x07
    3030:	ce 01       	movw	r24, r28
    3032:	01 96       	adiw	r24, 0x01	; 1
    3034:	0e 94 e5 22 	call	0x45ca	; 0x45ca <countdown_ms>
    3038:	f3 01       	movw	r30, r6
    303a:	85 89       	ldd	r24, Z+21	; 0x15
    303c:	96 89       	ldd	r25, Z+22	; 0x16
    303e:	a7 89       	ldd	r26, Z+23	; 0x17
    3040:	b0 8d       	ldd	r27, Z+24	; 0x18
    3042:	89 2b       	or	r24, r25
    3044:	8a 2b       	or	r24, r26
    3046:	8b 2b       	or	r24, r27
    3048:	09 f4       	brne	.+2      	; 0x304c <MQTTSubscribe+0x7e>
    304a:	9a c0       	rjmp	.+308    	; 0x3180 <MQTTSubscribe+0x1b2>
    304c:	c3 01       	movw	r24, r6
    304e:	0c da       	rcall	.-3048   	; 0x2468 <getNextPacketId>
    3050:	8b 01       	movw	r16, r22
    3052:	9c 01       	movw	r18, r24
    3054:	f3 01       	movw	r30, r6
    3056:	40 85       	ldd	r20, Z+8	; 0x08
    3058:	51 85       	ldd	r21, Z+9	; 0x09
    305a:	60 e0       	ldi	r22, 0x00	; 0
    305c:	70 e0       	ldi	r23, 0x00	; 0
    305e:	ce 01       	movw	r24, r28
    3060:	4b 96       	adiw	r24, 0x1b	; 27
    3062:	4c 01       	movw	r8, r24
    3064:	fe 01       	movw	r30, r28
    3066:	39 96       	adiw	r30, 0x09	; 9
    3068:	5f 01       	movw	r10, r30
    306a:	c1 2c       	mov	r12, r1
    306c:	d1 2c       	mov	r13, r1
    306e:	76 01       	movw	r14, r12
    3070:	c3 94       	inc	r12
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	f3 01       	movw	r30, r6
    3076:	84 85       	ldd	r24, Z+12	; 0x0c
    3078:	95 85       	ldd	r25, Z+13	; 0x0d
    307a:	0e 94 06 21 	call	0x420c	; 0x420c <MQTTSerialize_subscribe>
    307e:	ab 01       	movw	r20, r22
    3080:	bc 01       	movw	r22, r24
    3082:	14 16       	cp	r1, r20
    3084:	15 06       	cpc	r1, r21
    3086:	16 06       	cpc	r1, r22
    3088:	17 06       	cpc	r1, r23
    308a:	0c f0       	brlt	.+2      	; 0x308e <MQTTSubscribe+0xc0>
    308c:	7e c0       	rjmp	.+252    	; 0x318a <MQTTSubscribe+0x1bc>
    308e:	9e 01       	movw	r18, r28
    3090:	2f 5f       	subi	r18, 0xFF	; 255
    3092:	3f 4f       	sbci	r19, 0xFF	; 255
    3094:	c3 01       	movw	r24, r6
    3096:	03 da       	rcall	.-3066   	; 0x249e <sendPacket>
    3098:	1b 01       	movw	r2, r22
    309a:	2c 01       	movw	r4, r24
    309c:	67 2b       	or	r22, r23
    309e:	68 2b       	or	r22, r24
    30a0:	69 2b       	or	r22, r25
    30a2:	09 f0       	breq	.+2      	; 0x30a6 <MQTTSubscribe+0xd8>
    30a4:	7b c0       	rjmp	.+246    	; 0x319c <MQTTSubscribe+0x1ce>
    30a6:	9e 01       	movw	r18, r28
    30a8:	2f 5f       	subi	r18, 0xFF	; 255
    30aa:	3f 4f       	sbci	r19, 0xFF	; 255
    30ac:	49 e0       	ldi	r20, 0x09	; 9
    30ae:	50 e0       	ldi	r21, 0x00	; 0
    30b0:	60 e0       	ldi	r22, 0x00	; 0
    30b2:	70 e0       	ldi	r23, 0x00	; 0
    30b4:	c3 01       	movw	r24, r6
    30b6:	9e de       	rcall	.-708    	; 0x2df4 <waitfor>
    30b8:	69 30       	cpi	r22, 0x09	; 9
    30ba:	71 05       	cpc	r23, r1
    30bc:	81 05       	cpc	r24, r1
    30be:	91 05       	cpc	r25, r1
    30c0:	09 f0       	breq	.+2      	; 0x30c4 <MQTTSubscribe+0xf6>
    30c2:	68 c0       	rjmp	.+208    	; 0x3194 <MQTTSubscribe+0x1c6>
    30c4:	1d 8a       	std	Y+21, r1	; 0x15
    30c6:	1e 8a       	std	Y+22, r1	; 0x16
    30c8:	1f 8a       	std	Y+23, r1	; 0x17
    30ca:	18 8e       	std	Y+24, r1	; 0x18
    30cc:	8f ef       	ldi	r24, 0xFF	; 255
    30ce:	9f ef       	ldi	r25, 0xFF	; 255
    30d0:	dc 01       	movw	r26, r24
    30d2:	89 8b       	std	Y+17, r24	; 0x11
    30d4:	9a 8b       	std	Y+18, r25	; 0x12
    30d6:	ab 8b       	std	Y+19, r26	; 0x13
    30d8:	bc 8b       	std	Y+20, r27	; 0x14
    30da:	f3 01       	movw	r30, r6
    30dc:	a2 84       	ldd	r10, Z+10	; 0x0a
    30de:	b3 84       	ldd	r11, Z+11	; 0x0b
    30e0:	c1 2c       	mov	r12, r1
    30e2:	d1 2c       	mov	r13, r1
    30e4:	e6 84       	ldd	r14, Z+14	; 0x0e
    30e6:	f7 84       	ldd	r15, Z+15	; 0x0f
    30e8:	8e 01       	movw	r16, r28
    30ea:	0f 5e       	subi	r16, 0xEF	; 239
    30ec:	1f 4f       	sbci	r17, 0xFF	; 255
    30ee:	9e 01       	movw	r18, r28
    30f0:	2b 5e       	subi	r18, 0xEB	; 235
    30f2:	3f 4f       	sbci	r19, 0xFF	; 255
    30f4:	41 e0       	ldi	r20, 0x01	; 1
    30f6:	50 e0       	ldi	r21, 0x00	; 0
    30f8:	60 e0       	ldi	r22, 0x00	; 0
    30fa:	70 e0       	ldi	r23, 0x00	; 0
    30fc:	ce 01       	movw	r24, r28
    30fe:	49 96       	adiw	r24, 0x19	; 25
    3100:	0e 94 a4 21 	call	0x4348	; 0x4348 <MQTTDeserialize_suback>
    3104:	61 30       	cpi	r22, 0x01	; 1
    3106:	71 05       	cpc	r23, r1
    3108:	81 05       	cpc	r24, r1
    310a:	91 05       	cpc	r25, r1
    310c:	29 f4       	brne	.+10     	; 0x3118 <MQTTSubscribe+0x14a>
    310e:	49 89       	ldd	r20, Y+17	; 0x11
    3110:	5a 89       	ldd	r21, Y+18	; 0x12
    3112:	6b 89       	ldd	r22, Y+19	; 0x13
    3114:	7c 89       	ldd	r23, Y+20	; 0x14
    3116:	02 c0       	rjmp	.+4      	; 0x311c <MQTTSubscribe+0x14e>
    3118:	b2 01       	movw	r22, r4
    311a:	a1 01       	movw	r20, r2
    311c:	40 38       	cpi	r20, 0x80	; 128
    311e:	51 05       	cpc	r21, r1
    3120:	61 05       	cpc	r22, r1
    3122:	71 05       	cpc	r23, r1
    3124:	11 f5       	brne	.+68     	; 0x316a <MQTTSubscribe+0x19c>
    3126:	29 c0       	rjmp	.+82     	; 0x317a <MQTTSubscribe+0x1ac>
    3128:	fc 01       	movw	r30, r24
    312a:	ee 0f       	add	r30, r30
    312c:	ff 1f       	adc	r31, r31
    312e:	ee 0f       	add	r30, r30
    3130:	ff 1f       	adc	r31, r31
    3132:	e6 0d       	add	r30, r6
    3134:	f7 1d       	adc	r31, r7
    3136:	21 8d       	ldd	r18, Z+25	; 0x19
    3138:	32 8d       	ldd	r19, Z+26	; 0x1a
    313a:	23 2b       	or	r18, r19
    313c:	91 f4       	brne	.+36     	; 0x3162 <MQTTSubscribe+0x194>
    313e:	88 0f       	add	r24, r24
    3140:	99 1f       	adc	r25, r25
    3142:	88 0f       	add	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	f3 01       	movw	r30, r6
    3148:	e8 0f       	add	r30, r24
    314a:	f9 1f       	adc	r31, r25
    314c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    314e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3150:	92 8f       	std	Z+26, r25	; 0x1a
    3152:	81 8f       	std	Z+25, r24	; 0x19
    3154:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3156:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3158:	94 8f       	std	Z+28, r25	; 0x1c
    315a:	83 8f       	std	Z+27, r24	; 0x1b
    315c:	b2 01       	movw	r22, r4
    315e:	a1 01       	movw	r20, r2
    3160:	0c c0       	rjmp	.+24     	; 0x317a <MQTTSubscribe+0x1ac>
    3162:	01 96       	adiw	r24, 0x01	; 1
    3164:	a1 1d       	adc	r26, r1
    3166:	b1 1d       	adc	r27, r1
    3168:	03 c0       	rjmp	.+6      	; 0x3170 <MQTTSubscribe+0x1a2>
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	dc 01       	movw	r26, r24
    3170:	85 30       	cpi	r24, 0x05	; 5
    3172:	91 05       	cpc	r25, r1
    3174:	a1 05       	cpc	r26, r1
    3176:	b1 05       	cpc	r27, r1
    3178:	bc f2       	brlt	.-82     	; 0x3128 <MQTTSubscribe+0x15a>
    317a:	1a 01       	movw	r2, r20
    317c:	2b 01       	movw	r4, r22
    317e:	0e c0       	rjmp	.+28     	; 0x319c <MQTTSubscribe+0x1ce>
    3180:	22 24       	eor	r2, r2
    3182:	2a 94       	dec	r2
    3184:	32 2c       	mov	r3, r2
    3186:	21 01       	movw	r4, r2
    3188:	09 c0       	rjmp	.+18     	; 0x319c <MQTTSubscribe+0x1ce>
    318a:	22 24       	eor	r2, r2
    318c:	2a 94       	dec	r2
    318e:	32 2c       	mov	r3, r2
    3190:	21 01       	movw	r4, r2
    3192:	04 c0       	rjmp	.+8      	; 0x319c <MQTTSubscribe+0x1ce>
    3194:	22 24       	eor	r2, r2
    3196:	2a 94       	dec	r2
    3198:	32 2c       	mov	r3, r2
    319a:	21 01       	movw	r4, r2
    319c:	c2 01       	movw	r24, r4
    319e:	b1 01       	movw	r22, r2
    31a0:	6f 96       	adiw	r28, 0x1f	; 31
    31a2:	0f b6       	in	r0, 0x3f	; 63
    31a4:	f8 94       	cli
    31a6:	de bf       	out	0x3e, r29	; 62
    31a8:	0f be       	out	0x3f, r0	; 63
    31aa:	cd bf       	out	0x3d, r28	; 61
    31ac:	df 91       	pop	r29
    31ae:	cf 91       	pop	r28
    31b0:	1f 91       	pop	r17
    31b2:	0f 91       	pop	r16
    31b4:	ff 90       	pop	r15
    31b6:	ef 90       	pop	r14
    31b8:	df 90       	pop	r13
    31ba:	cf 90       	pop	r12
    31bc:	bf 90       	pop	r11
    31be:	af 90       	pop	r10
    31c0:	9f 90       	pop	r9
    31c2:	8f 90       	pop	r8
    31c4:	7f 90       	pop	r7
    31c6:	6f 90       	pop	r6
    31c8:	5f 90       	pop	r5
    31ca:	4f 90       	pop	r4
    31cc:	3f 90       	pop	r3
    31ce:	2f 90       	pop	r2
    31d0:	08 95       	ret

000031d2 <MQTTPublish>:

int32_t MQTTPublish(Client* c, const char* topicName, MQTTMessage* message)
{
    31d2:	4f 92       	push	r4
    31d4:	5f 92       	push	r5
    31d6:	6f 92       	push	r6
    31d8:	7f 92       	push	r7
    31da:	8f 92       	push	r8
    31dc:	9f 92       	push	r9
    31de:	af 92       	push	r10
    31e0:	bf 92       	push	r11
    31e2:	cf 92       	push	r12
    31e4:	df 92       	push	r13
    31e6:	ef 92       	push	r14
    31e8:	ff 92       	push	r15
    31ea:	0f 93       	push	r16
    31ec:	1f 93       	push	r17
    31ee:	cf 93       	push	r28
    31f0:	df 93       	push	r29
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
    31f6:	64 97       	sbiw	r28, 0x14	; 20
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61
    3202:	4c 01       	movw	r8, r24
    3204:	5a 01       	movw	r10, r20
  int32_t rc = FAILURE;
  Timer timer;   
  MQTTString topic = MQTTString_initializer;
    3206:	1b 86       	std	Y+11, r1	; 0x0b
    3208:	1c 86       	std	Y+12, r1	; 0x0c
    320a:	1d 86       	std	Y+13, r1	; 0x0d
    320c:	1e 86       	std	Y+14, r1	; 0x0e
    320e:	18 8a       	std	Y+16, r1	; 0x10
    3210:	1f 86       	std	Y+15, r1	; 0x0f
  topic.cstring = (char *)topicName;
    3212:	7a 87       	std	Y+10, r23	; 0x0a
    3214:	69 87       	std	Y+9, r22	; 0x09
  int32_t len = 0;

  InitTimer(&timer);
    3216:	ce 01       	movw	r24, r28
    3218:	01 96       	adiw	r24, 0x01	; 1
    321a:	0e 94 44 23 	call	0x4688	; 0x4688 <InitTimer>
  countdown_ms(&timer, c->command_timeout_ms);
    321e:	f4 01       	movw	r30, r8
    3220:	44 81       	ldd	r20, Z+4	; 0x04
    3222:	55 81       	ldd	r21, Z+5	; 0x05
    3224:	66 81       	ldd	r22, Z+6	; 0x06
    3226:	77 81       	ldd	r23, Z+7	; 0x07
    3228:	ce 01       	movw	r24, r28
    322a:	01 96       	adiw	r24, 0x01	; 1
    322c:	0e 94 e5 22 	call	0x45ca	; 0x45ca <countdown_ms>
    
  if (!c->isconnected)
    3230:	f4 01       	movw	r30, r8
    3232:	85 89       	ldd	r24, Z+21	; 0x15
    3234:	96 89       	ldd	r25, Z+22	; 0x16
    3236:	a7 89       	ldd	r26, Z+23	; 0x17
    3238:	b0 8d       	ldd	r27, Z+24	; 0x18
    323a:	89 2b       	or	r24, r25
    323c:	8a 2b       	or	r24, r26
    323e:	8b 2b       	or	r24, r27
    3240:	09 f4       	brne	.+2      	; 0x3244 <MQTTPublish+0x72>
    3242:	a6 c0       	rjmp	.+332    	; 0x3390 <MQTTPublish+0x1be>
    goto exit;

  if (message->qos == QOS1 || message->qos == QOS2)
    3244:	f5 01       	movw	r30, r10
    3246:	80 81       	ld	r24, Z
    3248:	81 50       	subi	r24, 0x01	; 1
    324a:	82 30       	cpi	r24, 0x02	; 2
    324c:	28 f4       	brcc	.+10     	; 0x3258 <MQTTPublish+0x86>
    message->id = getNextPacketId(c);
    324e:	c4 01       	movw	r24, r8
    3250:	0b d9       	rcall	.-3562   	; 0x2468 <getNextPacketId>
    3252:	f5 01       	movw	r30, r10
    3254:	74 83       	std	Z+4, r23	; 0x04
    3256:	63 83       	std	Z+3, r22	; 0x03
    
  len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
        topic, (uint8_t*)message->payload, message->payloadlen);
    3258:	f5 01       	movw	r30, r10
    325a:	47 80       	ldd	r4, Z+7	; 0x07
    325c:	50 84       	ldd	r5, Z+8	; 0x08
    325e:	25 81       	ldd	r18, Z+5	; 0x05
    3260:	36 81       	ldd	r19, Z+6	; 0x06
    goto exit;

  if (message->qos == QOS1 || message->qos == QOS2)
    message->id = getNextPacketId(c);
    
  len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
    3262:	c3 80       	ldd	r12, Z+3	; 0x03
    3264:	d4 80       	ldd	r13, Z+4	; 0x04
    3266:	e1 80       	ldd	r14, Z+1	; 0x01
    3268:	00 81       	ld	r16, Z
    326a:	f4 01       	movw	r30, r8
    326c:	40 85       	ldd	r20, Z+8	; 0x08
    326e:	51 85       	ldd	r21, Z+9	; 0x09
    3270:	60 e0       	ldi	r22, 0x00	; 0
    3272:	70 e0       	ldi	r23, 0x00	; 0
    3274:	84 85       	ldd	r24, Z+12	; 0x0c
    3276:	95 85       	ldd	r25, Z+13	; 0x0d
    3278:	1f 92       	push	r1
    327a:	1f 92       	push	r1
    327c:	5f 92       	push	r5
    327e:	4f 92       	push	r4
    3280:	3f 93       	push	r19
    3282:	2f 93       	push	r18
    3284:	2d b7       	in	r18, 0x3d	; 61
    3286:	3e b7       	in	r19, 0x3e	; 62
    3288:	28 50       	subi	r18, 0x08	; 8
    328a:	31 09       	sbc	r19, r1
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	3e bf       	out	0x3e, r19	; 62
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	2d bf       	out	0x3d, r18	; 61
    3296:	ad b7       	in	r26, 0x3d	; 61
    3298:	be b7       	in	r27, 0x3e	; 62
    329a:	11 96       	adiw	r26, 0x01	; 1
    329c:	28 e0       	ldi	r18, 0x08	; 8
    329e:	fe 01       	movw	r30, r28
    32a0:	39 96       	adiw	r30, 0x09	; 9
    32a2:	01 90       	ld	r0, Z+
    32a4:	0d 92       	st	X+, r0
    32a6:	2a 95       	dec	r18
    32a8:	e1 f7       	brne	.-8      	; 0x32a2 <MQTTPublish+0xd0>
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	7f d6       	rcall	.+3326   	; 0x3fac <MQTTSerialize_publish>
    32ae:	ab 01       	movw	r20, r22
    32b0:	bc 01       	movw	r22, r24
        topic, (uint8_t*)message->payload, message->payloadlen);
    
  if (len <= 0)
    32b2:	0f b6       	in	r0, 0x3f	; 63
    32b4:	f8 94       	cli
    32b6:	de bf       	out	0x3e, r29	; 62
    32b8:	0f be       	out	0x3f, r0	; 63
    32ba:	cd bf       	out	0x3d, r28	; 61
    32bc:	14 16       	cp	r1, r20
    32be:	15 06       	cpc	r1, r21
    32c0:	16 06       	cpc	r1, r22
    32c2:	17 06       	cpc	r1, r23
    32c4:	0c f0       	brlt	.+2      	; 0x32c8 <MQTTPublish+0xf6>
    32c6:	69 c0       	rjmp	.+210    	; 0x339a <MQTTPublish+0x1c8>
    goto exit;
  
  if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
    32c8:	9e 01       	movw	r18, r28
    32ca:	2f 5f       	subi	r18, 0xFF	; 255
    32cc:	3f 4f       	sbci	r19, 0xFF	; 255
    32ce:	c4 01       	movw	r24, r8
    32d0:	e6 d8       	rcall	.-3636   	; 0x249e <sendPacket>
    32d2:	2b 01       	movw	r4, r22
    32d4:	3c 01       	movw	r6, r24
    32d6:	67 2b       	or	r22, r23
    32d8:	68 2b       	or	r22, r24
    32da:	69 2b       	or	r22, r25
    32dc:	09 f0       	breq	.+2      	; 0x32e0 <MQTTPublish+0x10e>
    32de:	6b c0       	rjmp	.+214    	; 0x33b6 <MQTTPublish+0x1e4>
    goto exit; // there was a problem
    
  if (message->qos == QOS1)
    32e0:	f5 01       	movw	r30, r10
    32e2:	80 81       	ld	r24, Z
    32e4:	81 30       	cpi	r24, 0x01	; 1
    32e6:	51 f5       	brne	.+84     	; 0x333c <MQTTPublish+0x16a>
  {
    if (waitfor(c, PUBACK, &timer) == PUBACK)
    32e8:	9e 01       	movw	r18, r28
    32ea:	2f 5f       	subi	r18, 0xFF	; 255
    32ec:	3f 4f       	sbci	r19, 0xFF	; 255
    32ee:	44 e0       	ldi	r20, 0x04	; 4
    32f0:	50 e0       	ldi	r21, 0x00	; 0
    32f2:	60 e0       	ldi	r22, 0x00	; 0
    32f4:	70 e0       	ldi	r23, 0x00	; 0
    32f6:	c4 01       	movw	r24, r8
    32f8:	7d dd       	rcall	.-1286   	; 0x2df4 <waitfor>
    32fa:	64 30       	cpi	r22, 0x04	; 4
    32fc:	71 05       	cpc	r23, r1
    32fe:	81 05       	cpc	r24, r1
    3300:	91 05       	cpc	r25, r1
    3302:	09 f0       	breq	.+2      	; 0x3306 <MQTTPublish+0x134>
    3304:	4f c0       	rjmp	.+158    	; 0x33a4 <MQTTPublish+0x1d2>
    {
      uint16_t mypacketid;
      uint8_t dup, type;

      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    3306:	f4 01       	movw	r30, r8
    3308:	e2 84       	ldd	r14, Z+10	; 0x0a
    330a:	f3 84       	ldd	r15, Z+11	; 0x0b
    330c:	00 e0       	ldi	r16, 0x00	; 0
    330e:	10 e0       	ldi	r17, 0x00	; 0
    3310:	26 85       	ldd	r18, Z+14	; 0x0e
    3312:	37 85       	ldd	r19, Z+15	; 0x0f
    3314:	ae 01       	movw	r20, r28
    3316:	4f 5e       	subi	r20, 0xEF	; 239
    3318:	5f 4f       	sbci	r21, 0xFF	; 255
    331a:	be 01       	movw	r22, r28
    331c:	6c 5e       	subi	r22, 0xEC	; 236
    331e:	7f 4f       	sbci	r23, 0xFF	; 255
    3320:	ce 01       	movw	r24, r28
    3322:	43 96       	adiw	r24, 0x13	; 19
    3324:	07 d3       	rcall	.+1550   	; 0x3934 <MQTTDeserialize_ack>
    3326:	61 30       	cpi	r22, 0x01	; 1
    3328:	71 05       	cpc	r23, r1
    332a:	81 05       	cpc	r24, r1
    332c:	91 05       	cpc	r25, r1
    332e:	09 f4       	brne	.+2      	; 0x3332 <MQTTPublish+0x160>
    3330:	42 c0       	rjmp	.+132    	; 0x33b6 <MQTTPublish+0x1e4>
        rc = FAILURE;
    3332:	44 24       	eor	r4, r4
    3334:	4a 94       	dec	r4
    3336:	54 2c       	mov	r5, r4
    3338:	32 01       	movw	r6, r4
    333a:	3d c0       	rjmp	.+122    	; 0x33b6 <MQTTPublish+0x1e4>
    }
    else
      rc = FAILURE;
  }
  else if (message->qos == QOS2)
    333c:	82 30       	cpi	r24, 0x02	; 2
    333e:	d9 f5       	brne	.+118    	; 0x33b6 <MQTTPublish+0x1e4>
  {
    if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
    3340:	9e 01       	movw	r18, r28
    3342:	2f 5f       	subi	r18, 0xFF	; 255
    3344:	3f 4f       	sbci	r19, 0xFF	; 255
    3346:	47 e0       	ldi	r20, 0x07	; 7
    3348:	50 e0       	ldi	r21, 0x00	; 0
    334a:	60 e0       	ldi	r22, 0x00	; 0
    334c:	70 e0       	ldi	r23, 0x00	; 0
    334e:	c4 01       	movw	r24, r8
    3350:	51 dd       	rcall	.-1374   	; 0x2df4 <waitfor>
    3352:	67 30       	cpi	r22, 0x07	; 7
    3354:	71 05       	cpc	r23, r1
    3356:	81 05       	cpc	r24, r1
    3358:	91 05       	cpc	r25, r1
    335a:	49 f5       	brne	.+82     	; 0x33ae <MQTTPublish+0x1dc>
    {
      uint16_t mypacketid;
      uint8_t dup, type;
    
      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    335c:	f4 01       	movw	r30, r8
    335e:	e2 84       	ldd	r14, Z+10	; 0x0a
    3360:	f3 84       	ldd	r15, Z+11	; 0x0b
    3362:	00 e0       	ldi	r16, 0x00	; 0
    3364:	10 e0       	ldi	r17, 0x00	; 0
    3366:	26 85       	ldd	r18, Z+14	; 0x0e
    3368:	37 85       	ldd	r19, Z+15	; 0x0f
    336a:	ae 01       	movw	r20, r28
    336c:	4f 5e       	subi	r20, 0xEF	; 239
    336e:	5f 4f       	sbci	r21, 0xFF	; 255
    3370:	be 01       	movw	r22, r28
    3372:	6c 5e       	subi	r22, 0xEC	; 236
    3374:	7f 4f       	sbci	r23, 0xFF	; 255
    3376:	ce 01       	movw	r24, r28
    3378:	43 96       	adiw	r24, 0x13	; 19
    337a:	dc d2       	rcall	.+1464   	; 0x3934 <MQTTDeserialize_ack>
    337c:	61 30       	cpi	r22, 0x01	; 1
    337e:	71 05       	cpc	r23, r1
    3380:	81 05       	cpc	r24, r1
    3382:	91 05       	cpc	r25, r1
    3384:	c1 f0       	breq	.+48     	; 0x33b6 <MQTTPublish+0x1e4>
        rc = FAILURE;
    3386:	44 24       	eor	r4, r4
    3388:	4a 94       	dec	r4
    338a:	54 2c       	mov	r5, r4
    338c:	32 01       	movw	r6, r4
    338e:	13 c0       	rjmp	.+38     	; 0x33b6 <MQTTPublish+0x1e4>
  return rc;
}

int32_t MQTTPublish(Client* c, const char* topicName, MQTTMessage* message)
{
  int32_t rc = FAILURE;
    3390:	44 24       	eor	r4, r4
    3392:	4a 94       	dec	r4
    3394:	54 2c       	mov	r5, r4
    3396:	32 01       	movw	r6, r4
    3398:	0e c0       	rjmp	.+28     	; 0x33b6 <MQTTPublish+0x1e4>
    339a:	44 24       	eor	r4, r4
    339c:	4a 94       	dec	r4
    339e:	54 2c       	mov	r5, r4
    33a0:	32 01       	movw	r6, r4
    33a2:	09 c0       	rjmp	.+18     	; 0x33b6 <MQTTPublish+0x1e4>

      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
        rc = FAILURE;
    }
    else
      rc = FAILURE;
    33a4:	44 24       	eor	r4, r4
    33a6:	4a 94       	dec	r4
    33a8:	54 2c       	mov	r5, r4
    33aa:	32 01       	movw	r6, r4
    33ac:	04 c0       	rjmp	.+8      	; 0x33b6 <MQTTPublish+0x1e4>
    
      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
        rc = FAILURE;
    }
    else
      rc = FAILURE;
    33ae:	44 24       	eor	r4, r4
    33b0:	4a 94       	dec	r4
    33b2:	54 2c       	mov	r5, r4
    33b4:	32 01       	movw	r6, r4
  }
    
exit:
  return rc;
}
    33b6:	c3 01       	movw	r24, r6
    33b8:	b2 01       	movw	r22, r4
    33ba:	64 96       	adiw	r28, 0x14	; 20
    33bc:	0f b6       	in	r0, 0x3f	; 63
    33be:	f8 94       	cli
    33c0:	de bf       	out	0x3e, r29	; 62
    33c2:	0f be       	out	0x3f, r0	; 63
    33c4:	cd bf       	out	0x3d, r28	; 61
    33c6:	df 91       	pop	r29
    33c8:	cf 91       	pop	r28
    33ca:	1f 91       	pop	r17
    33cc:	0f 91       	pop	r16
    33ce:	ff 90       	pop	r15
    33d0:	ef 90       	pop	r14
    33d2:	df 90       	pop	r13
    33d4:	cf 90       	pop	r12
    33d6:	bf 90       	pop	r11
    33d8:	af 90       	pop	r10
    33da:	9f 90       	pop	r9
    33dc:	8f 90       	pop	r8
    33de:	7f 90       	pop	r7
    33e0:	6f 90       	pop	r6
    33e2:	5f 90       	pop	r5
    33e4:	4f 90       	pop	r4
    33e6:	08 95       	ret

000033e8 <MQTTSerialize_connectLength>:
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_disconnect(uint8_t* buf, int32_t buflen)
{
  return MQTTSerialize_zero(buf, buflen, DISCONNECT);
}
    33e8:	8f 92       	push	r8
    33ea:	9f 92       	push	r9
    33ec:	af 92       	push	r10
    33ee:	bf 92       	push	r11
    33f0:	cf 92       	push	r12
    33f2:	df 92       	push	r13
    33f4:	ef 92       	push	r14
    33f6:	ff 92       	push	r15
    33f8:	cf 93       	push	r28
    33fa:	df 93       	push	r29
    33fc:	ec 01       	movw	r28, r24
    33fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3400:	83 30       	cpi	r24, 0x03	; 3
    3402:	31 f0       	breq	.+12     	; 0x3410 <MQTTSerialize_connectLength+0x28>
    3404:	84 30       	cpi	r24, 0x04	; 4
    3406:	61 f0       	breq	.+24     	; 0x3420 <MQTTSerialize_connectLength+0x38>
    3408:	c1 2c       	mov	r12, r1
    340a:	d1 2c       	mov	r13, r1
    340c:	76 01       	movw	r14, r12
    340e:	0f c0       	rjmp	.+30     	; 0x342e <MQTTSerialize_connectLength+0x46>
    3410:	0f 2e       	mov	r0, r31
    3412:	fc e0       	ldi	r31, 0x0C	; 12
    3414:	cf 2e       	mov	r12, r31
    3416:	d1 2c       	mov	r13, r1
    3418:	e1 2c       	mov	r14, r1
    341a:	f1 2c       	mov	r15, r1
    341c:	f0 2d       	mov	r31, r0
    341e:	07 c0       	rjmp	.+14     	; 0x342e <MQTTSerialize_connectLength+0x46>
    3420:	0f 2e       	mov	r0, r31
    3422:	fa e0       	ldi	r31, 0x0A	; 10
    3424:	cf 2e       	mov	r12, r31
    3426:	d1 2c       	mov	r13, r1
    3428:	e1 2c       	mov	r14, r1
    342a:	f1 2c       	mov	r15, r1
    342c:	f0 2d       	mov	r31, r0
    342e:	2f 81       	ldd	r18, Y+7	; 0x07
    3430:	38 85       	ldd	r19, Y+8	; 0x08
    3432:	49 85       	ldd	r20, Y+9	; 0x09
    3434:	5a 85       	ldd	r21, Y+10	; 0x0a
    3436:	6b 85       	ldd	r22, Y+11	; 0x0b
    3438:	7c 85       	ldd	r23, Y+12	; 0x0c
    343a:	8d 85       	ldd	r24, Y+13	; 0x0d
    343c:	9e 85       	ldd	r25, Y+14	; 0x0e
    343e:	06 d5       	rcall	.+2572   	; 0x3e4c <MQTTstrlen>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	02 96       	adiw	r24, 0x02	; 2
    3446:	a1 1d       	adc	r26, r1
    3448:	b1 1d       	adc	r27, r1
    344a:	c8 0e       	add	r12, r24
    344c:	d9 1e       	adc	r13, r25
    344e:	ea 1e       	adc	r14, r26
    3450:	fb 1e       	adc	r15, r27
    3452:	8a 89       	ldd	r24, Y+18	; 0x12
    3454:	88 23       	and	r24, r24
    3456:	31 f1       	breq	.+76     	; 0x34a4 <MQTTSerialize_connectLength+0xbc>
    3458:	29 8d       	ldd	r18, Y+25	; 0x19
    345a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    345c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    345e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3460:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3462:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3464:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3466:	98 a1       	ldd	r25, Y+32	; 0x20
    3468:	f1 d4       	rcall	.+2530   	; 0x3e4c <MQTTstrlen>
    346a:	4b 01       	movw	r8, r22
    346c:	5c 01       	movw	r10, r24
    346e:	22 e0       	ldi	r18, 0x02	; 2
    3470:	82 0e       	add	r8, r18
    3472:	91 1c       	adc	r9, r1
    3474:	a1 1c       	adc	r10, r1
    3476:	b1 1c       	adc	r11, r1
    3478:	29 a1       	ldd	r18, Y+33	; 0x21
    347a:	3a a1       	ldd	r19, Y+34	; 0x22
    347c:	4b a1       	ldd	r20, Y+35	; 0x23
    347e:	5c a1       	ldd	r21, Y+36	; 0x24
    3480:	6d a1       	ldd	r22, Y+37	; 0x25
    3482:	7e a1       	ldd	r23, Y+38	; 0x26
    3484:	8f a1       	ldd	r24, Y+39	; 0x27
    3486:	98 a5       	ldd	r25, Y+40	; 0x28
    3488:	e1 d4       	rcall	.+2498   	; 0x3e4c <MQTTstrlen>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	88 0d       	add	r24, r8
    3490:	99 1d       	adc	r25, r9
    3492:	aa 1d       	adc	r26, r10
    3494:	bb 1d       	adc	r27, r11
    3496:	02 96       	adiw	r24, 0x02	; 2
    3498:	a1 1d       	adc	r26, r1
    349a:	b1 1d       	adc	r27, r1
    349c:	c8 0e       	add	r12, r24
    349e:	d9 1e       	adc	r13, r25
    34a0:	ea 1e       	adc	r14, r26
    34a2:	fb 1e       	adc	r15, r27
    34a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    34a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    34a8:	89 2b       	or	r24, r25
    34aa:	21 f4       	brne	.+8      	; 0x34b4 <MQTTSerialize_connectLength+0xcc>
    34ac:	89 a9       	ldd	r24, Y+49	; 0x31
    34ae:	9a a9       	ldd	r25, Y+50	; 0x32
    34b0:	89 2b       	or	r24, r25
    34b2:	91 f0       	breq	.+36     	; 0x34d8 <MQTTSerialize_connectLength+0xf0>
    34b4:	2b a5       	ldd	r18, Y+43	; 0x2b
    34b6:	3c a5       	ldd	r19, Y+44	; 0x2c
    34b8:	4d a5       	ldd	r20, Y+45	; 0x2d
    34ba:	5e a5       	ldd	r21, Y+46	; 0x2e
    34bc:	6f a5       	ldd	r22, Y+47	; 0x2f
    34be:	78 a9       	ldd	r23, Y+48	; 0x30
    34c0:	89 a9       	ldd	r24, Y+49	; 0x31
    34c2:	9a a9       	ldd	r25, Y+50	; 0x32
    34c4:	c3 d4       	rcall	.+2438   	; 0x3e4c <MQTTstrlen>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	02 96       	adiw	r24, 0x02	; 2
    34cc:	a1 1d       	adc	r26, r1
    34ce:	b1 1d       	adc	r27, r1
    34d0:	c8 0e       	add	r12, r24
    34d2:	d9 1e       	adc	r13, r25
    34d4:	ea 1e       	adc	r14, r26
    34d6:	fb 1e       	adc	r15, r27
    34d8:	8b a9       	ldd	r24, Y+51	; 0x33
    34da:	9c a9       	ldd	r25, Y+52	; 0x34
    34dc:	89 2b       	or	r24, r25
    34de:	21 f4       	brne	.+8      	; 0x34e8 <MQTTSerialize_connectLength+0x100>
    34e0:	89 ad       	ldd	r24, Y+57	; 0x39
    34e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    34e4:	89 2b       	or	r24, r25
    34e6:	91 f0       	breq	.+36     	; 0x350c <MQTTSerialize_connectLength+0x124>
    34e8:	2b a9       	ldd	r18, Y+51	; 0x33
    34ea:	3c a9       	ldd	r19, Y+52	; 0x34
    34ec:	4d a9       	ldd	r20, Y+53	; 0x35
    34ee:	5e a9       	ldd	r21, Y+54	; 0x36
    34f0:	6f a9       	ldd	r22, Y+55	; 0x37
    34f2:	78 ad       	ldd	r23, Y+56	; 0x38
    34f4:	89 ad       	ldd	r24, Y+57	; 0x39
    34f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    34f8:	a9 d4       	rcall	.+2386   	; 0x3e4c <MQTTstrlen>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	02 96       	adiw	r24, 0x02	; 2
    3500:	a1 1d       	adc	r26, r1
    3502:	b1 1d       	adc	r27, r1
    3504:	c8 0e       	add	r12, r24
    3506:	d9 1e       	adc	r13, r25
    3508:	ea 1e       	adc	r14, r26
    350a:	fb 1e       	adc	r15, r27
    350c:	c7 01       	movw	r24, r14
    350e:	b6 01       	movw	r22, r12
    3510:	df 91       	pop	r29
    3512:	cf 91       	pop	r28
    3514:	ff 90       	pop	r15
    3516:	ef 90       	pop	r14
    3518:	df 90       	pop	r13
    351a:	cf 90       	pop	r12
    351c:	bf 90       	pop	r11
    351e:	af 90       	pop	r10
    3520:	9f 90       	pop	r9
    3522:	8f 90       	pop	r8
    3524:	08 95       	ret

00003526 <MQTTSerialize_connect>:
    3526:	4f 92       	push	r4
    3528:	5f 92       	push	r5
    352a:	6f 92       	push	r6
    352c:	7f 92       	push	r7
    352e:	af 92       	push	r10
    3530:	bf 92       	push	r11
    3532:	df 92       	push	r13
    3534:	ef 92       	push	r14
    3536:	ff 92       	push	r15
    3538:	0f 93       	push	r16
    353a:	1f 93       	push	r17
    353c:	cf 93       	push	r28
    353e:	df 93       	push	r29
    3540:	00 d0       	rcall	.+0      	; 0x3542 <MQTTSerialize_connect+0x1c>
    3542:	00 d0       	rcall	.+0      	; 0x3544 <MQTTSerialize_connect+0x1e>
    3544:	cd b7       	in	r28, 0x3d	; 61
    3546:	de b7       	in	r29, 0x3e	; 62
    3548:	5c 01       	movw	r10, r24
    354a:	2a 01       	movw	r4, r20
    354c:	3b 01       	movw	r6, r22
    354e:	79 01       	movw	r14, r18
    3550:	9a 83       	std	Y+2, r25	; 0x02
    3552:	89 83       	std	Y+1, r24	; 0x01
    3554:	c9 01       	movw	r24, r18
    3556:	48 df       	rcall	.-368    	; 0x33e8 <MQTTSerialize_connectLength>
    3558:	6b 83       	std	Y+3, r22	; 0x03
    355a:	7c 83       	std	Y+4, r23	; 0x04
    355c:	8d 83       	std	Y+5, r24	; 0x05
    355e:	9e 83       	std	Y+6, r25	; 0x06
    3560:	33 d3       	rcall	.+1638   	; 0x3bc8 <MQTTPacket_len>
    3562:	46 16       	cp	r4, r22
    3564:	57 06       	cpc	r5, r23
    3566:	68 06       	cpc	r6, r24
    3568:	79 06       	cpc	r7, r25
    356a:	0c f4       	brge	.+2      	; 0x356e <MQTTSerialize_connect+0x48>
    356c:	b2 c0       	rjmp	.+356    	; 0x36d2 <MQTTSerialize_connect+0x1ac>
    356e:	60 e1       	ldi	r22, 0x10	; 16
    3570:	ce 01       	movw	r24, r28
    3572:	01 96       	adiw	r24, 0x01	; 1
    3574:	7a d3       	rcall	.+1780   	; 0x3c6a <writeChar>
    3576:	4b 81       	ldd	r20, Y+3	; 0x03
    3578:	5c 81       	ldd	r21, Y+4	; 0x04
    357a:	6d 81       	ldd	r22, Y+5	; 0x05
    357c:	7e 81       	ldd	r23, Y+6	; 0x06
    357e:	89 81       	ldd	r24, Y+1	; 0x01
    3580:	9a 81       	ldd	r25, Y+2	; 0x02
    3582:	44 d2       	rcall	.+1160   	; 0x3a0c <MQTTPacket_encode>
    3584:	29 81       	ldd	r18, Y+1	; 0x01
    3586:	3a 81       	ldd	r19, Y+2	; 0x02
    3588:	62 0f       	add	r22, r18
    358a:	73 1f       	adc	r23, r19
    358c:	7a 83       	std	Y+2, r23	; 0x02
    358e:	69 83       	std	Y+1, r22	; 0x01
    3590:	f7 01       	movw	r30, r14
    3592:	86 81       	ldd	r24, Z+6	; 0x06
    3594:	84 30       	cpi	r24, 0x04	; 4
    3596:	51 f4       	brne	.+20     	; 0x35ac <MQTTSerialize_connect+0x86>
    3598:	66 e4       	ldi	r22, 0x46	; 70
    359a:	73 e0       	ldi	r23, 0x03	; 3
    359c:	ce 01       	movw	r24, r28
    359e:	01 96       	adiw	r24, 0x01	; 1
    35a0:	9c d3       	rcall	.+1848   	; 0x3cda <writeCString>
    35a2:	64 e0       	ldi	r22, 0x04	; 4
    35a4:	ce 01       	movw	r24, r28
    35a6:	01 96       	adiw	r24, 0x01	; 1
    35a8:	60 d3       	rcall	.+1728   	; 0x3c6a <writeChar>
    35aa:	09 c0       	rjmp	.+18     	; 0x35be <MQTTSerialize_connect+0x98>
    35ac:	6b e4       	ldi	r22, 0x4B	; 75
    35ae:	73 e0       	ldi	r23, 0x03	; 3
    35b0:	ce 01       	movw	r24, r28
    35b2:	01 96       	adiw	r24, 0x01	; 1
    35b4:	92 d3       	rcall	.+1828   	; 0x3cda <writeCString>
    35b6:	63 e0       	ldi	r22, 0x03	; 3
    35b8:	ce 01       	movw	r24, r28
    35ba:	01 96       	adiw	r24, 0x01	; 1
    35bc:	56 d3       	rcall	.+1708   	; 0x3c6a <writeChar>
    35be:	d1 2c       	mov	r13, r1
    35c0:	f7 01       	movw	r30, r14
    35c2:	81 89       	ldd	r24, Z+17	; 0x11
    35c4:	80 fb       	bst	r24, 0
    35c6:	d1 f8       	bld	r13, 1
    35c8:	92 89       	ldd	r25, Z+18	; 0x12
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	91 11       	cpse	r25, r1
    35ce:	01 c0       	rjmp	.+2      	; 0x35d2 <MQTTSerialize_connect+0xac>
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	80 fb       	bst	r24, 0
    35d4:	d2 f8       	bld	r13, 2
    35d6:	d2 fe       	sbrs	r13, 2
    35d8:	0d c0       	rjmp	.+26     	; 0x35f4 <MQTTSerialize_connect+0xce>
    35da:	f7 01       	movw	r30, r14
    35dc:	82 a5       	ldd	r24, Z+42	; 0x2a
    35de:	83 70       	andi	r24, 0x03	; 3
    35e0:	88 0f       	add	r24, r24
    35e2:	88 0f       	add	r24, r24
    35e4:	88 0f       	add	r24, r24
    35e6:	9d 2d       	mov	r25, r13
    35e8:	97 7e       	andi	r25, 0xE7	; 231
    35ea:	d9 2e       	mov	r13, r25
    35ec:	d8 2a       	or	r13, r24
    35ee:	81 a5       	ldd	r24, Z+41	; 0x29
    35f0:	80 fb       	bst	r24, 0
    35f2:	d5 f8       	bld	r13, 5
    35f4:	f7 01       	movw	r30, r14
    35f6:	83 a5       	ldd	r24, Z+43	; 0x2b
    35f8:	94 a5       	ldd	r25, Z+44	; 0x2c
    35fa:	89 2b       	or	r24, r25
    35fc:	21 f4       	brne	.+8      	; 0x3606 <MQTTSerialize_connect+0xe0>
    35fe:	81 a9       	ldd	r24, Z+49	; 0x31
    3600:	92 a9       	ldd	r25, Z+50	; 0x32
    3602:	89 2b       	or	r24, r25
    3604:	11 f0       	breq	.+4      	; 0x360a <MQTTSerialize_connect+0xe4>
    3606:	68 94       	set
    3608:	d7 f8       	bld	r13, 7
    360a:	f7 01       	movw	r30, r14
    360c:	83 a9       	ldd	r24, Z+51	; 0x33
    360e:	94 a9       	ldd	r25, Z+52	; 0x34
    3610:	89 2b       	or	r24, r25
    3612:	21 f4       	brne	.+8      	; 0x361c <MQTTSerialize_connect+0xf6>
    3614:	81 ad       	ldd	r24, Z+57	; 0x39
    3616:	92 ad       	ldd	r25, Z+58	; 0x3a
    3618:	89 2b       	or	r24, r25
    361a:	11 f0       	breq	.+4      	; 0x3620 <MQTTSerialize_connect+0xfa>
    361c:	68 94       	set
    361e:	d6 f8       	bld	r13, 6
    3620:	6d 2d       	mov	r22, r13
    3622:	ce 01       	movw	r24, r28
    3624:	01 96       	adiw	r24, 0x01	; 1
    3626:	21 d3       	rcall	.+1602   	; 0x3c6a <writeChar>
    3628:	f7 01       	movw	r30, r14
    362a:	47 85       	ldd	r20, Z+15	; 0x0f
    362c:	50 89       	ldd	r21, Z+16	; 0x10
    362e:	60 e0       	ldi	r22, 0x00	; 0
    3630:	70 e0       	ldi	r23, 0x00	; 0
    3632:	ce 01       	movw	r24, r28
    3634:	01 96       	adiw	r24, 0x01	; 1
    3636:	23 d3       	rcall	.+1606   	; 0x3c7e <writeInt>
    3638:	f7 01       	movw	r30, r14
    363a:	07 81       	ldd	r16, Z+7	; 0x07
    363c:	10 85       	ldd	r17, Z+8	; 0x08
    363e:	21 85       	ldd	r18, Z+9	; 0x09
    3640:	32 85       	ldd	r19, Z+10	; 0x0a
    3642:	43 85       	ldd	r20, Z+11	; 0x0b
    3644:	54 85       	ldd	r21, Z+12	; 0x0c
    3646:	65 85       	ldd	r22, Z+13	; 0x0d
    3648:	76 85       	ldd	r23, Z+14	; 0x0e
    364a:	ce 01       	movw	r24, r28
    364c:	01 96       	adiw	r24, 0x01	; 1
    364e:	6d d3       	rcall	.+1754   	; 0x3d2a <writeMQTTString>
    3650:	f7 01       	movw	r30, r14
    3652:	82 89       	ldd	r24, Z+18	; 0x12
    3654:	88 23       	and	r24, r24
    3656:	b9 f0       	breq	.+46     	; 0x3686 <MQTTSerialize_connect+0x160>
    3658:	01 8d       	ldd	r16, Z+25	; 0x19
    365a:	12 8d       	ldd	r17, Z+26	; 0x1a
    365c:	23 8d       	ldd	r18, Z+27	; 0x1b
    365e:	34 8d       	ldd	r19, Z+28	; 0x1c
    3660:	45 8d       	ldd	r20, Z+29	; 0x1d
    3662:	56 8d       	ldd	r21, Z+30	; 0x1e
    3664:	67 8d       	ldd	r22, Z+31	; 0x1f
    3666:	70 a1       	ldd	r23, Z+32	; 0x20
    3668:	ce 01       	movw	r24, r28
    366a:	01 96       	adiw	r24, 0x01	; 1
    366c:	5e d3       	rcall	.+1724   	; 0x3d2a <writeMQTTString>
    366e:	f7 01       	movw	r30, r14
    3670:	01 a1       	ldd	r16, Z+33	; 0x21
    3672:	12 a1       	ldd	r17, Z+34	; 0x22
    3674:	23 a1       	ldd	r18, Z+35	; 0x23
    3676:	34 a1       	ldd	r19, Z+36	; 0x24
    3678:	45 a1       	ldd	r20, Z+37	; 0x25
    367a:	56 a1       	ldd	r21, Z+38	; 0x26
    367c:	67 a1       	ldd	r22, Z+39	; 0x27
    367e:	70 a5       	ldd	r23, Z+40	; 0x28
    3680:	ce 01       	movw	r24, r28
    3682:	01 96       	adiw	r24, 0x01	; 1
    3684:	52 d3       	rcall	.+1700   	; 0x3d2a <writeMQTTString>
    3686:	7d 2c       	mov	r7, r13
    3688:	dd 20       	and	r13, r13
    368a:	64 f4       	brge	.+24     	; 0x36a4 <MQTTSerialize_connect+0x17e>
    368c:	f7 01       	movw	r30, r14
    368e:	03 a5       	ldd	r16, Z+43	; 0x2b
    3690:	14 a5       	ldd	r17, Z+44	; 0x2c
    3692:	25 a5       	ldd	r18, Z+45	; 0x2d
    3694:	36 a5       	ldd	r19, Z+46	; 0x2e
    3696:	47 a5       	ldd	r20, Z+47	; 0x2f
    3698:	50 a9       	ldd	r21, Z+48	; 0x30
    369a:	61 a9       	ldd	r22, Z+49	; 0x31
    369c:	72 a9       	ldd	r23, Z+50	; 0x32
    369e:	ce 01       	movw	r24, r28
    36a0:	01 96       	adiw	r24, 0x01	; 1
    36a2:	43 d3       	rcall	.+1670   	; 0x3d2a <writeMQTTString>
    36a4:	76 fe       	sbrs	r7, 6
    36a6:	0c c0       	rjmp	.+24     	; 0x36c0 <MQTTSerialize_connect+0x19a>
    36a8:	f7 01       	movw	r30, r14
    36aa:	03 a9       	ldd	r16, Z+51	; 0x33
    36ac:	14 a9       	ldd	r17, Z+52	; 0x34
    36ae:	25 a9       	ldd	r18, Z+53	; 0x35
    36b0:	36 a9       	ldd	r19, Z+54	; 0x36
    36b2:	47 a9       	ldd	r20, Z+55	; 0x37
    36b4:	50 ad       	ldd	r21, Z+56	; 0x38
    36b6:	61 ad       	ldd	r22, Z+57	; 0x39
    36b8:	72 ad       	ldd	r23, Z+58	; 0x3a
    36ba:	ce 01       	movw	r24, r28
    36bc:	01 96       	adiw	r24, 0x01	; 1
    36be:	35 d3       	rcall	.+1642   	; 0x3d2a <writeMQTTString>
    36c0:	69 81       	ldd	r22, Y+1	; 0x01
    36c2:	7a 81       	ldd	r23, Y+2	; 0x02
    36c4:	6a 19       	sub	r22, r10
    36c6:	7b 09       	sbc	r23, r11
    36c8:	07 2e       	mov	r0, r23
    36ca:	00 0c       	add	r0, r0
    36cc:	88 0b       	sbc	r24, r24
    36ce:	99 0b       	sbc	r25, r25
    36d0:	04 c0       	rjmp	.+8      	; 0x36da <MQTTSerialize_connect+0x1b4>
    36d2:	6e ef       	ldi	r22, 0xFE	; 254
    36d4:	7f ef       	ldi	r23, 0xFF	; 255
    36d6:	8f ef       	ldi	r24, 0xFF	; 255
    36d8:	9f ef       	ldi	r25, 0xFF	; 255
    36da:	26 96       	adiw	r28, 0x06	; 6
    36dc:	0f b6       	in	r0, 0x3f	; 63
    36de:	f8 94       	cli
    36e0:	de bf       	out	0x3e, r29	; 62
    36e2:	0f be       	out	0x3f, r0	; 63
    36e4:	cd bf       	out	0x3d, r28	; 61
    36e6:	df 91       	pop	r29
    36e8:	cf 91       	pop	r28
    36ea:	1f 91       	pop	r17
    36ec:	0f 91       	pop	r16
    36ee:	ff 90       	pop	r15
    36f0:	ef 90       	pop	r14
    36f2:	df 90       	pop	r13
    36f4:	bf 90       	pop	r11
    36f6:	af 90       	pop	r10
    36f8:	7f 90       	pop	r7
    36fa:	6f 90       	pop	r6
    36fc:	5f 90       	pop	r5
    36fe:	4f 90       	pop	r4
    3700:	08 95       	ret

00003702 <MQTTDeserialize_connack>:
    3702:	ef 92       	push	r14
    3704:	ff 92       	push	r15
    3706:	0f 93       	push	r16
    3708:	1f 93       	push	r17
    370a:	cf 93       	push	r28
    370c:	df 93       	push	r29
    370e:	00 d0       	rcall	.+0      	; 0x3710 <MQTTDeserialize_connack+0xe>
    3710:	00 d0       	rcall	.+0      	; 0x3712 <MQTTDeserialize_connack+0x10>
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
    3716:	7c 01       	movw	r14, r24
    3718:	8b 01       	movw	r16, r22
    371a:	5a 83       	std	Y+2, r21	; 0x02
    371c:	49 83       	std	Y+1, r20	; 0x01
    371e:	ce 01       	movw	r24, r28
    3720:	01 96       	adiw	r24, 0x01	; 1
    3722:	9b d2       	rcall	.+1334   	; 0x3c5a <readChar>
    3724:	80 7f       	andi	r24, 0xF0	; 240
    3726:	80 32       	cpi	r24, 0x20	; 32
    3728:	19 f5       	brne	.+70     	; 0x3770 <MQTTDeserialize_connack+0x6e>
    372a:	be 01       	movw	r22, r28
    372c:	6d 5f       	subi	r22, 0xFD	; 253
    372e:	7f 4f       	sbci	r23, 0xFF	; 255
    3730:	89 81       	ldd	r24, Y+1	; 0x01
    3732:	9a 81       	ldd	r25, Y+2	; 0x02
    3734:	77 d2       	rcall	.+1262   	; 0x3c24 <MQTTPacket_decodeBuf>
    3736:	29 81       	ldd	r18, Y+1	; 0x01
    3738:	3a 81       	ldd	r19, Y+2	; 0x02
    373a:	26 0f       	add	r18, r22
    373c:	37 1f       	adc	r19, r23
    373e:	3a 83       	std	Y+2, r19	; 0x02
    3740:	29 83       	std	Y+1, r18	; 0x01
    3742:	2b 81       	ldd	r18, Y+3	; 0x03
    3744:	3c 81       	ldd	r19, Y+4	; 0x04
    3746:	22 30       	cpi	r18, 0x02	; 2
    3748:	31 05       	cpc	r19, r1
    374a:	ac f0       	brlt	.+42     	; 0x3776 <MQTTDeserialize_connack+0x74>
    374c:	ce 01       	movw	r24, r28
    374e:	01 96       	adiw	r24, 0x01	; 1
    3750:	84 d2       	rcall	.+1288   	; 0x3c5a <readChar>
    3752:	87 fb       	bst	r24, 7
    3754:	88 27       	eor	r24, r24
    3756:	80 f9       	bld	r24, 0
    3758:	f7 01       	movw	r30, r14
    375a:	80 83       	st	Z, r24
    375c:	ce 01       	movw	r24, r28
    375e:	01 96       	adiw	r24, 0x01	; 1
    3760:	7c d2       	rcall	.+1272   	; 0x3c5a <readChar>
    3762:	f8 01       	movw	r30, r16
    3764:	80 83       	st	Z, r24
    3766:	61 e0       	ldi	r22, 0x01	; 1
    3768:	70 e0       	ldi	r23, 0x00	; 0
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	03 c0       	rjmp	.+6      	; 0x3776 <MQTTDeserialize_connack+0x74>
    3770:	60 e0       	ldi	r22, 0x00	; 0
    3772:	70 e0       	ldi	r23, 0x00	; 0
    3774:	cb 01       	movw	r24, r22
    3776:	26 96       	adiw	r28, 0x06	; 6
    3778:	0f b6       	in	r0, 0x3f	; 63
    377a:	f8 94       	cli
    377c:	de bf       	out	0x3e, r29	; 62
    377e:	0f be       	out	0x3f, r0	; 63
    3780:	cd bf       	out	0x3d, r28	; 61
    3782:	df 91       	pop	r29
    3784:	cf 91       	pop	r28
    3786:	1f 91       	pop	r17
    3788:	0f 91       	pop	r16
    378a:	ff 90       	pop	r15
    378c:	ef 90       	pop	r14
    378e:	08 95       	ret

00003790 <MQTTSerialize_zero>:
    3790:	0f 93       	push	r16
    3792:	1f 93       	push	r17
    3794:	cf 93       	push	r28
    3796:	df 93       	push	r29
    3798:	1f 92       	push	r1
    379a:	1f 92       	push	r1
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    37a0:	9a 83       	std	Y+2, r25	; 0x02
    37a2:	89 83       	std	Y+1, r24	; 0x01
    37a4:	42 30       	cpi	r20, 0x02	; 2
    37a6:	51 05       	cpc	r21, r1
    37a8:	61 05       	cpc	r22, r1
    37aa:	71 05       	cpc	r23, r1
    37ac:	c4 f0       	brlt	.+48     	; 0x37de <MQTTSerialize_zero+0x4e>
    37ae:	8c 01       	movw	r16, r24
    37b0:	62 2f       	mov	r22, r18
    37b2:	62 95       	swap	r22
    37b4:	60 7f       	andi	r22, 0xF0	; 240
    37b6:	ce 01       	movw	r24, r28
    37b8:	01 96       	adiw	r24, 0x01	; 1
    37ba:	57 d2       	rcall	.+1198   	; 0x3c6a <writeChar>
    37bc:	40 e0       	ldi	r20, 0x00	; 0
    37be:	50 e0       	ldi	r21, 0x00	; 0
    37c0:	ba 01       	movw	r22, r20
    37c2:	89 81       	ldd	r24, Y+1	; 0x01
    37c4:	9a 81       	ldd	r25, Y+2	; 0x02
    37c6:	22 d1       	rcall	.+580    	; 0x3a0c <MQTTPacket_encode>
    37c8:	29 81       	ldd	r18, Y+1	; 0x01
    37ca:	3a 81       	ldd	r19, Y+2	; 0x02
    37cc:	62 0f       	add	r22, r18
    37ce:	73 1f       	adc	r23, r19
    37d0:	60 1b       	sub	r22, r16
    37d2:	71 0b       	sbc	r23, r17
    37d4:	07 2e       	mov	r0, r23
    37d6:	00 0c       	add	r0, r0
    37d8:	88 0b       	sbc	r24, r24
    37da:	99 0b       	sbc	r25, r25
    37dc:	04 c0       	rjmp	.+8      	; 0x37e6 <MQTTSerialize_zero+0x56>
    37de:	6e ef       	ldi	r22, 0xFE	; 254
    37e0:	7f ef       	ldi	r23, 0xFF	; 255
    37e2:	8f ef       	ldi	r24, 0xFF	; 255
    37e4:	9f ef       	ldi	r25, 0xFF	; 255
    37e6:	0f 90       	pop	r0
    37e8:	0f 90       	pop	r0
    37ea:	df 91       	pop	r29
    37ec:	cf 91       	pop	r28
    37ee:	1f 91       	pop	r17
    37f0:	0f 91       	pop	r16
    37f2:	08 95       	ret

000037f4 <MQTTSerialize_pingreq>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_pingreq(uint8_t* buf, int32_t buflen)
{
  return MQTTSerialize_zero(buf, buflen, PINGREQ);
    37f4:	2c e0       	ldi	r18, 0x0C	; 12
    37f6:	cc cf       	rjmp	.-104    	; 0x3790 <MQTTSerialize_zero>
    37f8:	08 95       	ret

000037fa <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int32_t MQTTDeserialize_publish(uint8_t* dup, uint8_t* qos, uint8_t* retained, uint16_t* packetid, MQTTString* topicName,
		uint8_t** payload, int32_t* payloadlen, uint8_t* buf, int32_t buflen)
{
    37fa:	2f 92       	push	r2
    37fc:	3f 92       	push	r3
    37fe:	4f 92       	push	r4
    3800:	5f 92       	push	r5
    3802:	6f 92       	push	r6
    3804:	7f 92       	push	r7
    3806:	8f 92       	push	r8
    3808:	9f 92       	push	r9
    380a:	af 92       	push	r10
    380c:	bf 92       	push	r11
    380e:	cf 92       	push	r12
    3810:	df 92       	push	r13
    3812:	ef 92       	push	r14
    3814:	ff 92       	push	r15
    3816:	0f 93       	push	r16
    3818:	1f 93       	push	r17
    381a:	cf 93       	push	r28
    381c:	df 93       	push	r29
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
    3822:	28 97       	sbiw	r28, 0x08	; 8
    3824:	0f b6       	in	r0, 0x3f	; 63
    3826:	f8 94       	cli
    3828:	de bf       	out	0x3e, r29	; 62
    382a:	0f be       	out	0x3f, r0	; 63
    382c:	cd bf       	out	0x3d, r28	; 61
    382e:	3c 01       	movw	r6, r24
    3830:	1b 01       	movw	r2, r22
    3832:	2a 01       	movw	r4, r20
    3834:	38 87       	std	Y+8, r19	; 0x08
    3836:	2f 83       	std	Y+7, r18	; 0x07
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    3838:	ba 82       	std	Y+2, r11	; 0x02
    383a:	a9 82       	std	Y+1, r10	; 0x01
  uint8_t* enddata = NULL;
  int32_t rc = 0;
  int32_t mylen = 0;
    383c:	1b 82       	std	Y+3, r1	; 0x03
    383e:	1c 82       	std	Y+4, r1	; 0x04
    3840:	1d 82       	std	Y+5, r1	; 0x05
    3842:	1e 82       	std	Y+6, r1	; 0x06

  FUNC_ENTRY;
  header.byte = readChar(&curdata);
    3844:	ce 01       	movw	r24, r28
    3846:	01 96       	adiw	r24, 0x01	; 1
    3848:	08 d2       	rcall	.+1040   	; 0x3c5a <readChar>

  if (header.bits.type != PUBLISH)
    384a:	98 2f       	mov	r25, r24
    384c:	90 7f       	andi	r25, 0xF0	; 240
    384e:	90 33       	cpi	r25, 0x30	; 48
    3850:	09 f0       	breq	.+2      	; 0x3854 <MQTTDeserialize_publish+0x5a>
    3852:	52 c0       	rjmp	.+164    	; 0x38f8 <MQTTDeserialize_publish+0xfe>
    goto exit;
	
  *dup = header.bits.dup;
    3854:	83 fb       	bst	r24, 3
    3856:	99 27       	eor	r25, r25
    3858:	90 f9       	bld	r25, 0
    385a:	f3 01       	movw	r30, r6
    385c:	90 83       	st	Z, r25
  *qos = header.bits.qos;
    385e:	98 2f       	mov	r25, r24
    3860:	96 95       	lsr	r25
    3862:	93 70       	andi	r25, 0x03	; 3
    3864:	f1 01       	movw	r30, r2
    3866:	90 83       	st	Z, r25
  *retained = header.bits.retain;
    3868:	81 70       	andi	r24, 0x01	; 1
    386a:	f2 01       	movw	r30, r4
    386c:	80 83       	st	Z, r24

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    386e:	be 01       	movw	r22, r28
    3870:	6d 5f       	subi	r22, 0xFD	; 253
    3872:	7f 4f       	sbci	r23, 0xFF	; 255
    3874:	89 81       	ldd	r24, Y+1	; 0x01
    3876:	9a 81       	ldd	r25, Y+2	; 0x02
    3878:	d5 d1       	rcall	.+938    	; 0x3c24 <MQTTPacket_decodeBuf>
    387a:	4b 01       	movw	r8, r22
    387c:	5c 01       	movw	r10, r24
    387e:	69 80       	ldd	r6, Y+1	; 0x01
    3880:	7a 80       	ldd	r7, Y+2	; 0x02
    3882:	66 0e       	add	r6, r22
    3884:	77 1e       	adc	r7, r23
    3886:	7a 82       	std	Y+2, r7	; 0x02
    3888:	69 82       	std	Y+1, r6	; 0x01
  enddata = curdata + mylen;
    388a:	8b 81       	ldd	r24, Y+3	; 0x03
    388c:	9c 81       	ldd	r25, Y+4	; 0x04
    388e:	68 0e       	add	r6, r24
    3890:	79 1e       	adc	r7, r25

  /* do we have enough data to read the protocol version byte? */
  if (!readMQTTLenString(topicName, &curdata, enddata) || enddata - curdata < 0)
    3892:	a3 01       	movw	r20, r6
    3894:	be 01       	movw	r22, r28
    3896:	6f 5f       	subi	r22, 0xFF	; 255
    3898:	7f 4f       	sbci	r23, 0xFF	; 255
    389a:	c8 01       	movw	r24, r16
    389c:	99 d2       	rcall	.+1330   	; 0x3dd0 <readMQTTLenString>
    389e:	67 2b       	or	r22, r23
    38a0:	68 2b       	or	r22, r24
    38a2:	69 2b       	or	r22, r25
    38a4:	61 f1       	breq	.+88     	; 0x38fe <MQTTDeserialize_publish+0x104>
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	9a 81       	ldd	r25, Y+2	; 0x02
    38aa:	93 01       	movw	r18, r6
    38ac:	28 1b       	sub	r18, r24
    38ae:	39 0b       	sbc	r19, r25
    38b0:	c9 01       	movw	r24, r18
    38b2:	99 23       	and	r25, r25
    38b4:	24 f1       	brlt	.+72     	; 0x38fe <MQTTDeserialize_publish+0x104>
    goto exit;

  if (*qos > 0)
    38b6:	f1 01       	movw	r30, r2
    38b8:	80 81       	ld	r24, Z
    38ba:	88 23       	and	r24, r24
    *packetid = readInt(&curdata);
    38bc:	39 f0       	breq	.+14     	; 0x38cc <MQTTDeserialize_publish+0xd2>
    38be:	ce 01       	movw	r24, r28
    38c0:	01 96       	adiw	r24, 0x01	; 1
    38c2:	b8 d1       	rcall	.+880    	; 0x3c34 <readInt>
    38c4:	ef 81       	ldd	r30, Y+7	; 0x07
    38c6:	f8 85       	ldd	r31, Y+8	; 0x08
    38c8:	71 83       	std	Z+1, r23	; 0x01
    38ca:	60 83       	st	Z, r22

  *payloadlen = enddata - curdata;
    38cc:	29 81       	ldd	r18, Y+1	; 0x01
    38ce:	3a 81       	ldd	r19, Y+2	; 0x02
    38d0:	c3 01       	movw	r24, r6
    38d2:	82 1b       	sub	r24, r18
    38d4:	93 0b       	sbc	r25, r19
    38d6:	09 2e       	mov	r0, r25
    38d8:	00 0c       	add	r0, r0
    38da:	aa 0b       	sbc	r26, r26
    38dc:	bb 0b       	sbc	r27, r27
    38de:	f6 01       	movw	r30, r12
    38e0:	80 83       	st	Z, r24
    38e2:	91 83       	std	Z+1, r25	; 0x01
    38e4:	a2 83       	std	Z+2, r26	; 0x02
    38e6:	b3 83       	std	Z+3, r27	; 0x03
  *payload = curdata;
    38e8:	f7 01       	movw	r30, r14
    38ea:	31 83       	std	Z+1, r19	; 0x01
    38ec:	20 83       	st	Z, r18
  rc = 1;
    38ee:	81 2c       	mov	r8, r1
    38f0:	91 2c       	mov	r9, r1
    38f2:	54 01       	movw	r10, r8
    38f4:	83 94       	inc	r8
    38f6:	03 c0       	rjmp	.+6      	; 0x38fe <MQTTDeserialize_publish+0x104>
		uint8_t** payload, int32_t* payloadlen, uint8_t* buf, int32_t buflen)
{
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
  uint8_t* enddata = NULL;
  int32_t rc = 0;
    38f8:	81 2c       	mov	r8, r1
    38fa:	91 2c       	mov	r9, r1
    38fc:	54 01       	movw	r10, r8
  *payload = curdata;
  rc = 1;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    38fe:	c5 01       	movw	r24, r10
    3900:	b4 01       	movw	r22, r8
    3902:	28 96       	adiw	r28, 0x08	; 8
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	f8 94       	cli
    3908:	de bf       	out	0x3e, r29	; 62
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	cd bf       	out	0x3d, r28	; 61
    390e:	df 91       	pop	r29
    3910:	cf 91       	pop	r28
    3912:	1f 91       	pop	r17
    3914:	0f 91       	pop	r16
    3916:	ff 90       	pop	r15
    3918:	ef 90       	pop	r14
    391a:	df 90       	pop	r13
    391c:	cf 90       	pop	r12
    391e:	bf 90       	pop	r11
    3920:	af 90       	pop	r10
    3922:	9f 90       	pop	r9
    3924:	8f 90       	pop	r8
    3926:	7f 90       	pop	r7
    3928:	6f 90       	pop	r6
    392a:	5f 90       	pop	r5
    392c:	4f 90       	pop	r4
    392e:	3f 90       	pop	r3
    3930:	2f 90       	pop	r2
    3932:	08 95       	ret

00003934 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int32_t MQTTDeserialize_ack(uint8_t* packettype, uint8_t* dup, uint16_t* packetid, uint8_t* buf, int32_t buflen)
{
    3934:	cf 92       	push	r12
    3936:	df 92       	push	r13
    3938:	ef 92       	push	r14
    393a:	ff 92       	push	r15
    393c:	0f 93       	push	r16
    393e:	1f 93       	push	r17
    3940:	cf 93       	push	r28
    3942:	df 93       	push	r29
    3944:	00 d0       	rcall	.+0      	; 0x3946 <MQTTDeserialize_ack+0x12>
    3946:	00 d0       	rcall	.+0      	; 0x3948 <MQTTDeserialize_ack+0x14>
    3948:	cd b7       	in	r28, 0x3d	; 61
    394a:	de b7       	in	r29, 0x3e	; 62
    394c:	7c 01       	movw	r14, r24
    394e:	6b 01       	movw	r12, r22
    3950:	8a 01       	movw	r16, r20
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    3952:	3a 83       	std	Y+2, r19	; 0x02
    3954:	29 83       	std	Y+1, r18	; 0x01
  uint8_t* enddata = NULL;
  int32_t rc = 0;
  int32_t mylen;

  FUNC_ENTRY;
  header.byte = readChar(&curdata);
    3956:	ce 01       	movw	r24, r28
    3958:	01 96       	adiw	r24, 0x01	; 1
    395a:	7f d1       	rcall	.+766    	; 0x3c5a <readChar>
  *dup = header.bits.dup;
    395c:	83 fb       	bst	r24, 3
    395e:	99 27       	eor	r25, r25
    3960:	90 f9       	bld	r25, 0
    3962:	f6 01       	movw	r30, r12
    3964:	90 83       	st	Z, r25
  *packettype = header.bits.type;
    3966:	82 95       	swap	r24
    3968:	8f 70       	andi	r24, 0x0F	; 15
    396a:	f7 01       	movw	r30, r14
    396c:	80 83       	st	Z, r24

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    396e:	be 01       	movw	r22, r28
    3970:	6d 5f       	subi	r22, 0xFD	; 253
    3972:	7f 4f       	sbci	r23, 0xFF	; 255
    3974:	89 81       	ldd	r24, Y+1	; 0x01
    3976:	9a 81       	ldd	r25, Y+2	; 0x02
    3978:	55 d1       	rcall	.+682    	; 0x3c24 <MQTTPacket_decodeBuf>
    397a:	29 81       	ldd	r18, Y+1	; 0x01
    397c:	3a 81       	ldd	r19, Y+2	; 0x02
    397e:	26 0f       	add	r18, r22
    3980:	37 1f       	adc	r19, r23
    3982:	3a 83       	std	Y+2, r19	; 0x02
    3984:	29 83       	std	Y+1, r18	; 0x01
  enddata = curdata + mylen;

  if (enddata - curdata < 2)
    3986:	2b 81       	ldd	r18, Y+3	; 0x03
    3988:	3c 81       	ldd	r19, Y+4	; 0x04
    398a:	22 30       	cpi	r18, 0x02	; 2
    398c:	31 05       	cpc	r19, r1
    398e:	54 f0       	brlt	.+20     	; 0x39a4 <MQTTDeserialize_ack+0x70>
    goto exit;
	
  *packetid = readInt(&curdata);
    3990:	ce 01       	movw	r24, r28
    3992:	01 96       	adiw	r24, 0x01	; 1
    3994:	4f d1       	rcall	.+670    	; 0x3c34 <readInt>
    3996:	f8 01       	movw	r30, r16
    3998:	71 83       	std	Z+1, r23	; 0x01
    399a:	60 83       	st	Z, r22

  rc = 1;
    399c:	61 e0       	ldi	r22, 0x01	; 1
    399e:	70 e0       	ldi	r23, 0x00	; 0
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	90 e0       	ldi	r25, 0x00	; 0
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    39a4:	26 96       	adiw	r28, 0x06	; 6
    39a6:	0f b6       	in	r0, 0x3f	; 63
    39a8:	f8 94       	cli
    39aa:	de bf       	out	0x3e, r29	; 62
    39ac:	0f be       	out	0x3f, r0	; 63
    39ae:	cd bf       	out	0x3d, r28	; 61
    39b0:	df 91       	pop	r29
    39b2:	cf 91       	pop	r28
    39b4:	1f 91       	pop	r17
    39b6:	0f 91       	pop	r16
    39b8:	ff 90       	pop	r15
    39ba:	ef 90       	pop	r14
    39bc:	df 90       	pop	r13
    39be:	cf 90       	pop	r12
    39c0:	08 95       	ret

000039c2 <bufchar>:

int32_t getLenStringLen(char* ptr)
{
  int32_t len = 256*((uint8_t)(*ptr)) + (uint8_t)(*(ptr+1));
  return len;
}
    39c2:	0f 93       	push	r16
    39c4:	1f 93       	push	r17
    39c6:	cf 93       	push	r28
    39c8:	df 93       	push	r29
    39ca:	ec 01       	movw	r28, r24
    39cc:	00 e0       	ldi	r16, 0x00	; 0
    39ce:	10 e0       	ldi	r17, 0x00	; 0
    39d0:	98 01       	movw	r18, r16
    39d2:	10 c0       	rjmp	.+32     	; 0x39f4 <bufchar+0x32>
    39d4:	e0 91 84 04 	lds	r30, 0x0484	; 0x800484 <bufptr>
    39d8:	f0 91 85 04 	lds	r31, 0x0485	; 0x800485 <bufptr+0x1>
    39dc:	df 01       	movw	r26, r30
    39de:	11 96       	adiw	r26, 0x01	; 1
    39e0:	b0 93 85 04 	sts	0x0485, r27	; 0x800485 <bufptr+0x1>
    39e4:	a0 93 84 04 	sts	0x0484, r26	; 0x800484 <bufptr>
    39e8:	90 81       	ld	r25, Z
    39ea:	98 83       	st	Y, r25
    39ec:	0f 5f       	subi	r16, 0xFF	; 255
    39ee:	1f 4f       	sbci	r17, 0xFF	; 255
    39f0:	2f 4f       	sbci	r18, 0xFF	; 255
    39f2:	3f 4f       	sbci	r19, 0xFF	; 255
    39f4:	04 17       	cp	r16, r20
    39f6:	15 07       	cpc	r17, r21
    39f8:	26 07       	cpc	r18, r22
    39fa:	37 07       	cpc	r19, r23
    39fc:	5c f3       	brlt	.-42     	; 0x39d4 <bufchar+0x12>
    39fe:	cb 01       	movw	r24, r22
    3a00:	ba 01       	movw	r22, r20
    3a02:	df 91       	pop	r29
    3a04:	cf 91       	pop	r28
    3a06:	1f 91       	pop	r17
    3a08:	0f 91       	pop	r16
    3a0a:	08 95       	ret

00003a0c <MQTTPacket_encode>:
    3a0c:	8f 92       	push	r8
    3a0e:	9f 92       	push	r9
    3a10:	af 92       	push	r10
    3a12:	bf 92       	push	r11
    3a14:	cf 92       	push	r12
    3a16:	df 92       	push	r13
    3a18:	ef 92       	push	r14
    3a1a:	ff 92       	push	r15
    3a1c:	0f 93       	push	r16
    3a1e:	1f 93       	push	r17
    3a20:	c1 2c       	mov	r12, r1
    3a22:	d1 2c       	mov	r13, r1
    3a24:	76 01       	movw	r14, r12
    3a26:	02 c0       	rjmp	.+4      	; 0x3a2c <MQTTPacket_encode+0x20>
    3a28:	75 01       	movw	r14, r10
    3a2a:	64 01       	movw	r12, r8
    3a2c:	8a 01       	movw	r16, r20
    3a2e:	9b 01       	movw	r18, r22
    3a30:	0f 77       	andi	r16, 0x7F	; 127
    3a32:	11 27       	eor	r17, r17
    3a34:	22 27       	eor	r18, r18
    3a36:	30 78       	andi	r19, 0x80	; 128
    3a38:	33 23       	and	r19, r19
    3a3a:	64 f4       	brge	.+24     	; 0x3a54 <MQTTPacket_encode+0x48>
    3a3c:	01 50       	subi	r16, 0x01	; 1
    3a3e:	11 09       	sbc	r17, r1
    3a40:	21 09       	sbc	r18, r1
    3a42:	31 09       	sbc	r19, r1
    3a44:	00 68       	ori	r16, 0x80	; 128
    3a46:	1f 6f       	ori	r17, 0xFF	; 255
    3a48:	2f 6f       	ori	r18, 0xFF	; 255
    3a4a:	3f 6f       	ori	r19, 0xFF	; 255
    3a4c:	0f 5f       	subi	r16, 0xFF	; 255
    3a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a50:	2f 4f       	sbci	r18, 0xFF	; 255
    3a52:	3f 4f       	sbci	r19, 0xFF	; 255
    3a54:	4a 01       	movw	r8, r20
    3a56:	5b 01       	movw	r10, r22
    3a58:	77 23       	and	r23, r23
    3a5a:	2c f4       	brge	.+10     	; 0x3a66 <MQTTPacket_encode+0x5a>
    3a5c:	2f e7       	ldi	r18, 0x7F	; 127
    3a5e:	82 0e       	add	r8, r18
    3a60:	91 1c       	adc	r9, r1
    3a62:	a1 1c       	adc	r10, r1
    3a64:	b1 1c       	adc	r11, r1
    3a66:	b5 01       	movw	r22, r10
    3a68:	a4 01       	movw	r20, r8
    3a6a:	68 94       	set
    3a6c:	16 f8       	bld	r1, 6
    3a6e:	75 95       	asr	r23
    3a70:	67 95       	ror	r22
    3a72:	57 95       	ror	r21
    3a74:	47 95       	ror	r20
    3a76:	16 94       	lsr	r1
    3a78:	d1 f7       	brne	.-12     	; 0x3a6e <MQTTPacket_encode+0x62>
    3a7a:	14 16       	cp	r1, r20
    3a7c:	15 06       	cpc	r1, r21
    3a7e:	16 06       	cpc	r1, r22
    3a80:	17 06       	cpc	r1, r23
    3a82:	0c f4       	brge	.+2      	; 0x3a86 <MQTTPacket_encode+0x7a>
    3a84:	00 68       	ori	r16, 0x80	; 128
    3a86:	46 01       	movw	r8, r12
    3a88:	57 01       	movw	r10, r14
    3a8a:	2f ef       	ldi	r18, 0xFF	; 255
    3a8c:	82 1a       	sub	r8, r18
    3a8e:	92 0a       	sbc	r9, r18
    3a90:	a2 0a       	sbc	r10, r18
    3a92:	b2 0a       	sbc	r11, r18
    3a94:	fc 01       	movw	r30, r24
    3a96:	ec 0d       	add	r30, r12
    3a98:	fd 1d       	adc	r31, r13
    3a9a:	00 83       	st	Z, r16
    3a9c:	14 16       	cp	r1, r20
    3a9e:	15 06       	cpc	r1, r21
    3aa0:	16 06       	cpc	r1, r22
    3aa2:	17 06       	cpc	r1, r23
    3aa4:	0c f2       	brlt	.-126    	; 0x3a28 <MQTTPacket_encode+0x1c>
    3aa6:	c5 01       	movw	r24, r10
    3aa8:	b4 01       	movw	r22, r8
    3aaa:	1f 91       	pop	r17
    3aac:	0f 91       	pop	r16
    3aae:	ff 90       	pop	r15
    3ab0:	ef 90       	pop	r14
    3ab2:	df 90       	pop	r13
    3ab4:	cf 90       	pop	r12
    3ab6:	bf 90       	pop	r11
    3ab8:	af 90       	pop	r10
    3aba:	9f 90       	pop	r9
    3abc:	8f 90       	pop	r8
    3abe:	08 95       	ret

00003ac0 <MQTTPacket_decode>:
    3ac0:	4f 92       	push	r4
    3ac2:	5f 92       	push	r5
    3ac4:	6f 92       	push	r6
    3ac6:	7f 92       	push	r7
    3ac8:	9f 92       	push	r9
    3aca:	af 92       	push	r10
    3acc:	bf 92       	push	r11
    3ace:	cf 92       	push	r12
    3ad0:	df 92       	push	r13
    3ad2:	ef 92       	push	r14
    3ad4:	ff 92       	push	r15
    3ad6:	0f 93       	push	r16
    3ad8:	1f 93       	push	r17
    3ada:	cf 93       	push	r28
    3adc:	df 93       	push	r29
    3ade:	1f 92       	push	r1
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
    3ae4:	5c 01       	movw	r10, r24
    3ae6:	8b 01       	movw	r16, r22
    3ae8:	db 01       	movw	r26, r22
    3aea:	1d 92       	st	X+, r1
    3aec:	1d 92       	st	X+, r1
    3aee:	1d 92       	st	X+, r1
    3af0:	1c 92       	st	X, r1
    3af2:	13 97       	sbiw	r26, 0x03	; 3
    3af4:	41 2c       	mov	r4, r1
    3af6:	51 2c       	mov	r5, r1
    3af8:	32 01       	movw	r6, r4
    3afa:	c1 2c       	mov	r12, r1
    3afc:	d1 2c       	mov	r13, r1
    3afe:	76 01       	movw	r14, r12
    3b00:	c3 94       	inc	r12
    3b02:	bf ef       	ldi	r27, 0xFF	; 255
    3b04:	4b 1a       	sub	r4, r27
    3b06:	5b 0a       	sbc	r5, r27
    3b08:	6b 0a       	sbc	r6, r27
    3b0a:	7b 0a       	sbc	r7, r27
    3b0c:	e5 e0       	ldi	r30, 0x05	; 5
    3b0e:	4e 16       	cp	r4, r30
    3b10:	51 04       	cpc	r5, r1
    3b12:	61 04       	cpc	r6, r1
    3b14:	71 04       	cpc	r7, r1
    3b16:	0c f0       	brlt	.+2      	; 0x3b1a <MQTTPacket_decode+0x5a>
    3b18:	44 c0       	rjmp	.+136    	; 0x3ba2 <MQTTPacket_decode+0xe2>
    3b1a:	41 e0       	ldi	r20, 0x01	; 1
    3b1c:	50 e0       	ldi	r21, 0x00	; 0
    3b1e:	60 e0       	ldi	r22, 0x00	; 0
    3b20:	70 e0       	ldi	r23, 0x00	; 0
    3b22:	ce 01       	movw	r24, r28
    3b24:	01 96       	adiw	r24, 0x01	; 1
    3b26:	f5 01       	movw	r30, r10
    3b28:	19 95       	eicall
    3b2a:	61 30       	cpi	r22, 0x01	; 1
    3b2c:	71 05       	cpc	r23, r1
    3b2e:	81 05       	cpc	r24, r1
    3b30:	91 05       	cpc	r25, r1
    3b32:	b9 f5       	brne	.+110    	; 0x3ba2 <MQTTPacket_decode+0xe2>
    3b34:	99 80       	ldd	r9, Y+1	; 0x01
    3b36:	a9 2d       	mov	r26, r9
    3b38:	af 77       	andi	r26, 0x7F	; 127
    3b3a:	b0 e0       	ldi	r27, 0x00	; 0
    3b3c:	a7 01       	movw	r20, r14
    3b3e:	96 01       	movw	r18, r12
    3b40:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <__muluhisi3>
    3b44:	d8 01       	movw	r26, r16
    3b46:	2d 91       	ld	r18, X+
    3b48:	3d 91       	ld	r19, X+
    3b4a:	4d 91       	ld	r20, X+
    3b4c:	5c 91       	ld	r21, X
    3b4e:	dc 01       	movw	r26, r24
    3b50:	cb 01       	movw	r24, r22
    3b52:	82 0f       	add	r24, r18
    3b54:	93 1f       	adc	r25, r19
    3b56:	a4 1f       	adc	r26, r20
    3b58:	b5 1f       	adc	r27, r21
    3b5a:	f8 01       	movw	r30, r16
    3b5c:	80 83       	st	Z, r24
    3b5e:	91 83       	std	Z+1, r25	; 0x01
    3b60:	a2 83       	std	Z+2, r26	; 0x02
    3b62:	b3 83       	std	Z+3, r27	; 0x03
    3b64:	cc 0c       	add	r12, r12
    3b66:	dd 1c       	adc	r13, r13
    3b68:	ee 1c       	adc	r14, r14
    3b6a:	ff 1c       	adc	r15, r15
    3b6c:	cc 0c       	add	r12, r12
    3b6e:	dd 1c       	adc	r13, r13
    3b70:	ee 1c       	adc	r14, r14
    3b72:	ff 1c       	adc	r15, r15
    3b74:	cc 0c       	add	r12, r12
    3b76:	dd 1c       	adc	r13, r13
    3b78:	ee 1c       	adc	r14, r14
    3b7a:	ff 1c       	adc	r15, r15
    3b7c:	cc 0c       	add	r12, r12
    3b7e:	dd 1c       	adc	r13, r13
    3b80:	ee 1c       	adc	r14, r14
    3b82:	ff 1c       	adc	r15, r15
    3b84:	cc 0c       	add	r12, r12
    3b86:	dd 1c       	adc	r13, r13
    3b88:	ee 1c       	adc	r14, r14
    3b8a:	ff 1c       	adc	r15, r15
    3b8c:	cc 0c       	add	r12, r12
    3b8e:	dd 1c       	adc	r13, r13
    3b90:	ee 1c       	adc	r14, r14
    3b92:	ff 1c       	adc	r15, r15
    3b94:	cc 0c       	add	r12, r12
    3b96:	dd 1c       	adc	r13, r13
    3b98:	ee 1c       	adc	r14, r14
    3b9a:	ff 1c       	adc	r15, r15
    3b9c:	99 20       	and	r9, r9
    3b9e:	0c f4       	brge	.+2      	; 0x3ba2 <MQTTPacket_decode+0xe2>
    3ba0:	b0 cf       	rjmp	.-160    	; 0x3b02 <MQTTPacket_decode+0x42>
    3ba2:	c3 01       	movw	r24, r6
    3ba4:	b2 01       	movw	r22, r4
    3ba6:	0f 90       	pop	r0
    3ba8:	df 91       	pop	r29
    3baa:	cf 91       	pop	r28
    3bac:	1f 91       	pop	r17
    3bae:	0f 91       	pop	r16
    3bb0:	ff 90       	pop	r15
    3bb2:	ef 90       	pop	r14
    3bb4:	df 90       	pop	r13
    3bb6:	cf 90       	pop	r12
    3bb8:	bf 90       	pop	r11
    3bba:	af 90       	pop	r10
    3bbc:	9f 90       	pop	r9
    3bbe:	7f 90       	pop	r7
    3bc0:	6f 90       	pop	r6
    3bc2:	5f 90       	pop	r5
    3bc4:	4f 90       	pop	r4
    3bc6:	08 95       	ret

00003bc8 <MQTTPacket_len>:
    3bc8:	0f 93       	push	r16
    3bca:	1f 93       	push	r17
    3bcc:	8b 01       	movw	r16, r22
    3bce:	9c 01       	movw	r18, r24
    3bd0:	0f 5f       	subi	r16, 0xFF	; 255
    3bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd4:	2f 4f       	sbci	r18, 0xFF	; 255
    3bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    3bd8:	00 38       	cpi	r16, 0x80	; 128
    3bda:	11 05       	cpc	r17, r1
    3bdc:	21 05       	cpc	r18, r1
    3bde:	31 05       	cpc	r19, r1
    3be0:	2c f4       	brge	.+10     	; 0x3bec <MQTTPacket_len+0x24>
    3be2:	6e 5f       	subi	r22, 0xFE	; 254
    3be4:	7f 4f       	sbci	r23, 0xFF	; 255
    3be6:	8f 4f       	sbci	r24, 0xFF	; 255
    3be8:	9f 4f       	sbci	r25, 0xFF	; 255
    3bea:	19 c0       	rjmp	.+50     	; 0x3c1e <MQTTPacket_len+0x56>
    3bec:	01 15       	cp	r16, r1
    3bee:	40 e4       	ldi	r20, 0x40	; 64
    3bf0:	14 07       	cpc	r17, r20
    3bf2:	21 05       	cpc	r18, r1
    3bf4:	31 05       	cpc	r19, r1
    3bf6:	2c f4       	brge	.+10     	; 0x3c02 <MQTTPacket_len+0x3a>
    3bf8:	6d 5f       	subi	r22, 0xFD	; 253
    3bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    3bfc:	8f 4f       	sbci	r24, 0xFF	; 255
    3bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    3c00:	0e c0       	rjmp	.+28     	; 0x3c1e <MQTTPacket_len+0x56>
    3c02:	0f 3f       	cpi	r16, 0xFF	; 255
    3c04:	1f 4f       	sbci	r17, 0xFF	; 255
    3c06:	2f 41       	sbci	r18, 0x1F	; 31
    3c08:	31 05       	cpc	r19, r1
    3c0a:	2c f4       	brge	.+10     	; 0x3c16 <MQTTPacket_len+0x4e>
    3c0c:	6c 5f       	subi	r22, 0xFC	; 252
    3c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c10:	8f 4f       	sbci	r24, 0xFF	; 255
    3c12:	9f 4f       	sbci	r25, 0xFF	; 255
    3c14:	04 c0       	rjmp	.+8      	; 0x3c1e <MQTTPacket_len+0x56>
    3c16:	6b 5f       	subi	r22, 0xFB	; 251
    3c18:	7f 4f       	sbci	r23, 0xFF	; 255
    3c1a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c1e:	1f 91       	pop	r17
    3c20:	0f 91       	pop	r16
    3c22:	08 95       	ret

00003c24 <MQTTPacket_decodeBuf>:
    3c24:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <bufptr+0x1>
    3c28:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <bufptr>
    3c2c:	81 ee       	ldi	r24, 0xE1	; 225
    3c2e:	9c e1       	ldi	r25, 0x1C	; 28
    3c30:	47 cf       	rjmp	.-370    	; 0x3ac0 <MQTTPacket_decode>
    3c32:	08 95       	ret

00003c34 <readInt>:
    3c34:	dc 01       	movw	r26, r24
    3c36:	ed 91       	ld	r30, X+
    3c38:	fc 91       	ld	r31, X
    3c3a:	11 97       	sbiw	r26, 0x01	; 1
    3c3c:	60 81       	ld	r22, Z
    3c3e:	70 e0       	ldi	r23, 0x00	; 0
    3c40:	76 2f       	mov	r23, r22
    3c42:	66 27       	eor	r22, r22
    3c44:	81 81       	ldd	r24, Z+1	; 0x01
    3c46:	68 0f       	add	r22, r24
    3c48:	71 1d       	adc	r23, r1
    3c4a:	07 2e       	mov	r0, r23
    3c4c:	00 0c       	add	r0, r0
    3c4e:	88 0b       	sbc	r24, r24
    3c50:	99 0b       	sbc	r25, r25
    3c52:	32 96       	adiw	r30, 0x02	; 2
    3c54:	ed 93       	st	X+, r30
    3c56:	fc 93       	st	X, r31
    3c58:	08 95       	ret

00003c5a <readChar>:
    3c5a:	dc 01       	movw	r26, r24
    3c5c:	ed 91       	ld	r30, X+
    3c5e:	fc 91       	ld	r31, X
    3c60:	11 97       	sbiw	r26, 0x01	; 1
    3c62:	81 91       	ld	r24, Z+
    3c64:	ed 93       	st	X+, r30
    3c66:	fc 93       	st	X, r31
    3c68:	08 95       	ret

00003c6a <writeChar>:
    3c6a:	fc 01       	movw	r30, r24
    3c6c:	a0 81       	ld	r26, Z
    3c6e:	b1 81       	ldd	r27, Z+1	; 0x01
    3c70:	6c 93       	st	X, r22
    3c72:	80 81       	ld	r24, Z
    3c74:	91 81       	ldd	r25, Z+1	; 0x01
    3c76:	01 96       	adiw	r24, 0x01	; 1
    3c78:	91 83       	std	Z+1, r25	; 0x01
    3c7a:	80 83       	st	Z, r24
    3c7c:	08 95       	ret

00003c7e <writeInt>:
    3c7e:	cf 93       	push	r28
    3c80:	df 93       	push	r29
    3c82:	fc 01       	movw	r30, r24
    3c84:	c0 81       	ld	r28, Z
    3c86:	d1 81       	ldd	r29, Z+1	; 0x01
    3c88:	db 01       	movw	r26, r22
    3c8a:	ca 01       	movw	r24, r20
    3c8c:	77 23       	and	r23, r23
    3c8e:	24 f4       	brge	.+8      	; 0x3c98 <writeInt+0x1a>
    3c90:	81 50       	subi	r24, 0x01	; 1
    3c92:	9f 4f       	sbci	r25, 0xFF	; 255
    3c94:	af 4f       	sbci	r26, 0xFF	; 255
    3c96:	bf 4f       	sbci	r27, 0xFF	; 255
    3c98:	98 83       	st	Y, r25
    3c9a:	a0 81       	ld	r26, Z
    3c9c:	b1 81       	ldd	r27, Z+1	; 0x01
    3c9e:	cd 01       	movw	r24, r26
    3ca0:	01 96       	adiw	r24, 0x01	; 1
    3ca2:	91 83       	std	Z+1, r25	; 0x01
    3ca4:	80 83       	st	Z, r24
    3ca6:	55 27       	eor	r21, r21
    3ca8:	66 27       	eor	r22, r22
    3caa:	70 78       	andi	r23, 0x80	; 128
    3cac:	77 23       	and	r23, r23
    3cae:	5c f4       	brge	.+22     	; 0x3cc6 <writeInt+0x48>
    3cb0:	41 50       	subi	r20, 0x01	; 1
    3cb2:	51 09       	sbc	r21, r1
    3cb4:	61 09       	sbc	r22, r1
    3cb6:	71 09       	sbc	r23, r1
    3cb8:	5f 6f       	ori	r21, 0xFF	; 255
    3cba:	6f 6f       	ori	r22, 0xFF	; 255
    3cbc:	7f 6f       	ori	r23, 0xFF	; 255
    3cbe:	4f 5f       	subi	r20, 0xFF	; 255
    3cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    3cc2:	6f 4f       	sbci	r22, 0xFF	; 255
    3cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc6:	11 96       	adiw	r26, 0x01	; 1
    3cc8:	4c 93       	st	X, r20
    3cca:	80 81       	ld	r24, Z
    3ccc:	91 81       	ldd	r25, Z+1	; 0x01
    3cce:	01 96       	adiw	r24, 0x01	; 1
    3cd0:	91 83       	std	Z+1, r25	; 0x01
    3cd2:	80 83       	st	Z, r24
    3cd4:	df 91       	pop	r29
    3cd6:	cf 91       	pop	r28
    3cd8:	08 95       	ret

00003cda <writeCString>:
    3cda:	ef 92       	push	r14
    3cdc:	ff 92       	push	r15
    3cde:	0f 93       	push	r16
    3ce0:	1f 93       	push	r17
    3ce2:	cf 93       	push	r28
    3ce4:	df 93       	push	r29
    3ce6:	8c 01       	movw	r16, r24
    3ce8:	7b 01       	movw	r14, r22
    3cea:	eb 01       	movw	r28, r22
    3cec:	09 90       	ld	r0, Y+
    3cee:	00 20       	and	r0, r0
    3cf0:	e9 f7       	brne	.-6      	; 0x3cec <writeCString+0x12>
    3cf2:	21 97       	sbiw	r28, 0x01	; 1
    3cf4:	c6 1b       	sub	r28, r22
    3cf6:	d7 0b       	sbc	r29, r23
    3cf8:	ae 01       	movw	r20, r28
    3cfa:	60 e0       	ldi	r22, 0x00	; 0
    3cfc:	70 e0       	ldi	r23, 0x00	; 0
    3cfe:	bf df       	rcall	.-130    	; 0x3c7e <writeInt>
    3d00:	ae 01       	movw	r20, r28
    3d02:	b7 01       	movw	r22, r14
    3d04:	f8 01       	movw	r30, r16
    3d06:	80 81       	ld	r24, Z
    3d08:	91 81       	ldd	r25, Z+1	; 0x01
    3d0a:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <memcpy>
    3d0e:	f8 01       	movw	r30, r16
    3d10:	80 81       	ld	r24, Z
    3d12:	91 81       	ldd	r25, Z+1	; 0x01
    3d14:	c8 0f       	add	r28, r24
    3d16:	d9 1f       	adc	r29, r25
    3d18:	d1 83       	std	Z+1, r29	; 0x01
    3d1a:	c0 83       	st	Z, r28
    3d1c:	df 91       	pop	r29
    3d1e:	cf 91       	pop	r28
    3d20:	1f 91       	pop	r17
    3d22:	0f 91       	pop	r16
    3d24:	ff 90       	pop	r15
    3d26:	ef 90       	pop	r14
    3d28:	08 95       	ret

00003d2a <writeMQTTString>:


void writeMQTTString(uint8_t** pptr, MQTTString mqttstring)
{
    3d2a:	af 92       	push	r10
    3d2c:	bf 92       	push	r11
    3d2e:	cf 92       	push	r12
    3d30:	df 92       	push	r13
    3d32:	ef 92       	push	r14
    3d34:	ff 92       	push	r15
    3d36:	0f 93       	push	r16
    3d38:	1f 93       	push	r17
    3d3a:	cf 93       	push	r28
    3d3c:	df 93       	push	r29
    3d3e:	cd b7       	in	r28, 0x3d	; 61
    3d40:	de b7       	in	r29, 0x3e	; 62
    3d42:	28 97       	sbiw	r28, 0x08	; 8
    3d44:	0f b6       	in	r0, 0x3f	; 63
    3d46:	f8 94       	cli
    3d48:	de bf       	out	0x3e, r29	; 62
    3d4a:	0f be       	out	0x3f, r0	; 63
    3d4c:	cd bf       	out	0x3d, r28	; 61
    3d4e:	5c 01       	movw	r10, r24
    3d50:	09 83       	std	Y+1, r16	; 0x01
    3d52:	1a 83       	std	Y+2, r17	; 0x02
    3d54:	2b 83       	std	Y+3, r18	; 0x03
    3d56:	3c 83       	std	Y+4, r19	; 0x04
    3d58:	4d 83       	std	Y+5, r20	; 0x05
    3d5a:	5e 83       	std	Y+6, r21	; 0x06
    3d5c:	6f 83       	std	Y+7, r22	; 0x07
    3d5e:	78 87       	std	Y+8, r23	; 0x08
  if (mqttstring.lenstring.len > 0)
    3d60:	cb 80       	ldd	r12, Y+3	; 0x03
    3d62:	dc 80       	ldd	r13, Y+4	; 0x04
    3d64:	ed 80       	ldd	r14, Y+5	; 0x05
    3d66:	fe 80       	ldd	r15, Y+6	; 0x06
    3d68:	1c 14       	cp	r1, r12
    3d6a:	1d 04       	cpc	r1, r13
    3d6c:	1e 04       	cpc	r1, r14
    3d6e:	1f 04       	cpc	r1, r15
    3d70:	9c f4       	brge	.+38     	; 0x3d98 <writeMQTTString+0x6e>
  {
    writeInt(pptr, mqttstring.lenstring.len);
    3d72:	b7 01       	movw	r22, r14
    3d74:	a6 01       	movw	r20, r12
    3d76:	83 df       	rcall	.-250    	; 0x3c7e <writeInt>
    memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
    3d78:	6f 81       	ldd	r22, Y+7	; 0x07
    3d7a:	78 85       	ldd	r23, Y+8	; 0x08
    3d7c:	a6 01       	movw	r20, r12
    3d7e:	f5 01       	movw	r30, r10
    3d80:	80 81       	ld	r24, Z
    3d82:	91 81       	ldd	r25, Z+1	; 0x01
    3d84:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <memcpy>
    *pptr += mqttstring.lenstring.len;
    3d88:	f5 01       	movw	r30, r10
    3d8a:	80 81       	ld	r24, Z
    3d8c:	91 81       	ldd	r25, Z+1	; 0x01
    3d8e:	c8 0e       	add	r12, r24
    3d90:	d9 1e       	adc	r13, r25
    3d92:	d1 82       	std	Z+1, r13	; 0x01
    3d94:	c0 82       	st	Z, r12
    3d96:	0b c0       	rjmp	.+22     	; 0x3dae <writeMQTTString+0x84>
  }
  else if (mqttstring.cstring)
    3d98:	69 81       	ldd	r22, Y+1	; 0x01
    3d9a:	7a 81       	ldd	r23, Y+2	; 0x02
    3d9c:	61 15       	cp	r22, r1
    3d9e:	71 05       	cpc	r23, r1
    writeCString(pptr, mqttstring.cstring);
    3da0:	11 f0       	breq	.+4      	; 0x3da6 <writeMQTTString+0x7c>
    3da2:	9b df       	rcall	.-202    	; 0x3cda <writeCString>
    3da4:	04 c0       	rjmp	.+8      	; 0x3dae <writeMQTTString+0x84>
  else
    writeInt(pptr, 0);
    3da6:	40 e0       	ldi	r20, 0x00	; 0
    3da8:	50 e0       	ldi	r21, 0x00	; 0
    3daa:	ba 01       	movw	r22, r20
    3dac:	68 df       	rcall	.-304    	; 0x3c7e <writeInt>
}
    3dae:	28 96       	adiw	r28, 0x08	; 8
    3db0:	0f b6       	in	r0, 0x3f	; 63
    3db2:	f8 94       	cli
    3db4:	de bf       	out	0x3e, r29	; 62
    3db6:	0f be       	out	0x3f, r0	; 63
    3db8:	cd bf       	out	0x3d, r28	; 61
    3dba:	df 91       	pop	r29
    3dbc:	cf 91       	pop	r28
    3dbe:	1f 91       	pop	r17
    3dc0:	0f 91       	pop	r16
    3dc2:	ff 90       	pop	r15
    3dc4:	ef 90       	pop	r14
    3dc6:	df 90       	pop	r13
    3dc8:	cf 90       	pop	r12
    3dca:	bf 90       	pop	r11
    3dcc:	af 90       	pop	r10
    3dce:	08 95       	ret

00003dd0 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int32_t readMQTTLenString(MQTTString* mqttstring, uint8_t** pptr, uint8_t* enddata)
{
    3dd0:	ef 92       	push	r14
    3dd2:	ff 92       	push	r15
    3dd4:	0f 93       	push	r16
    3dd6:	1f 93       	push	r17
    3dd8:	cf 93       	push	r28
    3dda:	df 93       	push	r29
    3ddc:	8c 01       	movw	r16, r24
    3dde:	eb 01       	movw	r28, r22
    3de0:	7a 01       	movw	r14, r20
  int32_t rc = 0;

  FUNC_ENTRY;

  /* the first two bytes are the length of the string */
  if (enddata - (*pptr) > 1) /* enough length to read the integer? */
    3de2:	88 81       	ld	r24, Y
    3de4:	99 81       	ldd	r25, Y+1	; 0x01
    3de6:	9a 01       	movw	r18, r20
    3de8:	28 1b       	sub	r18, r24
    3dea:	39 0b       	sbc	r19, r25
    3dec:	22 30       	cpi	r18, 0x02	; 2
    3dee:	31 05       	cpc	r19, r1
    3df0:	e4 f0       	brlt	.+56     	; 0x3e2a <readMQTTLenString+0x5a>
  {
    mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
    3df2:	cb 01       	movw	r24, r22
    3df4:	1f df       	rcall	.-450    	; 0x3c34 <readInt>
    3df6:	f8 01       	movw	r30, r16
    3df8:	62 83       	std	Z+2, r22	; 0x02
    3dfa:	73 83       	std	Z+3, r23	; 0x03
    3dfc:	84 83       	std	Z+4, r24	; 0x04
    3dfe:	95 83       	std	Z+5, r25	; 0x05
	
    if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
    3e00:	28 81       	ld	r18, Y
    3e02:	39 81       	ldd	r19, Y+1	; 0x01
    3e04:	a9 01       	movw	r20, r18
    3e06:	46 0f       	add	r20, r22
    3e08:	57 1f       	adc	r21, r23
    3e0a:	e4 16       	cp	r14, r20
    3e0c:	f5 06       	cpc	r15, r21
    3e0e:	88 f0       	brcs	.+34     	; 0x3e32 <readMQTTLenString+0x62>
    {
      mqttstring->lenstring.data = (char*)*pptr;
    3e10:	37 83       	std	Z+7, r19	; 0x07
    3e12:	26 83       	std	Z+6, r18	; 0x06
      *pptr += mqttstring->lenstring.len;
    3e14:	28 81       	ld	r18, Y
    3e16:	39 81       	ldd	r19, Y+1	; 0x01
    3e18:	62 0f       	add	r22, r18
    3e1a:	73 1f       	adc	r23, r19
    3e1c:	79 83       	std	Y+1, r23	; 0x01
    3e1e:	68 83       	st	Y, r22
      rc = 1;
    3e20:	61 e0       	ldi	r22, 0x01	; 1
    3e22:	70 e0       	ldi	r23, 0x00	; 0
    3e24:	80 e0       	ldi	r24, 0x00	; 0
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	07 c0       	rjmp	.+14     	; 0x3e38 <readMQTTLenString+0x68>
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int32_t readMQTTLenString(MQTTString* mqttstring, uint8_t** pptr, uint8_t* enddata)
{
  int32_t rc = 0;
    3e2a:	60 e0       	ldi	r22, 0x00	; 0
    3e2c:	70 e0       	ldi	r23, 0x00	; 0
    3e2e:	cb 01       	movw	r24, r22
    3e30:	03 c0       	rjmp	.+6      	; 0x3e38 <readMQTTLenString+0x68>
    3e32:	60 e0       	ldi	r22, 0x00	; 0
    3e34:	70 e0       	ldi	r23, 0x00	; 0
    3e36:	cb 01       	movw	r24, r22
      *pptr += mqttstring->lenstring.len;
      rc = 1;
    }
  }

  mqttstring->cstring = NULL;
    3e38:	f8 01       	movw	r30, r16
    3e3a:	11 82       	std	Z+1, r1	; 0x01
    3e3c:	10 82       	st	Z, r1
  FUNC_EXIT_RC(rc);
  return rc;
}
    3e3e:	df 91       	pop	r29
    3e40:	cf 91       	pop	r28
    3e42:	1f 91       	pop	r17
    3e44:	0f 91       	pop	r16
    3e46:	ff 90       	pop	r15
    3e48:	ef 90       	pop	r14
    3e4a:	08 95       	ret

00003e4c <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int32_t MQTTstrlen(MQTTString mqttstring)
{
    3e4c:	cf 93       	push	r28
    3e4e:	df 93       	push	r29
    3e50:	cd b7       	in	r28, 0x3d	; 61
    3e52:	de b7       	in	r29, 0x3e	; 62
    3e54:	28 97       	sbiw	r28, 0x08	; 8
    3e56:	0f b6       	in	r0, 0x3f	; 63
    3e58:	f8 94       	cli
    3e5a:	de bf       	out	0x3e, r29	; 62
    3e5c:	0f be       	out	0x3f, r0	; 63
    3e5e:	cd bf       	out	0x3d, r28	; 61
    3e60:	29 83       	std	Y+1, r18	; 0x01
    3e62:	3a 83       	std	Y+2, r19	; 0x02
    3e64:	4b 83       	std	Y+3, r20	; 0x03
    3e66:	5c 83       	std	Y+4, r21	; 0x04
    3e68:	6d 83       	std	Y+5, r22	; 0x05
    3e6a:	7e 83       	std	Y+6, r23	; 0x06
    3e6c:	8f 83       	std	Y+7, r24	; 0x07
    3e6e:	98 87       	std	Y+8, r25	; 0x08
  int rc = 0;

  if (mqttstring.cstring)
    3e70:	e9 81       	ldd	r30, Y+1	; 0x01
    3e72:	fa 81       	ldd	r31, Y+2	; 0x02
    3e74:	30 97       	sbiw	r30, 0x00	; 0
    3e76:	49 f0       	breq	.+18     	; 0x3e8a <MQTTstrlen+0x3e>
    rc = strlen(mqttstring.cstring);
    3e78:	df 01       	movw	r26, r30
    3e7a:	0d 90       	ld	r0, X+
    3e7c:	00 20       	and	r0, r0
    3e7e:	e9 f7       	brne	.-6      	; 0x3e7a <MQTTstrlen+0x2e>
    3e80:	11 97       	sbiw	r26, 0x01	; 1
    3e82:	bd 01       	movw	r22, r26
    3e84:	6e 1b       	sub	r22, r30
    3e86:	7f 0b       	sbc	r23, r31
    3e88:	02 c0       	rjmp	.+4      	; 0x3e8e <MQTTstrlen+0x42>
  else
    rc = mqttstring.lenstring.len;
    3e8a:	6b 81       	ldd	r22, Y+3	; 0x03
    3e8c:	7c 81       	ldd	r23, Y+4	; 0x04
	
  return rc;
    3e8e:	07 2e       	mov	r0, r23
    3e90:	00 0c       	add	r0, r0
    3e92:	88 0b       	sbc	r24, r24
    3e94:	99 0b       	sbc	r25, r25
}
    3e96:	28 96       	adiw	r28, 0x08	; 8
    3e98:	0f b6       	in	r0, 0x3f	; 63
    3e9a:	f8 94       	cli
    3e9c:	de bf       	out	0x3e, r29	; 62
    3e9e:	0f be       	out	0x3f, r0	; 63
    3ea0:	cd bf       	out	0x3d, r28	; 61
    3ea2:	df 91       	pop	r29
    3ea4:	cf 91       	pop	r28
    3ea6:	08 95       	ret

00003ea8 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int32_t MQTTPacket_equals(MQTTString* a, char* bptr)
{
    3ea8:	0f 93       	push	r16
    3eaa:	1f 93       	push	r17
    3eac:	cf 93       	push	r28
    3eae:	df 93       	push	r29
    3eb0:	eb 01       	movw	r28, r22
  int32_t alen = 0, blen = 0;
  char *aptr;
	
  if (a->cstring)
    3eb2:	fc 01       	movw	r30, r24
    3eb4:	a0 81       	ld	r26, Z
    3eb6:	b1 81       	ldd	r27, Z+1	; 0x01
    3eb8:	10 97       	sbiw	r26, 0x00	; 0
    3eba:	59 f0       	breq	.+22     	; 0x3ed2 <MQTTPacket_equals+0x2a>
  {
    aptr = a->cstring;
    alen = strlen(a->cstring);
    3ebc:	fd 01       	movw	r30, r26
    3ebe:	01 90       	ld	r0, Z+
    3ec0:	00 20       	and	r0, r0
    3ec2:	e9 f7       	brne	.-6      	; 0x3ebe <MQTTPacket_equals+0x16>
    3ec4:	31 97       	sbiw	r30, 0x01	; 1
    3ec6:	af 01       	movw	r20, r30
    3ec8:	4a 1b       	sub	r20, r26
    3eca:	5b 0b       	sbc	r21, r27
    3ecc:	60 e0       	ldi	r22, 0x00	; 0
    3ece:	70 e0       	ldi	r23, 0x00	; 0
    3ed0:	07 c0       	rjmp	.+14     	; 0x3ee0 <MQTTPacket_equals+0x38>
  }
  else
  {
    aptr = a->lenstring.data;
    3ed2:	fc 01       	movw	r30, r24
    3ed4:	a6 81       	ldd	r26, Z+6	; 0x06
    3ed6:	b7 81       	ldd	r27, Z+7	; 0x07
    alen = a->lenstring.len;
    3ed8:	42 81       	ldd	r20, Z+2	; 0x02
    3eda:	53 81       	ldd	r21, Z+3	; 0x03
    3edc:	64 81       	ldd	r22, Z+4	; 0x04
    3ede:	75 81       	ldd	r23, Z+5	; 0x05
  }

  blen = strlen(bptr);
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	01 90       	ld	r0, Z+
    3ee4:	00 20       	and	r0, r0
    3ee6:	e9 f7       	brne	.-6      	; 0x3ee2 <MQTTPacket_equals+0x3a>
    3ee8:	31 97       	sbiw	r30, 0x01	; 1
    3eea:	8f 01       	movw	r16, r30
    3eec:	0c 1b       	sub	r16, r28
    3eee:	1d 0b       	sbc	r17, r29
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
	
  return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    3ef4:	40 17       	cp	r20, r16
    3ef6:	51 07       	cpc	r21, r17
    3ef8:	62 07       	cpc	r22, r18
    3efa:	73 07       	cpc	r23, r19
    3efc:	49 f4       	brne	.+18     	; 0x3f10 <MQTTPacket_equals+0x68>
    3efe:	be 01       	movw	r22, r28
    3f00:	cd 01       	movw	r24, r26
    3f02:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <strncmp>
    3f06:	89 2b       	or	r24, r25
    3f08:	31 f0       	breq	.+12     	; 0x3f16 <MQTTPacket_equals+0x6e>
    3f0a:	60 e0       	ldi	r22, 0x00	; 0
    3f0c:	70 e0       	ldi	r23, 0x00	; 0
    3f0e:	05 c0       	rjmp	.+10     	; 0x3f1a <MQTTPacket_equals+0x72>
    3f10:	60 e0       	ldi	r22, 0x00	; 0
    3f12:	70 e0       	ldi	r23, 0x00	; 0
    3f14:	02 c0       	rjmp	.+4      	; 0x3f1a <MQTTPacket_equals+0x72>
    3f16:	61 e0       	ldi	r22, 0x01	; 1
    3f18:	70 e0       	ldi	r23, 0x00	; 0
    3f1a:	07 2e       	mov	r0, r23
    3f1c:	00 0c       	add	r0, r0
    3f1e:	88 0b       	sbc	r24, r24
    3f20:	99 0b       	sbc	r25, r25
}
    3f22:	df 91       	pop	r29
    3f24:	cf 91       	pop	r28
    3f26:	1f 91       	pop	r17
    3f28:	0f 91       	pop	r16
    3f2a:	08 95       	ret

00003f2c <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_publishLength(uint8_t qos, MQTTString topicName, int32_t payloadlen)
{
    3f2c:	bf 92       	push	r11
    3f2e:	cf 92       	push	r12
    3f30:	df 92       	push	r13
    3f32:	ef 92       	push	r14
    3f34:	ff 92       	push	r15
    3f36:	0f 93       	push	r16
    3f38:	1f 93       	push	r17
    3f3a:	cf 93       	push	r28
    3f3c:	df 93       	push	r29
    3f3e:	cd b7       	in	r28, 0x3d	; 61
    3f40:	de b7       	in	r29, 0x3e	; 62
    3f42:	28 97       	sbiw	r28, 0x08	; 8
    3f44:	0f b6       	in	r0, 0x3f	; 63
    3f46:	f8 94       	cli
    3f48:	de bf       	out	0x3e, r29	; 62
    3f4a:	0f be       	out	0x3f, r0	; 63
    3f4c:	cd bf       	out	0x3d, r28	; 61
    3f4e:	b8 2e       	mov	r11, r24
    3f50:	b2 2f       	mov	r27, r18
    3f52:	a3 2f       	mov	r26, r19
    3f54:	f4 2f       	mov	r31, r20
    3f56:	e5 2f       	mov	r30, r21
    3f58:	86 2f       	mov	r24, r22
    3f5a:	97 2f       	mov	r25, r23
  int32_t len = 2 + MQTTstrlen(topicName) + payloadlen;
    3f5c:	20 2f       	mov	r18, r16
    3f5e:	31 2f       	mov	r19, r17
    3f60:	4b 2f       	mov	r20, r27
    3f62:	5a 2f       	mov	r21, r26
    3f64:	6f 2f       	mov	r22, r31
    3f66:	7e 2f       	mov	r23, r30
    3f68:	71 df       	rcall	.-286    	; 0x3e4c <MQTTstrlen>
    3f6a:	dc 01       	movw	r26, r24
    3f6c:	cb 01       	movw	r24, r22
    3f6e:	02 96       	adiw	r24, 0x02	; 2
    3f70:	a1 1d       	adc	r26, r1
    3f72:	b1 1d       	adc	r27, r1
    3f74:	bc 01       	movw	r22, r24
    3f76:	cd 01       	movw	r24, r26
    3f78:	6c 0d       	add	r22, r12
    3f7a:	7d 1d       	adc	r23, r13
    3f7c:	8e 1d       	adc	r24, r14
    3f7e:	9f 1d       	adc	r25, r15
  
  if (qos > 0)
    3f80:	bb 20       	and	r11, r11
    3f82:	21 f0       	breq	.+8      	; 0x3f8c <MQTTSerialize_publishLength+0x60>
    len += 2; /* packetid */
    3f84:	6e 5f       	subi	r22, 0xFE	; 254
    3f86:	7f 4f       	sbci	r23, 0xFF	; 255
    3f88:	8f 4f       	sbci	r24, 0xFF	; 255
    3f8a:	9f 4f       	sbci	r25, 0xFF	; 255
	
  return len;
}
    3f8c:	28 96       	adiw	r28, 0x08	; 8
    3f8e:	0f b6       	in	r0, 0x3f	; 63
    3f90:	f8 94       	cli
    3f92:	de bf       	out	0x3e, r29	; 62
    3f94:	0f be       	out	0x3f, r0	; 63
    3f96:	cd bf       	out	0x3d, r28	; 61
    3f98:	df 91       	pop	r29
    3f9a:	cf 91       	pop	r28
    3f9c:	1f 91       	pop	r17
    3f9e:	0f 91       	pop	r16
    3fa0:	ff 90       	pop	r15
    3fa2:	ef 90       	pop	r14
    3fa4:	df 90       	pop	r13
    3fa6:	cf 90       	pop	r12
    3fa8:	bf 90       	pop	r11
    3faa:	08 95       	ret

00003fac <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int32_t MQTTSerialize_publish(uint8_t* buf, int32_t buflen, uint8_t dup, uint8_t qos, uint8_t retained, uint16_t packetid,
		MQTTString topicName, uint8_t* payload, int32_t payloadlen)
{
    3fac:	3f 92       	push	r3
    3fae:	4f 92       	push	r4
    3fb0:	5f 92       	push	r5
    3fb2:	6f 92       	push	r6
    3fb4:	7f 92       	push	r7
    3fb6:	8f 92       	push	r8
    3fb8:	9f 92       	push	r9
    3fba:	af 92       	push	r10
    3fbc:	bf 92       	push	r11
    3fbe:	cf 92       	push	r12
    3fc0:	df 92       	push	r13
    3fc2:	ef 92       	push	r14
    3fc4:	ff 92       	push	r15
    3fc6:	0f 93       	push	r16
    3fc8:	1f 93       	push	r17
    3fca:	cf 93       	push	r28
    3fcc:	df 93       	push	r29
    3fce:	00 d0       	rcall	.+0      	; 0x3fd0 <MQTTSerialize_publish+0x24>
    3fd0:	1f 92       	push	r1
    3fd2:	cd b7       	in	r28, 0x3d	; 61
    3fd4:	de b7       	in	r29, 0x3e	; 62
    3fd6:	4c 01       	movw	r8, r24
    3fd8:	2a 01       	movw	r4, r20
    3fda:	3b 01       	movw	r6, r22
    3fdc:	32 2e       	mov	r3, r18
    3fde:	b0 2e       	mov	r11, r16
    3fe0:	ae 2c       	mov	r10, r14
    3fe2:	dc 82       	std	Y+4, r13	; 0x04
    3fe4:	cb 82       	std	Y+3, r12	; 0x03
  uint8_t *ptr = buf;
    3fe6:	9a 83       	std	Y+2, r25	; 0x02
    3fe8:	89 83       	std	Y+1, r24	; 0x01
  int32_t rem_len = 0;
  int32_t rc = 0;

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    3fea:	cb a0       	ldd	r12, Y+35	; 0x23
    3fec:	dc a0       	ldd	r13, Y+36	; 0x24
    3fee:	ed a0       	ldd	r14, Y+37	; 0x25
    3ff0:	fe a0       	ldd	r15, Y+38	; 0x26
    3ff2:	09 8d       	ldd	r16, Y+25	; 0x19
    3ff4:	1a 8d       	ldd	r17, Y+26	; 0x1a
    3ff6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3ff8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3ffa:	4d 8d       	ldd	r20, Y+29	; 0x1d
    3ffc:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3ffe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4000:	78 a1       	ldd	r23, Y+32	; 0x20
    4002:	8b 2d       	mov	r24, r11
    4004:	93 df       	rcall	.-218    	; 0x3f2c <MQTTSerialize_publishLength>
    4006:	6b 01       	movw	r12, r22
    4008:	7c 01       	movw	r14, r24
    400a:	de dd       	rcall	.-1092   	; 0x3bc8 <MQTTPacket_len>
    400c:	46 16       	cp	r4, r22
    400e:	57 06       	cpc	r5, r23
    4010:	68 06       	cpc	r6, r24
    4012:	79 06       	cpc	r7, r25
    4014:	0c f4       	brge	.+2      	; 0x4018 <MQTTSerialize_publish+0x6c>
    4016:	42 c0       	rjmp	.+132    	; 0x409c <MQTTSerialize_publish+0xf0>
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.bits.type = PUBLISH;
    4018:	60 e3       	ldi	r22, 0x30	; 48
  header.bits.dup = dup;
    401a:	30 fa       	bst	r3, 0
    401c:	63 f9       	bld	r22, 3
  header.bits.qos = qos;
    401e:	8b 2d       	mov	r24, r11
    4020:	83 70       	andi	r24, 0x03	; 3
    4022:	88 0f       	add	r24, r24
    4024:	69 7f       	andi	r22, 0xF9	; 249
    4026:	68 2b       	or	r22, r24
  header.bits.retain = retained;
    4028:	a0 fa       	bst	r10, 0
    402a:	60 f9       	bld	r22, 0
  writeChar(&ptr, header.byte); /* write header */
    402c:	ce 01       	movw	r24, r28
    402e:	01 96       	adiw	r24, 0x01	; 1
    4030:	1c de       	rcall	.-968    	; 0x3c6a <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    4032:	b7 01       	movw	r22, r14
    4034:	a6 01       	movw	r20, r12
    4036:	89 81       	ldd	r24, Y+1	; 0x01
    4038:	9a 81       	ldd	r25, Y+2	; 0x02
    403a:	e8 dc       	rcall	.-1584   	; 0x3a0c <MQTTPacket_encode>
    403c:	29 81       	ldd	r18, Y+1	; 0x01
    403e:	3a 81       	ldd	r19, Y+2	; 0x02
    4040:	62 0f       	add	r22, r18
    4042:	73 1f       	adc	r23, r19
    4044:	7a 83       	std	Y+2, r23	; 0x02
    4046:	69 83       	std	Y+1, r22	; 0x01

  writeMQTTString(&ptr, topicName);
    4048:	09 8d       	ldd	r16, Y+25	; 0x19
    404a:	1a 8d       	ldd	r17, Y+26	; 0x1a
    404c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    404e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4050:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4052:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4054:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4056:	78 a1       	ldd	r23, Y+32	; 0x20
    4058:	ce 01       	movw	r24, r28
    405a:	01 96       	adiw	r24, 0x01	; 1
    405c:	66 de       	rcall	.-820    	; 0x3d2a <writeMQTTString>

  if (qos > 0)
    405e:	bb 20       	and	r11, r11
    4060:	41 f0       	breq	.+16     	; 0x4072 <MQTTSerialize_publish+0xc6>
    writeInt(&ptr, packetid);
    4062:	8b 81       	ldd	r24, Y+3	; 0x03
    4064:	9c 81       	ldd	r25, Y+4	; 0x04
    4066:	ac 01       	movw	r20, r24
    4068:	60 e0       	ldi	r22, 0x00	; 0
    406a:	70 e0       	ldi	r23, 0x00	; 0
    406c:	ce 01       	movw	r24, r28
    406e:	01 96       	adiw	r24, 0x01	; 1
    4070:	06 de       	rcall	.-1012   	; 0x3c7e <writeInt>

  memcpy(ptr, payload, payloadlen);
    4072:	4b a1       	ldd	r20, Y+35	; 0x23
    4074:	5c a1       	ldd	r21, Y+36	; 0x24
    4076:	69 a1       	ldd	r22, Y+33	; 0x21
    4078:	7a a1       	ldd	r23, Y+34	; 0x22
    407a:	89 81       	ldd	r24, Y+1	; 0x01
    407c:	9a 81       	ldd	r25, Y+2	; 0x02
    407e:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <memcpy>
  ptr += payloadlen;
    4082:	69 81       	ldd	r22, Y+1	; 0x01
    4084:	7a 81       	ldd	r23, Y+2	; 0x02
    4086:	8b a1       	ldd	r24, Y+35	; 0x23
    4088:	9c a1       	ldd	r25, Y+36	; 0x24
    408a:	68 0f       	add	r22, r24
    408c:	79 1f       	adc	r23, r25

  rc = ptr - buf;
    408e:	68 19       	sub	r22, r8
    4090:	79 09       	sbc	r23, r9
    4092:	07 2e       	mov	r0, r23
    4094:	00 0c       	add	r0, r0
    4096:	88 0b       	sbc	r24, r24
    4098:	99 0b       	sbc	r25, r25
    409a:	04 c0       	rjmp	.+8      	; 0x40a4 <MQTTSerialize_publish+0xf8>

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    409c:	6e ef       	ldi	r22, 0xFE	; 254
    409e:	7f ef       	ldi	r23, 0xFF	; 255
    40a0:	8f ef       	ldi	r24, 0xFF	; 255
    40a2:	9f ef       	ldi	r25, 0xFF	; 255

  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    40a4:	0f 90       	pop	r0
    40a6:	0f 90       	pop	r0
    40a8:	0f 90       	pop	r0
    40aa:	0f 90       	pop	r0
    40ac:	df 91       	pop	r29
    40ae:	cf 91       	pop	r28
    40b0:	1f 91       	pop	r17
    40b2:	0f 91       	pop	r16
    40b4:	ff 90       	pop	r15
    40b6:	ef 90       	pop	r14
    40b8:	df 90       	pop	r13
    40ba:	cf 90       	pop	r12
    40bc:	bf 90       	pop	r11
    40be:	af 90       	pop	r10
    40c0:	9f 90       	pop	r9
    40c2:	8f 90       	pop	r8
    40c4:	7f 90       	pop	r7
    40c6:	6f 90       	pop	r6
    40c8:	5f 90       	pop	r5
    40ca:	4f 90       	pop	r4
    40cc:	3f 90       	pop	r3
    40ce:	08 95       	ret

000040d0 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_ack(uint8_t* buf, int32_t buflen, uint8_t packettype, uint8_t dup, uint16_t packetid)
{
    40d0:	ef 92       	push	r14
    40d2:	ff 92       	push	r15
    40d4:	0f 93       	push	r16
    40d6:	1f 93       	push	r17
    40d8:	cf 93       	push	r28
    40da:	df 93       	push	r29
    40dc:	1f 92       	push	r1
    40de:	1f 92       	push	r1
    40e0:	cd b7       	in	r28, 0x3d	; 61
    40e2:	de b7       	in	r29, 0x3e	; 62
    40e4:	fc 01       	movw	r30, r24
  MQTTHeader header = {0};
  int32_t rc = 0;
  uint8_t *ptr = buf;
    40e6:	fa 83       	std	Y+2, r31	; 0x02
    40e8:	e9 83       	std	Y+1, r30	; 0x01

  FUNC_ENTRY;

  if (buflen < 4)
    40ea:	44 30       	cpi	r20, 0x04	; 4
    40ec:	51 05       	cpc	r21, r1
    40ee:	61 05       	cpc	r22, r1
    40f0:	71 05       	cpc	r23, r1
    40f2:	7c f1       	brlt	.+94     	; 0x4152 <MQTTSerialize_ack+0x82>
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.bits.type = packettype;
    40f4:	82 2f       	mov	r24, r18
    40f6:	82 95       	swap	r24
    40f8:	80 7f       	andi	r24, 0xF0	; 240
  header.bits.dup = dup;
    40fa:	00 fb       	bst	r16, 0
    40fc:	83 f9       	bld	r24, 3
  header.bits.qos = (packettype == PUBREL) ? 1 : 0;
    40fe:	91 e0       	ldi	r25, 0x01	; 1
    4100:	26 30       	cpi	r18, 0x06	; 6
    4102:	09 f0       	breq	.+2      	; 0x4106 <MQTTSerialize_ack+0x36>
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	8f 01       	movw	r16, r30
    4108:	99 0f       	add	r25, r25
    410a:	68 2f       	mov	r22, r24
    410c:	69 7f       	andi	r22, 0xF9	; 249
    410e:	86 2f       	mov	r24, r22
    4110:	89 2b       	or	r24, r25
  writeChar(&ptr, header.byte); /* write header */
    4112:	68 2f       	mov	r22, r24
    4114:	ce 01       	movw	r24, r28
    4116:	01 96       	adiw	r24, 0x01	; 1
    4118:	a8 dd       	rcall	.-1200   	; 0x3c6a <writeChar>

  ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
    411a:	42 e0       	ldi	r20, 0x02	; 2
    411c:	50 e0       	ldi	r21, 0x00	; 0
    411e:	60 e0       	ldi	r22, 0x00	; 0
    4120:	70 e0       	ldi	r23, 0x00	; 0
    4122:	89 81       	ldd	r24, Y+1	; 0x01
    4124:	9a 81       	ldd	r25, Y+2	; 0x02
    4126:	72 dc       	rcall	.-1820   	; 0x3a0c <MQTTPacket_encode>
    4128:	29 81       	ldd	r18, Y+1	; 0x01
    412a:	3a 81       	ldd	r19, Y+2	; 0x02
    412c:	62 0f       	add	r22, r18
    412e:	73 1f       	adc	r23, r19
    4130:	7a 83       	std	Y+2, r23	; 0x02
    4132:	69 83       	std	Y+1, r22	; 0x01
  writeInt(&ptr, packetid);
    4134:	a7 01       	movw	r20, r14
    4136:	60 e0       	ldi	r22, 0x00	; 0
    4138:	70 e0       	ldi	r23, 0x00	; 0
    413a:	ce 01       	movw	r24, r28
    413c:	01 96       	adiw	r24, 0x01	; 1
    413e:	9f dd       	rcall	.-1218   	; 0x3c7e <writeInt>
  rc = ptr - buf;
    4140:	69 81       	ldd	r22, Y+1	; 0x01
    4142:	7a 81       	ldd	r23, Y+2	; 0x02
    4144:	60 1b       	sub	r22, r16
    4146:	71 0b       	sbc	r23, r17
    4148:	07 2e       	mov	r0, r23
    414a:	00 0c       	add	r0, r0
    414c:	88 0b       	sbc	r24, r24
    414e:	99 0b       	sbc	r25, r25
    4150:	04 c0       	rjmp	.+8      	; 0x415a <MQTTSerialize_ack+0x8a>

  FUNC_ENTRY;

  if (buflen < 4)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    4152:	6e ef       	ldi	r22, 0xFE	; 254
    4154:	7f ef       	ldi	r23, 0xFF	; 255
    4156:	8f ef       	ldi	r24, 0xFF	; 255
    4158:	9f ef       	ldi	r25, 0xFF	; 255
  writeInt(&ptr, packetid);
  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    415a:	0f 90       	pop	r0
    415c:	0f 90       	pop	r0
    415e:	df 91       	pop	r29
    4160:	cf 91       	pop	r28
    4162:	1f 91       	pop	r17
    4164:	0f 91       	pop	r16
    4166:	ff 90       	pop	r15
    4168:	ef 90       	pop	r14
    416a:	08 95       	ret

0000416c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
    416c:	4f 92       	push	r4
    416e:	5f 92       	push	r5
    4170:	6f 92       	push	r6
    4172:	7f 92       	push	r7
    4174:	8f 92       	push	r8
    4176:	9f 92       	push	r9
    4178:	af 92       	push	r10
    417a:	bf 92       	push	r11
    417c:	cf 92       	push	r12
    417e:	df 92       	push	r13
    4180:	ef 92       	push	r14
    4182:	ff 92       	push	r15
    4184:	cf 93       	push	r28
    4186:	df 93       	push	r29
    4188:	2b 01       	movw	r4, r22
    418a:	3c 01       	movw	r6, r24
    418c:	ea 01       	movw	r28, r20
  int32_t len = 2; /* packetid */

  for (int32_t i = 0; i < count; ++i)
    418e:	c1 2c       	mov	r12, r1
    4190:	d1 2c       	mov	r13, r1
    4192:	76 01       	movw	r14, r12
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
  int32_t len = 2; /* packetid */
    4194:	81 2c       	mov	r8, r1
    4196:	91 2c       	mov	r9, r1
    4198:	54 01       	movw	r10, r8
    419a:	68 94       	set
    419c:	81 f8       	bld	r8, 1

  for (int32_t i = 0; i < count; ++i)
    419e:	20 c0       	rjmp	.+64     	; 0x41e0 <MQTTSerialize_subscribeLength+0x74>
    len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
    41a0:	f6 01       	movw	r30, r12
    41a2:	ee 0f       	add	r30, r30
    41a4:	ff 1f       	adc	r31, r31
    41a6:	ee 0f       	add	r30, r30
    41a8:	ff 1f       	adc	r31, r31
    41aa:	ee 0f       	add	r30, r30
    41ac:	ff 1f       	adc	r31, r31
    41ae:	ec 0f       	add	r30, r28
    41b0:	fd 1f       	adc	r31, r29
    41b2:	20 81       	ld	r18, Z
    41b4:	31 81       	ldd	r19, Z+1	; 0x01
    41b6:	42 81       	ldd	r20, Z+2	; 0x02
    41b8:	53 81       	ldd	r21, Z+3	; 0x03
    41ba:	64 81       	ldd	r22, Z+4	; 0x04
    41bc:	75 81       	ldd	r23, Z+5	; 0x05
    41be:	86 81       	ldd	r24, Z+6	; 0x06
    41c0:	97 81       	ldd	r25, Z+7	; 0x07
    41c2:	44 de       	rcall	.-888    	; 0x3e4c <MQTTstrlen>
    41c4:	dc 01       	movw	r26, r24
    41c6:	cb 01       	movw	r24, r22
    41c8:	03 96       	adiw	r24, 0x03	; 3
    41ca:	a1 1d       	adc	r26, r1
    41cc:	b1 1d       	adc	r27, r1
    41ce:	88 0e       	add	r8, r24
    41d0:	99 1e       	adc	r9, r25
    41d2:	aa 1e       	adc	r10, r26
    41d4:	bb 1e       	adc	r11, r27
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
  int32_t len = 2; /* packetid */

  for (int32_t i = 0; i < count; ++i)
    41d6:	8f ef       	ldi	r24, 0xFF	; 255
    41d8:	c8 1a       	sub	r12, r24
    41da:	d8 0a       	sbc	r13, r24
    41dc:	e8 0a       	sbc	r14, r24
    41de:	f8 0a       	sbc	r15, r24
    41e0:	c4 14       	cp	r12, r4
    41e2:	d5 04       	cpc	r13, r5
    41e4:	e6 04       	cpc	r14, r6
    41e6:	f7 04       	cpc	r15, r7
    41e8:	dc f2       	brlt	.-74     	; 0x41a0 <MQTTSerialize_subscribeLength+0x34>
    len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
	
  return len;
}
    41ea:	c5 01       	movw	r24, r10
    41ec:	b4 01       	movw	r22, r8
    41ee:	df 91       	pop	r29
    41f0:	cf 91       	pop	r28
    41f2:	ff 90       	pop	r15
    41f4:	ef 90       	pop	r14
    41f6:	df 90       	pop	r13
    41f8:	cf 90       	pop	r12
    41fa:	bf 90       	pop	r11
    41fc:	af 90       	pop	r10
    41fe:	9f 90       	pop	r9
    4200:	8f 90       	pop	r8
    4202:	7f 90       	pop	r7
    4204:	6f 90       	pop	r6
    4206:	5f 90       	pop	r5
    4208:	4f 90       	pop	r4
    420a:	08 95       	ret

0000420c <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int32_t MQTTSerialize_subscribe(uint8_t* buf, int32_t buflen, uint8_t dup, uint16_t packetid, int32_t count,
		MQTTString topicFilters[], int32_t requestedQoSs[])
{
    420c:	2f 92       	push	r2
    420e:	3f 92       	push	r3
    4210:	4f 92       	push	r4
    4212:	5f 92       	push	r5
    4214:	6f 92       	push	r6
    4216:	7f 92       	push	r7
    4218:	8f 92       	push	r8
    421a:	9f 92       	push	r9
    421c:	af 92       	push	r10
    421e:	bf 92       	push	r11
    4220:	cf 92       	push	r12
    4222:	df 92       	push	r13
    4224:	ef 92       	push	r14
    4226:	ff 92       	push	r15
    4228:	0f 93       	push	r16
    422a:	1f 93       	push	r17
    422c:	cf 93       	push	r28
    422e:	df 93       	push	r29
    4230:	cd b7       	in	r28, 0x3d	; 61
    4232:	de b7       	in	r29, 0x3e	; 62
    4234:	27 97       	sbiw	r28, 0x07	; 7
    4236:	0f b6       	in	r0, 0x3f	; 63
    4238:	f8 94       	cli
    423a:	de bf       	out	0x3e, r29	; 62
    423c:	0f be       	out	0x3f, r0	; 63
    423e:	cd bf       	out	0x3d, r28	; 61
    4240:	1c 01       	movw	r2, r24
    4242:	2a 01       	movw	r4, r20
    4244:	3b 01       	movw	r6, r22
    4246:	2f 83       	std	Y+7, r18	; 0x07
  uint8_t *ptr = buf;
    4248:	9a 83       	std	Y+2, r25	; 0x02
    424a:	89 83       	std	Y+1, r24	; 0x01
  int32_t rem_len = 0;
  int32_t rc = 0;

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
    424c:	a5 01       	movw	r20, r10
    424e:	c7 01       	movw	r24, r14
    4250:	b6 01       	movw	r22, r12
    4252:	8c df       	rcall	.-232    	; 0x416c <MQTTSerialize_subscribeLength>
    4254:	6b 83       	std	Y+3, r22	; 0x03
    4256:	7c 83       	std	Y+4, r23	; 0x04
    4258:	8d 83       	std	Y+5, r24	; 0x05
    425a:	9e 83       	std	Y+6, r25	; 0x06
    425c:	b5 dc       	rcall	.-1686   	; 0x3bc8 <MQTTPacket_len>
    425e:	46 16       	cp	r4, r22
    4260:	57 06       	cpc	r5, r23
    4262:	68 06       	cpc	r6, r24
    4264:	79 06       	cpc	r7, r25
    4266:	0c f4       	brge	.+2      	; 0x426a <MQTTSerialize_subscribe+0x5e>
    4268:	52 c0       	rjmp	.+164    	; 0x430e <MQTTSerialize_subscribe+0x102>
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.byte = 0;
  header.bits.type = SUBSCRIBE;
    426a:	60 e8       	ldi	r22, 0x80	; 128
  header.bits.dup = dup;
    426c:	8f 81       	ldd	r24, Y+7	; 0x07
    426e:	80 fb       	bst	r24, 0
    4270:	63 f9       	bld	r22, 3
  header.bits.qos = 1;
    4272:	69 7f       	andi	r22, 0xF9	; 249
    4274:	62 60       	ori	r22, 0x02	; 2
  writeChar(&ptr, header.byte); /* write header */
    4276:	ce 01       	movw	r24, r28
    4278:	01 96       	adiw	r24, 0x01	; 1
    427a:	f7 dc       	rcall	.-1554   	; 0x3c6a <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    427c:	4b 81       	ldd	r20, Y+3	; 0x03
    427e:	5c 81       	ldd	r21, Y+4	; 0x04
    4280:	6d 81       	ldd	r22, Y+5	; 0x05
    4282:	7e 81       	ldd	r23, Y+6	; 0x06
    4284:	89 81       	ldd	r24, Y+1	; 0x01
    4286:	9a 81       	ldd	r25, Y+2	; 0x02
    4288:	c1 db       	rcall	.-2174   	; 0x3a0c <MQTTPacket_encode>
    428a:	29 81       	ldd	r18, Y+1	; 0x01
    428c:	3a 81       	ldd	r19, Y+2	; 0x02
    428e:	62 0f       	add	r22, r18
    4290:	73 1f       	adc	r23, r19
    4292:	7a 83       	std	Y+2, r23	; 0x02
    4294:	69 83       	std	Y+1, r22	; 0x01

  writeInt(&ptr, packetid);
    4296:	a8 01       	movw	r20, r16
    4298:	60 e0       	ldi	r22, 0x00	; 0
    429a:	70 e0       	ldi	r23, 0x00	; 0
    429c:	ce 01       	movw	r24, r28
    429e:	01 96       	adiw	r24, 0x01	; 1
    42a0:	ee dc       	rcall	.-1572   	; 0x3c7e <writeInt>

  for (int32_t i = 0; i < count; ++i)
    42a2:	41 2c       	mov	r4, r1
    42a4:	51 2c       	mov	r5, r1
    42a6:	32 01       	movw	r6, r4
    42a8:	24 c0       	rjmp	.+72     	; 0x42f2 <MQTTSerialize_subscribe+0xe6>
  {
    writeMQTTString(&ptr, topicFilters[i]);
    42aa:	f2 01       	movw	r30, r4
    42ac:	ee 0f       	add	r30, r30
    42ae:	ff 1f       	adc	r31, r31
    42b0:	ee 0f       	add	r30, r30
    42b2:	ff 1f       	adc	r31, r31
    42b4:	ee 0f       	add	r30, r30
    42b6:	ff 1f       	adc	r31, r31
    42b8:	ea 0d       	add	r30, r10
    42ba:	fb 1d       	adc	r31, r11
    42bc:	00 81       	ld	r16, Z
    42be:	11 81       	ldd	r17, Z+1	; 0x01
    42c0:	22 81       	ldd	r18, Z+2	; 0x02
    42c2:	33 81       	ldd	r19, Z+3	; 0x03
    42c4:	44 81       	ldd	r20, Z+4	; 0x04
    42c6:	55 81       	ldd	r21, Z+5	; 0x05
    42c8:	66 81       	ldd	r22, Z+6	; 0x06
    42ca:	77 81       	ldd	r23, Z+7	; 0x07
    42cc:	ce 01       	movw	r24, r28
    42ce:	01 96       	adiw	r24, 0x01	; 1
    42d0:	2c dd       	rcall	.-1448   	; 0x3d2a <writeMQTTString>
    writeChar(&ptr, requestedQoSs[i]);
    42d2:	f2 01       	movw	r30, r4
    42d4:	ee 0f       	add	r30, r30
    42d6:	ff 1f       	adc	r31, r31
    42d8:	ee 0f       	add	r30, r30
    42da:	ff 1f       	adc	r31, r31
    42dc:	e8 0d       	add	r30, r8
    42de:	f9 1d       	adc	r31, r9
    42e0:	60 81       	ld	r22, Z
    42e2:	ce 01       	movw	r24, r28
    42e4:	01 96       	adiw	r24, 0x01	; 1
    42e6:	c1 dc       	rcall	.-1662   	; 0x3c6a <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;

  writeInt(&ptr, packetid);

  for (int32_t i = 0; i < count; ++i)
    42e8:	8f ef       	ldi	r24, 0xFF	; 255
    42ea:	48 1a       	sub	r4, r24
    42ec:	58 0a       	sbc	r5, r24
    42ee:	68 0a       	sbc	r6, r24
    42f0:	78 0a       	sbc	r7, r24
    42f2:	4c 14       	cp	r4, r12
    42f4:	5d 04       	cpc	r5, r13
    42f6:	6e 04       	cpc	r6, r14
    42f8:	7f 04       	cpc	r7, r15
    42fa:	bc f2       	brlt	.-82     	; 0x42aa <MQTTSerialize_subscribe+0x9e>
  {
    writeMQTTString(&ptr, topicFilters[i]);
    writeChar(&ptr, requestedQoSs[i]);
  }

  rc = ptr - buf;
    42fc:	69 81       	ldd	r22, Y+1	; 0x01
    42fe:	7a 81       	ldd	r23, Y+2	; 0x02
    4300:	62 19       	sub	r22, r2
    4302:	73 09       	sbc	r23, r3
    4304:	07 2e       	mov	r0, r23
    4306:	00 0c       	add	r0, r0
    4308:	88 0b       	sbc	r24, r24
    430a:	99 0b       	sbc	r25, r25
    430c:	04 c0       	rjmp	.+8      	; 0x4316 <MQTTSerialize_subscribe+0x10a>

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    430e:	6e ef       	ldi	r22, 0xFE	; 254
    4310:	7f ef       	ldi	r23, 0xFF	; 255
    4312:	8f ef       	ldi	r24, 0xFF	; 255
    4314:	9f ef       	ldi	r25, 0xFF	; 255

  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    4316:	27 96       	adiw	r28, 0x07	; 7
    4318:	0f b6       	in	r0, 0x3f	; 63
    431a:	f8 94       	cli
    431c:	de bf       	out	0x3e, r29	; 62
    431e:	0f be       	out	0x3f, r0	; 63
    4320:	cd bf       	out	0x3d, r28	; 61
    4322:	df 91       	pop	r29
    4324:	cf 91       	pop	r28
    4326:	1f 91       	pop	r17
    4328:	0f 91       	pop	r16
    432a:	ff 90       	pop	r15
    432c:	ef 90       	pop	r14
    432e:	df 90       	pop	r13
    4330:	cf 90       	pop	r12
    4332:	bf 90       	pop	r11
    4334:	af 90       	pop	r10
    4336:	9f 90       	pop	r9
    4338:	8f 90       	pop	r8
    433a:	7f 90       	pop	r7
    433c:	6f 90       	pop	r6
    433e:	5f 90       	pop	r5
    4340:	4f 90       	pop	r4
    4342:	3f 90       	pop	r3
    4344:	2f 90       	pop	r2
    4346:	08 95       	ret

00004348 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int32_t MQTTDeserialize_suback(uint16_t* packetid, int32_t maxcount, int32_t* count, int32_t grantedQoSs[], uint8_t* buf, int32_t buflen)
{
    4348:	4f 92       	push	r4
    434a:	5f 92       	push	r5
    434c:	6f 92       	push	r6
    434e:	7f 92       	push	r7
    4350:	8f 92       	push	r8
    4352:	9f 92       	push	r9
    4354:	af 92       	push	r10
    4356:	bf 92       	push	r11
    4358:	cf 92       	push	r12
    435a:	df 92       	push	r13
    435c:	ef 92       	push	r14
    435e:	ff 92       	push	r15
    4360:	0f 93       	push	r16
    4362:	1f 93       	push	r17
    4364:	cf 93       	push	r28
    4366:	df 93       	push	r29
    4368:	00 d0       	rcall	.+0      	; 0x436a <MQTTDeserialize_suback+0x22>
    436a:	00 d0       	rcall	.+0      	; 0x436c <MQTTDeserialize_suback+0x24>
    436c:	cd b7       	in	r28, 0x3d	; 61
    436e:	de b7       	in	r29, 0x3e	; 62
    4370:	4c 01       	movw	r8, r24
    4372:	2a 01       	movw	r4, r20
    4374:	3b 01       	movw	r6, r22
    4376:	69 01       	movw	r12, r18
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    4378:	fa 82       	std	Y+2, r15	; 0x02
    437a:	e9 82       	std	Y+1, r14	; 0x01
  int32_t rc = 0;
  int32_t mylen;

  FUNC_ENTRY;

  header.byte = readChar(&curdata);
    437c:	ce 01       	movw	r24, r28
    437e:	01 96       	adiw	r24, 0x01	; 1
    4380:	6c dc       	rcall	.-1832   	; 0x3c5a <readChar>
  if (header.bits.type != SUBACK)
    4382:	80 7f       	andi	r24, 0xF0	; 240
    4384:	80 39       	cpi	r24, 0x90	; 144
    4386:	09 f0       	breq	.+2      	; 0x438a <MQTTDeserialize_suback+0x42>
    4388:	53 c0       	rjmp	.+166    	; 0x4430 <MQTTDeserialize_suback+0xe8>
    goto exit;

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    438a:	be 01       	movw	r22, r28
    438c:	6d 5f       	subi	r22, 0xFD	; 253
    438e:	7f 4f       	sbci	r23, 0xFF	; 255
    4390:	89 81       	ldd	r24, Y+1	; 0x01
    4392:	9a 81       	ldd	r25, Y+2	; 0x02
    4394:	47 dc       	rcall	.-1906   	; 0x3c24 <MQTTPacket_decodeBuf>
    4396:	29 81       	ldd	r18, Y+1	; 0x01
    4398:	3a 81       	ldd	r19, Y+2	; 0x02
    439a:	26 0f       	add	r18, r22
    439c:	37 1f       	adc	r19, r23
    439e:	3a 83       	std	Y+2, r19	; 0x02
    43a0:	29 83       	std	Y+1, r18	; 0x01
  enddata = curdata + mylen;
    43a2:	ab 80       	ldd	r10, Y+3	; 0x03
    43a4:	bc 80       	ldd	r11, Y+4	; 0x04
    43a6:	a2 0e       	add	r10, r18
    43a8:	b3 1e       	adc	r11, r19

  if (enddata - curdata < 2)
    43aa:	a5 01       	movw	r20, r10
    43ac:	42 1b       	sub	r20, r18
    43ae:	53 0b       	sbc	r21, r19
    43b0:	42 30       	cpi	r20, 0x02	; 2
    43b2:	51 05       	cpc	r21, r1
    43b4:	0c f4       	brge	.+2      	; 0x43b8 <MQTTDeserialize_suback+0x70>
    43b6:	43 c0       	rjmp	.+134    	; 0x443e <MQTTDeserialize_suback+0xf6>
    goto exit;

  *packetid = readInt(&curdata);
    43b8:	ce 01       	movw	r24, r28
    43ba:	01 96       	adiw	r24, 0x01	; 1
    43bc:	3b dc       	rcall	.-1930   	; 0x3c34 <readInt>
    43be:	f4 01       	movw	r30, r8
    43c0:	71 83       	std	Z+1, r23	; 0x01
    43c2:	60 83       	st	Z, r22

  *count = 0;
    43c4:	f6 01       	movw	r30, r12
    43c6:	10 82       	st	Z, r1
    43c8:	11 82       	std	Z+1, r1	; 0x01
    43ca:	12 82       	std	Z+2, r1	; 0x02
    43cc:	13 82       	std	Z+3, r1	; 0x03

  while (curdata < enddata)
    43ce:	26 c0       	rjmp	.+76     	; 0x441c <MQTTDeserialize_suback+0xd4>
  {
    if (*count > maxcount)
    43d0:	f6 01       	movw	r30, r12
    43d2:	80 81       	ld	r24, Z
    43d4:	91 81       	ldd	r25, Z+1	; 0x01
    43d6:	a2 81       	ldd	r26, Z+2	; 0x02
    43d8:	b3 81       	ldd	r27, Z+3	; 0x03
    43da:	48 16       	cp	r4, r24
    43dc:	59 06       	cpc	r5, r25
    43de:	6a 06       	cpc	r6, r26
    43e0:	7b 06       	cpc	r7, r27
    43e2:	54 f1       	brlt	.+84     	; 0x4438 <MQTTDeserialize_suback+0xf0>
    {
      rc = -1;
      goto exit;
    }
    grantedQoSs[(*count)++] = readChar(&curdata);
    43e4:	ac 01       	movw	r20, r24
    43e6:	bd 01       	movw	r22, r26
    43e8:	4f 5f       	subi	r20, 0xFF	; 255
    43ea:	5f 4f       	sbci	r21, 0xFF	; 255
    43ec:	6f 4f       	sbci	r22, 0xFF	; 255
    43ee:	7f 4f       	sbci	r23, 0xFF	; 255
    43f0:	40 83       	st	Z, r20
    43f2:	51 83       	std	Z+1, r21	; 0x01
    43f4:	62 83       	std	Z+2, r22	; 0x02
    43f6:	73 83       	std	Z+3, r23	; 0x03
    43f8:	88 0f       	add	r24, r24
    43fa:	99 1f       	adc	r25, r25
    43fc:	88 0f       	add	r24, r24
    43fe:	99 1f       	adc	r25, r25
    4400:	78 01       	movw	r14, r16
    4402:	e8 0e       	add	r14, r24
    4404:	f9 1e       	adc	r15, r25
    4406:	ce 01       	movw	r24, r28
    4408:	01 96       	adiw	r24, 0x01	; 1
    440a:	27 dc       	rcall	.-1970   	; 0x3c5a <readChar>
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	a0 e0       	ldi	r26, 0x00	; 0
    4410:	b0 e0       	ldi	r27, 0x00	; 0
    4412:	f7 01       	movw	r30, r14
    4414:	80 83       	st	Z, r24
    4416:	91 83       	std	Z+1, r25	; 0x01
    4418:	a2 83       	std	Z+2, r26	; 0x02
    441a:	b3 83       	std	Z+3, r27	; 0x03

  *packetid = readInt(&curdata);

  *count = 0;

  while (curdata < enddata)
    441c:	89 81       	ldd	r24, Y+1	; 0x01
    441e:	9a 81       	ldd	r25, Y+2	; 0x02
    4420:	8a 15       	cp	r24, r10
    4422:	9b 05       	cpc	r25, r11
    4424:	a8 f2       	brcs	.-86     	; 0x43d0 <MQTTDeserialize_suback+0x88>
      goto exit;
    }
    grantedQoSs[(*count)++] = readChar(&curdata);
  }

  rc = 1;
    4426:	61 e0       	ldi	r22, 0x01	; 1
    4428:	70 e0       	ldi	r23, 0x00	; 0
    442a:	80 e0       	ldi	r24, 0x00	; 0
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	07 c0       	rjmp	.+14     	; 0x443e <MQTTDeserialize_suback+0xf6>
int32_t MQTTDeserialize_suback(uint16_t* packetid, int32_t maxcount, int32_t* count, int32_t grantedQoSs[], uint8_t* buf, int32_t buflen)
{
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
  uint8_t* enddata = NULL;
  int32_t rc = 0;
    4430:	60 e0       	ldi	r22, 0x00	; 0
    4432:	70 e0       	ldi	r23, 0x00	; 0
    4434:	cb 01       	movw	r24, r22
    4436:	03 c0       	rjmp	.+6      	; 0x443e <MQTTDeserialize_suback+0xf6>

  while (curdata < enddata)
  {
    if (*count > maxcount)
    {
      rc = -1;
    4438:	6f ef       	ldi	r22, 0xFF	; 255
    443a:	7f ef       	ldi	r23, 0xFF	; 255
    443c:	cb 01       	movw	r24, r22

  rc = 1;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    443e:	26 96       	adiw	r28, 0x06	; 6
    4440:	0f b6       	in	r0, 0x3f	; 63
    4442:	f8 94       	cli
    4444:	de bf       	out	0x3e, r29	; 62
    4446:	0f be       	out	0x3f, r0	; 63
    4448:	cd bf       	out	0x3d, r28	; 61
    444a:	df 91       	pop	r29
    444c:	cf 91       	pop	r28
    444e:	1f 91       	pop	r17
    4450:	0f 91       	pop	r16
    4452:	ff 90       	pop	r15
    4454:	ef 90       	pop	r14
    4456:	df 90       	pop	r13
    4458:	cf 90       	pop	r12
    445a:	bf 90       	pop	r11
    445c:	af 90       	pop	r10
    445e:	9f 90       	pop	r9
    4460:	8f 90       	pop	r8
    4462:	7f 90       	pop	r7
    4464:	6f 90       	pop	r6
    4466:	5f 90       	pop	r5
    4468:	4f 90       	pop	r4
    446a:	08 95       	ret

0000446c <w5500_read>:
  n->mqttwrite = w5500_write;
  n->disconnect = w5500_disconnect;
}

int32_t w5500_read(Network* n, uint8_t* buffer, int32_t len, int32_t timeout_ms)
{
    446c:	cf 92       	push	r12
    446e:	df 92       	push	r13
    4470:	ef 92       	push	r14
    4472:	ff 92       	push	r15
    4474:	0f 93       	push	r16
    4476:	1f 93       	push	r17
    4478:	cf 93       	push	r28
    447a:	df 93       	push	r29
    447c:	ec 01       	movw	r28, r24
    447e:	8b 01       	movw	r16, r22
    4480:	69 01       	movw	r12, r18
    4482:	7a 01       	movw	r14, r20
  if ((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket) > 0))
    4484:	88 81       	ld	r24, Y
    4486:	99 81       	ldd	r25, Y+1	; 0x01
    4488:	aa 81       	ldd	r26, Y+2	; 0x02
    448a:	bb 81       	ldd	r27, Y+3	; 0x03
    448c:	88 0f       	add	r24, r24
    448e:	99 1f       	adc	r25, r25
    4490:	aa 1f       	adc	r26, r26
    4492:	bb 1f       	adc	r27, r27
    4494:	88 0f       	add	r24, r24
    4496:	99 1f       	adc	r25, r25
    4498:	aa 1f       	adc	r26, r26
    449a:	bb 1f       	adc	r27, r27
    449c:	01 96       	adiw	r24, 0x01	; 1
    449e:	a1 1d       	adc	r26, r1
    44a0:	b1 1d       	adc	r27, r1
    44a2:	88 0f       	add	r24, r24
    44a4:	99 1f       	adc	r25, r25
    44a6:	aa 1f       	adc	r26, r26
    44a8:	bb 1f       	adc	r27, r27
    44aa:	88 0f       	add	r24, r24
    44ac:	99 1f       	adc	r25, r25
    44ae:	aa 1f       	adc	r26, r26
    44b0:	bb 1f       	adc	r27, r27
    44b2:	88 0f       	add	r24, r24
    44b4:	99 1f       	adc	r25, r25
    44b6:	aa 1f       	adc	r26, r26
    44b8:	bb 1f       	adc	r27, r27
    44ba:	bc 01       	movw	r22, r24
    44bc:	cd 01       	movw	r24, r26
    44be:	7d 5f       	subi	r23, 0xFD	; 253
    44c0:	8f 4f       	sbci	r24, 0xFF	; 255
    44c2:	9f 4f       	sbci	r25, 0xFF	; 255
    44c4:	0e 94 85 09 	call	0x130a	; 0x130a <WIZCHIP_READ>
    44c8:	87 31       	cpi	r24, 0x17	; 23
    44ca:	59 f4       	brne	.+22     	; 0x44e2 <w5500_read+0x76>
    44cc:	88 81       	ld	r24, Y
    44ce:	0e 94 bf 0b 	call	0x177e	; 0x177e <getSn_RX_RSR>
    44d2:	89 2b       	or	r24, r25
    44d4:	51 f0       	breq	.+20     	; 0x44ea <w5500_read+0x7e>
    return recv(n->my_socket, buffer, len);
    44d6:	a6 01       	movw	r20, r12
    44d8:	b8 01       	movw	r22, r16
    44da:	88 81       	ld	r24, Y
    44dc:	0e 94 ba 05 	call	0xb74	; 0xb74 <recv>
    44e0:	07 c0       	rjmp	.+14     	; 0x44f0 <w5500_read+0x84>
  
  return 0;
    44e2:	60 e0       	ldi	r22, 0x00	; 0
    44e4:	70 e0       	ldi	r23, 0x00	; 0
    44e6:	cb 01       	movw	r24, r22
    44e8:	03 c0       	rjmp	.+6      	; 0x44f0 <w5500_read+0x84>
    44ea:	60 e0       	ldi	r22, 0x00	; 0
    44ec:	70 e0       	ldi	r23, 0x00	; 0
    44ee:	cb 01       	movw	r24, r22
}
    44f0:	df 91       	pop	r29
    44f2:	cf 91       	pop	r28
    44f4:	1f 91       	pop	r17
    44f6:	0f 91       	pop	r16
    44f8:	ff 90       	pop	r15
    44fa:	ef 90       	pop	r14
    44fc:	df 90       	pop	r13
    44fe:	cf 90       	pop	r12
    4500:	08 95       	ret

00004502 <w5500_write>:

int32_t w5500_write(Network* n, uint8_t* buffer, int32_t len, int32_t timeout_ms)
{
    4502:	cf 92       	push	r12
    4504:	df 92       	push	r13
    4506:	ef 92       	push	r14
    4508:	ff 92       	push	r15
    450a:	0f 93       	push	r16
    450c:	1f 93       	push	r17
    450e:	cf 93       	push	r28
    4510:	df 93       	push	r29
    4512:	ec 01       	movw	r28, r24
    4514:	8b 01       	movw	r16, r22
    4516:	69 01       	movw	r12, r18
    4518:	7a 01       	movw	r14, r20
  if (getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
    451a:	88 81       	ld	r24, Y
    451c:	99 81       	ldd	r25, Y+1	; 0x01
    451e:	aa 81       	ldd	r26, Y+2	; 0x02
    4520:	bb 81       	ldd	r27, Y+3	; 0x03
    4522:	88 0f       	add	r24, r24
    4524:	99 1f       	adc	r25, r25
    4526:	aa 1f       	adc	r26, r26
    4528:	bb 1f       	adc	r27, r27
    452a:	88 0f       	add	r24, r24
    452c:	99 1f       	adc	r25, r25
    452e:	aa 1f       	adc	r26, r26
    4530:	bb 1f       	adc	r27, r27
    4532:	01 96       	adiw	r24, 0x01	; 1
    4534:	a1 1d       	adc	r26, r1
    4536:	b1 1d       	adc	r27, r1
    4538:	88 0f       	add	r24, r24
    453a:	99 1f       	adc	r25, r25
    453c:	aa 1f       	adc	r26, r26
    453e:	bb 1f       	adc	r27, r27
    4540:	88 0f       	add	r24, r24
    4542:	99 1f       	adc	r25, r25
    4544:	aa 1f       	adc	r26, r26
    4546:	bb 1f       	adc	r27, r27
    4548:	88 0f       	add	r24, r24
    454a:	99 1f       	adc	r25, r25
    454c:	aa 1f       	adc	r26, r26
    454e:	bb 1f       	adc	r27, r27
    4550:	bc 01       	movw	r22, r24
    4552:	cd 01       	movw	r24, r26
    4554:	7d 5f       	subi	r23, 0xFD	; 253
    4556:	8f 4f       	sbci	r24, 0xFF	; 255
    4558:	9f 4f       	sbci	r25, 0xFF	; 255
    455a:	0e 94 85 09 	call	0x130a	; 0x130a <WIZCHIP_READ>
    455e:	87 31       	cpi	r24, 0x17	; 23
    4560:	31 f4       	brne	.+12     	; 0x456e <w5500_write+0x6c>
    return send(n->my_socket, buffer, len);
    4562:	a6 01       	movw	r20, r12
    4564:	b8 01       	movw	r22, r16
    4566:	88 81       	ld	r24, Y
    4568:	0e 94 a7 04 	call	0x94e	; 0x94e <send>
    456c:	03 c0       	rjmp	.+6      	; 0x4574 <w5500_write+0x72>
  
  return 0;
    456e:	60 e0       	ldi	r22, 0x00	; 0
    4570:	70 e0       	ldi	r23, 0x00	; 0
    4572:	cb 01       	movw	r24, r22
}
    4574:	df 91       	pop	r29
    4576:	cf 91       	pop	r28
    4578:	1f 91       	pop	r17
    457a:	0f 91       	pop	r16
    457c:	ff 90       	pop	r15
    457e:	ef 90       	pop	r14
    4580:	df 90       	pop	r13
    4582:	cf 90       	pop	r12
    4584:	08 95       	ret

00004586 <w5500_disconnect>:

void w5500_disconnect(Network* n)
{
  disconnect(n->my_socket);
    4586:	fc 01       	movw	r30, r24
    4588:	80 81       	ld	r24, Z
    458a:	0c 94 33 04 	jmp	0x866	; 0x866 <disconnect>
    458e:	08 95       	ret

00004590 <expired>:
  MilliTimer++;
}
*/

int8_t expired(Timer* timer)
{
    4590:	cf 92       	push	r12
    4592:	df 92       	push	r13
    4594:	ef 92       	push	r14
    4596:	ff 92       	push	r15
  int32_t left = (timer->end_time) - millis();
    4598:	fc 01       	movw	r30, r24
    459a:	c4 80       	ldd	r12, Z+4	; 0x04
    459c:	d5 80       	ldd	r13, Z+5	; 0x05
    459e:	e6 80       	ldd	r14, Z+6	; 0x06
    45a0:	f7 80       	ldd	r15, Z+7	; 0x07
    45a2:	88 d3       	rcall	.+1808   	; 0x4cb4 <millis>
    45a4:	a7 01       	movw	r20, r14
    45a6:	96 01       	movw	r18, r12
    45a8:	26 1b       	sub	r18, r22
    45aa:	37 0b       	sbc	r19, r23
    45ac:	48 0b       	sbc	r20, r24
    45ae:	59 0b       	sbc	r21, r25
    45b0:	da 01       	movw	r26, r20
    45b2:	c9 01       	movw	r24, r18
  return (left < 0);
    45b4:	88 27       	eor	r24, r24
    45b6:	b7 fd       	sbrc	r27, 7
    45b8:	83 95       	inc	r24
    45ba:	99 27       	eor	r25, r25
    45bc:	aa 27       	eor	r26, r26
    45be:	bb 27       	eor	r27, r27
}
    45c0:	ff 90       	pop	r15
    45c2:	ef 90       	pop	r14
    45c4:	df 90       	pop	r13
    45c6:	cf 90       	pop	r12
    45c8:	08 95       	ret

000045ca <countdown_ms>:

void countdown_ms(Timer* timer, uint32_t timeout)
{
    45ca:	cf 92       	push	r12
    45cc:	df 92       	push	r13
    45ce:	ef 92       	push	r14
    45d0:	ff 92       	push	r15
    45d2:	cf 93       	push	r28
    45d4:	df 93       	push	r29
    45d6:	ec 01       	movw	r28, r24
    45d8:	6a 01       	movw	r12, r20
    45da:	7b 01       	movw	r14, r22
	timer->end_time = millis() + timeout;
    45dc:	6b d3       	rcall	.+1750   	; 0x4cb4 <millis>
    45de:	c6 0e       	add	r12, r22
    45e0:	d7 1e       	adc	r13, r23
    45e2:	e8 1e       	adc	r14, r24
    45e4:	f9 1e       	adc	r15, r25
    45e6:	cc 82       	std	Y+4, r12	; 0x04
    45e8:	dd 82       	std	Y+5, r13	; 0x05
    45ea:	ee 82       	std	Y+6, r14	; 0x06
    45ec:	ff 82       	std	Y+7, r15	; 0x07
}
    45ee:	df 91       	pop	r29
    45f0:	cf 91       	pop	r28
    45f2:	ff 90       	pop	r15
    45f4:	ef 90       	pop	r14
    45f6:	df 90       	pop	r13
    45f8:	cf 90       	pop	r12
    45fa:	08 95       	ret

000045fc <countdown>:

void countdown(Timer* timer, uint32_t timeout)
{
    45fc:	8f 92       	push	r8
    45fe:	9f 92       	push	r9
    4600:	af 92       	push	r10
    4602:	bf 92       	push	r11
    4604:	cf 92       	push	r12
    4606:	df 92       	push	r13
    4608:	ef 92       	push	r14
    460a:	ff 92       	push	r15
    460c:	cf 93       	push	r28
    460e:	df 93       	push	r29
    4610:	ec 01       	movw	r28, r24
    4612:	4a 01       	movw	r8, r20
    4614:	5b 01       	movw	r10, r22
  timer->end_time = millis() + (timeout * 1000UL);
    4616:	4e d3       	rcall	.+1692   	; 0x4cb4 <millis>
    4618:	6b 01       	movw	r12, r22
    461a:	7c 01       	movw	r14, r24
    461c:	a8 ee       	ldi	r26, 0xE8	; 232
    461e:	b3 e0       	ldi	r27, 0x03	; 3
    4620:	a5 01       	movw	r20, r10
    4622:	94 01       	movw	r18, r8
    4624:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <__muluhisi3>
    4628:	dc 01       	movw	r26, r24
    462a:	cb 01       	movw	r24, r22
    462c:	8c 0d       	add	r24, r12
    462e:	9d 1d       	adc	r25, r13
    4630:	ae 1d       	adc	r26, r14
    4632:	bf 1d       	adc	r27, r15
    4634:	8c 83       	std	Y+4, r24	; 0x04
    4636:	9d 83       	std	Y+5, r25	; 0x05
    4638:	ae 83       	std	Y+6, r26	; 0x06
    463a:	bf 83       	std	Y+7, r27	; 0x07
}
    463c:	df 91       	pop	r29
    463e:	cf 91       	pop	r28
    4640:	ff 90       	pop	r15
    4642:	ef 90       	pop	r14
    4644:	df 90       	pop	r13
    4646:	cf 90       	pop	r12
    4648:	bf 90       	pop	r11
    464a:	af 90       	pop	r10
    464c:	9f 90       	pop	r9
    464e:	8f 90       	pop	r8
    4650:	08 95       	ret

00004652 <left_ms>:

int32_t left_ms(Timer* timer)
{
    4652:	cf 92       	push	r12
    4654:	df 92       	push	r13
    4656:	ef 92       	push	r14
    4658:	ff 92       	push	r15
  int32_t left = timer->end_time - millis();
    465a:	fc 01       	movw	r30, r24
    465c:	c4 80       	ldd	r12, Z+4	; 0x04
    465e:	d5 80       	ldd	r13, Z+5	; 0x05
    4660:	e6 80       	ldd	r14, Z+6	; 0x06
    4662:	f7 80       	ldd	r15, Z+7	; 0x07
    4664:	27 d3       	rcall	.+1614   	; 0x4cb4 <millis>
  return (left < 0) ? 0 : left;
    4666:	a7 01       	movw	r20, r14
    4668:	96 01       	movw	r18, r12
    466a:	26 1b       	sub	r18, r22
    466c:	37 0b       	sbc	r19, r23
    466e:	48 0b       	sbc	r20, r24
    4670:	59 0b       	sbc	r21, r25
    4672:	ca 01       	movw	r24, r20
    4674:	b9 01       	movw	r22, r18
    4676:	1a f4       	brpl	.+6      	; 0x467e <left_ms+0x2c>
    4678:	60 e0       	ldi	r22, 0x00	; 0
    467a:	70 e0       	ldi	r23, 0x00	; 0
    467c:	cb 01       	movw	r24, r22
}
    467e:	ff 90       	pop	r15
    4680:	ef 90       	pop	r14
    4682:	df 90       	pop	r13
    4684:	cf 90       	pop	r12
    4686:	08 95       	ret

00004688 <InitTimer>:

void InitTimer(Timer* timer)
{
  timer->end_time = 0;
    4688:	fc 01       	movw	r30, r24
    468a:	14 82       	std	Z+4, r1	; 0x04
    468c:	15 82       	std	Z+5, r1	; 0x05
    468e:	16 82       	std	Z+6, r1	; 0x06
    4690:	17 82       	std	Z+7, r1	; 0x07
    4692:	08 95       	ret

00004694 <NewNetwork>:
}


void NewNetwork(Network* n)
{
    4694:	fc 01       	movw	r30, r24
  //n->my_socket = 0; //initialized outside actually..
  n->mqttread = w5500_read;
    4696:	86 e3       	ldi	r24, 0x36	; 54
    4698:	92 e2       	ldi	r25, 0x22	; 34
    469a:	95 83       	std	Z+5, r25	; 0x05
    469c:	84 83       	std	Z+4, r24	; 0x04
  n->mqttwrite = w5500_write;
    469e:	81 e8       	ldi	r24, 0x81	; 129
    46a0:	92 e2       	ldi	r25, 0x22	; 34
    46a2:	97 83       	std	Z+7, r25	; 0x07
    46a4:	86 83       	std	Z+6, r24	; 0x06
  n->disconnect = w5500_disconnect;
    46a6:	83 ec       	ldi	r24, 0xC3	; 195
    46a8:	92 e2       	ldi	r25, 0x22	; 34
    46aa:	91 87       	std	Z+9, r25	; 0x09
    46ac:	80 87       	std	Z+8, r24	; 0x08
    46ae:	08 95       	ret

000046b0 <ConnectNetwork>:
{
  disconnect(n->my_socket);
}

int32_t ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
    46b0:	ef 92       	push	r14
    46b2:	ff 92       	push	r15
    46b4:	0f 93       	push	r16
    46b6:	1f 93       	push	r17
    46b8:	cf 93       	push	r28
    46ba:	df 93       	push	r29
    46bc:	ec 01       	movw	r28, r24
    46be:	8b 01       	movw	r16, r22
    46c0:	7a 01       	movw	r14, r20
  socket(n->my_socket, Sn_MR_TCP, 12345, 0);
    46c2:	20 e0       	ldi	r18, 0x00	; 0
    46c4:	49 e3       	ldi	r20, 0x39	; 57
    46c6:	50 e3       	ldi	r21, 0x30	; 48
    46c8:	61 e0       	ldi	r22, 0x01	; 1
    46ca:	88 81       	ld	r24, Y
    46cc:	0e 94 63 02 	call	0x4c6	; 0x4c6 <socket>
  connect(n->my_socket, ip, port);
    46d0:	a7 01       	movw	r20, r14
    46d2:	b8 01       	movw	r22, r16
    46d4:	88 81       	ld	r24, Y
    46d6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <connect>

  return 0;
}
    46da:	60 e0       	ldi	r22, 0x00	; 0
    46dc:	70 e0       	ldi	r23, 0x00	; 0
    46de:	cb 01       	movw	r24, r22
    46e0:	df 91       	pop	r29
    46e2:	cf 91       	pop	r28
    46e4:	1f 91       	pop	r17
    46e6:	0f 91       	pop	r16
    46e8:	ff 90       	pop	r15
    46ea:	ef 90       	pop	r14
    46ec:	08 95       	ret

000046ee <appDataConf>:
    46ee:	10 92 89 06 	sts	0x0689, r1	; 0x800689 <appDataReqBusy>
    46f2:	08 95       	ret

000046f4 <cs_sel>:
    46f4:	8b b1       	in	r24, 0x0b	; 11
    46f6:	8f 7b       	andi	r24, 0xBF	; 191
    46f8:	8b b9       	out	0x0b, r24	; 11
    46fa:	08 95       	ret

000046fc <cs_desel>:
    46fc:	8b b1       	in	r24, 0x0b	; 11
    46fe:	80 64       	ori	r24, 0x40	; 64
    4700:	8b b9       	out	0x0b, r24	; 11
    4702:	08 95       	ret

00004704 <spi_rb>:
    4704:	1e bc       	out	0x2e, r1	; 46
    4706:	0d b4       	in	r0, 0x2d	; 45
    4708:	07 fe       	sbrs	r0, 7
    470a:	fd cf       	rjmp	.-6      	; 0x4706 <spi_rb+0x2>
    470c:	8e b5       	in	r24, 0x2e	; 46
    470e:	08 95       	ret

00004710 <spi_wb>:
    4710:	8e bd       	out	0x2e, r24	; 46
    4712:	0d b4       	in	r0, 0x2d	; 45
    4714:	07 fe       	sbrs	r0, 7
    4716:	fd cf       	rjmp	.-6      	; 0x4712 <spi_wb+0x2>
    4718:	08 95       	ret

0000471a <spi_rb_burst>:
    471a:	fc 01       	movw	r30, r24
    471c:	20 e0       	ldi	r18, 0x00	; 0
    471e:	30 e0       	ldi	r19, 0x00	; 0
    4720:	09 c0       	rjmp	.+18     	; 0x4734 <spi_rb_burst+0x1a>
    4722:	1e bc       	out	0x2e, r1	; 46
    4724:	0d b4       	in	r0, 0x2d	; 45
    4726:	07 fe       	sbrs	r0, 7
    4728:	fd cf       	rjmp	.-6      	; 0x4724 <spi_rb_burst+0xa>
    472a:	8e b5       	in	r24, 0x2e	; 46
    472c:	80 83       	st	Z, r24
    472e:	2f 5f       	subi	r18, 0xFF	; 255
    4730:	3f 4f       	sbci	r19, 0xFF	; 255
    4732:	31 96       	adiw	r30, 0x01	; 1
    4734:	26 17       	cp	r18, r22
    4736:	37 07       	cpc	r19, r23
    4738:	a0 f3       	brcs	.-24     	; 0x4722 <spi_rb_burst+0x8>
    473a:	08 95       	ret

0000473c <spi_wb_burst>:
    473c:	fc 01       	movw	r30, r24
    473e:	20 e0       	ldi	r18, 0x00	; 0
    4740:	30 e0       	ldi	r19, 0x00	; 0
    4742:	0a c0       	rjmp	.+20     	; 0x4758 <spi_wb_burst+0x1c>
    4744:	cf 01       	movw	r24, r30
    4746:	01 96       	adiw	r24, 0x01	; 1
    4748:	40 81       	ld	r20, Z
    474a:	4e bd       	out	0x2e, r20	; 46
    474c:	0d b4       	in	r0, 0x2d	; 45
    474e:	07 fe       	sbrs	r0, 7
    4750:	fd cf       	rjmp	.-6      	; 0x474c <spi_wb_burst+0x10>
    4752:	2f 5f       	subi	r18, 0xFF	; 255
    4754:	3f 4f       	sbci	r19, 0xFF	; 255
    4756:	fc 01       	movw	r30, r24
    4758:	26 17       	cp	r18, r22
    475a:	37 07       	cpc	r19, r23
    475c:	98 f3       	brcs	.-26     	; 0x4744 <spi_wb_burst+0x8>
    475e:	08 95       	ret

00004760 <appSendData>:
    4760:	cf 93       	push	r28
    4762:	df 93       	push	r29
    4764:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <appDataReqBusy>
    4768:	81 11       	cpse	r24, r1
    476a:	24 c0       	rjmp	.+72     	; 0x47b4 <appSendData+0x54>
    476c:	c0 91 ae 05 	lds	r28, 0x05AE	; 0x8005ae <appUartBufferPtr>
    4770:	cc 23       	and	r28, r28
    4772:	01 f1       	breq	.+64     	; 0x47b4 <appSendData+0x54>
    4774:	4c 2f       	mov	r20, r28
    4776:	50 e0       	ldi	r21, 0x00	; 0
    4778:	6f ea       	ldi	r22, 0xAF	; 175
    477a:	75 e0       	ldi	r23, 0x05	; 5
    477c:	8c e1       	ldi	r24, 0x1C	; 28
    477e:	96 e0       	ldi	r25, 0x06	; 6
    4780:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <memcpy>
    4784:	ea e8       	ldi	r30, 0x8A	; 138
    4786:	f6 e0       	ldi	r31, 0x06	; 6
    4788:	16 82       	std	Z+6, r1	; 0x06
    478a:	15 82       	std	Z+5, r1	; 0x05
    478c:	d1 e0       	ldi	r29, 0x01	; 1
    478e:	d7 83       	std	Z+7, r29	; 0x07
    4790:	d0 87       	std	Z+8, r29	; 0x08
    4792:	82 e0       	ldi	r24, 0x02	; 2
    4794:	81 87       	std	Z+9, r24	; 0x09
    4796:	8c e1       	ldi	r24, 0x1C	; 28
    4798:	96 e0       	ldi	r25, 0x06	; 6
    479a:	93 87       	std	Z+11, r25	; 0x0b
    479c:	82 87       	std	Z+10, r24	; 0x0a
    479e:	c4 87       	std	Z+12, r28	; 0x0c
    47a0:	87 e7       	ldi	r24, 0x77	; 119
    47a2:	93 e2       	ldi	r25, 0x23	; 35
    47a4:	96 87       	std	Z+14, r25	; 0x0e
    47a6:	85 87       	std	Z+13, r24	; 0x0d
    47a8:	cf 01       	movw	r24, r30
    47aa:	e2 d7       	rcall	.+4036   	; 0x5770 <NWK_DataReq>
    47ac:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <appUartBufferPtr>
    47b0:	d0 93 89 06 	sts	0x0689, r29	; 0x800689 <appDataReqBusy>
    47b4:	df 91       	pop	r29
    47b6:	cf 91       	pop	r28
    47b8:	08 95       	ret

000047ba <appTimerHandler>:
    47ba:	d2 cf       	rjmp	.-92     	; 0x4760 <appSendData>
    47bc:	08 95       	ret

000047be <messageArrived>:
    47be:	af 92       	push	r10
    47c0:	bf 92       	push	r11
    47c2:	cf 92       	push	r12
    47c4:	df 92       	push	r13
    47c6:	ef 92       	push	r14
    47c8:	ff 92       	push	r15
    47ca:	0f 93       	push	r16
    47cc:	1f 93       	push	r17
    47ce:	cf 93       	push	r28
    47d0:	df 93       	push	r29
    47d2:	cd b7       	in	r28, 0x3d	; 61
    47d4:	de b7       	in	r29, 0x3e	; 62
    47d6:	cf 58       	subi	r28, 0x8F	; 143
    47d8:	d1 40       	sbci	r29, 0x01	; 1
    47da:	0f b6       	in	r0, 0x3f	; 63
    47dc:	f8 94       	cli
    47de:	de bf       	out	0x3e, r29	; 62
    47e0:	0f be       	out	0x3f, r0	; 63
    47e2:	cd bf       	out	0x3d, r28	; 61
    47e4:	20 91 c3 02 	lds	r18, 0x02C3	; 0x8002c3 <ClientID+0x5b>
    47e8:	30 91 c4 02 	lds	r19, 0x02C4	; 0x8002c4 <ClientID+0x5c>
    47ec:	3a 83       	std	Y+2, r19	; 0x02
    47ee:	29 83       	std	Y+1, r18	; 0x01
    47f0:	fe 01       	movw	r30, r28
    47f2:	33 96       	adiw	r30, 0x03	; 3
    47f4:	4e e3       	ldi	r20, 0x3E	; 62
    47f6:	df 01       	movw	r26, r30
    47f8:	1d 92       	st	X+, r1
    47fa:	4a 95       	dec	r20
    47fc:	e9 f7       	brne	.-6      	; 0x47f8 <messageArrived+0x3a>
    47fe:	7e 01       	movw	r14, r28
    4800:	b1 e4       	ldi	r27, 0x41	; 65
    4802:	eb 0e       	add	r14, r27
    4804:	f1 1c       	adc	r15, r1
    4806:	f7 01       	movw	r30, r14
    4808:	31 83       	std	Z+1, r19	; 0x01
    480a:	20 83       	st	Z, r18
    480c:	32 96       	adiw	r30, 0x02	; 2
    480e:	4e e7       	ldi	r20, 0x7E	; 126
    4810:	df 01       	movw	r26, r30
    4812:	1d 92       	st	X+, r1
    4814:	4a 95       	dec	r20
    4816:	e9 f7       	brne	.-6      	; 0x4812 <messageArrived+0x54>
    4818:	8e 01       	movw	r16, r28
    481a:	0f 53       	subi	r16, 0x3F	; 63
    481c:	1f 4f       	sbci	r17, 0xFF	; 255
    481e:	f8 01       	movw	r30, r16
    4820:	21 93       	st	Z+, r18
    4822:	31 93       	st	Z+, r19
    4824:	2a ea       	ldi	r18, 0xAA	; 170
    4826:	df 01       	movw	r26, r30
    4828:	1d 92       	st	X+, r1
    482a:	2a 95       	dec	r18
    482c:	e9 f7       	brne	.-6      	; 0x4828 <messageArrived+0x6a>
    482e:	fc 01       	movw	r30, r24
    4830:	a0 80       	ld	r10, Z
    4832:	b1 80       	ldd	r11, Z+1	; 0x01
    4834:	02 80       	ldd	r0, Z+2	; 0x02
    4836:	f3 81       	ldd	r31, Z+3	; 0x03
    4838:	e0 2d       	mov	r30, r0
    483a:	42 81       	ldd	r20, Z+2	; 0x02
    483c:	53 81       	ldd	r21, Z+3	; 0x03
    483e:	64 81       	ldd	r22, Z+4	; 0x04
    4840:	75 81       	ldd	r23, Z+5	; 0x05
    4842:	86 81       	ldd	r24, Z+6	; 0x06
    4844:	97 81       	ldd	r25, Z+7	; 0x07
    4846:	bc 01       	movw	r22, r24
    4848:	9e 01       	movw	r18, r28
    484a:	2f 5f       	subi	r18, 0xFF	; 255
    484c:	3f 4f       	sbci	r19, 0xFF	; 255
    484e:	69 01       	movw	r12, r18
    4850:	c9 01       	movw	r24, r18
    4852:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <strncpy>
    4856:	d5 01       	movw	r26, r10
    4858:	15 96       	adiw	r26, 0x05	; 5
    485a:	6d 91       	ld	r22, X+
    485c:	7c 91       	ld	r23, X
    485e:	16 97       	sbiw	r26, 0x06	; 6
    4860:	17 96       	adiw	r26, 0x07	; 7
    4862:	4d 91       	ld	r20, X+
    4864:	5c 91       	ld	r21, X
    4866:	18 97       	sbiw	r26, 0x08	; 8
    4868:	c7 01       	movw	r24, r14
    486a:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <strncpy>
    486e:	ff 92       	push	r15
    4870:	ef 92       	push	r14
    4872:	df 92       	push	r13
    4874:	cf 92       	push	r12
    4876:	80 e7       	ldi	r24, 0x70	; 112
    4878:	93 e0       	ldi	r25, 0x03	; 3
    487a:	9f 93       	push	r25
    487c:	8f 93       	push	r24
    487e:	1f 93       	push	r17
    4880:	0f 93       	push	r16
    4882:	0e 94 13 36 	call	0x6c26	; 0x6c26 <sprintf_P>
    4886:	c8 01       	movw	r24, r16
    4888:	a7 d5       	rcall	.+2894   	; 0x53d8 <HAL_UARTWriteString>
    488a:	6b e7       	ldi	r22, 0x7B	; 123
    488c:	70 e0       	ldi	r23, 0x00	; 0
    488e:	c8 01       	movw	r24, r16
    4890:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <strchr>
    4894:	0f b6       	in	r0, 0x3f	; 63
    4896:	f8 94       	cli
    4898:	de bf       	out	0x3e, r29	; 62
    489a:	0f be       	out	0x3f, r0	; 63
    489c:	cd bf       	out	0x3d, r28	; 61
    489e:	89 2b       	or	r24, r25
    48a0:	09 f4       	brne	.+2      	; 0x48a4 <messageArrived+0xe6>
    48a2:	9b c0       	rjmp	.+310    	; 0x49da <messageArrived+0x21c>
    48a4:	ce 01       	movw	r24, r28
    48a6:	86 57       	subi	r24, 0x76	; 118
    48a8:	9e 4f       	sbci	r25, 0xFE	; 254
    48aa:	9f 93       	push	r25
    48ac:	8f 93       	push	r24
    48ae:	02 96       	adiw	r24, 0x02	; 2
    48b0:	9f 93       	push	r25
    48b2:	8f 93       	push	r24
    48b4:	40 97       	sbiw	r24, 0x10	; 16
    48b6:	9f 93       	push	r25
    48b8:	8f 93       	push	r24
    48ba:	42 96       	adiw	r24, 0x12	; 18
    48bc:	9f 93       	push	r25
    48be:	8f 93       	push	r24
    48c0:	04 55       	subi	r16, 0x54	; 84
    48c2:	1f 4f       	sbci	r17, 0xFF	; 255
    48c4:	1f 93       	push	r17
    48c6:	0f 93       	push	r16
    48c8:	82 e5       	ldi	r24, 0x52	; 82
    48ca:	93 e0       	ldi	r25, 0x03	; 3
    48cc:	9f 93       	push	r25
    48ce:	8f 93       	push	r24
    48d0:	c7 01       	movw	r24, r14
    48d2:	9f 93       	push	r25
    48d4:	ef 92       	push	r14
    48d6:	0e 94 41 36 	call	0x6c82	; 0x6c82 <sscanf>
    48da:	61 e6       	ldi	r22, 0x61	; 97
    48dc:	73 e0       	ldi	r23, 0x03	; 3
    48de:	c8 01       	movw	r24, r16
    48e0:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <strstr>
    48e4:	0f b6       	in	r0, 0x3f	; 63
    48e6:	f8 94       	cli
    48e8:	de bf       	out	0x3e, r29	; 62
    48ea:	0f be       	out	0x3f, r0	; 63
    48ec:	cd bf       	out	0x3d, r28	; 61
    48ee:	89 2b       	or	r24, r25
    48f0:	09 f1       	breq	.+66     	; 0x4934 <messageArrived+0x176>
    48f2:	c2 57       	subi	r28, 0x72	; 114
    48f4:	de 4f       	sbci	r29, 0xFE	; 254
    48f6:	88 81       	ld	r24, Y
    48f8:	ce 58       	subi	r28, 0x8E	; 142
    48fa:	d1 40       	sbci	r29, 0x01	; 1
    48fc:	c1 57       	subi	r28, 0x71	; 113
    48fe:	de 4f       	sbci	r29, 0xFE	; 254
    4900:	98 81       	ld	r25, Y
    4902:	cf 58       	subi	r28, 0x8F	; 143
    4904:	d1 40       	sbci	r29, 0x01	; 1
    4906:	0c 5a       	subi	r16, 0xAC	; 172
    4908:	11 09       	sbc	r17, r1
    490a:	d8 01       	movw	r26, r16
    490c:	1c 92       	st	X, r1
    490e:	9f 93       	push	r25
    4910:	8f 93       	push	r24
    4912:	89 e4       	ldi	r24, 0x49	; 73
    4914:	93 e0       	ldi	r25, 0x03	; 3
    4916:	9f 93       	push	r25
    4918:	8f 93       	push	r24
    491a:	1f 93       	push	r17
    491c:	0f 93       	push	r16
    491e:	0e 94 13 36 	call	0x6c26	; 0x6c26 <sprintf_P>
    4922:	c8 01       	movw	r24, r16
    4924:	59 d5       	rcall	.+2738   	; 0x53d8 <HAL_UARTWriteString>
    4926:	0f 90       	pop	r0
    4928:	0f 90       	pop	r0
    492a:	0f 90       	pop	r0
    492c:	0f 90       	pop	r0
    492e:	0f 90       	pop	r0
    4930:	0f 90       	pop	r0
    4932:	2a c0       	rjmp	.+84     	; 0x4988 <messageArrived+0x1ca>
    4934:	61 e6       	ldi	r22, 0x61	; 97
    4936:	73 e0       	ldi	r23, 0x03	; 3
    4938:	ce 01       	movw	r24, r28
    493a:	84 58       	subi	r24, 0x84	; 132
    493c:	9e 4f       	sbci	r25, 0xFE	; 254
    493e:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <strstr>
    4942:	89 2b       	or	r24, r25
    4944:	09 f1       	breq	.+66     	; 0x4988 <messageArrived+0x1ca>
    4946:	c4 57       	subi	r28, 0x74	; 116
    4948:	de 4f       	sbci	r29, 0xFE	; 254
    494a:	88 81       	ld	r24, Y
    494c:	cc 58       	subi	r28, 0x8C	; 140
    494e:	d1 40       	sbci	r29, 0x01	; 1
    4950:	c3 57       	subi	r28, 0x73	; 115
    4952:	de 4f       	sbci	r29, 0xFE	; 254
    4954:	98 81       	ld	r25, Y
    4956:	cd 58       	subi	r28, 0x8D	; 141
    4958:	d1 40       	sbci	r29, 0x01	; 1
    495a:	8e 01       	movw	r16, r28
    495c:	0f 53       	subi	r16, 0x3F	; 63
    495e:	1f 4f       	sbci	r17, 0xFF	; 255
    4960:	f8 01       	movw	r30, r16
    4962:	10 82       	st	Z, r1
    4964:	9f 93       	push	r25
    4966:	8f 93       	push	r24
    4968:	82 e2       	ldi	r24, 0x22	; 34
    496a:	93 e0       	ldi	r25, 0x03	; 3
    496c:	9f 93       	push	r25
    496e:	8f 93       	push	r24
    4970:	1f 93       	push	r17
    4972:	0f 93       	push	r16
    4974:	0e 94 13 36 	call	0x6c26	; 0x6c26 <sprintf_P>
    4978:	c8 01       	movw	r24, r16
    497a:	2e d5       	rcall	.+2652   	; 0x53d8 <HAL_UARTWriteString>
    497c:	0f 90       	pop	r0
    497e:	0f 90       	pop	r0
    4980:	0f 90       	pop	r0
    4982:	0f 90       	pop	r0
    4984:	0f 90       	pop	r0
    4986:	0f 90       	pop	r0
    4988:	6c e6       	ldi	r22, 0x6C	; 108
    498a:	73 e0       	ldi	r23, 0x03	; 3
    498c:	ce 01       	movw	r24, r28
    498e:	83 59       	subi	r24, 0x93	; 147
    4990:	9e 4f       	sbci	r25, 0xFE	; 254
    4992:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <strstr>
    4996:	89 2b       	or	r24, r25
    4998:	61 f0       	breq	.+24     	; 0x49b2 <messageArrived+0x1f4>
    499a:	c2 57       	subi	r28, 0x72	; 114
    499c:	de 4f       	sbci	r29, 0xFE	; 254
    499e:	88 81       	ld	r24, Y
    49a0:	99 81       	ldd	r25, Y+1	; 0x01
    49a2:	ce 58       	subi	r28, 0x8E	; 142
    49a4:	d1 40       	sbci	r29, 0x01	; 1
    49a6:	01 97       	sbiw	r24, 0x01	; 1
    49a8:	c1 f4       	brne	.+48     	; 0x49da <messageArrived+0x21c>
    49aa:	86 e7       	ldi	r24, 0x76	; 118
    49ac:	93 e0       	ldi	r25, 0x03	; 3
    49ae:	14 d5       	rcall	.+2600   	; 0x53d8 <HAL_UARTWriteString>
    49b0:	14 c0       	rjmp	.+40     	; 0x49da <messageArrived+0x21c>
    49b2:	6c e6       	ldi	r22, 0x6C	; 108
    49b4:	73 e0       	ldi	r23, 0x03	; 3
    49b6:	ce 01       	movw	r24, r28
    49b8:	84 58       	subi	r24, 0x84	; 132
    49ba:	9e 4f       	sbci	r25, 0xFE	; 254
    49bc:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <strstr>
    49c0:	89 2b       	or	r24, r25
    49c2:	59 f0       	breq	.+22     	; 0x49da <messageArrived+0x21c>
    49c4:	c4 57       	subi	r28, 0x74	; 116
    49c6:	de 4f       	sbci	r29, 0xFE	; 254
    49c8:	88 81       	ld	r24, Y
    49ca:	99 81       	ldd	r25, Y+1	; 0x01
    49cc:	cc 58       	subi	r28, 0x8C	; 140
    49ce:	d1 40       	sbci	r29, 0x01	; 1
    49d0:	01 97       	sbiw	r24, 0x01	; 1
    49d2:	19 f4       	brne	.+6      	; 0x49da <messageArrived+0x21c>
    49d4:	86 e7       	ldi	r24, 0x76	; 118
    49d6:	93 e0       	ldi	r25, 0x03	; 3
    49d8:	ff d4       	rcall	.+2558   	; 0x53d8 <HAL_UARTWriteString>
    49da:	c1 57       	subi	r28, 0x71	; 113
    49dc:	de 4f       	sbci	r29, 0xFE	; 254
    49de:	0f b6       	in	r0, 0x3f	; 63
    49e0:	f8 94       	cli
    49e2:	de bf       	out	0x3e, r29	; 62
    49e4:	0f be       	out	0x3f, r0	; 63
    49e6:	cd bf       	out	0x3d, r28	; 61
    49e8:	df 91       	pop	r29
    49ea:	cf 91       	pop	r28
    49ec:	1f 91       	pop	r17
    49ee:	0f 91       	pop	r16
    49f0:	ff 90       	pop	r15
    49f2:	ef 90       	pop	r14
    49f4:	df 90       	pop	r13
    49f6:	cf 90       	pop	r12
    49f8:	bf 90       	pop	r11
    49fa:	af 90       	pop	r10
    49fc:	08 95       	ret

000049fe <appInit>:
    49fe:	81 e0       	ldi	r24, 0x01	; 1
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	ee d5       	rcall	.+3036   	; 0x55e0 <NWK_SetAddr>
    4a04:	88 e7       	ldi	r24, 0x78	; 120
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	f2 d5       	rcall	.+3044   	; 0x55ee <NWK_SetPanId>
    4a0a:	8f e0       	ldi	r24, 0x0F	; 15
    4a0c:	0e 94 19 33 	call	0x6632	; 0x6632 <PHY_SetChannel>
    4a10:	81 e0       	ldi	r24, 0x01	; 1
    4a12:	0e 94 15 33 	call	0x662a	; 0x662a <PHY_SetRxState>
    4a16:	62 ee       	ldi	r22, 0xE2	; 226
    4a18:	75 e2       	ldi	r23, 0x25	; 37
    4a1a:	81 e0       	ldi	r24, 0x01	; 1
    4a1c:	ef d5       	rcall	.+3038   	; 0x55fc <NWK_OpenEndpoint>
    4a1e:	eb e9       	ldi	r30, 0x9B	; 155
    4a20:	f6 e0       	ldi	r31, 0x06	; 6
    4a22:	84 e1       	ldi	r24, 0x14	; 20
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	a0 e0       	ldi	r26, 0x00	; 0
    4a28:	b0 e0       	ldi	r27, 0x00	; 0
    4a2a:	86 83       	std	Z+6, r24	; 0x06
    4a2c:	97 83       	std	Z+7, r25	; 0x07
    4a2e:	a0 87       	std	Z+8, r26	; 0x08
    4a30:	b1 87       	std	Z+9, r27	; 0x09
    4a32:	12 86       	std	Z+10, r1	; 0x0a
    4a34:	8d ed       	ldi	r24, 0xDD	; 221
    4a36:	93 e2       	ldi	r25, 0x23	; 35
    4a38:	94 87       	std	Z+12, r25	; 0x0c
    4a3a:	83 87       	std	Z+11, r24	; 0x0b
    4a3c:	08 95       	ret

00004a3e <APP_TaskHandler>:
    4a3e:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <appState>
    4a42:	81 11       	cpse	r24, r1
    4a44:	04 c0       	rjmp	.+8      	; 0x4a4e <APP_TaskHandler+0x10>
    4a46:	db df       	rcall	.-74     	; 0x49fe <appInit>
    4a48:	81 e0       	ldi	r24, 0x01	; 1
    4a4a:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <appState>
    4a4e:	08 95       	ret

00004a50 <HAL_UartBytesReceived>:
    4a50:	ff 92       	push	r15
    4a52:	0f 93       	push	r16
    4a54:	1f 93       	push	r17
    4a56:	cf 93       	push	r28
    4a58:	df 93       	push	r29
    4a5a:	8c 01       	movw	r16, r24
    4a5c:	c0 e0       	ldi	r28, 0x00	; 0
    4a5e:	d0 e0       	ldi	r29, 0x00	; 0
    4a60:	14 c0       	rjmp	.+40     	; 0x4a8a <HAL_UartBytesReceived+0x3a>
    4a62:	c6 d4       	rcall	.+2444   	; 0x53f0 <HAL_UartReadByte>
    4a64:	f8 2e       	mov	r15, r24
    4a66:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <appUartBufferPtr>
    4a6a:	8d 36       	cpi	r24, 0x6D	; 109
    4a6c:	09 f4       	brne	.+2      	; 0x4a70 <HAL_UartBytesReceived+0x20>
    4a6e:	78 de       	rcall	.-784    	; 0x4760 <appSendData>
    4a70:	e0 91 ae 05 	lds	r30, 0x05AE	; 0x8005ae <appUartBufferPtr>
    4a74:	ed 36       	cpi	r30, 0x6D	; 109
    4a76:	40 f4       	brcc	.+16     	; 0x4a88 <HAL_UartBytesReceived+0x38>
    4a78:	81 e0       	ldi	r24, 0x01	; 1
    4a7a:	8e 0f       	add	r24, r30
    4a7c:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <appUartBufferPtr>
    4a80:	f0 e0       	ldi	r31, 0x00	; 0
    4a82:	e1 55       	subi	r30, 0x51	; 81
    4a84:	fa 4f       	sbci	r31, 0xFA	; 250
    4a86:	f0 82       	st	Z, r15
    4a88:	21 96       	adiw	r28, 0x01	; 1
    4a8a:	c0 17       	cp	r28, r16
    4a8c:	d1 07       	cpc	r29, r17
    4a8e:	48 f3       	brcs	.-46     	; 0x4a62 <HAL_UartBytesReceived+0x12>
    4a90:	8b e9       	ldi	r24, 0x9B	; 155
    4a92:	96 e0       	ldi	r25, 0x06	; 6
    4a94:	0e 94 4e 34 	call	0x689c	; 0x689c <SYS_TimerStop>
    4a98:	8b e9       	ldi	r24, 0x9B	; 155
    4a9a:	96 e0       	ldi	r25, 0x06	; 6
    4a9c:	0e 94 98 34 	call	0x6930	; 0x6930 <SYS_TimerStart>
    4aa0:	df 91       	pop	r29
    4aa2:	cf 91       	pop	r28
    4aa4:	1f 91       	pop	r17
    4aa6:	0f 91       	pop	r16
    4aa8:	ff 90       	pop	r15
    4aaa:	08 95       	ret

00004aac <mqtt_pub>:
    4aac:	af 92       	push	r10
    4aae:	bf 92       	push	r11
    4ab0:	cf 92       	push	r12
    4ab2:	df 92       	push	r13
    4ab4:	ef 92       	push	r14
    4ab6:	ff 92       	push	r15
    4ab8:	0f 93       	push	r16
    4aba:	1f 93       	push	r17
    4abc:	cf 93       	push	r28
    4abe:	df 93       	push	r29
    4ac0:	cd b7       	in	r28, 0x3d	; 61
    4ac2:	de b7       	in	r29, 0x3e	; 62
    4ac4:	29 97       	sbiw	r28, 0x09	; 9
    4ac6:	0f b6       	in	r0, 0x3f	; 63
    4ac8:	f8 94       	cli
    4aca:	de bf       	out	0x3e, r29	; 62
    4acc:	0f be       	out	0x3f, r0	; 63
    4ace:	cd bf       	out	0x3d, r28	; 61
    4ad0:	8c 01       	movw	r16, r24
    4ad2:	7b 01       	movw	r14, r22
    4ad4:	6a 01       	movw	r12, r20
    4ad6:	59 01       	movw	r10, r18
    4ad8:	a8 95       	wdr
    4ada:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <mqtt_pub_count.3569>
    4ade:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <mqtt_pub_count.3569+0x1>
    4ae2:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <mqtt_pub_count.3569+0x2>
    4ae6:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <mqtt_pub_count.3569+0x3>
    4aea:	01 96       	adiw	r24, 0x01	; 1
    4aec:	a1 1d       	adc	r26, r1
    4aee:	b1 1d       	adc	r27, r1
    4af0:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <mqtt_pub_count.3569>
    4af4:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <mqtt_pub_count.3569+0x1>
    4af8:	a0 93 8a 04 	sts	0x048A, r26	; 0x80048a <mqtt_pub_count.3569+0x2>
    4afc:	b0 93 8b 04 	sts	0x048B, r27	; 0x80048b <mqtt_pub_count.3569+0x3>
    4b00:	bf 93       	push	r27
    4b02:	af 93       	push	r26
    4b04:	9f 93       	push	r25
    4b06:	8f 93       	push	r24
    4b08:	8e e0       	ldi	r24, 0x0E	; 14
    4b0a:	93 e0       	ldi	r25, 0x03	; 3
    4b0c:	9f 93       	push	r25
    4b0e:	8f 93       	push	r24
    4b10:	0e 94 ec 35 	call	0x6bd8	; 0x6bd8 <printf_P>
    4b14:	19 82       	std	Y+1, r1	; 0x01
    4b16:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <mes_id>
    4b1a:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <mes_id+0x1>
    4b1e:	9c 01       	movw	r18, r24
    4b20:	2f 5f       	subi	r18, 0xFF	; 255
    4b22:	3f 4f       	sbci	r19, 0xFF	; 255
    4b24:	30 93 9d 23 	sts	0x239D, r19	; 0x80239d <mes_id+0x1>
    4b28:	20 93 9c 23 	sts	0x239C, r18	; 0x80239c <mes_id>
    4b2c:	9d 83       	std	Y+5, r25	; 0x05
    4b2e:	8c 83       	std	Y+4, r24	; 0x04
    4b30:	b9 86       	std	Y+9, r11	; 0x09
    4b32:	a8 86       	std	Y+8, r10	; 0x08
    4b34:	df 82       	std	Y+7, r13	; 0x07
    4b36:	ce 82       	std	Y+6, r12	; 0x06
    4b38:	ae 01       	movw	r20, r28
    4b3a:	4f 5f       	subi	r20, 0xFF	; 255
    4b3c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b3e:	b7 01       	movw	r22, r14
    4b40:	c8 01       	movw	r24, r16
    4b42:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <MQTTPublish>
    4b46:	0f 90       	pop	r0
    4b48:	0f 90       	pop	r0
    4b4a:	0f 90       	pop	r0
    4b4c:	0f 90       	pop	r0
    4b4e:	0f 90       	pop	r0
    4b50:	0f 90       	pop	r0
    4b52:	67 2b       	or	r22, r23
    4b54:	68 2b       	or	r22, r24
    4b56:	69 2b       	or	r22, r25
    4b58:	59 f4       	brne	.+22     	; 0x4b70 <mqtt_pub+0xc4>
    4b5a:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <mqtt_err_cnt.3570>
    4b5e:	86 e0       	ldi	r24, 0x06	; 6
    4b60:	93 e0       	ldi	r25, 0x03	; 3
    4b62:	9f 93       	push	r25
    4b64:	8f 93       	push	r24
    4b66:	0e 94 ec 35 	call	0x6bd8	; 0x6bd8 <printf_P>
    4b6a:	0f 90       	pop	r0
    4b6c:	0f 90       	pop	r0
    4b6e:	19 c0       	rjmp	.+50     	; 0x4ba2 <mqtt_pub+0xf6>
    4b70:	8b ef       	ldi	r24, 0xFB	; 251
    4b72:	92 e0       	ldi	r25, 0x02	; 2
    4b74:	9f 93       	push	r25
    4b76:	8f 93       	push	r24
    4b78:	0e 94 ec 35 	call	0x6bd8	; 0x6bd8 <printf_P>
    4b7c:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <mqtt_err_cnt.3570>
    4b80:	91 e0       	ldi	r25, 0x01	; 1
    4b82:	98 0f       	add	r25, r24
    4b84:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <mqtt_err_cnt.3570>
    4b88:	0f 90       	pop	r0
    4b8a:	0f 90       	pop	r0
    4b8c:	85 31       	cpi	r24, 0x15	; 21
    4b8e:	48 f0       	brcs	.+18     	; 0x4ba2 <mqtt_pub+0xf6>
    4b90:	8e eb       	ldi	r24, 0xBE	; 190
    4b92:	92 e0       	ldi	r25, 0x02	; 2
    4b94:	9f 93       	push	r25
    4b96:	8f 93       	push	r24
    4b98:	0e 94 ec 35 	call	0x6bd8	; 0x6bd8 <printf_P>
    4b9c:	0f 90       	pop	r0
    4b9e:	0f 90       	pop	r0
    4ba0:	ff cf       	rjmp	.-2      	; 0x4ba0 <mqtt_pub+0xf4>
    4ba2:	29 96       	adiw	r28, 0x09	; 9
    4ba4:	0f b6       	in	r0, 0x3f	; 63
    4ba6:	f8 94       	cli
    4ba8:	de bf       	out	0x3e, r29	; 62
    4baa:	0f be       	out	0x3f, r0	; 63
    4bac:	cd bf       	out	0x3d, r28	; 61
    4bae:	df 91       	pop	r29
    4bb0:	cf 91       	pop	r28
    4bb2:	1f 91       	pop	r17
    4bb4:	0f 91       	pop	r16
    4bb6:	ff 90       	pop	r15
    4bb8:	ef 90       	pop	r14
    4bba:	df 90       	pop	r13
    4bbc:	cf 90       	pop	r12
    4bbe:	bf 90       	pop	r11
    4bc0:	af 90       	pop	r10
    4bc2:	08 95       	ret

00004bc4 <appDataInd>:
    4bc4:	0f 93       	push	r16
    4bc6:	1f 93       	push	r17
    4bc8:	cf 93       	push	r28
    4bca:	8c 01       	movw	r16, r24
    4bcc:	ee e2       	ldi	r30, 0x2E	; 46
    4bce:	f5 e0       	ldi	r31, 0x05	; 5
    4bd0:	10 82       	st	Z, r1
    4bd2:	dc 01       	movw	r26, r24
    4bd4:	18 96       	adiw	r26, 0x08	; 8
    4bd6:	8c 91       	ld	r24, X
    4bd8:	18 97       	sbiw	r26, 0x08	; 8
    4bda:	8f 93       	push	r24
    4bdc:	17 96       	adiw	r26, 0x07	; 7
    4bde:	8c 91       	ld	r24, X
    4be0:	8f 93       	push	r24
    4be2:	8e e5       	ldi	r24, 0x5E	; 94
    4be4:	91 e0       	ldi	r25, 0x01	; 1
    4be6:	9f 93       	push	r25
    4be8:	8f 93       	push	r24
    4bea:	ff 93       	push	r31
    4bec:	ef 93       	push	r30
    4bee:	0e 94 13 36 	call	0x6c26	; 0x6c26 <sprintf_P>
    4bf2:	9c 01       	movw	r18, r24
    4bf4:	4e e2       	ldi	r20, 0x2E	; 46
    4bf6:	55 e0       	ldi	r21, 0x05	; 5
    4bf8:	6e e7       	ldi	r22, 0x7E	; 126
    4bfa:	73 e0       	ldi	r23, 0x03	; 3
    4bfc:	81 ef       	ldi	r24, 0xF1	; 241
    4bfe:	94 e0       	ldi	r25, 0x04	; 4
    4c00:	55 df       	rcall	.-342    	; 0x4aac <mqtt_pub>
    4c02:	0f 90       	pop	r0
    4c04:	0f 90       	pop	r0
    4c06:	0f 90       	pop	r0
    4c08:	0f 90       	pop	r0
    4c0a:	0f 90       	pop	r0
    4c0c:	0f 90       	pop	r0
    4c0e:	c0 e0       	ldi	r28, 0x00	; 0
    4c10:	0a c0       	rjmp	.+20     	; 0x4c26 <appDataInd+0x62>
    4c12:	d8 01       	movw	r26, r16
    4c14:	17 96       	adiw	r26, 0x07	; 7
    4c16:	ed 91       	ld	r30, X+
    4c18:	fc 91       	ld	r31, X
    4c1a:	18 97       	sbiw	r26, 0x08	; 8
    4c1c:	ec 0f       	add	r30, r28
    4c1e:	f1 1d       	adc	r31, r1
    4c20:	80 81       	ld	r24, Z
    4c22:	b3 d3       	rcall	.+1894   	; 0x538a <HAL_UartWriteByte>
    4c24:	cf 5f       	subi	r28, 0xFF	; 255
    4c26:	f8 01       	movw	r30, r16
    4c28:	81 85       	ldd	r24, Z+9	; 0x09
    4c2a:	c8 17       	cp	r28, r24
    4c2c:	90 f3       	brcs	.-28     	; 0x4c12 <appDataInd+0x4e>
    4c2e:	81 e0       	ldi	r24, 0x01	; 1
    4c30:	cf 91       	pop	r28
    4c32:	1f 91       	pop	r17
    4c34:	0f 91       	pop	r16
    4c36:	08 95       	ret

00004c38 <freeRam>:
    4c38:	cf 93       	push	r28
    4c3a:	df 93       	push	r29
    4c3c:	1f 92       	push	r1
    4c3e:	1f 92       	push	r1
    4c40:	cd b7       	in	r28, 0x3d	; 61
    4c42:	de b7       	in	r29, 0x3e	; 62
    4c44:	80 91 c7 25 	lds	r24, 0x25C7	; 0x8025c7 <__brkval>
    4c48:	90 91 c8 25 	lds	r25, 0x25C8	; 0x8025c8 <__brkval+0x1>
    4c4c:	00 97       	sbiw	r24, 0x00	; 0
    4c4e:	11 f0       	breq	.+4      	; 0x4c54 <freeRam+0x1c>
    4c50:	9c 01       	movw	r18, r24
    4c52:	02 c0       	rjmp	.+4      	; 0x4c58 <freeRam+0x20>
    4c54:	22 ed       	ldi	r18, 0xD2	; 210
    4c56:	35 e2       	ldi	r19, 0x25	; 37
    4c58:	ce 01       	movw	r24, r28
    4c5a:	01 96       	adiw	r24, 0x01	; 1
    4c5c:	82 1b       	sub	r24, r18
    4c5e:	93 0b       	sbc	r25, r19
    4c60:	0f 90       	pop	r0
    4c62:	0f 90       	pop	r0
    4c64:	df 91       	pop	r29
    4c66:	cf 91       	pop	r28
    4c68:	08 95       	ret

00004c6a <__vector_21>:
    4c6a:	1f 92       	push	r1
    4c6c:	0f 92       	push	r0
    4c6e:	0f b6       	in	r0, 0x3f	; 63
    4c70:	0f 92       	push	r0
    4c72:	11 24       	eor	r1, r1
    4c74:	8f 93       	push	r24
    4c76:	9f 93       	push	r25
    4c78:	af 93       	push	r26
    4c7a:	bf 93       	push	r27
    4c7c:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <_millis>
    4c80:	90 91 99 21 	lds	r25, 0x2199	; 0x802199 <_millis+0x1>
    4c84:	a0 91 9a 21 	lds	r26, 0x219A	; 0x80219a <_millis+0x2>
    4c88:	b0 91 9b 21 	lds	r27, 0x219B	; 0x80219b <_millis+0x3>
    4c8c:	01 96       	adiw	r24, 0x01	; 1
    4c8e:	a1 1d       	adc	r26, r1
    4c90:	b1 1d       	adc	r27, r1
    4c92:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <_millis>
    4c96:	90 93 99 21 	sts	0x2199, r25	; 0x802199 <_millis+0x1>
    4c9a:	a0 93 9a 21 	sts	0x219A, r26	; 0x80219a <_millis+0x2>
    4c9e:	b0 93 9b 21 	sts	0x219B, r27	; 0x80219b <_millis+0x3>
    4ca2:	bf 91       	pop	r27
    4ca4:	af 91       	pop	r26
    4ca6:	9f 91       	pop	r25
    4ca8:	8f 91       	pop	r24
    4caa:	0f 90       	pop	r0
    4cac:	0f be       	out	0x3f, r0	; 63
    4cae:	0f 90       	pop	r0
    4cb0:	1f 90       	pop	r1
    4cb2:	18 95       	reti

00004cb4 <millis>:
    4cb4:	f8 94       	cli
    4cb6:	60 91 98 21 	lds	r22, 0x2198	; 0x802198 <_millis>
    4cba:	70 91 99 21 	lds	r23, 0x2199	; 0x802199 <_millis+0x1>
    4cbe:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <_millis+0x2>
    4cc2:	90 91 9b 21 	lds	r25, 0x219B	; 0x80219b <_millis+0x3>
    4cc6:	78 94       	sei
    4cc8:	08 95       	ret

00004cca <IO_LIBRARY_Init>:
    4cca:	cf 93       	push	r28
    4ccc:	df 93       	push	r29
    4cce:	cd b7       	in	r28, 0x3d	; 61
    4cd0:	de b7       	in	r29, 0x3e	; 62
    4cd2:	28 97       	sbiw	r28, 0x08	; 8
    4cd4:	0f b6       	in	r0, 0x3f	; 63
    4cd6:	f8 94       	cli
    4cd8:	de bf       	out	0x3e, r29	; 62
    4cda:	0f be       	out	0x3f, r0	; 63
    4cdc:	cd bf       	out	0x3d, r28	; 61
    4cde:	88 e0       	ldi	r24, 0x08	; 8
    4ce0:	e3 e0       	ldi	r30, 0x03	; 3
    4ce2:	f3 e0       	ldi	r31, 0x03	; 3
    4ce4:	de 01       	movw	r26, r28
    4ce6:	11 96       	adiw	r26, 0x01	; 1
    4ce8:	01 90       	ld	r0, Z+
    4cea:	0d 92       	st	X+, r0
    4cec:	8a 95       	dec	r24
    4cee:	e1 f7       	brne	.-8      	; 0x4ce8 <IO_LIBRARY_Init+0x1e>
    4cf0:	6e e7       	ldi	r22, 0x7E	; 126
    4cf2:	73 e2       	ldi	r23, 0x23	; 35
    4cf4:	8a e7       	ldi	r24, 0x7A	; 122
    4cf6:	93 e2       	ldi	r25, 0x23	; 35
    4cf8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <reg_wizchip_cs_cbfunc>
    4cfc:	68 e8       	ldi	r22, 0x88	; 136
    4cfe:	73 e2       	ldi	r23, 0x23	; 35
    4d00:	82 e8       	ldi	r24, 0x82	; 130
    4d02:	93 e2       	ldi	r25, 0x23	; 35
    4d04:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <reg_wizchip_spi_cbfunc>
    4d08:	6e e9       	ldi	r22, 0x9E	; 158
    4d0a:	73 e2       	ldi	r23, 0x23	; 35
    4d0c:	8d e8       	ldi	r24, 0x8D	; 141
    4d0e:	93 e2       	ldi	r25, 0x23	; 35
    4d10:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <reg_wizchip_spiburst_cbfunc>
    4d14:	be 01       	movw	r22, r28
    4d16:	6f 5f       	subi	r22, 0xFF	; 255
    4d18:	7f 4f       	sbci	r23, 0xFF	; 255
    4d1a:	cb 01       	movw	r24, r22
    4d1c:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <wizchip_init>
    4d20:	81 e3       	ldi	r24, 0x31	; 49
    4d22:	92 e0       	ldi	r25, 0x02	; 2
    4d24:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <wizchip_setnetinfo>
    4d28:	28 96       	adiw	r28, 0x08	; 8
    4d2a:	0f b6       	in	r0, 0x3f	; 63
    4d2c:	f8 94       	cli
    4d2e:	de bf       	out	0x3e, r29	; 62
    4d30:	0f be       	out	0x3f, r0	; 63
    4d32:	cd bf       	out	0x3d, r28	; 61
    4d34:	df 91       	pop	r29
    4d36:	cf 91       	pop	r28
    4d38:	08 95       	ret

00004d3a <timer0_init>:
    4d3a:	82 e0       	ldi	r24, 0x02	; 2
    4d3c:	84 bd       	out	0x24, r24	; 36
    4d3e:	83 e0       	ldi	r24, 0x03	; 3
    4d40:	85 bd       	out	0x25, r24	; 37
    4d42:	89 ef       	ldi	r24, 0xF9	; 249
    4d44:	87 bd       	out	0x27, r24	; 39
    4d46:	ee e6       	ldi	r30, 0x6E	; 110
    4d48:	f0 e0       	ldi	r31, 0x00	; 0
    4d4a:	80 81       	ld	r24, Z
    4d4c:	82 60       	ori	r24, 0x02	; 2
    4d4e:	80 83       	st	Z, r24
    4d50:	08 95       	ret

00004d52 <avr_init>:
    4d52:	99 e2       	ldi	r25, 0x29	; 41
    4d54:	88 e1       	ldi	r24, 0x18	; 24
    4d56:	0f b6       	in	r0, 0x3f	; 63
    4d58:	f8 94       	cli
    4d5a:	a8 95       	wdr
    4d5c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    4d60:	0f be       	out	0x3f, r0	; 63
    4d62:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    4d66:	a8 95       	wdr
    4d68:	60 e0       	ldi	r22, 0x00	; 0
    4d6a:	76 e9       	ldi	r23, 0x96	; 150
    4d6c:	80 e0       	ldi	r24, 0x00	; 0
    4d6e:	90 e0       	ldi	r25, 0x00	; 0
    4d70:	b7 d2       	rcall	.+1390   	; 0x52e0 <HAL_UartInit>
    4d72:	e3 df       	rcall	.-58     	; 0x4d3a <timer0_init>
    4d74:	78 94       	sei
    4d76:	08 95       	ret

00004d78 <testSPI>:
{
    uint8_t testData = 0xAA; // Test data to send
    uint8_t receivedData = 0x00;

    // Send data
    SPI_WRITE(testData);
    4d78:	8a ea       	ldi	r24, 0xAA	; 170
    4d7a:	8e bd       	out	0x2e, r24	; 46
    4d7c:	0d b4       	in	r0, 0x2d	; 45
    4d7e:	07 fe       	sbrs	r0, 7
    4d80:	fd cf       	rjmp	.-6      	; 0x4d7c <testSPI+0x4>

    // Read data
    SPI_READ(receivedData);
    4d82:	1e bc       	out	0x2e, r1	; 46
    4d84:	0d b4       	in	r0, 0x2d	; 45
    4d86:	07 fe       	sbrs	r0, 7
    4d88:	fd cf       	rjmp	.-6      	; 0x4d84 <testSPI+0xc>
    4d8a:	8e b5       	in	r24, 0x2e	; 46

    // Check if the received data matches the sent data
    if (receivedData == testData)
    4d8c:	8a 3a       	cpi	r24, 0xAA	; 170
    4d8e:	21 f4       	brne	.+8      	; 0x4d98 <testSPI+0x20>
    {
        HAL_UARTWriteString("SPI success\r\n");
    4d90:	84 e3       	ldi	r24, 0x34	; 52
    4d92:	94 e0       	ldi	r25, 0x04	; 4
    4d94:	21 c3       	rjmp	.+1602   	; 0x53d8 <HAL_UARTWriteString>
    4d96:	08 95       	ret
    }
    else
    {
        HAL_UARTWriteString("UASRT failure\r\n");
    4d98:	82 e4       	ldi	r24, 0x42	; 66
    4d9a:	94 e0       	ldi	r25, 0x04	; 4
    4d9c:	1d c3       	rjmp	.+1594   	; 0x53d8 <HAL_UARTWriteString>
    4d9e:	08 95       	ret

00004da0 <main>:


/*************************************************************************//**
*****************************************************************************/
int main(void)
{
    4da0:	cf 93       	push	r28
    4da2:	df 93       	push	r29
    4da4:	cd b7       	in	r28, 0x3d	; 61
    4da6:	de b7       	in	r29, 0x3e	; 62
    4da8:	c8 5b       	subi	r28, 0xB8	; 184
    4daa:	d1 09       	sbc	r29, r1
    4dac:	0f b6       	in	r0, 0x3f	; 63
    4dae:	f8 94       	cli
    4db0:	de bf       	out	0x3e, r29	; 62
    4db2:	0f be       	out	0x3f, r0	; 63
    4db4:	cd bf       	out	0x3d, r28	; 61
avr_init(); // Initialize the AVR microcontroller
    4db6:	cd df       	rcall	.-102    	; 0x4d52 <avr_init>
SYS_Init(); // LWM init
    4db8:	0e 94 e6 33 	call	0x67cc	; 0x67cc <SYS_Init>

HAL_UARTWriteString("UASRT success\r\n");
    4dbc:	82 e5       	ldi	r24, 0x52	; 82
    4dbe:	94 e0       	ldi	r25, 0x04	; 4
//startTimerMOJ();

spi_init(); //SPI Master, MODE0, 4Mhz(DIV4), CS_PB.3=HIGH - suitable for WIZNET 5x00(1/2/5)
    4dc0:	0b d3       	rcall	.+1558   	; 0x53d8 <HAL_UARTWriteString>
testSPI(); //test SPI communication with WIZNET 5x00
    4dc2:	32 d2       	rcall	.+1124   	; 0x5228 <spi_init>
    4dc4:	d9 df       	rcall	.-78     	; 0x4d78 <testSPI>

IO_LIBRARY_Init(); //After that ping must working
    4dc6:	81 df       	rcall	.-254    	; 0x4cca <IO_LIBRARY_Init>
    4dc8:	e1 e9       	ldi	r30, 0x91	; 145
	HAL_UARTWriteString(_msg);
	printf("> DNS 1st : %d.%d.%d.%d\r\n", netInfo.dns[0], netInfo.dns[1], netInfo.dns[2], netInfo.dns[3]);
	printf("> DNS 2nd : %d.%d.%d.%d\r\n", DNS_2nd[0], DNS_2nd[1], DNS_2nd[2], DNS_2nd[3]);
	printf("=======================================\r\n");
	#endif
	strcpy(_msg, "");
    4dca:	f4 e0       	ldi	r31, 0x04	; 4
    4dcc:	10 82       	st	Z, r1
    4dce:	8e e1       	ldi	r24, 0x1E	; 30
	_len = 0;
	_len = SPRINTF(_msg,"> Target Domain Name : %s\r\n", Domain_name);
    4dd0:	92 e0       	ldi	r25, 0x02	; 2
    4dd2:	9f 93       	push	r25
    4dd4:	8f 93       	push	r24
    4dd6:	82 ea       	ldi	r24, 0xA2	; 162
    4dd8:	92 e0       	ldi	r25, 0x02	; 2
    4dda:	9f 93       	push	r25
    4ddc:	8f 93       	push	r24
    4dde:	ff 93       	push	r31
    4de0:	ef 93       	push	r30
    4de2:	0e 94 13 36 	call	0x6c26	; 0x6c26 <sprintf_P>
	HAL_UARTWriteString(_msg);
    4de6:	81 e9       	ldi	r24, 0x91	; 145
    4de8:	94 e0       	ldi	r25, 0x04	; 4
    4dea:	f6 d2       	rcall	.+1516   	; 0x53d8 <HAL_UARTWriteString>
    4dec:	68 e9       	ldi	r22, 0x98	; 152
	#endif

	/* DNS client Initialization */
	DNS_init(SOCK_DNS, gDATABUF_DNS);
    4dee:	7d e1       	ldi	r23, 0x1D	; 29
    4df0:	86 e0       	ldi	r24, 0x06	; 6
    4df2:	0e 94 95 11 	call	0x232a	; 0x232a <DNS_init>
    4df6:	4d e8       	ldi	r20, 0x8D	; 141

	/* DNS processing */
	int32_t ret;
	if ((ret = DNS_run(netInfo.dns, Domain_name, Domain_IP)) > 0) // try to 1st DNS
    4df8:	54 e0       	ldi	r21, 0x04	; 4
    4dfa:	6e e1       	ldi	r22, 0x1E	; 30
    4dfc:	72 e0       	ldi	r23, 0x02	; 2
    4dfe:	83 e4       	ldi	r24, 0x43	; 67
    4e00:	92 e0       	ldi	r25, 0x02	; 2
    4e02:	0e 94 a2 11 	call	0x2344	; 0x2344 <DNS_run>
    4e06:	c8 2e       	mov	r12, r24
    4e08:	88 0f       	add	r24, r24
    4e0a:	dd 08       	sbc	r13, r13
    4e0c:	ee 08       	sbc	r14, r14
    4e0e:	ff 08       	sbc	r15, r15
    4e10:	0f 90       	pop	r0
    4e12:	0f 90       	pop	r0
    4e14:	0f 90       	pop	r0
    4e16:	0f 90       	pop	r0
    4e18:	0f 90       	pop	r0
    4e1a:	0f 90       	pop	r0
    4e1c:	1c 14       	cp	r1, r12
    4e1e:	1d 04       	cpc	r1, r13
    4e20:	1e 04       	cpc	r1, r14
    4e22:	1f 04       	cpc	r1, r15
    4e24:	9c f4       	brge	.+38     	; 0x4e4c <main+0xac>
    4e26:	e1 e9       	ldi	r30, 0x91	; 145
	{
		#ifdef DNS_INFO
		strcpy(_msg, "");
    4e28:	f4 e0       	ldi	r31, 0x04	; 4
    4e2a:	10 82       	st	Z, r1
    4e2c:	8e e8       	ldi	r24, 0x8E	; 142
		_len = 0;
		_len = SPRINTF(_msg,"> 1st DNS Respond\r\n");
    4e2e:	92 e0       	ldi	r25, 0x02	; 2
    4e30:	9f 93       	push	r25
    4e32:	8f 93       	push	r24
    4e34:	ff 93       	push	r31
    4e36:	ef 93       	push	r30
    4e38:	0e 94 13 36 	call	0x6c26	; 0x6c26 <sprintf_P>
		HAL_UARTWriteString(_msg);
    4e3c:	81 e9       	ldi	r24, 0x91	; 145
    4e3e:	94 e0       	ldi	r25, 0x04	; 4
    4e40:	cb d2       	rcall	.+1430   	; 0x53d8 <HAL_UARTWriteString>
    4e42:	0f 90       	pop	r0
    4e44:	0f 90       	pop	r0
    4e46:	0f 90       	pop	r0
    4e48:	0f 90       	pop	r0
    4e4a:	56 c0       	rjmp	.+172    	; 0x4ef8 <main+0x158>
    4e4c:	2f ef       	ldi	r18, 0xFF	; 255
		#endif
	}
	else if ((ret != -1) && ((ret = DNS_run(DNS_2nd, Domain_name, Domain_IP))>0))     // retry to 2nd DNS
    4e4e:	c2 16       	cp	r12, r18
    4e50:	d2 06       	cpc	r13, r18
    4e52:	e2 06       	cpc	r14, r18
    4e54:	f2 06       	cpc	r15, r18
    4e56:	29 f1       	breq	.+74     	; 0x4ea2 <main+0x102>
    4e58:	4d e8       	ldi	r20, 0x8D	; 141
    4e5a:	54 e0       	ldi	r21, 0x04	; 4
    4e5c:	6e e1       	ldi	r22, 0x1E	; 30
    4e5e:	72 e0       	ldi	r23, 0x02	; 2
    4e60:	8d e2       	ldi	r24, 0x2D	; 45
    4e62:	92 e0       	ldi	r25, 0x02	; 2
    4e64:	0e 94 a2 11 	call	0x2344	; 0x2344 <DNS_run>
    4e68:	c8 2e       	mov	r12, r24
    4e6a:	88 0f       	add	r24, r24
    4e6c:	dd 08       	sbc	r13, r13
    4e6e:	ee 08       	sbc	r14, r14
    4e70:	ff 08       	sbc	r15, r15
    4e72:	1c 14       	cp	r1, r12
    4e74:	1d 04       	cpc	r1, r13
    4e76:	1e 04       	cpc	r1, r14
    4e78:	1f 04       	cpc	r1, r15
    4e7a:	9c f4       	brge	.+38     	; 0x4ea2 <main+0x102>
    4e7c:	e1 e9       	ldi	r30, 0x91	; 145
	{
		#ifdef DNS_INFO
		strcpy(_msg, "");
    4e7e:	f4 e0       	ldi	r31, 0x04	; 4
    4e80:	10 82       	st	Z, r1
    4e82:	8a e7       	ldi	r24, 0x7A	; 122
		_len = 0;
		_len = SPRINTF(_msg,"> 2nd DNS Respond\r\n");
    4e84:	92 e0       	ldi	r25, 0x02	; 2
    4e86:	9f 93       	push	r25
    4e88:	8f 93       	push	r24
    4e8a:	ff 93       	push	r31
    4e8c:	ef 93       	push	r30
    4e8e:	0e 94 13 36 	call	0x6c26	; 0x6c26 <sprintf_P>
		HAL_UARTWriteString(_msg);
    4e92:	81 e9       	ldi	r24, 0x91	; 145
    4e94:	94 e0       	ldi	r25, 0x04	; 4
    4e96:	a0 d2       	rcall	.+1344   	; 0x53d8 <HAL_UARTWriteString>
    4e98:	0f 90       	pop	r0
    4e9a:	0f 90       	pop	r0
    4e9c:	0f 90       	pop	r0
    4e9e:	0f 90       	pop	r0
    4ea0:	2b c0       	rjmp	.+86     	; 0x4ef8 <main+0x158>
    4ea2:	3f ef       	ldi	r19, 0xFF	; 255
		#endif
	}
	else if(ret == -1)
    4ea4:	c3 16       	cp	r12, r19
    4ea6:	d3 06       	cpc	r13, r19
    4ea8:	e3 06       	cpc	r14, r19
    4eaa:	f3 06       	cpc	r15, r19
    4eac:	99 f4       	brne	.+38     	; 0x4ed4 <main+0x134>
    4eae:	e1 e9       	ldi	r30, 0x91	; 145
	{
		#ifdef DNS_INFO
		strcpy(_msg, "");
    4eb0:	f4 e0       	ldi	r31, 0x04	; 4
    4eb2:	10 82       	st	Z, r1
    4eb4:	80 e4       	ldi	r24, 0x40	; 64
		_len = 0;
		_len = SPRINTF(_msg,"> MAX_DOMAIN_NAME is too small. Should be redefined it.\r\n");
    4eb6:	92 e0       	ldi	r25, 0x02	; 2
    4eb8:	9f 93       	push	r25
    4eba:	8f 93       	push	r24
    4ebc:	ff 93       	push	r31
    4ebe:	ef 93       	push	r30
    4ec0:	0e 94 13 36 	call	0x6c26	; 0x6c26 <sprintf_P>
		HAL_UARTWriteString(_msg);
    4ec4:	81 e9       	ldi	r24, 0x91	; 145
    4ec6:	94 e0       	ldi	r25, 0x04	; 4
    4ec8:	87 d2       	rcall	.+1294   	; 0x53d8 <HAL_UARTWriteString>
    4eca:	0f 90       	pop	r0
    4ecc:	0f 90       	pop	r0
    4ece:	0f 90       	pop	r0
    4ed0:	0f 90       	pop	r0
    4ed2:	12 c0       	rjmp	.+36     	; 0x4ef8 <main+0x158>
    4ed4:	e1 e9       	ldi	r30, 0x91	; 145
		;
	}
	else
	{
		#ifdef DNS_INFO
		strcpy(_msg, "");
    4ed6:	f4 e0       	ldi	r31, 0x04	; 4
    4ed8:	10 82       	st	Z, r1
    4eda:	81 e3       	ldi	r24, 0x31	; 49
		_len = 0;
		_len = SPRINTF(_msg,"> DNS Failed\r\n");
    4edc:	92 e0       	ldi	r25, 0x02	; 2
    4ede:	9f 93       	push	r25
    4ee0:	8f 93       	push	r24
    4ee2:	ff 93       	push	r31
    4ee4:	ef 93       	push	r30
    4ee6:	0e 94 13 36 	call	0x6c26	; 0x6c26 <sprintf_P>
		HAL_UARTWriteString(_msg);
    4eea:	81 e9       	ldi	r24, 0x91	; 145
    4eec:	94 e0       	ldi	r25, 0x04	; 4
    4eee:	74 d2       	rcall	.+1256   	; 0x53d8 <HAL_UARTWriteString>
    4ef0:	0f 90       	pop	r0
    4ef2:	0f 90       	pop	r0
    4ef4:	0f 90       	pop	r0
    4ef6:	0f 90       	pop	r0
    4ef8:	1c 14       	cp	r1, r12
		#endif
		;
	}

	if(ret > 0)
    4efa:	1d 04       	cpc	r1, r13
    4efc:	1e 04       	cpc	r1, r14
    4efe:	1f 04       	cpc	r1, r15
    4f00:	ec f5       	brge	.+122    	; 0x4f7c <main+0x1dc>
    4f02:	e1 e9       	ldi	r30, 0x91	; 145
	{
		strcpy(_msg, "");
    4f04:	f4 e0       	ldi	r31, 0x04	; 4
    4f06:	10 82       	st	Z, r1
    4f08:	0d e8       	ldi	r16, 0x8D	; 141
		_len = 0;
		_len = SPRINTF(_msg,"> Translated %s to [%d.%d.%d.%d]\r\n\r\n",Domain_name,Domain_IP[0],Domain_IP[1],Domain_IP[2],Domain_IP[3]);
    4f0a:	14 e0       	ldi	r17, 0x04	; 4
    4f0c:	d8 01       	movw	r26, r16
    4f0e:	13 96       	adiw	r26, 0x03	; 3
    4f10:	3c 91       	ld	r19, X
    4f12:	13 97       	sbiw	r26, 0x03	; 3
    4f14:	12 96       	adiw	r26, 0x02	; 2
    4f16:	2c 91       	ld	r18, X
    4f18:	12 97       	sbiw	r26, 0x02	; 2
    4f1a:	11 96       	adiw	r26, 0x01	; 1
    4f1c:	9c 91       	ld	r25, X
    4f1e:	11 97       	sbiw	r26, 0x01	; 1
    4f20:	8c 91       	ld	r24, X
    4f22:	1f 92       	push	r1
    4f24:	3f 93       	push	r19
    4f26:	1f 92       	push	r1
    4f28:	2f 93       	push	r18
    4f2a:	1f 92       	push	r1
    4f2c:	9f 93       	push	r25
    4f2e:	1f 92       	push	r1
    4f30:	8f 93       	push	r24
    4f32:	8e e1       	ldi	r24, 0x1E	; 30
    4f34:	92 e0       	ldi	r25, 0x02	; 2
    4f36:	9f 93       	push	r25
    4f38:	8f 93       	push	r24
    4f3a:	8c e0       	ldi	r24, 0x0C	; 12
    4f3c:	92 e0       	ldi	r25, 0x02	; 2
    4f3e:	9f 93       	push	r25
    4f40:	8f 93       	push	r24
    4f42:	ff 93       	push	r31
    4f44:	ef 93       	push	r30
    4f46:	0e 94 13 36 	call	0x6c26	; 0x6c26 <sprintf_P>
		HAL_UARTWriteString(_msg);
    4f4a:	81 e9       	ldi	r24, 0x91	; 145
    4f4c:	94 e0       	ldi	r25, 0x04	; 4
    4f4e:	44 d2       	rcall	.+1160   	; 0x53d8 <HAL_UARTWriteString>
    4f50:	f8 01       	movw	r30, r16
		MQTT_targetIP[0] = Domain_IP[0];
    4f52:	80 81       	ld	r24, Z
    4f54:	ea e2       	ldi	r30, 0x2A	; 42
    4f56:	f5 e0       	ldi	r31, 0x05	; 5
    4f58:	80 83       	st	Z, r24
    4f5a:	d8 01       	movw	r26, r16
		MQTT_targetIP[1] = Domain_IP[1];
    4f5c:	11 96       	adiw	r26, 0x01	; 1
    4f5e:	8c 91       	ld	r24, X
    4f60:	11 97       	sbiw	r26, 0x01	; 1
    4f62:	81 83       	std	Z+1, r24	; 0x01
    4f64:	12 96       	adiw	r26, 0x02	; 2
		MQTT_targetIP[2] = Domain_IP[2];
    4f66:	8c 91       	ld	r24, X
    4f68:	12 97       	sbiw	r26, 0x02	; 2
    4f6a:	82 83       	std	Z+2, r24	; 0x02
    4f6c:	13 96       	adiw	r26, 0x03	; 3
		MQTT_targetIP[3] = Domain_IP[3];
    4f6e:	8c 91       	ld	r24, X
    4f70:	83 83       	std	Z+3, r24	; 0x03
    4f72:	0f b6       	in	r0, 0x3f	; 63
    4f74:	f8 94       	cli
    4f76:	de bf       	out	0x3e, r29	; 62
    4f78:	0f be       	out	0x3f, r0	; 63
    4f7a:	cd bf       	out	0x3d, r28	; 61
    4f7c:	82 e0       	ldi	r24, 0x02	; 2
//****************MQTT client initialize
	//Find MQTT broker and connect with it
	uint8_t mqtt_buf[100];
	int32_t mqtt_rc = 0;
	Network mqtt_network;
	mqtt_network.my_socket = SOCK_MQTT;
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	a0 e0       	ldi	r26, 0x00	; 0
    4f82:	b0 e0       	ldi	r27, 0x00	; 0
    4f84:	a9 96       	adiw	r28, 0x29	; 41
    4f86:	8c af       	std	Y+60, r24	; 0x3c
    4f88:	9d af       	std	Y+61, r25	; 0x3d
    4f8a:	ae af       	std	Y+62, r26	; 0x3e
    4f8c:	bf af       	std	Y+63, r27	; 0x3f
    4f8e:	a9 97       	sbiw	r28, 0x29	; 41
    4f90:	a1 e9       	ldi	r26, 0x91	; 145

	strcpy(_msg, "");
    4f92:	b4 e0       	ldi	r27, 0x04	; 4
    4f94:	1c 92       	st	X, r1
    4f96:	ea e2       	ldi	r30, 0x2A	; 42
	_len = 0;
	_len = SPRINTF(_msg,">>Trying connect to MQTT broker: %d.%d.%d.%d ..\r\n", MQTT_targetIP[0], MQTT_targetIP[1], MQTT_targetIP[2], MQTT_targetIP[3]);
    4f98:	f5 e0       	ldi	r31, 0x05	; 5
    4f9a:	33 81       	ldd	r19, Z+3	; 0x03
    4f9c:	22 81       	ldd	r18, Z+2	; 0x02
    4f9e:	91 81       	ldd	r25, Z+1	; 0x01
    4fa0:	80 81       	ld	r24, Z
    4fa2:	1f 92       	push	r1
    4fa4:	3f 93       	push	r19
    4fa6:	1f 92       	push	r1
    4fa8:	2f 93       	push	r18
    4faa:	1f 92       	push	r1
    4fac:	9f 93       	push	r25
    4fae:	1f 92       	push	r1
    4fb0:	8f 93       	push	r24
    4fb2:	8a ed       	ldi	r24, 0xDA	; 218
    4fb4:	91 e0       	ldi	r25, 0x01	; 1
    4fb6:	9f 93       	push	r25
    4fb8:	8f 93       	push	r24
    4fba:	bf 93       	push	r27
    4fbc:	af 93       	push	r26
    4fbe:	0e 94 13 36 	call	0x6c26	; 0x6c26 <sprintf_P>
	HAL_UARTWriteString(_msg);
    4fc2:	81 e9       	ldi	r24, 0x91	; 145
    4fc4:	94 e0       	ldi	r25, 0x04	; 4
	NewNetwork(&mqtt_network);
    4fc6:	08 d2       	rcall	.+1040   	; 0x53d8 <HAL_UARTWriteString>
    4fc8:	ce 01       	movw	r24, r28
    4fca:	8b 59       	subi	r24, 0x9B	; 155
    4fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    4fce:	62 db       	rcall	.-2364   	; 0x4694 <NewNetwork>
	ConnectNetwork(&mqtt_network, MQTT_targetIP, 1883);
    4fd0:	4b e5       	ldi	r20, 0x5B	; 91
    4fd2:	57 e0       	ldi	r21, 0x07	; 7
    4fd4:	6a e2       	ldi	r22, 0x2A	; 42
    4fd6:	75 e0       	ldi	r23, 0x05	; 5
    4fd8:	ce 01       	movw	r24, r28
    4fda:	8b 59       	subi	r24, 0x9B	; 155
    4fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    4fde:	68 db       	rcall	.-2352   	; 0x46b0 <ConnectNetwork>
    4fe0:	a1 2c       	mov	r10, r1
	MQTTClient(&mqtt_client, &mqtt_network, 1000, mqtt_buf, 100, mqtt_readBuffer, MQTT_BUFFER_SIZE);
    4fe2:	68 94       	set
    4fe4:	bb 24       	eor	r11, r11
    4fe6:	b1 f8       	bld	r11, 1
    4fe8:	0f 2e       	mov	r0, r31
    4fea:	fc e9       	ldi	r31, 0x9C	; 156
    4fec:	cf 2e       	mov	r12, r31
    4fee:	f1 e2       	ldi	r31, 0x21	; 33
    4ff0:	df 2e       	mov	r13, r31
    4ff2:	f0 2d       	mov	r31, r0
    4ff4:	0f 2e       	mov	r0, r31
    4ff6:	f4 e6       	ldi	r31, 0x64	; 100
    4ff8:	ef 2e       	mov	r14, r31
    4ffa:	f1 2c       	mov	r15, r1
    4ffc:	f0 2d       	mov	r31, r0
    4ffe:	8e 01       	movw	r16, r28
    5000:	0f 5f       	subi	r16, 0xFF	; 255
    5002:	1f 4f       	sbci	r17, 0xFF	; 255
    5004:	28 ee       	ldi	r18, 0xE8	; 232
    5006:	33 e0       	ldi	r19, 0x03	; 3
    5008:	40 e0       	ldi	r20, 0x00	; 0
    500a:	50 e0       	ldi	r21, 0x00	; 0
    500c:	be 01       	movw	r22, r28
    500e:	6b 59       	subi	r22, 0x9B	; 155
    5010:	7f 4f       	sbci	r23, 0xFF	; 255
    5012:	81 ef       	ldi	r24, 0xF1	; 241
    5014:	94 e0       	ldi	r25, 0x04	; 4
    5016:	0e 94 b4 12 	call	0x2568	; 0x2568 <MQTTClient>
    501a:	8b e3       	ldi	r24, 0x3B	; 59

	//Connection to MQTT broker
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    501c:	eb e0       	ldi	r30, 0x0B	; 11
    501e:	f3 e0       	ldi	r31, 0x03	; 3
    5020:	de 01       	movw	r26, r28
    5022:	a1 59       	subi	r26, 0x91	; 145
    5024:	bf 4f       	sbci	r27, 0xFF	; 255
    5026:	01 90       	ld	r0, Z+
    5028:	0d 92       	st	X+, r0
    502a:	8a 95       	dec	r24
    502c:	e1 f7       	brne	.-8      	; 0x5026 <main+0x286>
    502e:	cf 57       	subi	r28, 0x7F	; 127
	data.willFlag = 0;
    5030:	df 4f       	sbci	r29, 0xFF	; 255
    5032:	18 82       	st	Y, r1
    5034:	c1 58       	subi	r28, 0x81	; 129
    5036:	d0 40       	sbci	r29, 0x00	; 0
    5038:	84 e0       	ldi	r24, 0x04	; 4
	data.MQTTVersion = 4;//3;
    503a:	e6 96       	adiw	r28, 0x36	; 54
    503c:	8f af       	std	Y+63, r24	; 0x3f
    503e:	e6 97       	sbiw	r28, 0x36	; 54
    5040:	88 e6       	ldi	r24, 0x68	; 104
	data.clientID.cstring = ClientID;
    5042:	92 e0       	ldi	r25, 0x02	; 2
    5044:	e8 96       	adiw	r28, 0x38	; 56
    5046:	9f af       	std	Y+63, r25	; 0x3f
    5048:	8e af       	std	Y+62, r24	; 0x3e
    504a:	e8 97       	sbiw	r28, 0x38	; 56
    504c:	88 e4       	ldi	r24, 0x48	; 72
	data.username.cstring = ClientUsername;
    504e:	92 e0       	ldi	r25, 0x02	; 2
    5050:	c6 56       	subi	r28, 0x66	; 102
    5052:	df 4f       	sbci	r29, 0xFF	; 255
    5054:	99 83       	std	Y+1, r25	; 0x01
    5056:	88 83       	st	Y, r24
    5058:	ca 59       	subi	r28, 0x9A	; 154
    505a:	d0 40       	sbci	r29, 0x00	; 0
    505c:	81 ed       	ldi	r24, 0xD1	; 209
	data.password.cstring = ClientPassword;
    505e:	94 e0       	ldi	r25, 0x04	; 4
    5060:	ce 55       	subi	r28, 0x5E	; 94
    5062:	df 4f       	sbci	r29, 0xFF	; 255
    5064:	99 83       	std	Y+1, r25	; 0x01
    5066:	88 83       	st	Y, r24
    5068:	c2 5a       	subi	r28, 0xA2	; 162
    506a:	d0 40       	sbci	r29, 0x00	; 0
    506c:	8c e3       	ldi	r24, 0x3C	; 60
	data.keepAliveInterval = 60;
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	c2 58       	subi	r28, 0x82	; 130
    5072:	df 4f       	sbci	r29, 0xFF	; 255
    5074:	99 83       	std	Y+1, r25	; 0x01
    5076:	88 83       	st	Y, r24
    5078:	ce 57       	subi	r28, 0x7E	; 126
    507a:	d0 40       	sbci	r29, 0x00	; 0
    507c:	81 e0       	ldi	r24, 0x01	; 1
	data.cleansession = 1;
    507e:	c0 58       	subi	r28, 0x80	; 128
    5080:	df 4f       	sbci	r29, 0xFF	; 255
    5082:	88 83       	st	Y, r24
    5084:	c0 58       	subi	r28, 0x80	; 128
    5086:	d0 40       	sbci	r29, 0x00	; 0
    5088:	be 01       	movw	r22, r28
	mqtt_rc = MQTTConnect(&mqtt_client, &data);
    508a:	61 59       	subi	r22, 0x91	; 145
    508c:	7f 4f       	sbci	r23, 0xFF	; 255
    508e:	81 ef       	ldi	r24, 0xF1	; 241
    5090:	94 e0       	ldi	r25, 0x04	; 4
    5092:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <MQTTConnect>
    5096:	0f b6       	in	r0, 0x3f	; 63
	if (mqtt_rc == SUCCESSS)
    5098:	f8 94       	cli
    509a:	de bf       	out	0x3e, r29	; 62
    509c:	0f be       	out	0x3f, r0	; 63
    509e:	cd bf       	out	0x3d, r28	; 61
    50a0:	61 15       	cp	r22, r1
    50a2:	71 05       	cpc	r23, r1
    50a4:	81 05       	cpc	r24, r1
    50a6:	91 05       	cpc	r25, r1
    50a8:	09 f0       	breq	.+2      	; 0x50ac <main+0x30c>
    50aa:	41 c0       	rjmp	.+130    	; 0x512e <main+0x38e>
    50ac:	01 e9       	ldi	r16, 0x91	; 145
	{
		strcpy(_msg, "");
    50ae:	14 e0       	ldi	r17, 0x04	; 4
    50b0:	d8 01       	movw	r26, r16
    50b2:	1c 92       	st	X, r1
		_len = 0;
		_len = SPRINTF(_msg,"++MQTT Connected SUCCESS: %ld\r\n", mqtt_rc);
    50b4:	9f 93       	push	r25
    50b6:	8f 93       	push	r24
    50b8:	7f 93       	push	r23
    50ba:	6f 93       	push	r22
    50bc:	8a eb       	ldi	r24, 0xBA	; 186
    50be:	91 e0       	ldi	r25, 0x01	; 1
    50c0:	9f 93       	push	r25
    50c2:	8f 93       	push	r24
    50c4:	1f 93       	push	r17
    50c6:	0f 93       	push	r16
    50c8:	0e 94 13 36 	call	0x6c26	; 0x6c26 <sprintf_P>
		HAL_UARTWriteString(_msg);
    50cc:	c8 01       	movw	r24, r16
    50ce:	84 d1       	rcall	.+776    	; 0x53d8 <HAL_UARTWriteString>
    50d0:	7e 01       	movw	r14, r28
		HAL_UARTWriteString(_msg);
		while(1);//Reboot the board
	}

	// Subscribe topic
	char SubString[] = SUBSCRIBE;
    50d2:	ba ea       	ldi	r27, 0xAA	; 170
    50d4:	eb 0e       	add	r14, r27
    50d6:	f1 1c       	adc	r15, r1
    50d8:	8f e0       	ldi	r24, 0x0F	; 15
    50da:	ee e7       	ldi	r30, 0x7E	; 126
    50dc:	f3 e0       	ldi	r31, 0x03	; 3
    50de:	d7 01       	movw	r26, r14
    50e0:	01 90       	ld	r0, Z+
    50e2:	0d 92       	st	X+, r0
    50e4:	8a 95       	dec	r24
    50e6:	e1 f7       	brne	.-8      	; 0x50e0 <main+0x340>
    50e8:	2f ed       	ldi	r18, 0xDF	; 223
	mqtt_rc = MQTTSubscribe(&mqtt_client, SubString, QOS0, messageArrived);
    50ea:	33 e2       	ldi	r19, 0x23	; 35
    50ec:	40 e0       	ldi	r20, 0x00	; 0
    50ee:	b7 01       	movw	r22, r14
    50f0:	81 ef       	ldi	r24, 0xF1	; 241
    50f2:	94 e0       	ldi	r25, 0x04	; 4
    50f4:	0e 94 e7 17 	call	0x2fce	; 0x2fce <MQTTSubscribe>
    50f8:	f8 01       	movw	r30, r16
	strcpy(_msg, "");
    50fa:	10 82       	st	Z, r1
    50fc:	9f 93       	push	r25
	_len = 0;
	_len = SPRINTF(_msg,"Subscribed (%s) %d\r\n", SubString, mqtt_rc);
    50fe:	8f 93       	push	r24
    5100:	7f 93       	push	r23
    5102:	6f 93       	push	r22
    5104:	ff 92       	push	r15
    5106:	ef 92       	push	r14
    5108:	85 ea       	ldi	r24, 0xA5	; 165
    510a:	91 e0       	ldi	r25, 0x01	; 1
    510c:	9f 93       	push	r25
    510e:	8f 93       	push	r24
    5110:	1f 93       	push	r17
    5112:	0f 93       	push	r16
    5114:	0e 94 13 36 	call	0x6c26	; 0x6c26 <sprintf_P>
	HAL_UARTWriteString(_msg);
    5118:	c8 01       	movw	r24, r16
    511a:	5e d1       	rcall	.+700    	; 0x53d8 <HAL_UARTWriteString>
	
	//timer
	uint32_t timer_mqtt_pub_1sec = millis();
    511c:	cb dd       	rcall	.-1130   	; 0x4cb4 <millis>
    511e:	6b 01       	movw	r12, r22
    5120:	7c 01       	movw	r14, r24
    5122:	0f b6       	in	r0, 0x3f	; 63
    5124:	f8 94       	cli
    5126:	de bf       	out	0x3e, r29	; 62
    5128:	0f be       	out	0x3f, r0	; 63
    512a:	cd bf       	out	0x3d, r28	; 61
    512c:	18 c0       	rjmp	.+48     	; 0x515e <main+0x3be>
    512e:	e1 e9       	ldi	r30, 0x91	; 145
		_len = SPRINTF(_msg,"++MQTT Connected SUCCESS: %ld\r\n", mqtt_rc);
		HAL_UARTWriteString(_msg);
	}
	else
	{
		strcpy(_msg, "");
    5130:	f4 e0       	ldi	r31, 0x04	; 4
    5132:	10 82       	st	Z, r1
		_len = 0;
		_len = SPRINTF(_msg,"--MQTT Connected ERROR: %ld\r\n", mqtt_rc);
    5134:	9f 93       	push	r25
    5136:	8f 93       	push	r24
    5138:	7f 93       	push	r23
    513a:	6f 93       	push	r22
    513c:	87 e8       	ldi	r24, 0x87	; 135
    513e:	91 e0       	ldi	r25, 0x01	; 1
    5140:	9f 93       	push	r25
    5142:	8f 93       	push	r24
    5144:	ff 93       	push	r31
    5146:	ef 93       	push	r30
		HAL_UARTWriteString(_msg);
    5148:	0e 94 13 36 	call	0x6c26	; 0x6c26 <sprintf_P>
    514c:	81 e9       	ldi	r24, 0x91	; 145
    514e:	94 e0       	ldi	r25, 0x04	; 4
    5150:	43 d1       	rcall	.+646    	; 0x53d8 <HAL_UARTWriteString>
    5152:	0f b6       	in	r0, 0x3f	; 63
    5154:	f8 94       	cli
    5156:	de bf       	out	0x3e, r29	; 62
    5158:	0f be       	out	0x3f, r0	; 63
    515a:	cd bf       	out	0x3d, r28	; 61
	// counter - 20 sec
	static uint8_t mqtt_20sec_cnt =0;
	
	while(1)
	{
		for (int i = 0; i < 7; i++) {
    515c:	ff cf       	rjmp	.-2      	; 0x515c <main+0x3bc>
			SYS_TaskHandler();
    515e:	00 e0       	ldi	r16, 0x00	; 0
    5160:	10 e0       	ldi	r17, 0x00	; 0
			HAL_UartTaskHandler();
    5162:	06 c0       	rjmp	.+12     	; 0x5170 <main+0x3d0>
    5164:	0e 94 ed 33 	call	0x67da	; 0x67da <SYS_TaskHandler>
	// counter - 20 sec
	static uint8_t mqtt_20sec_cnt =0;
	
	while(1)
	{
		for (int i = 0; i < 7; i++) {
    5168:	dc d1       	rcall	.+952    	; 0x5522 <HAL_UartTaskHandler>
    516a:	69 dc       	rcall	.-1838   	; 0x4a3e <APP_TaskHandler>
    516c:	0f 5f       	subi	r16, 0xFF	; 255
    516e:	1f 4f       	sbci	r17, 0xFF	; 255
    5170:	07 30       	cpi	r16, 0x07	; 7
			HAL_UartTaskHandler();
			APP_TaskHandler();
			}
		
		//Here at least every 1sec
		wdt_reset(); // WDT reset at least every sec
    5172:	11 05       	cpc	r17, r1
		#endif
		#if defined( _PING )
		ping_srv(2);
		#endif
		
		for (int i = 0; i < 7; i++) {
    5174:	bc f3       	brlt	.-18     	; 0x5164 <main+0x3c4>
    5176:	a8 95       	wdr
    5178:	00 e0       	ldi	r16, 0x00	; 0
			SYS_TaskHandler();
    517a:	10 e0       	ldi	r17, 0x00	; 0
			HAL_UartTaskHandler();
    517c:	06 c0       	rjmp	.+12     	; 0x518a <main+0x3ea>
    517e:	0e 94 ed 33 	call	0x67da	; 0x67da <SYS_TaskHandler>
			APP_TaskHandler();
    5182:	cf d1       	rcall	.+926    	; 0x5522 <HAL_UartTaskHandler>
		#endif
		#if defined( _PING )
		ping_srv(2);
		#endif
		
		for (int i = 0; i < 7; i++) {
    5184:	5c dc       	rcall	.-1864   	; 0x4a3e <APP_TaskHandler>
    5186:	0f 5f       	subi	r16, 0xFF	; 255
    5188:	1f 4f       	sbci	r17, 0xFF	; 255
    518a:	07 30       	cpi	r16, 0x07	; 7
    518c:	11 05       	cpc	r17, r1
			HAL_UartTaskHandler();
			APP_TaskHandler();
			}

		// MQTT pub event every 1 sec
		if((millis()-timer_mqtt_pub_1sec)> 1000)
    518e:	bc f3       	brlt	.-18     	; 0x517e <main+0x3de>
    5190:	91 dd       	rcall	.-1246   	; 0x4cb4 <millis>
    5192:	dc 01       	movw	r26, r24
    5194:	cb 01       	movw	r24, r22
    5196:	8c 19       	sub	r24, r12
    5198:	9d 09       	sbc	r25, r13
    519a:	ae 09       	sbc	r26, r14
    519c:	bf 09       	sbc	r27, r15
    519e:	89 3e       	cpi	r24, 0xE9	; 233
    51a0:	93 40       	sbci	r25, 0x03	; 3
    51a2:	a1 05       	cpc	r26, r1
		{
			//here every 1 sec
			timer_mqtt_pub_1sec = millis();
    51a4:	b1 05       	cpc	r27, r1
    51a6:	b8 f1       	brcs	.+110    	; 0x5216 <main+0x476>
    51a8:	85 dd       	rcall	.-1270   	; 0x4cb4 <millis>
    51aa:	6b 01       	movw	r12, r22
			
			//Every 20sec public message: "Uptime: xxx sec; Free RAM: xxxxx bytes" to "/w5500_avr_dbg"
			if(++mqtt_20sec_cnt>19)
    51ac:	7c 01       	movw	r14, r24
    51ae:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <mqtt_20sec_cnt.3718>
    51b2:	8f 5f       	subi	r24, 0xFF	; 255
    51b4:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <mqtt_20sec_cnt.3718>
    51b8:	84 31       	cpi	r24, 0x14	; 20
			{
				mqtt_20sec_cnt = 0;
    51ba:	68 f1       	brcs	.+90     	; 0x5216 <main+0x476>
    51bc:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <mqtt_20sec_cnt.3718>
				strcpy(_msg, "");
    51c0:	01 e9       	ldi	r16, 0x91	; 145
    51c2:	14 e0       	ldi	r17, 0x04	; 4
    51c4:	d8 01       	movw	r26, r16
				_len = SPRINTF(_msg, "Uptime: %lu sec; Free RAM: %d bytes\r\n", millis()/1000, freeRam());
    51c6:	1c 92       	st	X, r1
    51c8:	37 dd       	rcall	.-1426   	; 0x4c38 <freeRam>
    51ca:	b8 2e       	mov	r11, r24
    51cc:	a9 2e       	mov	r10, r25
    51ce:	72 dd       	rcall	.-1308   	; 0x4cb4 <millis>
    51d0:	af 92       	push	r10
    51d2:	bf 92       	push	r11
    51d4:	28 ee       	ldi	r18, 0xE8	; 232
    51d6:	33 e0       	ldi	r19, 0x03	; 3
    51d8:	40 e0       	ldi	r20, 0x00	; 0
    51da:	50 e0       	ldi	r21, 0x00	; 0
    51dc:	0e 94 02 35 	call	0x6a04	; 0x6a04 <__udivmodsi4>
    51e0:	5f 93       	push	r21
    51e2:	4f 93       	push	r20
    51e4:	3f 93       	push	r19
    51e6:	2f 93       	push	r18
    51e8:	81 e6       	ldi	r24, 0x61	; 97
    51ea:	91 e0       	ldi	r25, 0x01	; 1
    51ec:	9f 93       	push	r25
    51ee:	8f 93       	push	r24
    51f0:	1f 93       	push	r17
    51f2:	0f 93       	push	r16
    51f4:	0e 94 13 36 	call	0x6c26	; 0x6c26 <sprintf_P>
				if(_len > 0)
    51f8:	0f b6       	in	r0, 0x3f	; 63
    51fa:	f8 94       	cli
    51fc:	de bf       	out	0x3e, r29	; 62
    51fe:	0f be       	out	0x3f, r0	; 63
    5200:	cd bf       	out	0x3d, r28	; 61
    5202:	18 16       	cp	r1, r24
    5204:	19 06       	cpc	r1, r25
    5206:	3c f4       	brge	.+14     	; 0x5216 <main+0x476>
				{
					mqtt_pub(&mqtt_client, PUBLISH, _msg, _len);
    5208:	9c 01       	movw	r18, r24
    520a:	a8 01       	movw	r20, r16
    520c:	6e e7       	ldi	r22, 0x7E	; 126
    520e:	73 e0       	ldi	r23, 0x03	; 3
    5210:	81 ef       	ldi	r24, 0xF1	; 241
    5212:	94 e0       	ldi	r25, 0x04	; 4
    5214:	4b dc       	rcall	.-1898   	; 0x4aac <mqtt_pub>
    5216:	44 e6       	ldi	r20, 0x64	; 100
				ping_request(2, netInfo.dns);
				#endif
			}
		}
	    // MQTT broker connection and sub receive
	    MQTTYield(&mqtt_client, 100);//~100msec blocking here
    5218:	50 e0       	ldi	r21, 0x00	; 0
    521a:	60 e0       	ldi	r22, 0x00	; 0
    521c:	70 e0       	ldi	r23, 0x00	; 0
    521e:	81 ef       	ldi	r24, 0xF1	; 241
    5220:	94 e0       	ldi	r25, 0x04	; 4
    5222:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <MQTTYield>
    5226:	9b cf       	rjmp	.-202    	; 0x515e <main+0x3be>

00005228 <spi_init>:

void
spi_init(void)
{
  // CS PIN for FLASH
  DDRD	|= _BV(WIZNET_CS); // CS to OUT && Disable
    5228:	8a b1       	in	r24, 0x0a	; 10
    522a:	80 64       	ori	r24, 0x40	; 64
    522c:	8a b9       	out	0x0a, r24	; 10
  SPI_WIZNET_DISABLE();
    522e:	8b b1       	in	r24, 0x0b	; 11
    5230:	80 64       	ori	r24, 0x40	; 64
    5232:	8b b9       	out	0x0b, r24	; 11
  
  /* Initalize ports for communication with SPI units. */
  /* CSN=SS and must be output when master! */
  //DDRB  |= _BV(MOSI) | _BV(SCK) | _BV(CSN);
  DDRB  |= _BV(MOSI) | _BV(SCK);
    5234:	84 b1       	in	r24, 0x04	; 4
    5236:	86 60       	ori	r24, 0x06	; 6
    5238:	84 b9       	out	0x04, r24	; 4
  PORTB |= _BV(MOSI) | _BV(SCK);
    523a:	85 b1       	in	r24, 0x05	; 5
    523c:	86 60       	ori	r24, 0x06	; 6
    523e:	85 b9       	out	0x05, r24	; 5
  DDRD |= _BV(CSN);
    5240:	8a b1       	in	r24, 0x0a	; 10
    5242:	80 68       	ori	r24, 0x80	; 128
    5244:	8a b9       	out	0x0a, r24	; 10
 
  /* Enables SPI, selects "master", clock rate FCK / 4 - 4Mhz, and SPI mode 0 */
  SPCR = _BV(SPE) | _BV(MSTR);
    5246:	80 e5       	ldi	r24, 0x50	; 80
    5248:	8c bd       	out	0x2c, r24	; 44
#if defined(SPI_8_MHZ)
  SPSR = _BV(SPI2X); //FCK / 2 - 8Mhz
#elif defined (SPI_4_MHZ)
  SPSR = 0x0; //FCK / 4 - 4Mhz
#else
  SPSR = 0x0; //FCK / 4 - 4Mhz
    524a:	1d bc       	out	0x2d, r1	; 45
    524c:	08 95       	ret

0000524e <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    524e:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    5250:	0f b6       	in	r0, 0x3f	; 63
    5252:	f8 94       	cli
    5254:	a8 95       	wdr
    5256:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    525a:	88 61       	ori	r24, 0x18	; 24
    525c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    5260:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    5264:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    5266:	e1 e6       	ldi	r30, 0x61	; 97
    5268:	f0 e0       	ldi	r31, 0x00	; 0
    526a:	80 e8       	ldi	r24, 0x80	; 128
    526c:	80 83       	st	Z, r24
  CLKPR = 0;
    526e:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    5270:	78 94       	sei

  HAL_TimerInit();
    5272:	01 c0       	rjmp	.+2      	; 0x5276 <HAL_TimerInit>
    5274:	08 95       	ret

00005276 <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
    5276:	10 92 9e 25 	sts	0x259E, r1	; 0x80259e <halTimerIrqCount>
    527a:	80 e1       	ldi	r24, 0x10	; 16
    527c:	97 e2       	ldi	r25, 0x27	; 39
    527e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    5282:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
    5286:	e1 ea       	ldi	r30, 0xA1	; 161
    5288:	f0 e0       	ldi	r31, 0x00	; 0
    528a:	88 e0       	ldi	r24, 0x08	; 8
    528c:	80 83       	st	Z, r24
    528e:	80 81       	ld	r24, Z
    5290:	82 60       	ori	r24, 0x02	; 2
    5292:	80 83       	st	Z, r24
    5294:	e2 e7       	ldi	r30, 0x72	; 114
    5296:	f0 e0       	ldi	r31, 0x00	; 0
    5298:	80 81       	ld	r24, Z
    529a:	82 60       	ori	r24, 0x02	; 2
    529c:	80 83       	st	Z, r24
    529e:	08 95       	ret

000052a0 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    52a0:	1f 92       	push	r1
    52a2:	0f 92       	push	r0
    52a4:	0f b6       	in	r0, 0x3f	; 63
    52a6:	0f 92       	push	r0
    52a8:	11 24       	eor	r1, r1
    52aa:	8f 93       	push	r24
  halTimerIrqCount++;
    52ac:	80 91 9e 25 	lds	r24, 0x259E	; 0x80259e <halTimerIrqCount>
    52b0:	8f 5f       	subi	r24, 0xFF	; 255
    52b2:	80 93 9e 25 	sts	0x259E, r24	; 0x80259e <halTimerIrqCount>
}
    52b6:	8f 91       	pop	r24
    52b8:	0f 90       	pop	r0
    52ba:	0f be       	out	0x3f, r0	; 63
    52bc:	0f 90       	pop	r0
    52be:	1f 90       	pop	r1
    52c0:	18 95       	reti

000052c2 <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
    52c2:	1f 92       	push	r1
    52c4:	0f 92       	push	r0
    52c6:	0f b6       	in	r0, 0x3f	; 63
    52c8:	0f 92       	push	r0
    52ca:	11 24       	eor	r1, r1
    52cc:	8f 93       	push	r24
  halSleepTimerEvent = true;
    52ce:	81 e0       	ldi	r24, 0x01	; 1
    52d0:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <halSleepTimerEvent>
}
    52d4:	8f 91       	pop	r24
    52d6:	0f 90       	pop	r0
    52d8:	0f be       	out	0x3f, r0	; 63
    52da:	0f 90       	pop	r0
    52dc:	1f 90       	pop	r1
    52de:	18 95       	reti

000052e0 <HAL_UartInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
    52e0:	dc 01       	movw	r26, r24
    52e2:	cb 01       	movw	r24, r22
    52e4:	88 0f       	add	r24, r24
    52e6:	99 1f       	adc	r25, r25
    52e8:	aa 1f       	adc	r26, r26
    52ea:	bb 1f       	adc	r27, r27
    52ec:	88 0f       	add	r24, r24
    52ee:	99 1f       	adc	r25, r25
    52f0:	aa 1f       	adc	r26, r26
    52f2:	bb 1f       	adc	r27, r27
    52f4:	9c 01       	movw	r18, r24
    52f6:	ad 01       	movw	r20, r26
    52f8:	22 0f       	add	r18, r18
    52fa:	33 1f       	adc	r19, r19
    52fc:	44 1f       	adc	r20, r20
    52fe:	55 1f       	adc	r21, r21
    5300:	22 0f       	add	r18, r18
    5302:	33 1f       	adc	r19, r19
    5304:	44 1f       	adc	r20, r20
    5306:	55 1f       	adc	r21, r21
    5308:	60 e0       	ldi	r22, 0x00	; 0
    530a:	74 e2       	ldi	r23, 0x24	; 36
    530c:	84 ef       	ldi	r24, 0xF4	; 244
    530e:	90 e0       	ldi	r25, 0x00	; 0
    5310:	0e 94 02 35 	call	0x6a04	; 0x6a04 <__udivmodsi4>
    5314:	ba 01       	movw	r22, r20
    5316:	a9 01       	movw	r20, r18
    5318:	41 50       	subi	r20, 0x01	; 1
    531a:	51 09       	sbc	r21, r1
    531c:	61 09       	sbc	r22, r1
    531e:	71 09       	sbc	r23, r1

  UBRRxH = (brr >> 8) & 0xff;
    5320:	bb 27       	eor	r27, r27
    5322:	a7 2f       	mov	r26, r23
    5324:	96 2f       	mov	r25, r22
    5326:	85 2f       	mov	r24, r21
    5328:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
  UBRRxL = (brr & 0xff);
    532c:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
  UCSRxA = (1 << U2X1);
    5330:	82 e0       	ldi	r24, 0x02	; 2
    5332:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
    5336:	88 e9       	ldi	r24, 0x98	; 152
    5338:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
  UCSRxC = (3 << UCSZ10);
    533c:	86 e0       	ldi	r24, 0x06	; 6
    533e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>

  txFifo.data = txData;
    5342:	e7 ed       	ldi	r30, 0xD7	; 215
    5344:	f9 e0       	ldi	r31, 0x09	; 9
    5346:	86 e4       	ldi	r24, 0x46	; 70
    5348:	98 e0       	ldi	r25, 0x08	; 8
    534a:	91 87       	std	Z+9, r25	; 0x09
    534c:	80 87       	std	Z+8, r24	; 0x08
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
    534e:	80 e9       	ldi	r24, 0x90	; 144
    5350:	91 e0       	ldi	r25, 0x01	; 1
    5352:	95 83       	std	Z+5, r25	; 0x05
    5354:	84 83       	std	Z+4, r24	; 0x04
  txFifo.bytes = 0;
    5356:	17 82       	std	Z+7, r1	; 0x07
    5358:	16 82       	std	Z+6, r1	; 0x06
  txFifo.head = 0;
    535a:	11 82       	std	Z+1, r1	; 0x01
    535c:	10 82       	st	Z, r1
  txFifo.tail = 0;
    535e:	13 82       	std	Z+3, r1	; 0x03
    5360:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
    5362:	ec e3       	ldi	r30, 0x3C	; 60
    5364:	f8 e0       	ldi	r31, 0x08	; 8
    5366:	2b ea       	ldi	r18, 0xAB	; 171
    5368:	36 e0       	ldi	r19, 0x06	; 6
    536a:	31 87       	std	Z+9, r19	; 0x09
    536c:	20 87       	std	Z+8, r18	; 0x08
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
    536e:	95 83       	std	Z+5, r25	; 0x05
    5370:	84 83       	std	Z+4, r24	; 0x04
  rxFifo.bytes = 0;
    5372:	17 82       	std	Z+7, r1	; 0x07
    5374:	16 82       	std	Z+6, r1	; 0x06
  rxFifo.head = 0;
    5376:	11 82       	std	Z+1, r1	; 0x01
    5378:	10 82       	st	Z, r1
  rxFifo.tail = 0;
    537a:	13 82       	std	Z+3, r1	; 0x03
    537c:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
    537e:	81 e0       	ldi	r24, 0x01	; 1
    5380:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <udrEmpty>
  newData = false;
    5384:	10 92 a9 06 	sts	0x06A9, r1	; 0x8006a9 <newData>
    5388:	08 95       	ret

0000538a <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
    538a:	cf 93       	push	r28
    538c:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
    538e:	e7 ed       	ldi	r30, 0xD7	; 215
    5390:	f9 e0       	ldi	r31, 0x09	; 9
    5392:	26 81       	ldd	r18, Z+6	; 0x06
    5394:	37 81       	ldd	r19, Z+7	; 0x07
    5396:	64 81       	ldd	r22, Z+4	; 0x04
    5398:	75 81       	ldd	r23, Z+5	; 0x05
    539a:	26 17       	cp	r18, r22
    539c:	37 07       	cpc	r19, r23
    539e:	c9 f0       	breq	.+50     	; 0x53d2 <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
    53a0:	c0 85       	ldd	r28, Z+8	; 0x08
    53a2:	d1 85       	ldd	r29, Z+9	; 0x09
    53a4:	42 81       	ldd	r20, Z+2	; 0x02
    53a6:	53 81       	ldd	r21, Z+3	; 0x03
    53a8:	da 01       	movw	r26, r20
    53aa:	11 96       	adiw	r26, 0x01	; 1
    53ac:	b3 83       	std	Z+3, r27	; 0x03
    53ae:	a2 83       	std	Z+2, r26	; 0x02
    53b0:	fe 01       	movw	r30, r28
    53b2:	e4 0f       	add	r30, r20
    53b4:	f5 1f       	adc	r31, r21
    53b6:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
    53b8:	6a 17       	cp	r22, r26
    53ba:	7b 07       	cpc	r23, r27
    53bc:	21 f4       	brne	.+8      	; 0x53c6 <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
    53be:	10 92 da 09 	sts	0x09DA, r1	; 0x8009da <txFifo+0x3>
    53c2:	10 92 d9 09 	sts	0x09D9, r1	; 0x8009d9 <txFifo+0x2>
  txFifo.bytes++;
    53c6:	2f 5f       	subi	r18, 0xFF	; 255
    53c8:	3f 4f       	sbci	r19, 0xFF	; 255
    53ca:	30 93 de 09 	sts	0x09DE, r19	; 0x8009de <txFifo+0x7>
    53ce:	20 93 dd 09 	sts	0x09DD, r18	; 0x8009dd <txFifo+0x6>
}
    53d2:	df 91       	pop	r29
    53d4:	cf 91       	pop	r28
    53d6:	08 95       	ret

000053d8 <HAL_UARTWriteString>:

void HAL_UARTWriteString(char *text)
{
    53d8:	cf 93       	push	r28
    53da:	df 93       	push	r29
    53dc:	ec 01       	movw	r28, r24
	while (*text != 0x00)
    53de:	02 c0       	rjmp	.+4      	; 0x53e4 <HAL_UARTWriteString+0xc>
	{
		HAL_UartWriteByte(*text);
    53e0:	d4 df       	rcall	.-88     	; 0x538a <HAL_UartWriteByte>
		text++;
    53e2:	21 96       	adiw	r28, 0x01	; 1
  txFifo.bytes++;
}

void HAL_UARTWriteString(char *text)
{
	while (*text != 0x00)
    53e4:	88 81       	ld	r24, Y
    53e6:	81 11       	cpse	r24, r1
    53e8:	fb cf       	rjmp	.-10     	; 0x53e0 <HAL_UARTWriteString+0x8>
	{
		HAL_UartWriteByte(*text);
		text++;
	}
}
    53ea:	df 91       	pop	r29
    53ec:	cf 91       	pop	r28
    53ee:	08 95       	ret

000053f0 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
    53f0:	4f b7       	in	r20, 0x3f	; 63
    53f2:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
    53f4:	ec e3       	ldi	r30, 0x3C	; 60
    53f6:	f8 e0       	ldi	r31, 0x08	; 8
    53f8:	20 85       	ldd	r18, Z+8	; 0x08
    53fa:	31 85       	ldd	r19, Z+9	; 0x09
    53fc:	80 81       	ld	r24, Z
    53fe:	91 81       	ldd	r25, Z+1	; 0x01
    5400:	bc 01       	movw	r22, r24
    5402:	6f 5f       	subi	r22, 0xFF	; 255
    5404:	7f 4f       	sbci	r23, 0xFF	; 255
    5406:	71 83       	std	Z+1, r23	; 0x01
    5408:	60 83       	st	Z, r22
    540a:	d9 01       	movw	r26, r18
    540c:	a8 0f       	add	r26, r24
    540e:	b9 1f       	adc	r27, r25
    5410:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
    5412:	60 81       	ld	r22, Z
    5414:	71 81       	ldd	r23, Z+1	; 0x01
    5416:	24 81       	ldd	r18, Z+4	; 0x04
    5418:	35 81       	ldd	r19, Z+5	; 0x05
    541a:	62 17       	cp	r22, r18
    541c:	73 07       	cpc	r23, r19
    541e:	21 f4       	brne	.+8      	; 0x5428 <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
    5420:	10 92 3d 08 	sts	0x083D, r1	; 0x80083d <rxFifo+0x1>
    5424:	10 92 3c 08 	sts	0x083C, r1	; 0x80083c <rxFifo>
    rxFifo.bytes--;
    5428:	ec e3       	ldi	r30, 0x3C	; 60
    542a:	f8 e0       	ldi	r31, 0x08	; 8
    542c:	26 81       	ldd	r18, Z+6	; 0x06
    542e:	37 81       	ldd	r19, Z+7	; 0x07
    5430:	21 50       	subi	r18, 0x01	; 1
    5432:	31 09       	sbc	r19, r1
    5434:	37 83       	std	Z+7, r19	; 0x07
    5436:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
    5438:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
    543a:	08 95       	ret

0000543c <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
    543c:	1f 92       	push	r1
    543e:	0f 92       	push	r0
    5440:	0f b6       	in	r0, 0x3f	; 63
    5442:	0f 92       	push	r0
    5444:	11 24       	eor	r1, r1
    5446:	0b b6       	in	r0, 0x3b	; 59
    5448:	0f 92       	push	r0
    544a:	8f 93       	push	r24
    544c:	ef 93       	push	r30
    544e:	ff 93       	push	r31
  udrEmpty = true;
    5450:	81 e0       	ldi	r24, 0x01	; 1
    5452:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
    5456:	e9 ec       	ldi	r30, 0xC9	; 201
    5458:	f0 e0       	ldi	r31, 0x00	; 0
    545a:	80 81       	ld	r24, Z
    545c:	8f 7d       	andi	r24, 0xDF	; 223
    545e:	80 83       	st	Z, r24
}
    5460:	ff 91       	pop	r31
    5462:	ef 91       	pop	r30
    5464:	8f 91       	pop	r24
    5466:	0f 90       	pop	r0
    5468:	0b be       	out	0x3b, r0	; 59
    546a:	0f 90       	pop	r0
    546c:	0f be       	out	0x3f, r0	; 63
    546e:	0f 90       	pop	r0
    5470:	1f 90       	pop	r1
    5472:	18 95       	reti

00005474 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
    5474:	1f 92       	push	r1
    5476:	0f 92       	push	r0
    5478:	0f b6       	in	r0, 0x3f	; 63
    547a:	0f 92       	push	r0
    547c:	11 24       	eor	r1, r1
    547e:	0b b6       	in	r0, 0x3b	; 59
    5480:	0f 92       	push	r0
    5482:	2f 93       	push	r18
    5484:	3f 93       	push	r19
    5486:	4f 93       	push	r20
    5488:	5f 93       	push	r21
    548a:	6f 93       	push	r22
    548c:	7f 93       	push	r23
    548e:	8f 93       	push	r24
    5490:	9f 93       	push	r25
    5492:	af 93       	push	r26
    5494:	bf 93       	push	r27
    5496:	ef 93       	push	r30
    5498:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
    549a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
    549e:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
    54a2:	8c 71       	andi	r24, 0x1C	; 28
    54a4:	59 f5       	brne	.+86     	; 0x54fc <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
    54a6:	ec e3       	ldi	r30, 0x3C	; 60
    54a8:	f8 e0       	ldi	r31, 0x08	; 8
    54aa:	46 81       	ldd	r20, Z+6	; 0x06
    54ac:	57 81       	ldd	r21, Z+7	; 0x07
    54ae:	84 81       	ldd	r24, Z+4	; 0x04
    54b0:	95 81       	ldd	r25, Z+5	; 0x05
    54b2:	48 17       	cp	r20, r24
    54b4:	59 07       	cpc	r21, r25
    54b6:	11 f1       	breq	.+68     	; 0x54fc <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
    54b8:	40 85       	ldd	r20, Z+8	; 0x08
    54ba:	51 85       	ldd	r21, Z+9	; 0x09
    54bc:	82 81       	ldd	r24, Z+2	; 0x02
    54be:	93 81       	ldd	r25, Z+3	; 0x03
    54c0:	bc 01       	movw	r22, r24
    54c2:	6f 5f       	subi	r22, 0xFF	; 255
    54c4:	7f 4f       	sbci	r23, 0xFF	; 255
    54c6:	73 83       	std	Z+3, r23	; 0x03
    54c8:	62 83       	std	Z+2, r22	; 0x02
    54ca:	da 01       	movw	r26, r20
    54cc:	a8 0f       	add	r26, r24
    54ce:	b9 1f       	adc	r27, r25
    54d0:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
    54d2:	22 81       	ldd	r18, Z+2	; 0x02
    54d4:	33 81       	ldd	r19, Z+3	; 0x03
    54d6:	84 81       	ldd	r24, Z+4	; 0x04
    54d8:	95 81       	ldd	r25, Z+5	; 0x05
    54da:	28 17       	cp	r18, r24
    54dc:	39 07       	cpc	r19, r25
    54de:	21 f4       	brne	.+8      	; 0x54e8 <__vector_36+0x74>
      rxFifo.tail = 0;
    54e0:	10 92 3f 08 	sts	0x083F, r1	; 0x80083f <rxFifo+0x3>
    54e4:	10 92 3e 08 	sts	0x083E, r1	; 0x80083e <rxFifo+0x2>
    rxFifo.bytes++;
    54e8:	ec e3       	ldi	r30, 0x3C	; 60
    54ea:	f8 e0       	ldi	r31, 0x08	; 8
    54ec:	86 81       	ldd	r24, Z+6	; 0x06
    54ee:	97 81       	ldd	r25, Z+7	; 0x07
    54f0:	01 96       	adiw	r24, 0x01	; 1
    54f2:	97 83       	std	Z+7, r25	; 0x07
    54f4:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
    54f6:	81 e0       	ldi	r24, 0x01	; 1
    54f8:	80 93 a9 06 	sts	0x06A9, r24	; 0x8006a9 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
    54fc:	ff 91       	pop	r31
    54fe:	ef 91       	pop	r30
    5500:	bf 91       	pop	r27
    5502:	af 91       	pop	r26
    5504:	9f 91       	pop	r25
    5506:	8f 91       	pop	r24
    5508:	7f 91       	pop	r23
    550a:	6f 91       	pop	r22
    550c:	5f 91       	pop	r21
    550e:	4f 91       	pop	r20
    5510:	3f 91       	pop	r19
    5512:	2f 91       	pop	r18
    5514:	0f 90       	pop	r0
    5516:	0b be       	out	0x3b, r0	; 59
    5518:	0f 90       	pop	r0
    551a:	0f be       	out	0x3f, r0	; 63
    551c:	0f 90       	pop	r0
    551e:	1f 90       	pop	r1
    5520:	18 95       	reti

00005522 <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
    5522:	80 91 dd 09 	lds	r24, 0x09DD	; 0x8009dd <txFifo+0x6>
    5526:	90 91 de 09 	lds	r25, 0x09DE	; 0x8009de <txFifo+0x7>
    552a:	00 97       	sbiw	r24, 0x00	; 0
    552c:	69 f1       	breq	.+90     	; 0x5588 <HAL_UartTaskHandler+0x66>
    552e:	20 91 aa 06 	lds	r18, 0x06AA	; 0x8006aa <udrEmpty>
    5532:	22 23       	and	r18, r18
    5534:	49 f1       	breq	.+82     	; 0x5588 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
    5536:	e7 ed       	ldi	r30, 0xD7	; 215
    5538:	f9 e0       	ldi	r31, 0x09	; 9
    553a:	60 85       	ldd	r22, Z+8	; 0x08
    553c:	71 85       	ldd	r23, Z+9	; 0x09
    553e:	20 81       	ld	r18, Z
    5540:	31 81       	ldd	r19, Z+1	; 0x01
    5542:	a9 01       	movw	r20, r18
    5544:	4f 5f       	subi	r20, 0xFF	; 255
    5546:	5f 4f       	sbci	r21, 0xFF	; 255
    5548:	51 83       	std	Z+1, r21	; 0x01
    554a:	40 83       	st	Z, r20
    554c:	db 01       	movw	r26, r22
    554e:	a2 0f       	add	r26, r18
    5550:	b3 1f       	adc	r27, r19
    5552:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
    5554:	64 81       	ldd	r22, Z+4	; 0x04
    5556:	75 81       	ldd	r23, Z+5	; 0x05
    5558:	46 17       	cp	r20, r22
    555a:	57 07       	cpc	r21, r23
    555c:	21 f4       	brne	.+8      	; 0x5566 <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
    555e:	10 92 d8 09 	sts	0x09D8, r1	; 0x8009d8 <txFifo+0x1>
    5562:	10 92 d7 09 	sts	0x09D7, r1	; 0x8009d7 <txFifo>
    txFifo.bytes--;
    5566:	01 97       	sbiw	r24, 0x01	; 1
    5568:	90 93 de 09 	sts	0x09DE, r25	; 0x8009de <txFifo+0x7>
    556c:	80 93 dd 09 	sts	0x09DD, r24	; 0x8009dd <txFifo+0x6>

    ATOMIC_SECTION_ENTER
    5570:	9f b7       	in	r25, 0x3f	; 63
    5572:	f8 94       	cli
      UDRx = byte;
    5574:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
    5578:	e9 ec       	ldi	r30, 0xC9	; 201
    557a:	f0 e0       	ldi	r31, 0x00	; 0
    557c:	80 81       	ld	r24, Z
    557e:	80 62       	ori	r24, 0x20	; 32
    5580:	80 83       	st	Z, r24
      udrEmpty = false;
    5582:	10 92 aa 06 	sts	0x06AA, r1	; 0x8006aa <udrEmpty>
    ATOMIC_SECTION_LEAVE
    5586:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
    5588:	2f b7       	in	r18, 0x3f	; 63
    558a:	f8 94       	cli
      new = newData;
    558c:	90 91 a9 06 	lds	r25, 0x06A9	; 0x8006a9 <newData>
      newData = false;
    5590:	10 92 a9 06 	sts	0x06A9, r1	; 0x8006a9 <newData>
      bytes = rxFifo.bytes;
    5594:	40 91 42 08 	lds	r20, 0x0842	; 0x800842 <rxFifo+0x6>
    5598:	50 91 43 08 	lds	r21, 0x0843	; 0x800843 <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
    559c:	2f bf       	out	0x3f, r18	; 63

    if (new)
    559e:	99 23       	and	r25, r25
    55a0:	11 f0       	breq	.+4      	; 0x55a6 <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
    55a2:	ca 01       	movw	r24, r20
    55a4:	55 ca       	rjmp	.-2902   	; 0x4a50 <HAL_UartBytesReceived>
    55a6:	08 95       	ret

000055a8 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
    55a8:	ef e9       	ldi	r30, 0x9F	; 159
    55aa:	f5 e2       	ldi	r31, 0x25	; 37
    55ac:	14 82       	std	Z+4, r1	; 0x04
    55ae:	15 82       	std	Z+5, r1	; 0x05
    55b0:	11 82       	std	Z+1, r1	; 0x01
    55b2:	10 82       	st	Z, r1
    55b4:	17 a2       	std	Z+39, r1	; 0x27
    55b6:	16 a2       	std	Z+38, r1	; 0x26
    55b8:	80 e0       	ldi	r24, 0x00	; 0
    55ba:	0a c0       	rjmp	.+20     	; 0x55d0 <NWK_Init+0x28>
    55bc:	e8 2f       	mov	r30, r24
    55be:	f0 e0       	ldi	r31, 0x00	; 0
    55c0:	33 96       	adiw	r30, 0x03	; 3
    55c2:	ee 0f       	add	r30, r30
    55c4:	ff 1f       	adc	r31, r31
    55c6:	e1 56       	subi	r30, 0x61	; 97
    55c8:	fa 4d       	sbci	r31, 0xDA	; 218
    55ca:	11 82       	std	Z+1, r1	; 0x01
    55cc:	10 82       	st	Z, r1
    55ce:	8f 5f       	subi	r24, 0xFF	; 255
    55d0:	80 31       	cpi	r24, 0x10	; 16
    55d2:	a0 f3       	brcs	.-24     	; 0x55bc <NWK_Init+0x14>
    55d4:	39 d6       	rcall	.+3186   	; 0x6248 <nwkTxInit>
    55d6:	8d d5       	rcall	.+2842   	; 0x60f2 <nwkRxInit>
    55d8:	06 d1       	rcall	.+524    	; 0x57e6 <nwkFrameInit>
    55da:	c5 d0       	rcall	.+394    	; 0x5766 <nwkDataReqInit>
    55dc:	bd c1       	rjmp	.+890    	; 0x5958 <nwkRouteInit>
    55de:	08 95       	ret

000055e0 <NWK_SetAddr>:
    55e0:	90 93 a0 25 	sts	0x25A0, r25	; 0x8025a0 <nwkIb+0x1>
    55e4:	80 93 9f 25 	sts	0x259F, r24	; 0x80259f <nwkIb>
    55e8:	0c 94 2f 33 	jmp	0x665e	; 0x665e <PHY_SetShortAddr>
    55ec:	08 95       	ret

000055ee <NWK_SetPanId>:
    55ee:	90 93 a2 25 	sts	0x25A2, r25	; 0x8025a2 <nwkIb+0x3>
    55f2:	80 93 a1 25 	sts	0x25A1, r24	; 0x8025a1 <nwkIb+0x2>
    55f6:	0c 94 1d 33 	jmp	0x663a	; 0x663a <PHY_SetPanId>
    55fa:	08 95       	ret

000055fc <NWK_OpenEndpoint>:
    55fc:	e8 2f       	mov	r30, r24
    55fe:	f0 e0       	ldi	r31, 0x00	; 0
    5600:	33 96       	adiw	r30, 0x03	; 3
    5602:	ee 0f       	add	r30, r30
    5604:	ff 1f       	adc	r31, r31
    5606:	e1 56       	subi	r30, 0x61	; 97
    5608:	fa 4d       	sbci	r31, 0xDA	; 218
    560a:	71 83       	std	Z+1, r23	; 0x01
    560c:	60 83       	st	Z, r22
    560e:	08 95       	ret

00005610 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    5610:	c2 d5       	rcall	.+2948   	; 0x6196 <nwkRxTaskHandler>
  nwkTxTaskHandler();
    5612:	44 d7       	rcall	.+3720   	; 0x649c <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    5614:	d1 c0       	rjmp	.+418    	; 0x57b8 <nwkDataReqTaskHandler>
    5616:	08 95       	ret

00005618 <nwkDataReqConfirm>:
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    5618:	a0 91 e1 09 	lds	r26, 0x09E1	; 0x8009e1 <nwkDataReqQueue>
    561c:	b0 91 e2 09 	lds	r27, 0x09E2	; 0x8009e2 <nwkDataReqQueue+0x1>
    5620:	a8 17       	cp	r26, r24
    5622:	b9 07       	cpc	r27, r25
    5624:	41 f4       	brne	.+16     	; 0x5636 <nwkDataReqConfirm+0x1e>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    5626:	2d 91       	ld	r18, X+
    5628:	3c 91       	ld	r19, X
    562a:	30 93 e2 09 	sts	0x09E2, r19	; 0x8009e2 <nwkDataReqQueue+0x1>
    562e:	20 93 e1 09 	sts	0x09E1, r18	; 0x8009e1 <nwkDataReqQueue>
    5632:	0b c0       	rjmp	.+22     	; 0x564a <nwkDataReqConfirm+0x32>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    5634:	df 01       	movw	r26, r30
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    5636:	ed 91       	ld	r30, X+
    5638:	fc 91       	ld	r31, X
    563a:	11 97       	sbiw	r26, 0x01	; 1
    563c:	8e 17       	cp	r24, r30
    563e:	9f 07       	cpc	r25, r31
    5640:	c9 f7       	brne	.-14     	; 0x5634 <nwkDataReqConfirm+0x1c>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    5642:	20 81       	ld	r18, Z
    5644:	31 81       	ldd	r19, Z+1	; 0x01
    5646:	2d 93       	st	X+, r18
    5648:	3c 93       	st	X, r19
  }

  nwkIb.lock--;
    564a:	ef e9       	ldi	r30, 0x9F	; 159
    564c:	f5 e2       	ldi	r31, 0x25	; 37
    564e:	26 a1       	ldd	r18, Z+38	; 0x26
    5650:	37 a1       	ldd	r19, Z+39	; 0x27
    5652:	21 50       	subi	r18, 0x01	; 1
    5654:	31 09       	sbc	r19, r1
    5656:	37 a3       	std	Z+39, r19	; 0x27
    5658:	26 a3       	std	Z+38, r18	; 0x26
  req->confirm(req);
    565a:	dc 01       	movw	r26, r24
    565c:	1d 96       	adiw	r26, 0x0d	; 13
    565e:	ed 91       	ld	r30, X+
    5660:	fc 91       	ld	r31, X
    5662:	1e 97       	sbiw	r26, 0x0e	; 14
    5664:	19 95       	eicall
    5666:	08 95       	ret

00005668 <nwkDataReqSendFrame>:
/*************************************************************************//**
  @brief Prepares and send outgoing frame based on the request @a req parameters
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
    5668:	0f 93       	push	r16
    566a:	1f 93       	push	r17
    566c:	cf 93       	push	r28
    566e:	df 93       	push	r29
    5670:	8c 01       	movw	r16, r24
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    5672:	c6 d0       	rcall	.+396    	; 0x5800 <nwkFrameAlloc>
    5674:	ec 01       	movw	r28, r24
    5676:	00 97       	sbiw	r24, 0x00	; 0
    5678:	29 f4       	brne	.+10     	; 0x5684 <nwkDataReqSendFrame+0x1c>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    567a:	82 e0       	ldi	r24, 0x02	; 2
    567c:	f8 01       	movw	r30, r16
    567e:	84 83       	std	Z+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    5680:	87 87       	std	Z+15, r24	; 0x0f
    return;
    5682:	50 c0       	rjmp	.+160    	; 0x5724 <nwkDataReqSendFrame+0xbc>
  }

  req->frame = frame;
    5684:	f8 01       	movw	r30, r16
    5686:	93 83       	std	Z+3, r25	; 0x03
    5688:	82 83       	std	Z+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    568a:	81 e0       	ldi	r24, 0x01	; 1
    568c:	84 83       	std	Z+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    568e:	fe 01       	movw	r30, r28
    5690:	e9 57       	subi	r30, 0x79	; 121
    5692:	ff 4f       	sbci	r31, 0xFF	; 255
    5694:	87 e9       	ldi	r24, 0x97	; 151
    5696:	9b e2       	ldi	r25, 0x2B	; 43
    5698:	91 83       	std	Z+1, r25	; 0x01
    569a:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    569c:	f8 01       	movw	r30, r16
    569e:	81 85       	ldd	r24, Z+9	; 0x09
    56a0:	82 fb       	bst	r24, 2
    56a2:	88 27       	eor	r24, r24
    56a4:	80 f9       	bld	r24, 0
    56a6:	fe 01       	movw	r30, r28
    56a8:	ea 57       	subi	r30, 0x7A	; 122
    56aa:	ff 4f       	sbci	r31, 0xFF	; 255
    56ac:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    56ae:	f8 01       	movw	r30, r16
    56b0:	91 85       	ldd	r25, Z+9	; 0x09
    56b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    56b4:	90 fb       	bst	r25, 0
    56b6:	80 f9       	bld	r24, 0
    56b8:	8b 87       	std	Y+11, r24	; 0x0b
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    56ba:	91 85       	ldd	r25, Z+9	; 0x09
    56bc:	93 fb       	bst	r25, 3
    56be:	99 27       	eor	r25, r25
    56c0:	90 f9       	bld	r25, 0
    56c2:	90 fb       	bst	r25, 0
    56c4:	82 f9       	bld	r24, 2
    56c6:	8b 87       	std	Y+11, r24	; 0x0b
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    56c8:	ef e9       	ldi	r30, 0x9F	; 159
    56ca:	f5 e2       	ldi	r31, 0x25	; 37
    56cc:	84 81       	ldd	r24, Z+4	; 0x04
    56ce:	8f 5f       	subi	r24, 0xFF	; 255
    56d0:	84 83       	std	Z+4, r24	; 0x04
    56d2:	8c 87       	std	Y+12, r24	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    56d4:	80 81       	ld	r24, Z
    56d6:	91 81       	ldd	r25, Z+1	; 0x01
    56d8:	9e 87       	std	Y+14, r25	; 0x0e
    56da:	8d 87       	std	Y+13, r24	; 0x0d
  frame->header.nwkDstAddr = req->dstAddr;
    56dc:	f8 01       	movw	r30, r16
    56de:	85 81       	ldd	r24, Z+5	; 0x05
    56e0:	96 81       	ldd	r25, Z+6	; 0x06
    56e2:	98 8b       	std	Y+16, r25	; 0x10
    56e4:	8f 87       	std	Y+15, r24	; 0x0f
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    56e6:	80 85       	ldd	r24, Z+8	; 0x08
    56e8:	98 2f       	mov	r25, r24
    56ea:	9f 70       	andi	r25, 0x0F	; 15
    56ec:	89 89       	ldd	r24, Y+17	; 0x11
    56ee:	80 7f       	andi	r24, 0xF0	; 240
    56f0:	89 2b       	or	r24, r25
    56f2:	89 8b       	std	Y+17, r24	; 0x11
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    56f4:	97 81       	ldd	r25, Z+7	; 0x07
    56f6:	92 95       	swap	r25
    56f8:	90 7f       	andi	r25, 0xF0	; 240
    56fa:	8f 70       	andi	r24, 0x0F	; 15
    56fc:	89 2b       	or	r24, r25
    56fe:	89 8b       	std	Y+17, r24	; 0x11

  memcpy(frame->payload, req->data, req->size);
    5700:	44 85       	ldd	r20, Z+12	; 0x0c
    5702:	62 85       	ldd	r22, Z+10	; 0x0a
    5704:	73 85       	ldd	r23, Z+11	; 0x0b
    5706:	fe 01       	movw	r30, r28
    5708:	ef 57       	subi	r30, 0x7F	; 127
    570a:	ff 4f       	sbci	r31, 0xFF	; 255
    570c:	50 e0       	ldi	r21, 0x00	; 0
    570e:	80 81       	ld	r24, Z
    5710:	91 81       	ldd	r25, Z+1	; 0x01
    5712:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <memcpy>
  frame->size += req->size;
    5716:	f8 01       	movw	r30, r16
    5718:	84 85       	ldd	r24, Z+12	; 0x0c
    571a:	99 81       	ldd	r25, Y+1	; 0x01
    571c:	89 0f       	add	r24, r25
    571e:	89 83       	std	Y+1, r24	; 0x01

  nwkTxFrame(frame);
    5720:	ce 01       	movw	r24, r28
    5722:	b5 d5       	rcall	.+2922   	; 0x628e <nwkTxFrame>
}
    5724:	df 91       	pop	r29
    5726:	cf 91       	pop	r28
    5728:	1f 91       	pop	r17
    572a:	0f 91       	pop	r16
    572c:	08 95       	ret

0000572e <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    572e:	e0 91 e1 09 	lds	r30, 0x09E1	; 0x8009e1 <nwkDataReqQueue>
    5732:	f0 91 e2 09 	lds	r31, 0x09E2	; 0x8009e2 <nwkDataReqQueue+0x1>
    5736:	13 c0       	rjmp	.+38     	; 0x575e <nwkDataReqTxConf+0x30>
  {
    if (req->frame == frame)
    5738:	22 81       	ldd	r18, Z+2	; 0x02
    573a:	33 81       	ldd	r19, Z+3	; 0x03
    573c:	28 17       	cp	r18, r24
    573e:	39 07       	cpc	r19, r25
    5740:	59 f4       	brne	.+22     	; 0x5758 <nwkDataReqTxConf+0x2a>
    {
      req->status = frame->tx.status;
    5742:	dc 01       	movw	r26, r24
    5744:	ad 57       	subi	r26, 0x7D	; 125
    5746:	bf 4f       	sbci	r27, 0xFF	; 255
    5748:	2c 91       	ld	r18, X
    574a:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
    574c:	13 96       	adiw	r26, 0x03	; 3
    574e:	2c 91       	ld	r18, X
    5750:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
    5752:	22 e0       	ldi	r18, 0x02	; 2
    5754:	24 83       	std	Z+4, r18	; 0x04
      break;
    5756:	05 c0       	rjmp	.+10     	; 0x5762 <nwkDataReqTxConf+0x34>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    5758:	01 90       	ld	r0, Z+
    575a:	f0 81       	ld	r31, Z
    575c:	e0 2d       	mov	r30, r0
    575e:	30 97       	sbiw	r30, 0x00	; 0
    5760:	59 f7       	brne	.-42     	; 0x5738 <nwkDataReqTxConf+0xa>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
    5762:	7f c0       	rjmp	.+254    	; 0x5862 <nwkFrameFree>
    5764:	08 95       	ret

00005766 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    5766:	10 92 e2 09 	sts	0x09E2, r1	; 0x8009e2 <nwkDataReqQueue+0x1>
    576a:	10 92 e1 09 	sts	0x09E1, r1	; 0x8009e1 <nwkDataReqQueue>
    576e:	08 95       	ret

00005770 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    5770:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
    5772:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
    5774:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
    5776:	13 82       	std	Z+3, r1	; 0x03
    5778:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
    577a:	af e9       	ldi	r26, 0x9F	; 159
    577c:	b5 e2       	ldi	r27, 0x25	; 37
    577e:	96 96       	adiw	r26, 0x26	; 38
    5780:	8d 91       	ld	r24, X+
    5782:	9c 91       	ld	r25, X
    5784:	97 97       	sbiw	r26, 0x27	; 39
    5786:	01 96       	adiw	r24, 0x01	; 1
    5788:	97 96       	adiw	r26, 0x27	; 39
    578a:	9c 93       	st	X, r25
    578c:	8e 93       	st	-X, r24
    578e:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
    5790:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <nwkDataReqQueue>
    5794:	90 91 e2 09 	lds	r25, 0x09E2	; 0x8009e2 <nwkDataReqQueue+0x1>
    5798:	00 97       	sbiw	r24, 0x00	; 0
    579a:	39 f4       	brne	.+14     	; 0x57aa <NWK_DataReq+0x3a>
  {
    req->next = NULL;
    579c:	11 82       	std	Z+1, r1	; 0x01
    579e:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
    57a0:	f0 93 e2 09 	sts	0x09E2, r31	; 0x8009e2 <nwkDataReqQueue+0x1>
    57a4:	e0 93 e1 09 	sts	0x09E1, r30	; 0x8009e1 <nwkDataReqQueue>
    57a8:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    57aa:	91 83       	std	Z+1, r25	; 0x01
    57ac:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    57ae:	f0 93 e2 09 	sts	0x09E2, r31	; 0x8009e2 <nwkDataReqQueue+0x1>
    57b2:	e0 93 e1 09 	sts	0x09E1, r30	; 0x8009e1 <nwkDataReqQueue>
    57b6:	08 95       	ret

000057b8 <nwkDataReqTaskHandler>:
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    57b8:	e0 91 e1 09 	lds	r30, 0x09E1	; 0x8009e1 <nwkDataReqQueue>
    57bc:	f0 91 e2 09 	lds	r31, 0x09E2	; 0x8009e2 <nwkDataReqQueue+0x1>
    57c0:	0f c0       	rjmp	.+30     	; 0x57e0 <nwkDataReqTaskHandler+0x28>
  {
    switch (req->state)
    57c2:	84 81       	ldd	r24, Z+4	; 0x04
    57c4:	88 23       	and	r24, r24
    57c6:	19 f0       	breq	.+6      	; 0x57ce <nwkDataReqTaskHandler+0x16>
    57c8:	82 30       	cpi	r24, 0x02	; 2
    57ca:	21 f0       	breq	.+8      	; 0x57d4 <nwkDataReqTaskHandler+0x1c>
    57cc:	06 c0       	rjmp	.+12     	; 0x57da <nwkDataReqTaskHandler+0x22>
    {
      case NWK_DATA_REQ_STATE_INITIAL:
      {
        nwkDataReqSendFrame(req);
    57ce:	cf 01       	movw	r24, r30
    57d0:	4b cf       	rjmp	.-362    	; 0x5668 <nwkDataReqSendFrame>
        return;
    57d2:	08 95       	ret
      case NWK_DATA_REQ_STATE_WAIT_CONF:
        break;

      case NWK_DATA_REQ_STATE_CONFIRM:
      {
        nwkDataReqConfirm(req);
    57d4:	cf 01       	movw	r24, r30
    57d6:	20 cf       	rjmp	.-448    	; 0x5618 <nwkDataReqConfirm>
        return;
    57d8:	08 95       	ret
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    57da:	01 90       	ld	r0, Z+
    57dc:	f0 81       	ld	r31, Z
    57de:	e0 2d       	mov	r30, r0
    57e0:	30 97       	sbiw	r30, 0x00	; 0
    57e2:	79 f7       	brne	.-34     	; 0x57c2 <nwkDataReqTaskHandler+0xa>
    57e4:	08 95       	ret

000057e6 <nwkFrameInit>:
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    57e6:	80 e0       	ldi	r24, 0x00	; 0
    57e8:	08 c0       	rjmp	.+16     	; 0x57fa <nwkFrameInit+0x14>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    57ea:	99 e8       	ldi	r25, 0x89	; 137
    57ec:	89 9f       	mul	r24, r25
    57ee:	f0 01       	movw	r30, r0
    57f0:	11 24       	eor	r1, r1
    57f2:	ed 51       	subi	r30, 0x1D	; 29
    57f4:	f6 4f       	sbci	r31, 0xF6	; 246
    57f6:	10 82       	st	Z, r1
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    57f8:	8f 5f       	subi	r24, 0xFF	; 255
    57fa:	8e 31       	cpi	r24, 0x1E	; 30
    57fc:	b0 f3       	brcs	.-20     	; 0x57ea <nwkFrameInit+0x4>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    57fe:	08 95       	ret

00005800 <nwkFrameAlloc>:
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    5800:	80 e0       	ldi	r24, 0x00	; 0
    5802:	2a c0       	rjmp	.+84     	; 0x5858 <nwkFrameAlloc+0x58>
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    5804:	28 2f       	mov	r18, r24
    5806:	30 e0       	ldi	r19, 0x00	; 0
    5808:	99 e8       	ldi	r25, 0x89	; 137
    580a:	92 9f       	mul	r25, r18
    580c:	f0 01       	movw	r30, r0
    580e:	93 9f       	mul	r25, r19
    5810:	f0 0d       	add	r31, r0
    5812:	11 24       	eor	r1, r1
    5814:	ed 51       	subi	r30, 0x1D	; 29
    5816:	f6 4f       	sbci	r31, 0xF6	; 246
    5818:	90 81       	ld	r25, Z
    581a:	91 11       	cpse	r25, r1
    581c:	1c c0       	rjmp	.+56     	; 0x5856 <nwkFrameAlloc+0x56>
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    581e:	69 e8       	ldi	r22, 0x89	; 137
    5820:	62 9f       	mul	r22, r18
    5822:	a0 01       	movw	r20, r0
    5824:	63 9f       	mul	r22, r19
    5826:	50 0d       	add	r21, r0
    5828:	11 24       	eor	r1, r1
    582a:	cf 01       	movw	r24, r30
    582c:	11 92       	st	Z+, r1
    582e:	6a 95       	dec	r22
    5830:	e9 f7       	brne	.-6      	; 0x582c <nwkFrameAlloc+0x2c>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    5832:	20 e1       	ldi	r18, 0x10	; 16
    5834:	fc 01       	movw	r30, r24
    5836:	21 83       	std	Z+1, r18	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    5838:	4b 50       	subi	r20, 0x0B	; 11
    583a:	56 4f       	sbci	r21, 0xF6	; 246
    583c:	ef 57       	subi	r30, 0x7F	; 127
    583e:	ff 4f       	sbci	r31, 0xFF	; 255
    5840:	51 83       	std	Z+1, r21	; 0x01
    5842:	40 83       	st	Z, r20
      nwkIb.lock++;
    5844:	ef e9       	ldi	r30, 0x9F	; 159
    5846:	f5 e2       	ldi	r31, 0x25	; 37
    5848:	26 a1       	ldd	r18, Z+38	; 0x26
    584a:	37 a1       	ldd	r19, Z+39	; 0x27
    584c:	2f 5f       	subi	r18, 0xFF	; 255
    584e:	3f 4f       	sbci	r19, 0xFF	; 255
    5850:	37 a3       	std	Z+39, r19	; 0x27
    5852:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
    5854:	08 95       	ret
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    5856:	8f 5f       	subi	r24, 0xFF	; 255
    5858:	8e 31       	cpi	r24, 0x1E	; 30
    585a:	a0 f2       	brcs	.-88     	; 0x5804 <nwkFrameAlloc+0x4>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    585c:	80 e0       	ldi	r24, 0x00	; 0
    585e:	90 e0       	ldi	r25, 0x00	; 0
}
    5860:	08 95       	ret

00005862 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    5862:	fc 01       	movw	r30, r24
    5864:	10 82       	st	Z, r1
  nwkIb.lock--;
    5866:	ef e9       	ldi	r30, 0x9F	; 159
    5868:	f5 e2       	ldi	r31, 0x25	; 37
    586a:	86 a1       	ldd	r24, Z+38	; 0x26
    586c:	97 a1       	ldd	r25, Z+39	; 0x27
    586e:	01 97       	sbiw	r24, 0x01	; 1
    5870:	97 a3       	std	Z+39, r25	; 0x27
    5872:	86 a3       	std	Z+38, r24	; 0x26
    5874:	08 95       	ret

00005876 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    5876:	00 97       	sbiw	r24, 0x00	; 0
    5878:	21 f0       	breq	.+8      	; 0x5882 <nwkFrameNext+0xc>
    frame = nwkFrameFrames;
  else
    frame++;
    587a:	fc 01       	movw	r30, r24
    587c:	e7 57       	subi	r30, 0x77	; 119
    587e:	ff 4f       	sbci	r31, 0xFF	; 255
    5880:	08 c0       	rjmp	.+16     	; 0x5892 <nwkFrameNext+0x1c>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    5882:	e3 ee       	ldi	r30, 0xE3	; 227
    5884:	f9 e0       	ldi	r31, 0x09	; 9
    5886:	05 c0       	rjmp	.+10     	; 0x5892 <nwkFrameNext+0x1c>
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    5888:	80 81       	ld	r24, Z
    588a:	81 11       	cpse	r24, r1
    588c:	09 c0       	rjmp	.+18     	; 0x58a0 <nwkFrameNext+0x2a>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    588e:	e7 57       	subi	r30, 0x77	; 119
    5890:	ff 4f       	sbci	r31, 0xFF	; 255
    5892:	89 e1       	ldi	r24, 0x19	; 25
    5894:	e1 3f       	cpi	r30, 0xF1	; 241
    5896:	f8 07       	cpc	r31, r24
    5898:	b8 f3       	brcs	.-18     	; 0x5888 <nwkFrameNext+0x12>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    589a:	80 e0       	ldi	r24, 0x00	; 0
    589c:	90 e0       	ldi	r25, 0x00	; 0
    589e:	08 95       	ret
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
    58a0:	8e 2f       	mov	r24, r30
    58a2:	9f 2f       	mov	r25, r31
  }

  return NULL;
}
    58a4:	08 95       	ret

000058a6 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    58a6:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    58a8:	dc 01       	movw	r26, r24
    58aa:	ad 57       	subi	r26, 0x7D	; 125
    58ac:	bf 4f       	sbci	r27, 0xFF	; 255
    58ae:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    58b0:	af e9       	ldi	r26, 0x9F	; 159
    58b2:	b5 e2       	ldi	r27, 0x25	; 37
    58b4:	14 96       	adiw	r26, 0x04	; 4
    58b6:	9c 91       	ld	r25, X
    58b8:	14 97       	sbiw	r26, 0x04	; 4
    58ba:	9f 5f       	subi	r25, 0xFF	; 255
    58bc:	14 96       	adiw	r26, 0x04	; 4
    58be:	9c 93       	st	X, r25
    58c0:	14 97       	sbiw	r26, 0x04	; 4
    58c2:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    58c4:	8d 91       	ld	r24, X+
    58c6:	9c 91       	ld	r25, X
    58c8:	96 87       	std	Z+14, r25	; 0x0e
    58ca:	85 87       	std	Z+13, r24	; 0x0d
    58cc:	08 95       	ret

000058ce <nwkRouteNormalizeRanks>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
    58ce:	90 e0       	ldi	r25, 0x00	; 0
    58d0:	12 c0       	rjmp	.+36     	; 0x58f6 <nwkRouteNormalizeRanks+0x28>
    58d2:	29 2f       	mov	r18, r25
    58d4:	30 e0       	ldi	r19, 0x00	; 0
    58d6:	f9 01       	movw	r30, r18
    58d8:	ee 0f       	add	r30, r30
    58da:	ff 1f       	adc	r31, r31
    58dc:	ee 0f       	add	r30, r30
    58de:	ff 1f       	adc	r31, r31
    58e0:	ee 0f       	add	r30, r30
    58e2:	ff 1f       	adc	r31, r31
    58e4:	e2 1b       	sub	r30, r18
    58e6:	f3 0b       	sbc	r31, r19
    58e8:	ef 50       	subi	r30, 0x0F	; 15
    58ea:	f6 4e       	sbci	r31, 0xE6	; 230
    58ec:	85 81       	ldd	r24, Z+5	; 0x05
    58ee:	86 95       	lsr	r24
    58f0:	8f 5f       	subi	r24, 0xFF	; 255
    58f2:	85 83       	std	Z+5, r24	; 0x05
    58f4:	9f 5f       	subi	r25, 0xFF	; 255
    58f6:	94 36       	cpi	r25, 0x64	; 100
    58f8:	60 f3       	brcs	.-40     	; 0x58d2 <nwkRouteNormalizeRanks+0x4>
    58fa:	08 95       	ret

000058fc <nwkRouteSendRouteError>:
    58fc:	df 92       	push	r13
    58fe:	ef 92       	push	r14
    5900:	ff 92       	push	r15
    5902:	0f 93       	push	r16
    5904:	1f 93       	push	r17
    5906:	cf 93       	push	r28
    5908:	df 93       	push	r29
    590a:	8c 01       	movw	r16, r24
    590c:	7b 01       	movw	r14, r22
    590e:	d4 2e       	mov	r13, r20
    5910:	77 df       	rcall	.-274    	; 0x5800 <nwkFrameAlloc>
    5912:	ec 01       	movw	r28, r24
    5914:	00 97       	sbiw	r24, 0x00	; 0
    5916:	c1 f0       	breq	.+48     	; 0x5948 <nwkRouteSendRouteError+0x4c>
    5918:	c6 df       	rcall	.-116    	; 0x58a6 <nwkFrameCommandInit>
    591a:	89 81       	ldd	r24, Y+1	; 0x01
    591c:	8a 5f       	subi	r24, 0xFA	; 250
    591e:	89 83       	std	Y+1, r24	; 0x01
    5920:	fe 01       	movw	r30, r28
    5922:	e9 57       	subi	r30, 0x79	; 121
    5924:	ff 4f       	sbci	r31, 0xFF	; 255
    5926:	11 82       	std	Z+1, r1	; 0x01
    5928:	10 82       	st	Z, r1
    592a:	18 8b       	std	Y+16, r17	; 0x10
    592c:	0f 87       	std	Y+15, r16	; 0x0f
    592e:	36 97       	sbiw	r30, 0x06	; 6
    5930:	01 90       	ld	r0, Z+
    5932:	f0 81       	ld	r31, Z
    5934:	e0 2d       	mov	r30, r0
    5936:	81 e0       	ldi	r24, 0x01	; 1
    5938:	80 83       	st	Z, r24
    593a:	12 83       	std	Z+2, r17	; 0x02
    593c:	01 83       	std	Z+1, r16	; 0x01
    593e:	f4 82       	std	Z+4, r15	; 0x04
    5940:	e3 82       	std	Z+3, r14	; 0x03
    5942:	d5 82       	std	Z+5, r13	; 0x05
    5944:	ce 01       	movw	r24, r28
    5946:	a3 d4       	rcall	.+2374   	; 0x628e <nwkTxFrame>
    5948:	df 91       	pop	r29
    594a:	cf 91       	pop	r28
    594c:	1f 91       	pop	r17
    594e:	0f 91       	pop	r16
    5950:	ff 90       	pop	r15
    5952:	ef 90       	pop	r14
    5954:	df 90       	pop	r13
    5956:	08 95       	ret

00005958 <nwkRouteInit>:
    5958:	80 e0       	ldi	r24, 0x00	; 0
    595a:	16 c0       	rjmp	.+44     	; 0x5988 <nwkRouteInit+0x30>
    595c:	28 2f       	mov	r18, r24
    595e:	30 e0       	ldi	r19, 0x00	; 0
    5960:	f9 01       	movw	r30, r18
    5962:	ee 0f       	add	r30, r30
    5964:	ff 1f       	adc	r31, r31
    5966:	ee 0f       	add	r30, r30
    5968:	ff 1f       	adc	r31, r31
    596a:	ee 0f       	add	r30, r30
    596c:	ff 1f       	adc	r31, r31
    596e:	e2 1b       	sub	r30, r18
    5970:	f3 0b       	sbc	r31, r19
    5972:	ef 50       	subi	r30, 0x0F	; 15
    5974:	f6 4e       	sbci	r31, 0xE6	; 230
    5976:	2f ef       	ldi	r18, 0xFF	; 255
    5978:	3f ef       	ldi	r19, 0xFF	; 255
    597a:	32 83       	std	Z+2, r19	; 0x02
    597c:	21 83       	std	Z+1, r18	; 0x01
    597e:	90 81       	ld	r25, Z
    5980:	9e 7f       	andi	r25, 0xFE	; 254
    5982:	90 83       	st	Z, r25
    5984:	15 82       	std	Z+5, r1	; 0x05
    5986:	8f 5f       	subi	r24, 0xFF	; 255
    5988:	84 36       	cpi	r24, 0x64	; 100
    598a:	40 f3       	brcs	.-48     	; 0x595c <nwkRouteInit+0x4>
    598c:	08 95       	ret

0000598e <NWK_RouteFindEntry>:
    598e:	cf 93       	push	r28
    5990:	df 93       	push	r29
    5992:	ec 01       	movw	r28, r24
    5994:	90 e0       	ldi	r25, 0x00	; 0
    5996:	2a c0       	rjmp	.+84     	; 0x59ec <NWK_RouteFindEntry+0x5e>
    5998:	29 2f       	mov	r18, r25
    599a:	30 e0       	ldi	r19, 0x00	; 0
    599c:	f9 01       	movw	r30, r18
    599e:	ee 0f       	add	r30, r30
    59a0:	ff 1f       	adc	r31, r31
    59a2:	ee 0f       	add	r30, r30
    59a4:	ff 1f       	adc	r31, r31
    59a6:	ee 0f       	add	r30, r30
    59a8:	ff 1f       	adc	r31, r31
    59aa:	e2 1b       	sub	r30, r18
    59ac:	f3 0b       	sbc	r31, r19
    59ae:	ef 50       	subi	r30, 0x0F	; 15
    59b0:	f6 4e       	sbci	r31, 0xE6	; 230
    59b2:	41 81       	ldd	r20, Z+1	; 0x01
    59b4:	52 81       	ldd	r21, Z+2	; 0x02
    59b6:	4c 17       	cp	r20, r28
    59b8:	5d 07       	cpc	r21, r29
    59ba:	b9 f4       	brne	.+46     	; 0x59ea <NWK_RouteFindEntry+0x5c>
    59bc:	f9 01       	movw	r30, r18
    59be:	ee 0f       	add	r30, r30
    59c0:	ff 1f       	adc	r31, r31
    59c2:	ee 0f       	add	r30, r30
    59c4:	ff 1f       	adc	r31, r31
    59c6:	ee 0f       	add	r30, r30
    59c8:	ff 1f       	adc	r31, r31
    59ca:	e2 1b       	sub	r30, r18
    59cc:	f3 0b       	sbc	r31, r19
    59ce:	ef 50       	subi	r30, 0x0F	; 15
    59d0:	f6 4e       	sbci	r31, 0xE6	; 230
    59d2:	80 81       	ld	r24, Z
    59d4:	81 fb       	bst	r24, 1
    59d6:	aa 27       	eor	r26, r26
    59d8:	a0 f9       	bld	r26, 0
    59da:	b0 e0       	ldi	r27, 0x00	; 0
    59dc:	46 2f       	mov	r20, r22
    59de:	50 e0       	ldi	r21, 0x00	; 0
    59e0:	a4 17       	cp	r26, r20
    59e2:	b5 07       	cpc	r27, r21
    59e4:	11 f4       	brne	.+4      	; 0x59ea <NWK_RouteFindEntry+0x5c>
    59e6:	cf 01       	movw	r24, r30
    59e8:	05 c0       	rjmp	.+10     	; 0x59f4 <NWK_RouteFindEntry+0x66>
    59ea:	9f 5f       	subi	r25, 0xFF	; 255
    59ec:	94 36       	cpi	r25, 0x64	; 100
    59ee:	a0 f2       	brcs	.-88     	; 0x5998 <NWK_RouteFindEntry+0xa>
    59f0:	80 e0       	ldi	r24, 0x00	; 0
    59f2:	90 e0       	ldi	r25, 0x00	; 0
    59f4:	df 91       	pop	r29
    59f6:	cf 91       	pop	r28
    59f8:	08 95       	ret

000059fa <NWK_RouteNewEntry>:
    59fa:	80 e0       	ldi	r24, 0x00	; 0
    59fc:	a0 e0       	ldi	r26, 0x00	; 0
    59fe:	b0 e0       	ldi	r27, 0x00	; 0
    5a00:	e1 ef       	ldi	r30, 0xF1	; 241
    5a02:	f9 e1       	ldi	r31, 0x19	; 25
    5a04:	13 c0       	rjmp	.+38     	; 0x5a2c <NWK_RouteNewEntry+0x32>
    5a06:	90 81       	ld	r25, Z
    5a08:	90 fd       	sbrc	r25, 0
    5a0a:	0e c0       	rjmp	.+28     	; 0x5a28 <NWK_RouteNewEntry+0x2e>
    5a0c:	95 81       	ldd	r25, Z+5	; 0x05
    5a0e:	99 23       	and	r25, r25
    5a10:	81 f0       	breq	.+32     	; 0x5a32 <NWK_RouteNewEntry+0x38>
    5a12:	10 97       	sbiw	r26, 0x00	; 0
    5a14:	31 f0       	breq	.+12     	; 0x5a22 <NWK_RouteNewEntry+0x28>
    5a16:	15 96       	adiw	r26, 0x05	; 5
    5a18:	2c 91       	ld	r18, X
    5a1a:	15 97       	sbiw	r26, 0x05	; 5
    5a1c:	92 17       	cp	r25, r18
    5a1e:	18 f0       	brcs	.+6      	; 0x5a26 <NWK_RouteNewEntry+0x2c>
    5a20:	03 c0       	rjmp	.+6      	; 0x5a28 <NWK_RouteNewEntry+0x2e>
    5a22:	df 01       	movw	r26, r30
    5a24:	01 c0       	rjmp	.+2      	; 0x5a28 <NWK_RouteNewEntry+0x2e>
    5a26:	df 01       	movw	r26, r30
    5a28:	8f 5f       	subi	r24, 0xFF	; 255
    5a2a:	37 96       	adiw	r30, 0x07	; 7
    5a2c:	84 36       	cpi	r24, 0x64	; 100
    5a2e:	58 f3       	brcs	.-42     	; 0x5a06 <NWK_RouteNewEntry+0xc>
    5a30:	fd 01       	movw	r30, r26
    5a32:	80 81       	ld	r24, Z
    5a34:	8d 70       	andi	r24, 0x0D	; 13
    5a36:	80 63       	ori	r24, 0x30	; 48
    5a38:	80 83       	st	Z, r24
    5a3a:	80 e8       	ldi	r24, 0x80	; 128
    5a3c:	85 83       	std	Z+5, r24	; 0x05
    5a3e:	cf 01       	movw	r24, r30
    5a40:	08 95       	ret

00005a42 <NWK_RouteFreeEntry>:
    5a42:	fc 01       	movw	r30, r24
    5a44:	80 81       	ld	r24, Z
    5a46:	80 fd       	sbrc	r24, 0
    5a48:	05 c0       	rjmp	.+10     	; 0x5a54 <NWK_RouteFreeEntry+0x12>
    5a4a:	8f ef       	ldi	r24, 0xFF	; 255
    5a4c:	9f ef       	ldi	r25, 0xFF	; 255
    5a4e:	92 83       	std	Z+2, r25	; 0x02
    5a50:	81 83       	std	Z+1, r24	; 0x01
    5a52:	15 82       	std	Z+5, r1	; 0x05
    5a54:	08 95       	ret

00005a56 <NWK_RouteNextHop>:
    5a56:	9b df       	rcall	.-202    	; 0x598e <NWK_RouteFindEntry>
    5a58:	00 97       	sbiw	r24, 0x00	; 0
    5a5a:	21 f0       	breq	.+8      	; 0x5a64 <NWK_RouteNextHop+0xe>
    5a5c:	fc 01       	movw	r30, r24
    5a5e:	83 81       	ldd	r24, Z+3	; 0x03
    5a60:	94 81       	ldd	r25, Z+4	; 0x04
    5a62:	08 95       	ret
    5a64:	8f ef       	ldi	r24, 0xFF	; 255
    5a66:	9f ef       	ldi	r25, 0xFF	; 255
    5a68:	08 95       	ret

00005a6a <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    5a6a:	91 df       	rcall	.-222    	; 0x598e <NWK_RouteFindEntry>
  if (entry)
    5a6c:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
    5a6e:	09 f0       	breq	.+2      	; 0x5a72 <nwkRouteRemove+0x8>
    5a70:	e8 cf       	rjmp	.-48     	; 0x5a42 <NWK_RouteFreeEntry>
    5a72:	08 95       	ret

00005a74 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    5a74:	0f 93       	push	r16
    5a76:	1f 93       	push	r17
    5a78:	cf 93       	push	r28
    5a7a:	df 93       	push	r29
    5a7c:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    5a7e:	01 85       	ldd	r16, Z+9	; 0x09
    5a80:	12 85       	ldd	r17, Z+10	; 0x0a
    5a82:	11 23       	and	r17, r17
    5a84:	34 f4       	brge	.+12     	; 0x5a92 <nwkRouteFrameReceived+0x1e>
      (header->macSrcAddr != header->nwkSrcAddr))
    5a86:	85 85       	ldd	r24, Z+13	; 0x0d
    5a88:	96 85       	ldd	r25, Z+14	; 0x0e
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    5a8a:	08 17       	cp	r16, r24
    5a8c:	19 07       	cpc	r17, r25
    5a8e:	09 f0       	breq	.+2      	; 0x5a92 <nwkRouteFrameReceived+0x1e>
    5a90:	50 c0       	rjmp	.+160    	; 0x5b32 <nwkRouteFrameReceived+0xbe>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    5a92:	85 81       	ldd	r24, Z+5	; 0x05
    5a94:	96 81       	ldd	r25, Z+6	; 0x06
    5a96:	01 96       	adiw	r24, 0x01	; 1
    5a98:	09 f4       	brne	.+2      	; 0x5a9c <nwkRouteFrameReceived+0x28>
    5a9a:	4b c0       	rjmp	.+150    	; 0x5b32 <nwkRouteFrameReceived+0xbe>
    5a9c:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    5a9e:	60 e0       	ldi	r22, 0x00	; 0
    5aa0:	85 85       	ldd	r24, Z+13	; 0x0d
    5aa2:	96 85       	ldd	r25, Z+14	; 0x0e
    5aa4:	74 df       	rcall	.-280    	; 0x598e <NWK_RouteFindEntry>
    5aa6:	dc 01       	movw	r26, r24

  if (entry)
    5aa8:	89 2b       	or	r24, r25
    5aaa:	79 f1       	breq	.+94     	; 0x5b0a <nwkRouteFrameReceived+0x96>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    5aac:	8f 81       	ldd	r24, Y+7	; 0x07
    5aae:	98 85       	ldd	r25, Y+8	; 0x08
    5ab0:	01 96       	adiw	r24, 0x01	; 1
    5ab2:	59 f4       	brne	.+22     	; 0x5aca <nwkRouteFrameReceived+0x56>
        nwkIb.addr == header->nwkDstAddr);
    5ab4:	20 91 9f 25 	lds	r18, 0x259F	; 0x80259f <nwkIb>
    5ab8:	30 91 a0 25 	lds	r19, 0x25A0	; 0x8025a0 <nwkIb+0x1>
    5abc:	8f 85       	ldd	r24, Y+15	; 0x0f
    5abe:	98 89       	ldd	r25, Y+16	; 0x10

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    5ac0:	28 17       	cp	r18, r24
    5ac2:	39 07       	cpc	r19, r25
    5ac4:	21 f0       	breq	.+8      	; 0x5ace <nwkRouteFrameReceived+0x5a>
    5ac6:	80 e0       	ldi	r24, 0x00	; 0
    5ac8:	03 c0       	rjmp	.+6      	; 0x5ad0 <nwkRouteFrameReceived+0x5c>
    5aca:	80 e0       	ldi	r24, 0x00	; 0
    5acc:	01 c0       	rjmp	.+2      	; 0x5ad0 <nwkRouteFrameReceived+0x5c>
    5ace:	81 e0       	ldi	r24, 0x01	; 1
    5ad0:	98 2f       	mov	r25, r24
    5ad2:	91 70       	andi	r25, 0x01	; 1
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    5ad4:	13 96       	adiw	r26, 0x03	; 3
    5ad6:	2d 91       	ld	r18, X+
    5ad8:	3c 91       	ld	r19, X
    5ada:	14 97       	sbiw	r26, 0x04	; 4
    5adc:	02 17       	cp	r16, r18
    5ade:	13 07       	cpc	r17, r19
    5ae0:	49 f0       	breq	.+18     	; 0x5af4 <nwkRouteFrameReceived+0x80>
    5ae2:	fe 01       	movw	r30, r28
    5ae4:	ed 57       	subi	r30, 0x7D	; 125
    5ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ae8:	20 81       	ld	r18, Z
    5aea:	16 96       	adiw	r26, 0x06	; 6
    5aec:	8c 91       	ld	r24, X
    5aee:	16 97       	sbiw	r26, 0x06	; 6
    5af0:	82 17       	cp	r24, r18
    5af2:	10 f0       	brcs	.+4      	; 0x5af8 <nwkRouteFrameReceived+0x84>
    5af4:	99 23       	and	r25, r25
    5af6:	b9 f0       	breq	.+46     	; 0x5b26 <nwkRouteFrameReceived+0xb2>
    {
      entry->nextHopAddr = header->macSrcAddr;
    5af8:	14 96       	adiw	r26, 0x04	; 4
    5afa:	1c 93       	st	X, r17
    5afc:	0e 93       	st	-X, r16
    5afe:	13 97       	sbiw	r26, 0x03	; 3
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    5b00:	8c 91       	ld	r24, X
    5b02:	8f 70       	andi	r24, 0x0F	; 15
    5b04:	80 63       	ori	r24, 0x30	; 48
    5b06:	8c 93       	st	X, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    5b08:	0e c0       	rjmp	.+28     	; 0x5b26 <nwkRouteFrameReceived+0xb2>
    5b0a:	77 df       	rcall	.-274    	; 0x59fa <NWK_RouteNewEntry>
    5b0c:	dc 01       	movw	r26, r24

    entry->dstAddr = header->nwkSrcAddr;
    5b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b12:	12 96       	adiw	r26, 0x02	; 2
    5b14:	9c 93       	st	X, r25
    5b16:	8e 93       	st	-X, r24
    5b18:	11 97       	sbiw	r26, 0x01	; 1
    entry->nextHopAddr = header->macSrcAddr;
    5b1a:	89 85       	ldd	r24, Y+9	; 0x09
    5b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b1e:	14 96       	adiw	r26, 0x04	; 4
    5b20:	9c 93       	st	X, r25
    5b22:	8e 93       	st	-X, r24
    5b24:	13 97       	sbiw	r26, 0x03	; 3
  }

  entry->lqi = frame->rx.lqi;
    5b26:	fe 01       	movw	r30, r28
    5b28:	ed 57       	subi	r30, 0x7D	; 125
    5b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b2c:	80 81       	ld	r24, Z
    5b2e:	16 96       	adiw	r26, 0x06	; 6
    5b30:	8c 93       	st	X, r24
#else
  (void)frame;
#endif
}
    5b32:	df 91       	pop	r29
    5b34:	cf 91       	pop	r28
    5b36:	1f 91       	pop	r17
    5b38:	0f 91       	pop	r16
    5b3a:	08 95       	ret

00005b3c <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    5b3c:	cf 93       	push	r28
    5b3e:	df 93       	push	r29
    5b40:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    5b42:	87 85       	ldd	r24, Z+15	; 0x0f
    5b44:	90 89       	ldd	r25, Z+16	; 0x10
    5b46:	8f 3f       	cpi	r24, 0xFF	; 255
    5b48:	2f ef       	ldi	r18, 0xFF	; 255
    5b4a:	92 07       	cpc	r25, r18
    5b4c:	81 f1       	breq	.+96     	; 0x5bae <nwkRouteFrameSent+0x72>
    5b4e:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    5b50:	63 85       	ldd	r22, Z+11	; 0x0b
    5b52:	63 fb       	bst	r22, 3
    5b54:	66 27       	eor	r22, r22
    5b56:	60 f9       	bld	r22, 0
    5b58:	1a df       	rcall	.-460    	; 0x598e <NWK_RouteFindEntry>
    5b5a:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
    5b5c:	89 2b       	or	r24, r25
    5b5e:	39 f1       	breq	.+78     	; 0x5bae <nwkRouteFrameSent+0x72>
    5b60:	8c 91       	ld	r24, X
    5b62:	80 fd       	sbrc	r24, 0
    5b64:	24 c0       	rjmp	.+72     	; 0x5bae <nwkRouteFrameSent+0x72>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    5b66:	fe 01       	movw	r30, r28
    5b68:	ed 57       	subi	r30, 0x7D	; 125
    5b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b6c:	80 81       	ld	r24, Z
    5b6e:	81 11       	cpse	r24, r1
    5b70:	0e c0       	rjmp	.+28     	; 0x5b8e <nwkRouteFrameSent+0x52>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    5b72:	8c 91       	ld	r24, X
    5b74:	8f 70       	andi	r24, 0x0F	; 15
    5b76:	80 63       	ori	r24, 0x30	; 48
    5b78:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    5b7a:	15 96       	adiw	r26, 0x05	; 5
    5b7c:	8c 91       	ld	r24, X
    5b7e:	15 97       	sbiw	r26, 0x05	; 5
    5b80:	8f 5f       	subi	r24, 0xFF	; 255
    5b82:	15 96       	adiw	r26, 0x05	; 5
    5b84:	8c 93       	st	X, r24
    5b86:	8f 3f       	cpi	r24, 0xFF	; 255
      nwkRouteNormalizeRanks();
    5b88:	91 f4       	brne	.+36     	; 0x5bae <nwkRouteFrameSent+0x72>
    5b8a:	a1 de       	rcall	.-702    	; 0x58ce <nwkRouteNormalizeRanks>
    5b8c:	10 c0       	rjmp	.+32     	; 0x5bae <nwkRouteFrameSent+0x72>
  }
  else
  {
    if (0 == --entry->score)
    5b8e:	9c 91       	ld	r25, X
    5b90:	89 2f       	mov	r24, r25
    5b92:	82 95       	swap	r24
    5b94:	8f 70       	andi	r24, 0x0F	; 15
    5b96:	81 5f       	subi	r24, 0xF1	; 241
    5b98:	8f 70       	andi	r24, 0x0F	; 15
    5b9a:	28 2f       	mov	r18, r24
    5b9c:	22 95       	swap	r18
    5b9e:	20 7f       	andi	r18, 0xF0	; 240
    5ba0:	9f 70       	andi	r25, 0x0F	; 15
    5ba2:	92 2b       	or	r25, r18
    5ba4:	9c 93       	st	X, r25
    5ba6:	81 11       	cpse	r24, r1
      NWK_RouteFreeEntry(entry);
    5ba8:	02 c0       	rjmp	.+4      	; 0x5bae <nwkRouteFrameSent+0x72>
    5baa:	cd 01       	movw	r24, r26
    5bac:	4a df       	rcall	.-364    	; 0x5a42 <NWK_RouteFreeEntry>
  }
}
    5bae:	df 91       	pop	r29
    5bb0:	cf 91       	pop	r28
    5bb2:	08 95       	ret

00005bb4 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    5bb4:	cf 93       	push	r28
    5bb6:	df 93       	push	r29
    5bb8:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    5bba:	87 85       	ldd	r24, Z+15	; 0x0f
    5bbc:	90 89       	ldd	r25, Z+16	; 0x10
    5bbe:	8f 3f       	cpi	r24, 0xFF	; 255
    5bc0:	2f ef       	ldi	r18, 0xFF	; 255
    5bc2:	92 07       	cpc	r25, r18
    5bc4:	29 f4       	brne	.+10     	; 0x5bd0 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    5bc6:	8f ef       	ldi	r24, 0xFF	; 255
    5bc8:	9f ef       	ldi	r25, 0xFF	; 255
    5bca:	90 87       	std	Z+8, r25	; 0x08
    5bcc:	87 83       	std	Z+7, r24	; 0x07
    5bce:	0e c0       	rjmp	.+28     	; 0x5bec <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
    5bd0:	23 85       	ldd	r18, Z+11	; 0x0b
    5bd2:	22 ff       	sbrs	r18, 2
    5bd4:	03 c0       	rjmp	.+6      	; 0x5bdc <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
    5bd6:	90 87       	std	Z+8, r25	; 0x08
    5bd8:	87 83       	std	Z+7, r24	; 0x07
    5bda:	08 c0       	rjmp	.+16     	; 0x5bec <nwkRoutePrepareTx+0x38>
    5bdc:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    5bde:	63 85       	ldd	r22, Z+11	; 0x0b
    5be0:	63 fb       	bst	r22, 3
    5be2:	66 27       	eor	r22, r22
    5be4:	60 f9       	bld	r22, 0
    5be6:	37 df       	rcall	.-402    	; 0x5a56 <NWK_RouteNextHop>
    5be8:	98 87       	std	Y+8, r25	; 0x08
    5bea:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    5bec:	df 91       	pop	r29
    5bee:	cf 91       	pop	r28
    5bf0:	08 95       	ret

00005bf2 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    5bf2:	ef 92       	push	r14
    5bf4:	ff 92       	push	r15
    5bf6:	1f 93       	push	r17
    5bf8:	cf 93       	push	r28
    5bfa:	df 93       	push	r29
    5bfc:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    5bfe:	1b 85       	ldd	r17, Y+11	; 0x0b
    5c00:	13 fb       	bst	r17, 3
    5c02:	11 27       	eor	r17, r17
    5c04:	10 f9       	bld	r17, 0
    5c06:	ef 84       	ldd	r14, Y+15	; 0x0f
    5c08:	f8 88       	ldd	r15, Y+16	; 0x10
    5c0a:	61 2f       	mov	r22, r17
    5c0c:	c7 01       	movw	r24, r14
    5c0e:	23 df       	rcall	.-442    	; 0x5a56 <NWK_RouteNextHop>
    5c10:	01 96       	adiw	r24, 0x01	; 1
    5c12:	59 f0       	breq	.+22     	; 0x5c2a <nwkRouteFrame+0x38>
  {
    frame->tx.confirm = NULL;
    5c14:	fe 01       	movw	r30, r28
    5c16:	e9 57       	subi	r30, 0x79	; 121
    5c18:	ff 4f       	sbci	r31, 0xFF	; 255
    5c1a:	11 82       	std	Z+1, r1	; 0x01
    5c1c:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    5c1e:	31 97       	sbiw	r30, 0x01	; 1
    5c20:	82 e0       	ldi	r24, 0x02	; 2
    5c22:	80 83       	st	Z, r24
    nwkTxFrame(frame);
    5c24:	ce 01       	movw	r24, r28
    5c26:	33 d3       	rcall	.+1638   	; 0x628e <nwkTxFrame>
    5c28:	07 c0       	rjmp	.+14     	; 0x5c38 <nwkRouteFrame+0x46>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    5c2a:	41 2f       	mov	r20, r17
    5c2c:	b7 01       	movw	r22, r14
    5c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    nwkFrameFree(frame);
    5c32:	64 de       	rcall	.-824    	; 0x58fc <nwkRouteSendRouteError>
    5c34:	ce 01       	movw	r24, r28
    5c36:	15 de       	rcall	.-982    	; 0x5862 <nwkFrameFree>
  }
}
    5c38:	df 91       	pop	r29
    5c3a:	cf 91       	pop	r28
    5c3c:	1f 91       	pop	r17
    5c3e:	ff 90       	pop	r15
    5c40:	ef 90       	pop	r14
    5c42:	08 95       	ret

00005c44 <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    5c44:	dc 01       	movw	r26, r24
    5c46:	17 96       	adiw	r26, 0x07	; 7
    5c48:	ed 91       	ld	r30, X+
    5c4a:	fc 91       	ld	r31, X
    5c4c:	18 97       	sbiw	r26, 0x08	; 8

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    5c4e:	19 96       	adiw	r26, 0x09	; 9
    5c50:	8c 91       	ld	r24, X
    5c52:	86 30       	cpi	r24, 0x06	; 6
    5c54:	31 f4       	brne	.+12     	; 0x5c62 <nwkRouteErrorReceived+0x1e>
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
    5c56:	65 81       	ldd	r22, Z+5	; 0x05
    5c58:	83 81       	ldd	r24, Z+3	; 0x03
    5c5a:	94 81       	ldd	r25, Z+4	; 0x04
    5c5c:	06 df       	rcall	.-500    	; 0x5a6a <nwkRouteRemove>

  return true;
    5c5e:	81 e0       	ldi	r24, 0x01	; 1
    5c60:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
    5c62:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
    5c64:	08 95       	ret

00005c66 <nwkRxIndicateFrame>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    5c66:	ef 92       	push	r14
    5c68:	ff 92       	push	r15
    5c6a:	0f 93       	push	r16
    5c6c:	1f 93       	push	r17
    5c6e:	cf 93       	push	r28
    5c70:	df 93       	push	r29
    5c72:	cd b7       	in	r28, 0x3d	; 61
    5c74:	de b7       	in	r29, 0x3e	; 62
    5c76:	2c 97       	sbiw	r28, 0x0c	; 12
    5c78:	0f b6       	in	r0, 0x3f	; 63
    5c7a:	f8 94       	cli
    5c7c:	de bf       	out	0x3e, r29	; 62
    5c7e:	0f be       	out	0x3f, r0	; 63
    5c80:	cd bf       	out	0x3d, r28	; 61
    5c82:	dc 01       	movw	r26, r24
    5c84:	51 96       	adiw	r26, 0x11	; 17
    5c86:	8c 91       	ld	r24, X
    5c88:	51 97       	sbiw	r26, 0x11	; 17
    5c8a:	82 95       	swap	r24
    5c8c:	8f 70       	andi	r24, 0x0F	; 15
    5c8e:	e8 2f       	mov	r30, r24
    5c90:	f0 e0       	ldi	r31, 0x00	; 0
    5c92:	33 96       	adiw	r30, 0x03	; 3
    5c94:	ee 0f       	add	r30, r30
    5c96:	ff 1f       	adc	r31, r31
    5c98:	e1 56       	subi	r30, 0x61	; 97
    5c9a:	fa 4d       	sbci	r31, 0xDA	; 218
    5c9c:	e0 80       	ld	r14, Z
    5c9e:	f1 80       	ldd	r15, Z+1	; 0x01
    5ca0:	e1 14       	cp	r14, r1
    5ca2:	f1 04       	cpc	r15, r1
    5ca4:	09 f4       	brne	.+2      	; 0x5ca8 <nwkRxIndicateFrame+0x42>
    5ca6:	67 c0       	rjmp	.+206    	; 0x5d76 <nwkRxIndicateFrame+0x110>
    5ca8:	1d 96       	adiw	r26, 0x0d	; 13
    5caa:	4d 91       	ld	r20, X+
    5cac:	5c 91       	ld	r21, X
    5cae:	1e 97       	sbiw	r26, 0x0e	; 14
    5cb0:	5a 83       	std	Y+2, r21	; 0x02
    5cb2:	49 83       	std	Y+1, r20	; 0x01
    5cb4:	1f 96       	adiw	r26, 0x0f	; 15
    5cb6:	6d 91       	ld	r22, X+
    5cb8:	7c 91       	ld	r23, X
    5cba:	50 97       	sbiw	r26, 0x10	; 16
    5cbc:	7c 83       	std	Y+4, r23	; 0x04
    5cbe:	6b 83       	std	Y+3, r22	; 0x03
    5cc0:	51 96       	adiw	r26, 0x11	; 17
    5cc2:	9c 91       	ld	r25, X
    5cc4:	51 97       	sbiw	r26, 0x11	; 17
    5cc6:	9f 70       	andi	r25, 0x0F	; 15
    5cc8:	9d 83       	std	Y+5, r25	; 0x05
    5cca:	8e 83       	std	Y+6, r24	; 0x06
    5ccc:	cd 01       	movw	r24, r26
    5cce:	8f 57       	subi	r24, 0x7F	; 127
    5cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    5cd2:	fc 01       	movw	r30, r24
    5cd4:	80 81       	ld	r24, Z
    5cd6:	91 81       	ldd	r25, Z+1	; 0x01
    5cd8:	99 87       	std	Y+9, r25	; 0x09
    5cda:	88 87       	std	Y+8, r24	; 0x08
    5cdc:	11 96       	adiw	r26, 0x01	; 1
    5cde:	2c 91       	ld	r18, X
    5ce0:	11 97       	sbiw	r26, 0x01	; 1
    5ce2:	8d 01       	movw	r16, r26
    5ce4:	0e 5f       	subi	r16, 0xFE	; 254
    5ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ce8:	80 1b       	sub	r24, r16
    5cea:	91 0b       	sbc	r25, r17
    5cec:	28 1b       	sub	r18, r24
    5cee:	2a 87       	std	Y+10, r18	; 0x0a
    5cf0:	cd 01       	movw	r24, r26
    5cf2:	8d 57       	subi	r24, 0x7D	; 125
    5cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    5cf6:	fc 01       	movw	r30, r24
    5cf8:	80 81       	ld	r24, Z
    5cfa:	8b 87       	std	Y+11, r24	; 0x0b
    5cfc:	cd 01       	movw	r24, r26
    5cfe:	8c 57       	subi	r24, 0x7C	; 124
    5d00:	9f 4f       	sbci	r25, 0xFF	; 255
    5d02:	fc 01       	movw	r30, r24
    5d04:	80 81       	ld	r24, Z
    5d06:	8c 87       	std	Y+12, r24	; 0x0c
    5d08:	1b 96       	adiw	r26, 0x0b	; 11
    5d0a:	2c 91       	ld	r18, X
    5d0c:	1b 97       	sbiw	r26, 0x0b	; 11
    5d0e:	92 2f       	mov	r25, r18
    5d10:	91 70       	andi	r25, 0x01	; 1
    5d12:	82 2f       	mov	r24, r18
    5d14:	82 70       	andi	r24, 0x02	; 2
    5d16:	98 2b       	or	r25, r24
    5d18:	22 ff       	sbrs	r18, 2
    5d1a:	02 c0       	rjmp	.+4      	; 0x5d20 <nwkRxIndicateFrame+0xba>
    5d1c:	80 e2       	ldi	r24, 0x20	; 32
    5d1e:	01 c0       	rjmp	.+2      	; 0x5d22 <nwkRxIndicateFrame+0xbc>
    5d20:	80 e0       	ldi	r24, 0x00	; 0
    5d22:	98 2b       	or	r25, r24
    5d24:	23 ff       	sbrs	r18, 3
    5d26:	02 c0       	rjmp	.+4      	; 0x5d2c <nwkRxIndicateFrame+0xc6>
    5d28:	80 e4       	ldi	r24, 0x40	; 64
    5d2a:	01 c0       	rjmp	.+2      	; 0x5d2e <nwkRxIndicateFrame+0xc8>
    5d2c:	80 e0       	ldi	r24, 0x00	; 0
    5d2e:	98 2b       	or	r25, r24
    5d30:	6f 3f       	cpi	r22, 0xFF	; 255
    5d32:	7f 4f       	sbci	r23, 0xFF	; 255
    5d34:	11 f4       	brne	.+4      	; 0x5d3a <nwkRxIndicateFrame+0xd4>
    5d36:	84 e0       	ldi	r24, 0x04	; 4
    5d38:	01 c0       	rjmp	.+2      	; 0x5d3c <nwkRxIndicateFrame+0xd6>
    5d3a:	80 e0       	ldi	r24, 0x00	; 0
    5d3c:	98 2b       	or	r25, r24
    5d3e:	19 96       	adiw	r26, 0x09	; 9
    5d40:	2d 91       	ld	r18, X+
    5d42:	3c 91       	ld	r19, X
    5d44:	1a 97       	sbiw	r26, 0x0a	; 10
    5d46:	42 17       	cp	r20, r18
    5d48:	53 07       	cpc	r21, r19
    5d4a:	11 f4       	brne	.+4      	; 0x5d50 <nwkRxIndicateFrame+0xea>
    5d4c:	88 e0       	ldi	r24, 0x08	; 8
    5d4e:	01 c0       	rjmp	.+2      	; 0x5d52 <nwkRxIndicateFrame+0xec>
    5d50:	80 e0       	ldi	r24, 0x00	; 0
    5d52:	98 2b       	or	r25, r24
    5d54:	15 96       	adiw	r26, 0x05	; 5
    5d56:	2d 91       	ld	r18, X+
    5d58:	3c 91       	ld	r19, X
    5d5a:	16 97       	sbiw	r26, 0x06	; 6
    5d5c:	2f 3f       	cpi	r18, 0xFF	; 255
    5d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d60:	11 f4       	brne	.+4      	; 0x5d66 <nwkRxIndicateFrame+0x100>
    5d62:	80 e1       	ldi	r24, 0x10	; 16
    5d64:	01 c0       	rjmp	.+2      	; 0x5d68 <nwkRxIndicateFrame+0x102>
    5d66:	80 e0       	ldi	r24, 0x00	; 0
    5d68:	89 2b       	or	r24, r25
    5d6a:	8f 83       	std	Y+7, r24	; 0x07
    5d6c:	ce 01       	movw	r24, r28
    5d6e:	01 96       	adiw	r24, 0x01	; 1
    5d70:	f7 01       	movw	r30, r14
    5d72:	19 95       	eicall
    5d74:	01 c0       	rjmp	.+2      	; 0x5d78 <nwkRxIndicateFrame+0x112>
    5d76:	80 e0       	ldi	r24, 0x00	; 0
    5d78:	2c 96       	adiw	r28, 0x0c	; 12
    5d7a:	0f b6       	in	r0, 0x3f	; 63
    5d7c:	f8 94       	cli
    5d7e:	de bf       	out	0x3e, r29	; 62
    5d80:	0f be       	out	0x3f, r0	; 63
    5d82:	cd bf       	out	0x3d, r28	; 61
    5d84:	df 91       	pop	r29
    5d86:	cf 91       	pop	r28
    5d88:	1f 91       	pop	r17
    5d8a:	0f 91       	pop	r16
    5d8c:	ff 90       	pop	r15
    5d8e:	ef 90       	pop	r14
    5d90:	08 95       	ret

00005d92 <nwkRxServiceDataInd>:
    5d92:	dc 01       	movw	r26, r24
    5d94:	19 96       	adiw	r26, 0x09	; 9
    5d96:	2c 91       	ld	r18, X
    5d98:	19 97       	sbiw	r26, 0x09	; 9
    5d9a:	22 23       	and	r18, r18
    5d9c:	71 f0       	breq	.+28     	; 0x5dba <nwkRxServiceDataInd+0x28>
    5d9e:	17 96       	adiw	r26, 0x07	; 7
    5da0:	ed 91       	ld	r30, X+
    5da2:	fc 91       	ld	r31, X
    5da4:	18 97       	sbiw	r26, 0x08	; 8
    5da6:	20 81       	ld	r18, Z
    5da8:	22 23       	and	r18, r18
    5daa:	19 f0       	breq	.+6      	; 0x5db2 <nwkRxServiceDataInd+0x20>
    5dac:	21 30       	cpi	r18, 0x01	; 1
    5dae:	19 f0       	breq	.+6      	; 0x5db6 <nwkRxServiceDataInd+0x24>
    5db0:	06 c0       	rjmp	.+12     	; 0x5dbe <nwkRxServiceDataInd+0x2c>
    5db2:	02 c3       	rjmp	.+1540   	; 0x63b8 <nwkTxAckReceived>
    5db4:	08 95       	ret
    5db6:	46 cf       	rjmp	.-372    	; 0x5c44 <nwkRouteErrorReceived>
    5db8:	08 95       	ret
    5dba:	80 e0       	ldi	r24, 0x00	; 0
    5dbc:	08 95       	ret
    5dbe:	80 e0       	ldi	r24, 0x00	; 0
    5dc0:	08 95       	ret

00005dc2 <nwkRxDuplicateRejectionTimerHandler>:
    5dc2:	bc 01       	movw	r22, r24
    5dc4:	90 e0       	ldi	r25, 0x00	; 0
    5dc6:	80 e0       	ldi	r24, 0x00	; 0
    5dc8:	1c c0       	rjmp	.+56     	; 0x5e02 <nwkRxDuplicateRejectionTimerHandler+0x40>
    5dca:	29 2f       	mov	r18, r25
    5dcc:	30 e0       	ldi	r19, 0x00	; 0
    5dce:	f9 01       	movw	r30, r18
    5dd0:	ee 0f       	add	r30, r30
    5dd2:	ff 1f       	adc	r31, r31
    5dd4:	ee 0f       	add	r30, r30
    5dd6:	ff 1f       	adc	r31, r31
    5dd8:	e2 0f       	add	r30, r18
    5dda:	f3 1f       	adc	r31, r19
    5ddc:	e5 54       	subi	r30, 0x45	; 69
    5dde:	f3 4e       	sbci	r31, 0xE3	; 227
    5de0:	44 81       	ldd	r20, Z+4	; 0x04
    5de2:	44 23       	and	r20, r20
    5de4:	69 f0       	breq	.+26     	; 0x5e00 <nwkRxDuplicateRejectionTimerHandler+0x3e>
    5de6:	f9 01       	movw	r30, r18
    5de8:	ee 0f       	add	r30, r30
    5dea:	ff 1f       	adc	r31, r31
    5dec:	ee 0f       	add	r30, r30
    5dee:	ff 1f       	adc	r31, r31
    5df0:	2e 0f       	add	r18, r30
    5df2:	3f 1f       	adc	r19, r31
    5df4:	f9 01       	movw	r30, r18
    5df6:	e5 54       	subi	r30, 0x45	; 69
    5df8:	f3 4e       	sbci	r31, 0xE3	; 227
    5dfa:	41 50       	subi	r20, 0x01	; 1
    5dfc:	44 83       	std	Z+4, r20	; 0x04
    5dfe:	81 e0       	ldi	r24, 0x01	; 1
    5e00:	9f 5f       	subi	r25, 0xFF	; 255
    5e02:	9a 30       	cpi	r25, 0x0A	; 10
    5e04:	10 f3       	brcs	.-60     	; 0x5dca <nwkRxDuplicateRejectionTimerHandler+0x8>
    5e06:	88 23       	and	r24, r24
    5e08:	11 f0       	breq	.+4      	; 0x5e0e <nwkRxDuplicateRejectionTimerHandler+0x4c>
    5e0a:	cb 01       	movw	r24, r22
    5e0c:	91 c5       	rjmp	.+2850   	; 0x6930 <SYS_TimerStart>
    5e0e:	08 95       	ret

00005e10 <nwkRxRejectDuplicate>:
    5e10:	0f 93       	push	r16
    5e12:	1f 93       	push	r17
    5e14:	cf 93       	push	r28
    5e16:	df 93       	push	r29
    5e18:	ec 01       	movw	r28, r24
    5e1a:	90 e0       	ldi	r25, 0x00	; 0
    5e1c:	60 e0       	ldi	r22, 0x00	; 0
    5e1e:	70 e0       	ldi	r23, 0x00	; 0
    5e20:	80 c0       	rjmp	.+256    	; 0x5f22 <nwkRxRejectDuplicate+0x112>
    5e22:	29 2f       	mov	r18, r25
    5e24:	30 e0       	ldi	r19, 0x00	; 0
    5e26:	f9 01       	movw	r30, r18
    5e28:	ee 0f       	add	r30, r30
    5e2a:	ff 1f       	adc	r31, r31
    5e2c:	ee 0f       	add	r30, r30
    5e2e:	ff 1f       	adc	r31, r31
    5e30:	e2 0f       	add	r30, r18
    5e32:	f3 1f       	adc	r31, r19
    5e34:	e5 54       	subi	r30, 0x45	; 69
    5e36:	f3 4e       	sbci	r31, 0xE3	; 227
    5e38:	44 81       	ldd	r20, Z+4	; 0x04
    5e3a:	44 23       	and	r20, r20
    5e3c:	09 f4       	brne	.+2      	; 0x5e40 <nwkRxRejectDuplicate+0x30>
    5e3e:	6d c0       	rjmp	.+218    	; 0x5f1a <nwkRxRejectDuplicate+0x10a>
    5e40:	0b 85       	ldd	r16, Y+11	; 0x0b
    5e42:	1c 85       	ldd	r17, Y+12	; 0x0c
    5e44:	a0 81       	ld	r26, Z
    5e46:	b1 81       	ldd	r27, Z+1	; 0x01
    5e48:	0a 17       	cp	r16, r26
    5e4a:	1b 07       	cpc	r17, r27
    5e4c:	09 f0       	breq	.+2      	; 0x5e50 <nwkRxRejectDuplicate+0x40>
    5e4e:	65 c0       	rjmp	.+202    	; 0x5f1a <nwkRxRejectDuplicate+0x10a>
    5e50:	f9 01       	movw	r30, r18
    5e52:	ee 0f       	add	r30, r30
    5e54:	ff 1f       	adc	r31, r31
    5e56:	ee 0f       	add	r30, r30
    5e58:	ff 1f       	adc	r31, r31
    5e5a:	e2 0f       	add	r30, r18
    5e5c:	f3 1f       	adc	r31, r19
    5e5e:	e5 54       	subi	r30, 0x45	; 69
    5e60:	f3 4e       	sbci	r31, 0xE3	; 227
    5e62:	82 81       	ldd	r24, Z+2	; 0x02
    5e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e66:	89 1b       	sub	r24, r25
    5e68:	88 30       	cpi	r24, 0x08	; 8
    5e6a:	e0 f5       	brcc	.+120    	; 0x5ee4 <nwkRxRejectDuplicate+0xd4>
    5e6c:	f9 01       	movw	r30, r18
    5e6e:	ee 0f       	add	r30, r30
    5e70:	ff 1f       	adc	r31, r31
    5e72:	ee 0f       	add	r30, r30
    5e74:	ff 1f       	adc	r31, r31
    5e76:	e2 0f       	add	r30, r18
    5e78:	f3 1f       	adc	r31, r19
    5e7a:	e5 54       	subi	r30, 0x45	; 69
    5e7c:	f3 4e       	sbci	r31, 0xE3	; 227
    5e7e:	93 81       	ldd	r25, Z+3	; 0x03
    5e80:	49 2f       	mov	r20, r25
    5e82:	50 e0       	ldi	r21, 0x00	; 0
    5e84:	08 2e       	mov	r0, r24
    5e86:	02 c0       	rjmp	.+4      	; 0x5e8c <nwkRxRejectDuplicate+0x7c>
    5e88:	55 95       	asr	r21
    5e8a:	47 95       	ror	r20
    5e8c:	0a 94       	dec	r0
    5e8e:	e2 f7       	brpl	.-8      	; 0x5e88 <nwkRxRejectDuplicate+0x78>
    5e90:	40 ff       	sbrs	r20, 0
    5e92:	13 c0       	rjmp	.+38     	; 0x5eba <nwkRxRejectDuplicate+0xaa>
    5e94:	20 91 9f 25 	lds	r18, 0x259F	; 0x80259f <nwkIb>
    5e98:	30 91 a0 25 	lds	r19, 0x25A0	; 0x8025a0 <nwkIb+0x1>
    5e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    5e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    5ea0:	28 17       	cp	r18, r24
    5ea2:	39 07       	cpc	r19, r25
    5ea4:	09 f0       	breq	.+2      	; 0x5ea8 <nwkRxRejectDuplicate+0x98>
    5ea6:	53 c0       	rjmp	.+166    	; 0x5f4e <nwkRxRejectDuplicate+0x13e>
    5ea8:	69 85       	ldd	r22, Y+9	; 0x09
    5eaa:	63 fb       	bst	r22, 3
    5eac:	66 27       	eor	r22, r22
    5eae:	60 f9       	bld	r22, 0
    5eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5eb4:	da dd       	rcall	.-1100   	; 0x5a6a <nwkRouteRemove>
    5eb6:	81 e0       	ldi	r24, 0x01	; 1
    5eb8:	4d c0       	rjmp	.+154    	; 0x5f54 <nwkRxRejectDuplicate+0x144>
    5eba:	41 e0       	ldi	r20, 0x01	; 1
    5ebc:	50 e0       	ldi	r21, 0x00	; 0
    5ebe:	02 c0       	rjmp	.+4      	; 0x5ec4 <nwkRxRejectDuplicate+0xb4>
    5ec0:	44 0f       	add	r20, r20
    5ec2:	55 1f       	adc	r21, r21
    5ec4:	8a 95       	dec	r24
    5ec6:	e2 f7       	brpl	.-8      	; 0x5ec0 <nwkRxRejectDuplicate+0xb0>
    5ec8:	f9 01       	movw	r30, r18
    5eca:	ee 0f       	add	r30, r30
    5ecc:	ff 1f       	adc	r31, r31
    5ece:	ee 0f       	add	r30, r30
    5ed0:	ff 1f       	adc	r31, r31
    5ed2:	2e 0f       	add	r18, r30
    5ed4:	3f 1f       	adc	r19, r31
    5ed6:	f9 01       	movw	r30, r18
    5ed8:	e5 54       	subi	r30, 0x45	; 69
    5eda:	f3 4e       	sbci	r31, 0xE3	; 227
    5edc:	94 2b       	or	r25, r20
    5ede:	93 83       	std	Z+3, r25	; 0x03
    5ee0:	80 e0       	ldi	r24, 0x00	; 0
    5ee2:	38 c0       	rjmp	.+112    	; 0x5f54 <nwkRxRejectDuplicate+0x144>
    5ee4:	81 95       	neg	r24
    5ee6:	f9 01       	movw	r30, r18
    5ee8:	ee 0f       	add	r30, r30
    5eea:	ff 1f       	adc	r31, r31
    5eec:	ee 0f       	add	r30, r30
    5eee:	ff 1f       	adc	r31, r31
    5ef0:	2e 0f       	add	r18, r30
    5ef2:	3f 1f       	adc	r19, r31
    5ef4:	f9 01       	movw	r30, r18
    5ef6:	e5 54       	subi	r30, 0x45	; 69
    5ef8:	f3 4e       	sbci	r31, 0xE3	; 227
    5efa:	92 83       	std	Z+2, r25	; 0x02
    5efc:	23 81       	ldd	r18, Z+3	; 0x03
    5efe:	30 e0       	ldi	r19, 0x00	; 0
    5f00:	a9 01       	movw	r20, r18
    5f02:	02 c0       	rjmp	.+4      	; 0x5f08 <nwkRxRejectDuplicate+0xf8>
    5f04:	44 0f       	add	r20, r20
    5f06:	55 1f       	adc	r21, r21
    5f08:	8a 95       	dec	r24
    5f0a:	e2 f7       	brpl	.-8      	; 0x5f04 <nwkRxRejectDuplicate+0xf4>
    5f0c:	ca 01       	movw	r24, r20
    5f0e:	81 60       	ori	r24, 0x01	; 1
    5f10:	83 83       	std	Z+3, r24	; 0x03
    5f12:	8f e1       	ldi	r24, 0x1F	; 31
    5f14:	84 83       	std	Z+4, r24	; 0x04
    5f16:	80 e0       	ldi	r24, 0x00	; 0
    5f18:	1d c0       	rjmp	.+58     	; 0x5f54 <nwkRxRejectDuplicate+0x144>
    5f1a:	41 11       	cpse	r20, r1
    5f1c:	01 c0       	rjmp	.+2      	; 0x5f20 <nwkRxRejectDuplicate+0x110>
    5f1e:	bf 01       	movw	r22, r30
    5f20:	9f 5f       	subi	r25, 0xFF	; 255
    5f22:	9a 30       	cpi	r25, 0x0A	; 10
    5f24:	08 f4       	brcc	.+2      	; 0x5f28 <nwkRxRejectDuplicate+0x118>
    5f26:	7d cf       	rjmp	.-262    	; 0x5e22 <nwkRxRejectDuplicate+0x12>
    5f28:	61 15       	cp	r22, r1
    5f2a:	71 05       	cpc	r23, r1
    5f2c:	91 f0       	breq	.+36     	; 0x5f52 <nwkRxRejectDuplicate+0x142>
    5f2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f30:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f32:	fb 01       	movw	r30, r22
    5f34:	91 83       	std	Z+1, r25	; 0x01
    5f36:	80 83       	st	Z, r24
    5f38:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f3a:	82 83       	std	Z+2, r24	; 0x02
    5f3c:	81 e0       	ldi	r24, 0x01	; 1
    5f3e:	83 83       	std	Z+3, r24	; 0x03
    5f40:	8f e1       	ldi	r24, 0x1F	; 31
    5f42:	84 83       	std	Z+4, r24	; 0x04
    5f44:	8d ea       	ldi	r24, 0xAD	; 173
    5f46:	9c e1       	ldi	r25, 0x1C	; 28
    5f48:	f3 d4       	rcall	.+2534   	; 0x6930 <SYS_TimerStart>
    5f4a:	80 e0       	ldi	r24, 0x00	; 0
    5f4c:	03 c0       	rjmp	.+6      	; 0x5f54 <nwkRxRejectDuplicate+0x144>
    5f4e:	81 e0       	ldi	r24, 0x01	; 1
    5f50:	01 c0       	rjmp	.+2      	; 0x5f54 <nwkRxRejectDuplicate+0x144>
    5f52:	81 e0       	ldi	r24, 0x01	; 1
    5f54:	df 91       	pop	r29
    5f56:	cf 91       	pop	r28
    5f58:	1f 91       	pop	r17
    5f5a:	0f 91       	pop	r16
    5f5c:	08 95       	ret

00005f5e <nwkRxHandleReceivedFrame>:
    5f5e:	0f 93       	push	r16
    5f60:	1f 93       	push	r17
    5f62:	cf 93       	push	r28
    5f64:	df 93       	push	r29
    5f66:	fc 01       	movw	r30, r24
    5f68:	8c 01       	movw	r16, r24
    5f6a:	0e 5f       	subi	r16, 0xFE	; 254
    5f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    5f6e:	84 e2       	ldi	r24, 0x24	; 36
    5f70:	80 83       	st	Z, r24
    5f72:	83 85       	ldd	r24, Z+11	; 0x0b
    5f74:	81 fd       	sbrc	r24, 1
    5f76:	54 c0       	rjmp	.+168    	; 0x6020 <nwkRxHandleReceivedFrame+0xc2>
    5f78:	83 fd       	sbrc	r24, 3
    5f7a:	52 c0       	rjmp	.+164    	; 0x6020 <nwkRxHandleReceivedFrame+0xc2>
    5f7c:	25 81       	ldd	r18, Z+5	; 0x05
    5f7e:	36 81       	ldd	r19, Z+6	; 0x06
    5f80:	2f 3f       	cpi	r18, 0xFF	; 255
    5f82:	3f 4f       	sbci	r19, 0xFF	; 255
    5f84:	79 f4       	brne	.+30     	; 0x5fa4 <nwkRxHandleReceivedFrame+0x46>
    5f86:	20 91 9f 25 	lds	r18, 0x259F	; 0x80259f <nwkIb>
    5f8a:	30 91 a0 25 	lds	r19, 0x25A0	; 0x8025a0 <nwkIb+0x1>
    5f8e:	87 85       	ldd	r24, Z+15	; 0x0f
    5f90:	90 89       	ldd	r25, Z+16	; 0x10
    5f92:	28 17       	cp	r18, r24
    5f94:	39 07       	cpc	r19, r25
    5f96:	19 f0       	breq	.+6      	; 0x5f9e <nwkRxHandleReceivedFrame+0x40>
    5f98:	01 96       	adiw	r24, 0x01	; 1
    5f9a:	09 f0       	breq	.+2      	; 0x5f9e <nwkRxHandleReceivedFrame+0x40>
    5f9c:	41 c0       	rjmp	.+130    	; 0x6020 <nwkRxHandleReceivedFrame+0xc2>
    5f9e:	82 e2       	ldi	r24, 0x22	; 34
    5fa0:	80 83       	st	Z, r24
    5fa2:	3e c0       	rjmp	.+124    	; 0x6020 <nwkRxHandleReceivedFrame+0xc2>
    5fa4:	27 85       	ldd	r18, Z+15	; 0x0f
    5fa6:	30 89       	ldd	r19, Z+16	; 0x10
    5fa8:	2f 3f       	cpi	r18, 0xFF	; 255
    5faa:	3f 4f       	sbci	r19, 0xFF	; 255
    5fac:	11 f4       	brne	.+4      	; 0x5fb2 <nwkRxHandleReceivedFrame+0x54>
    5fae:	80 fd       	sbrc	r24, 0
    5fb0:	37 c0       	rjmp	.+110    	; 0x6020 <nwkRxHandleReceivedFrame+0xc2>
    5fb2:	20 91 9f 25 	lds	r18, 0x259F	; 0x80259f <nwkIb>
    5fb6:	30 91 a0 25 	lds	r19, 0x25A0	; 0x8025a0 <nwkIb+0x1>
    5fba:	85 85       	ldd	r24, Z+13	; 0x0d
    5fbc:	96 85       	ldd	r25, Z+14	; 0x0e
    5fbe:	28 17       	cp	r18, r24
    5fc0:	39 07       	cpc	r19, r25
    5fc2:	71 f1       	breq	.+92     	; 0x6020 <nwkRxHandleReceivedFrame+0xc2>
    5fc4:	ef 01       	movw	r28, r30
    5fc6:	cf 01       	movw	r24, r30
    5fc8:	55 dd       	rcall	.-1366   	; 0x5a74 <nwkRouteFrameReceived>
    5fca:	c8 01       	movw	r24, r16
    5fcc:	21 df       	rcall	.-446    	; 0x5e10 <nwkRxRejectDuplicate>
    5fce:	81 11       	cpse	r24, r1
    5fd0:	27 c0       	rjmp	.+78     	; 0x6020 <nwkRxHandleReceivedFrame+0xc2>
    5fd2:	8f 81       	ldd	r24, Y+7	; 0x07
    5fd4:	98 85       	ldd	r25, Y+8	; 0x08
    5fd6:	01 96       	adiw	r24, 0x01	; 1
    5fd8:	71 f4       	brne	.+28     	; 0x5ff6 <nwkRxHandleReceivedFrame+0x98>
    5fda:	20 91 9f 25 	lds	r18, 0x259F	; 0x80259f <nwkIb>
    5fde:	30 91 a0 25 	lds	r19, 0x25A0	; 0x8025a0 <nwkIb+0x1>
    5fe2:	8f 85       	ldd	r24, Y+15	; 0x0f
    5fe4:	98 89       	ldd	r25, Y+16	; 0x10
    5fe6:	28 17       	cp	r18, r24
    5fe8:	39 07       	cpc	r19, r25
    5fea:	29 f0       	breq	.+10     	; 0x5ff6 <nwkRxHandleReceivedFrame+0x98>
    5fec:	8b 85       	ldd	r24, Y+11	; 0x0b
    5fee:	82 fd       	sbrc	r24, 2
    5ff0:	02 c0       	rjmp	.+4      	; 0x5ff6 <nwkRxHandleReceivedFrame+0x98>
    5ff2:	ce 01       	movw	r24, r28
    5ff4:	9e d1       	rcall	.+828    	; 0x6332 <nwkTxBroadcastFrame>
    5ff6:	20 91 9f 25 	lds	r18, 0x259F	; 0x80259f <nwkIb>
    5ffa:	30 91 a0 25 	lds	r19, 0x25A0	; 0x8025a0 <nwkIb+0x1>
    5ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    6000:	98 89       	ldd	r25, Y+16	; 0x10
    6002:	28 17       	cp	r18, r24
    6004:	39 07       	cpc	r19, r25
    6006:	11 f0       	breq	.+4      	; 0x600c <nwkRxHandleReceivedFrame+0xae>
    6008:	01 96       	adiw	r24, 0x01	; 1
    600a:	19 f4       	brne	.+6      	; 0x6012 <nwkRxHandleReceivedFrame+0xb4>
    600c:	82 e2       	ldi	r24, 0x22	; 34
    600e:	88 83       	st	Y, r24
    6010:	07 c0       	rjmp	.+14     	; 0x6020 <nwkRxHandleReceivedFrame+0xc2>
    6012:	8f 81       	ldd	r24, Y+7	; 0x07
    6014:	98 85       	ldd	r25, Y+8	; 0x08
    6016:	28 17       	cp	r18, r24
    6018:	39 07       	cpc	r19, r25
    601a:	11 f4       	brne	.+4      	; 0x6020 <nwkRxHandleReceivedFrame+0xc2>
    601c:	83 e2       	ldi	r24, 0x23	; 35
    601e:	88 83       	st	Y, r24
    6020:	df 91       	pop	r29
    6022:	cf 91       	pop	r28
    6024:	1f 91       	pop	r17
    6026:	0f 91       	pop	r16
    6028:	08 95       	ret

0000602a <nwkRxSendAck>:
    602a:	0f 93       	push	r16
    602c:	1f 93       	push	r17
    602e:	cf 93       	push	r28
    6030:	df 93       	push	r29
    6032:	8c 01       	movw	r16, r24
    6034:	e5 db       	rcall	.-2102   	; 0x5800 <nwkFrameAlloc>
    6036:	ec 01       	movw	r28, r24
    6038:	00 97       	sbiw	r24, 0x00	; 0
    603a:	31 f1       	breq	.+76     	; 0x6088 <nwkRxSendAck+0x5e>
    603c:	34 dc       	rcall	.-1944   	; 0x58a6 <nwkFrameCommandInit>
    603e:	89 81       	ldd	r24, Y+1	; 0x01
    6040:	8d 5f       	subi	r24, 0xFD	; 253
    6042:	89 83       	std	Y+1, r24	; 0x01
    6044:	fe 01       	movw	r30, r28
    6046:	e9 57       	subi	r30, 0x79	; 121
    6048:	ff 4f       	sbci	r31, 0xFF	; 255
    604a:	11 82       	std	Z+1, r1	; 0x01
    604c:	10 82       	st	Z, r1
    604e:	d8 01       	movw	r26, r16
    6050:	1b 96       	adiw	r26, 0x0b	; 11
    6052:	8c 91       	ld	r24, X
    6054:	1b 97       	sbiw	r26, 0x0b	; 11
    6056:	86 95       	lsr	r24
    6058:	81 70       	andi	r24, 0x01	; 1
    605a:	9b 85       	ldd	r25, Y+11	; 0x0b
    605c:	80 fb       	bst	r24, 0
    605e:	91 f9       	bld	r25, 1
    6060:	9b 87       	std	Y+11, r25	; 0x0b
    6062:	1d 96       	adiw	r26, 0x0d	; 13
    6064:	8d 91       	ld	r24, X+
    6066:	9c 91       	ld	r25, X
    6068:	1e 97       	sbiw	r26, 0x0e	; 14
    606a:	98 8b       	std	Y+16, r25	; 0x10
    606c:	8f 87       	std	Y+15, r24	; 0x0f
    606e:	36 97       	sbiw	r30, 0x06	; 6
    6070:	01 90       	ld	r0, Z+
    6072:	f0 81       	ld	r31, Z
    6074:	e0 2d       	mov	r30, r0
    6076:	10 82       	st	Z, r1
    6078:	80 91 ba 1c 	lds	r24, 0x1CBA	; 0x801cba <nwkRxAckControl>
    607c:	82 83       	std	Z+2, r24	; 0x02
    607e:	1c 96       	adiw	r26, 0x0c	; 12
    6080:	8c 91       	ld	r24, X
    6082:	81 83       	std	Z+1, r24	; 0x01
    6084:	ce 01       	movw	r24, r28
    6086:	03 d1       	rcall	.+518    	; 0x628e <nwkTxFrame>
    6088:	df 91       	pop	r29
    608a:	cf 91       	pop	r28
    608c:	1f 91       	pop	r17
    608e:	0f 91       	pop	r16
    6090:	08 95       	ret

00006092 <nwkRxHandleIndication>:
    6092:	cf 93       	push	r28
    6094:	df 93       	push	r29
    6096:	ec 01       	movw	r28, r24
    6098:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <nwkRxAckControl>
    609c:	e4 dd       	rcall	.-1080   	; 0x5c66 <nwkRxIndicateFrame>
    609e:	9b 85       	ldd	r25, Y+11	; 0x0b
    60a0:	90 ff       	sbrs	r25, 0
    60a2:	80 e0       	ldi	r24, 0x00	; 0
    60a4:	2f 81       	ldd	r18, Y+7	; 0x07
    60a6:	38 85       	ldd	r19, Y+8	; 0x08
    60a8:	2f 3f       	cpi	r18, 0xFF	; 255
    60aa:	3f 4f       	sbci	r19, 0xFF	; 255
    60ac:	59 f4       	brne	.+22     	; 0x60c4 <nwkRxHandleIndication+0x32>
    60ae:	40 91 9f 25 	lds	r20, 0x259F	; 0x80259f <nwkIb>
    60b2:	50 91 a0 25 	lds	r21, 0x25A0	; 0x8025a0 <nwkIb+0x1>
    60b6:	2f 85       	ldd	r18, Y+15	; 0x0f
    60b8:	38 89       	ldd	r19, Y+16	; 0x10
    60ba:	42 17       	cp	r20, r18
    60bc:	53 07       	cpc	r21, r19
    60be:	11 f4       	brne	.+4      	; 0x60c4 <nwkRxHandleIndication+0x32>
    60c0:	93 ff       	sbrs	r25, 3
    60c2:	81 e0       	ldi	r24, 0x01	; 1
    60c4:	2d 81       	ldd	r18, Y+5	; 0x05
    60c6:	3e 81       	ldd	r19, Y+6	; 0x06
    60c8:	2f 3f       	cpi	r18, 0xFF	; 255
    60ca:	3f 4f       	sbci	r19, 0xFF	; 255
    60cc:	09 f4       	brne	.+2      	; 0x60d0 <nwkRxHandleIndication+0x3e>
    60ce:	80 e0       	ldi	r24, 0x00	; 0
    60d0:	20 91 9f 25 	lds	r18, 0x259F	; 0x80259f <nwkIb>
    60d4:	30 91 a0 25 	lds	r19, 0x25A0	; 0x8025a0 <nwkIb+0x1>
    60d8:	2f 3f       	cpi	r18, 0xFF	; 255
    60da:	3f 4f       	sbci	r19, 0xFF	; 255
    60dc:	09 f4       	brne	.+2      	; 0x60e0 <nwkRxHandleIndication+0x4e>
    60de:	80 e0       	ldi	r24, 0x00	; 0
    60e0:	88 23       	and	r24, r24
    60e2:	11 f0       	breq	.+4      	; 0x60e8 <nwkRxHandleIndication+0x56>
    60e4:	ce 01       	movw	r24, r28
    60e6:	a1 df       	rcall	.-190    	; 0x602a <nwkRxSendAck>
    60e8:	84 e2       	ldi	r24, 0x24	; 36
    60ea:	88 83       	st	Y, r24
    60ec:	df 91       	pop	r29
    60ee:	cf 91       	pop	r28
    60f0:	08 95       	ret

000060f2 <nwkRxInit>:
    60f2:	20 e0       	ldi	r18, 0x00	; 0
    60f4:	0e c0       	rjmp	.+28     	; 0x6112 <nwkRxInit+0x20>
    60f6:	82 2f       	mov	r24, r18
    60f8:	90 e0       	ldi	r25, 0x00	; 0
    60fa:	fc 01       	movw	r30, r24
    60fc:	ee 0f       	add	r30, r30
    60fe:	ff 1f       	adc	r31, r31
    6100:	ee 0f       	add	r30, r30
    6102:	ff 1f       	adc	r31, r31
    6104:	8e 0f       	add	r24, r30
    6106:	9f 1f       	adc	r25, r31
    6108:	fc 01       	movw	r30, r24
    610a:	e5 54       	subi	r30, 0x45	; 69
    610c:	f3 4e       	sbci	r31, 0xE3	; 227
    610e:	14 82       	std	Z+4, r1	; 0x04
    6110:	2f 5f       	subi	r18, 0xFF	; 255
    6112:	2a 30       	cpi	r18, 0x0A	; 10
    6114:	80 f3       	brcs	.-32     	; 0x60f6 <nwkRxInit+0x4>
    6116:	ed ea       	ldi	r30, 0xAD	; 173
    6118:	fc e1       	ldi	r31, 0x1C	; 28
    611a:	84 e6       	ldi	r24, 0x64	; 100
    611c:	90 e0       	ldi	r25, 0x00	; 0
    611e:	a0 e0       	ldi	r26, 0x00	; 0
    6120:	b0 e0       	ldi	r27, 0x00	; 0
    6122:	86 83       	std	Z+6, r24	; 0x06
    6124:	97 83       	std	Z+7, r25	; 0x07
    6126:	a0 87       	std	Z+8, r26	; 0x08
    6128:	b1 87       	std	Z+9, r27	; 0x09
    612a:	12 86       	std	Z+10, r1	; 0x0a
    612c:	81 ee       	ldi	r24, 0xE1	; 225
    612e:	9e e2       	ldi	r25, 0x2E	; 46
    6130:	94 87       	std	Z+12, r25	; 0x0c
    6132:	83 87       	std	Z+11, r24	; 0x0b
    6134:	69 ec       	ldi	r22, 0xC9	; 201
    6136:	7e e2       	ldi	r23, 0x2E	; 46
    6138:	80 e0       	ldi	r24, 0x00	; 0
    613a:	60 ca       	rjmp	.-2880   	; 0x55fc <NWK_OpenEndpoint>
    613c:	08 95       	ret

0000613e <PHY_DataInd>:
    613e:	cf 93       	push	r28
    6140:	df 93       	push	r29
    6142:	dc 01       	movw	r26, r24
    6144:	ed 91       	ld	r30, X+
    6146:	fc 91       	ld	r31, X
    6148:	21 81       	ldd	r18, Z+1	; 0x01
    614a:	28 38       	cpi	r18, 0x88	; 136
    614c:	09 f5       	brne	.+66     	; 0x6190 <PHY_DataInd+0x52>
    614e:	20 81       	ld	r18, Z
    6150:	21 36       	cpi	r18, 0x61	; 97
    6152:	11 f0       	breq	.+4      	; 0x6158 <PHY_DataInd+0x1a>
    6154:	21 34       	cpi	r18, 0x41	; 65
    6156:	e1 f4       	brne	.+56     	; 0x6190 <PHY_DataInd+0x52>
    6158:	fc 01       	movw	r30, r24
    615a:	22 81       	ldd	r18, Z+2	; 0x02
    615c:	20 31       	cpi	r18, 0x10	; 16
    615e:	c0 f0       	brcs	.+48     	; 0x6190 <PHY_DataInd+0x52>
    6160:	ec 01       	movw	r28, r24
    6162:	4e db       	rcall	.-2404   	; 0x5800 <nwkFrameAlloc>
    6164:	00 97       	sbiw	r24, 0x00	; 0
    6166:	a1 f0       	breq	.+40     	; 0x6190 <PHY_DataInd+0x52>
    6168:	20 e2       	ldi	r18, 0x20	; 32
    616a:	dc 01       	movw	r26, r24
    616c:	2c 93       	st	X, r18
    616e:	2a 81       	ldd	r18, Y+2	; 0x02
    6170:	11 96       	adiw	r26, 0x01	; 1
    6172:	2c 93       	st	X, r18
    6174:	2b 81       	ldd	r18, Y+3	; 0x03
    6176:	fc 01       	movw	r30, r24
    6178:	ed 57       	subi	r30, 0x7D	; 125
    617a:	ff 4f       	sbci	r31, 0xFF	; 255
    617c:	20 83       	st	Z, r18
    617e:	2c 81       	ldd	r18, Y+4	; 0x04
    6180:	31 96       	adiw	r30, 0x01	; 1
    6182:	20 83       	st	Z, r18
    6184:	4a 81       	ldd	r20, Y+2	; 0x02
    6186:	68 81       	ld	r22, Y
    6188:	79 81       	ldd	r23, Y+1	; 0x01
    618a:	50 e0       	ldi	r21, 0x00	; 0
    618c:	02 96       	adiw	r24, 0x02	; 2
    618e:	d2 d4       	rcall	.+2468   	; 0x6b34 <memcpy>
    6190:	df 91       	pop	r29
    6192:	cf 91       	pop	r28
    6194:	08 95       	ret

00006196 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    6196:	cf 93       	push	r28
    6198:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    619a:	c0 e0       	ldi	r28, 0x00	; 0
    619c:	d0 e0       	ldi	r29, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
    619e:	17 c0       	rjmp	.+46     	; 0x61ce <nwkRxTaskHandler+0x38>
  {
    switch (frame->state)
    61a0:	88 81       	ld	r24, Y
    61a2:	82 32       	cpi	r24, 0x22	; 34
    61a4:	61 f0       	breq	.+24     	; 0x61be <nwkRxTaskHandler+0x28>
    61a6:	18 f4       	brcc	.+6      	; 0x61ae <nwkRxTaskHandler+0x18>
    61a8:	80 32       	cpi	r24, 0x20	; 32
    61aa:	31 f0       	breq	.+12     	; 0x61b8 <nwkRxTaskHandler+0x22>
    61ac:	10 c0       	rjmp	.+32     	; 0x61ce <nwkRxTaskHandler+0x38>
    61ae:	83 32       	cpi	r24, 0x23	; 35
    61b0:	49 f0       	breq	.+18     	; 0x61c4 <nwkRxTaskHandler+0x2e>
    61b2:	84 32       	cpi	r24, 0x24	; 36
    61b4:	51 f0       	breq	.+20     	; 0x61ca <nwkRxTaskHandler+0x34>
    61b6:	0b c0       	rjmp	.+22     	; 0x61ce <nwkRxTaskHandler+0x38>
    {
      case NWK_RX_STATE_RECEIVED:
      {
        nwkRxHandleReceivedFrame(frame);
    61b8:	ce 01       	movw	r24, r28
    61ba:	d1 de       	rcall	.-606    	; 0x5f5e <nwkRxHandleReceivedFrame>
      } break;
    61bc:	08 c0       	rjmp	.+16     	; 0x61ce <nwkRxTaskHandler+0x38>
      } break;
#endif

      case NWK_RX_STATE_INDICATE:
      {
        nwkRxHandleIndication(frame);
    61be:	ce 01       	movw	r24, r28
    61c0:	68 df       	rcall	.-304    	; 0x6092 <nwkRxHandleIndication>
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    61c2:	05 c0       	rjmp	.+10     	; 0x61ce <nwkRxTaskHandler+0x38>
    61c4:	ce 01       	movw	r24, r28
      } break;
    61c6:	15 dd       	rcall	.-1494   	; 0x5bf2 <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    61c8:	02 c0       	rjmp	.+4      	; 0x61ce <nwkRxTaskHandler+0x38>
    61ca:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    61cc:	4a db       	rcall	.-2412   	; 0x5862 <nwkFrameFree>
    61ce:	ce 01       	movw	r24, r28
    61d0:	52 db       	rcall	.-2396   	; 0x5876 <nwkFrameNext>
    61d2:	ec 01       	movw	r28, r24
    61d4:	89 2b       	or	r24, r25
    61d6:	21 f7       	brne	.-56     	; 0x61a0 <nwkRxTaskHandler+0xa>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    61d8:	df 91       	pop	r29
    61da:	cf 91       	pop	r28
    61dc:	08 95       	ret

000061de <nwkTxConvertPhyStatus>:

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    61de:	81 30       	cpi	r24, 0x01	; 1
    61e0:	51 f0       	breq	.+20     	; 0x61f6 <nwkTxConvertPhyStatus+0x18>
    61e2:	18 f0       	brcs	.+6      	; 0x61ea <nwkTxConvertPhyStatus+0xc>
    61e4:	82 30       	cpi	r24, 0x02	; 2
    61e6:	19 f0       	breq	.+6      	; 0x61ee <nwkTxConvertPhyStatus+0x10>
    61e8:	04 c0       	rjmp	.+8      	; 0x61f2 <nwkTxConvertPhyStatus+0x14>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    61ea:	80 e0       	ldi	r24, 0x00	; 0
    61ec:	08 95       	ret

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    61ee:	81 e2       	ldi	r24, 0x21	; 33
    61f0:	08 95       	ret

    default:
      return NWK_ERROR_STATUS;
    61f2:	81 e0       	ldi	r24, 0x01	; 1
    61f4:	08 95       	ret
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    61f6:	80 e2       	ldi	r24, 0x20	; 32
      return NWK_PHY_NO_ACK_STATUS;

    default:
      return NWK_ERROR_STATUS;
  }
}
    61f8:	08 95       	ret

000061fa <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    61fa:	1f 93       	push	r17
    61fc:	cf 93       	push	r28
    61fe:	df 93       	push	r29
    6200:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    6202:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    6204:	80 e0       	ldi	r24, 0x00	; 0
    6206:	90 e0       	ldi	r25, 0x00	; 0
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    6208:	14 c0       	rjmp	.+40     	; 0x6232 <nwkTxDelayTimerHandler+0x38>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    620a:	fc 01       	movw	r30, r24
    620c:	20 81       	ld	r18, Z
    620e:	21 31       	cpi	r18, 0x11	; 17
    6210:	81 f4       	brne	.+32     	; 0x6232 <nwkTxDelayTimerHandler+0x38>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    6212:	ec 57       	subi	r30, 0x7C	; 124
    6214:	ff 4f       	sbci	r31, 0xFF	; 255
    6216:	20 81       	ld	r18, Z
    6218:	31 81       	ldd	r19, Z+1	; 0x01
    621a:	21 50       	subi	r18, 0x01	; 1
    621c:	31 09       	sbc	r19, r1
    621e:	31 83       	std	Z+1, r19	; 0x01
    6220:	20 83       	st	Z, r18
    6222:	23 2b       	or	r18, r19
    6224:	29 f4       	brne	.+10     	; 0x6230 <nwkTxDelayTimerHandler+0x36>
        frame->state = NWK_TX_STATE_SEND;
    6226:	23 e1       	ldi	r18, 0x13	; 19
    6228:	fc 01       	movw	r30, r24
    622a:	20 83       	st	Z, r18

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    622c:	11 e0       	ldi	r17, 0x01	; 1
    622e:	01 c0       	rjmp	.+2      	; 0x6232 <nwkTxDelayTimerHandler+0x38>
    6230:	11 e0       	ldi	r17, 0x01	; 1
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    6232:	21 db       	rcall	.-2494   	; 0x5876 <nwkFrameNext>
    6234:	00 97       	sbiw	r24, 0x00	; 0
    6236:	49 f7       	brne	.-46     	; 0x620a <nwkTxDelayTimerHandler+0x10>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    6238:	11 23       	and	r17, r17
    623a:	11 f0       	breq	.+4      	; 0x6240 <nwkTxDelayTimerHandler+0x46>
    SYS_TimerStart(timer);
    623c:	ce 01       	movw	r24, r28
    623e:	78 d3       	rcall	.+1776   	; 0x6930 <SYS_TimerStart>
}
    6240:	df 91       	pop	r29
    6242:	cf 91       	pop	r28
    6244:	1f 91       	pop	r17
    6246:	08 95       	ret

00006248 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    6248:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <nwkTxPhyActiveFrame+0x1>
    624c:	10 92 07 1d 	sts	0x1D07, r1	; 0x801d07 <nwkTxPhyActiveFrame>

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    6250:	ea ef       	ldi	r30, 0xFA	; 250
    6252:	fc e1       	ldi	r31, 0x1C	; 28
    6254:	82 e3       	ldi	r24, 0x32	; 50
    6256:	90 e0       	ldi	r25, 0x00	; 0
    6258:	a0 e0       	ldi	r26, 0x00	; 0
    625a:	b0 e0       	ldi	r27, 0x00	; 0
    625c:	86 83       	std	Z+6, r24	; 0x06
    625e:	97 83       	std	Z+7, r25	; 0x07
    6260:	a0 87       	std	Z+8, r26	; 0x08
    6262:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    6264:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    6266:	87 e0       	ldi	r24, 0x07	; 7
    6268:	92 e3       	ldi	r25, 0x32	; 50
    626a:	94 87       	std	Z+12, r25	; 0x0c
    626c:	83 87       	std	Z+11, r24	; 0x0b

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    626e:	ed ee       	ldi	r30, 0xED	; 237
    6270:	fc e1       	ldi	r31, 0x1C	; 28
    6272:	8a e0       	ldi	r24, 0x0A	; 10
    6274:	90 e0       	ldi	r25, 0x00	; 0
    6276:	a0 e0       	ldi	r26, 0x00	; 0
    6278:	b0 e0       	ldi	r27, 0x00	; 0
    627a:	86 83       	std	Z+6, r24	; 0x06
    627c:	97 83       	std	Z+7, r25	; 0x07
    627e:	a0 87       	std	Z+8, r26	; 0x08
    6280:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    6282:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    6284:	8d ef       	ldi	r24, 0xFD	; 253
    6286:	90 e3       	ldi	r25, 0x30	; 48
    6288:	94 87       	std	Z+12, r25	; 0x0c
    628a:	83 87       	std	Z+11, r24	; 0x0b
    628c:	08 95       	ret

0000628e <nwkTxFrame>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    628e:	cf 93       	push	r28
    6290:	df 93       	push	r29
    6292:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    6294:	fc 01       	movw	r30, r24
    6296:	ea 57       	subi	r30, 0x7A	; 122
    6298:	ff 4f       	sbci	r31, 0xFF	; 255
    629a:	80 81       	ld	r24, Z
    629c:	81 ff       	sbrs	r24, 1
    629e:	03 c0       	rjmp	.+6      	; 0x62a6 <nwkTxFrame+0x18>
  {
    frame->state = NWK_TX_STATE_DELAY;
    62a0:	92 e1       	ldi	r25, 0x12	; 18
    62a2:	98 83       	st	Y, r25
    62a4:	02 c0       	rjmp	.+4      	; 0x62aa <nwkTxFrame+0x1c>
  #ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.security)
      frame->state = NWK_TX_STATE_ENCRYPT;
    else
  #endif
      frame->state = NWK_TX_STATE_DELAY;
    62a6:	92 e1       	ldi	r25, 0x12	; 18
    62a8:	98 83       	st	Y, r25
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    62aa:	fe 01       	movw	r30, r28
    62ac:	ed 57       	subi	r30, 0x7D	; 125
    62ae:	ff 4f       	sbci	r31, 0xFF	; 255
    62b0:	10 82       	st	Z, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    62b2:	98 2f       	mov	r25, r24
    62b4:	91 70       	andi	r25, 0x01	; 1
    62b6:	80 ff       	sbrs	r24, 0
    62b8:	05 c0       	rjmp	.+10     	; 0x62c4 <nwkTxFrame+0x36>
    header->macDstPanId = NWK_BROADCAST_PANID;
    62ba:	2f ef       	ldi	r18, 0xFF	; 255
    62bc:	3f ef       	ldi	r19, 0xFF	; 255
    62be:	3e 83       	std	Y+6, r19	; 0x06
    62c0:	2d 83       	std	Y+5, r18	; 0x05
    62c2:	06 c0       	rjmp	.+12     	; 0x62d0 <nwkTxFrame+0x42>
  else
    header->macDstPanId = nwkIb.panId;
    62c4:	20 91 a1 25 	lds	r18, 0x25A1	; 0x8025a1 <nwkIb+0x2>
    62c8:	30 91 a2 25 	lds	r19, 0x25A2	; 0x8025a2 <nwkIb+0x3>
    62cc:	3e 83       	std	Y+6, r19	; 0x06
    62ce:	2d 83       	std	Y+5, r18	; 0x05

#ifdef NWK_ENABLE_ROUTING
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
    62d0:	82 fd       	sbrc	r24, 2
    62d2:	05 c0       	rjmp	.+10     	; 0x62de <nwkTxFrame+0x50>
    62d4:	91 11       	cpse	r25, r1
    62d6:	03 c0       	rjmp	.+6      	; 0x62de <nwkTxFrame+0x50>
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    nwkRoutePrepareTx(frame);
    62d8:	ce 01       	movw	r24, r28
    62da:	6c dc       	rcall	.-1832   	; 0x5bb4 <nwkRoutePrepareTx>
    62dc:	04 c0       	rjmp	.+8      	; 0x62e6 <nwkTxFrame+0x58>
  else
#endif
    header->macDstAddr = header->nwkDstAddr;
    62de:	8f 85       	ldd	r24, Y+15	; 0x0f
    62e0:	98 89       	ldd	r25, Y+16	; 0x10
    62e2:	98 87       	std	Y+8, r25	; 0x08
    62e4:	8f 83       	std	Y+7, r24	; 0x07

  header->macSrcAddr = nwkIb.addr;
    62e6:	ef e9       	ldi	r30, 0x9F	; 159
    62e8:	f5 e2       	ldi	r31, 0x25	; 37
    62ea:	80 81       	ld	r24, Z
    62ec:	91 81       	ldd	r25, Z+1	; 0x01
    62ee:	9a 87       	std	Y+10, r25	; 0x0a
    62f0:	89 87       	std	Y+9, r24	; 0x09
  header->macSeq = ++nwkIb.macSeqNum;
    62f2:	85 81       	ldd	r24, Z+5	; 0x05
    62f4:	8f 5f       	subi	r24, 0xFF	; 255
    62f6:	85 83       	std	Z+5, r24	; 0x05
    62f8:	8c 83       	std	Y+4, r24	; 0x04

  if (NWK_BROADCAST_ADDR == header->macDstAddr)
    62fa:	8f 81       	ldd	r24, Y+7	; 0x07
    62fc:	98 85       	ldd	r25, Y+8	; 0x08
    62fe:	01 96       	adiw	r24, 0x01	; 1
    6300:	69 f4       	brne	.+26     	; 0x631c <nwkTxFrame+0x8e>
  {
    header->macFcf = 0x8841;
    6302:	81 e4       	ldi	r24, 0x41	; 65
    6304:	98 e8       	ldi	r25, 0x88	; 136
    6306:	9b 83       	std	Y+3, r25	; 0x03
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    6308:	8a 83       	std	Y+2, r24	; 0x02
    630a:	06 d4       	rcall	.+2060   	; 0x6b18 <rand>
    630c:	87 70       	andi	r24, 0x07	; 7
    630e:	99 27       	eor	r25, r25
    6310:	01 96       	adiw	r24, 0x01	; 1
    6312:	cc 57       	subi	r28, 0x7C	; 124
    6314:	df 4f       	sbci	r29, 0xFF	; 255
    6316:	99 83       	std	Y+1, r25	; 0x01
    6318:	88 83       	st	Y, r24
    631a:	08 c0       	rjmp	.+16     	; 0x632c <nwkTxFrame+0x9e>
  }
  else
  {
    header->macFcf = 0x8861;
    631c:	81 e6       	ldi	r24, 0x61	; 97
    631e:	98 e8       	ldi	r25, 0x88	; 136
    6320:	9b 83       	std	Y+3, r25	; 0x03
    6322:	8a 83       	std	Y+2, r24	; 0x02
    frame->tx.timeout = 0;
    6324:	cc 57       	subi	r28, 0x7C	; 124
    6326:	df 4f       	sbci	r29, 0xFF	; 255
    6328:	19 82       	std	Y+1, r1	; 0x01
    632a:	18 82       	st	Y, r1
  }
}
    632c:	df 91       	pop	r29
    632e:	cf 91       	pop	r28
    6330:	08 95       	ret

00006332 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    6332:	0f 93       	push	r16
    6334:	1f 93       	push	r17
    6336:	cf 93       	push	r28
    6338:	df 93       	push	r29
    633a:	8c 01       	movw	r16, r24
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    633c:	61 da       	rcall	.-2878   	; 0x5800 <nwkFrameAlloc>
    633e:	ec 01       	movw	r28, r24
    6340:	89 2b       	or	r24, r25
    6342:	a9 f1       	breq	.+106    	; 0x63ae <nwkTxBroadcastFrame+0x7c>
    return;

  newFrame->state = NWK_TX_STATE_DELAY;
    6344:	82 e1       	ldi	r24, 0x12	; 18
    6346:	88 83       	st	Y, r24
  newFrame->size = frame->size;
    6348:	f8 01       	movw	r30, r16
    634a:	81 81       	ldd	r24, Z+1	; 0x01
    634c:	89 83       	std	Y+1, r24	; 0x01
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    634e:	fe 01       	movw	r30, r28
    6350:	ed 57       	subi	r30, 0x7D	; 125
    6352:	ff 4f       	sbci	r31, 0xFF	; 255
  newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    6354:	10 82       	st	Z, r1
    6356:	e0 d3       	rcall	.+1984   	; 0x6b18 <rand>
    6358:	87 70       	andi	r24, 0x07	; 7
    635a:	99 27       	eor	r25, r25
    635c:	01 96       	adiw	r24, 0x01	; 1
    635e:	fe 01       	movw	r30, r28
    6360:	ec 57       	subi	r30, 0x7C	; 124
    6362:	ff 4f       	sbci	r31, 0xFF	; 255
    6364:	91 83       	std	Z+1, r25	; 0x01
    6366:	80 83       	st	Z, r24
  newFrame->tx.confirm = NULL;
    6368:	33 96       	adiw	r30, 0x03	; 3
    636a:	11 82       	std	Z+1, r1	; 0x01
    636c:	10 82       	st	Z, r1
  memcpy(newFrame->data, frame->data, frame->size);
    636e:	f8 01       	movw	r30, r16
    6370:	41 81       	ldd	r20, Z+1	; 0x01
    6372:	b8 01       	movw	r22, r16
    6374:	6e 5f       	subi	r22, 0xFE	; 254
    6376:	7f 4f       	sbci	r23, 0xFF	; 255
    6378:	50 e0       	ldi	r21, 0x00	; 0
    637a:	ce 01       	movw	r24, r28
    637c:	02 96       	adiw	r24, 0x02	; 2
    637e:	da d3       	rcall	.+1972   	; 0x6b34 <memcpy>

  newFrame->header.macFcf = 0x8841;
    6380:	81 e4       	ldi	r24, 0x41	; 65
    6382:	98 e8       	ldi	r25, 0x88	; 136
    6384:	9b 83       	std	Y+3, r25	; 0x03
    6386:	8a 83       	std	Y+2, r24	; 0x02
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    6388:	8f ef       	ldi	r24, 0xFF	; 255
    638a:	9f ef       	ldi	r25, 0xFF	; 255
    638c:	98 87       	std	Y+8, r25	; 0x08
    638e:	8f 83       	std	Y+7, r24	; 0x07
  newFrame->header.macDstPanId = frame->header.macDstPanId;
    6390:	f8 01       	movw	r30, r16
    6392:	85 81       	ldd	r24, Z+5	; 0x05
    6394:	96 81       	ldd	r25, Z+6	; 0x06
    6396:	9e 83       	std	Y+6, r25	; 0x06
    6398:	8d 83       	std	Y+5, r24	; 0x05
  newFrame->header.macSrcAddr = nwkIb.addr;
    639a:	ef e9       	ldi	r30, 0x9F	; 159
    639c:	f5 e2       	ldi	r31, 0x25	; 37
    639e:	80 81       	ld	r24, Z
    63a0:	91 81       	ldd	r25, Z+1	; 0x01
    63a2:	9a 87       	std	Y+10, r25	; 0x0a
    63a4:	89 87       	std	Y+9, r24	; 0x09
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
    63a6:	85 81       	ldd	r24, Z+5	; 0x05
    63a8:	8f 5f       	subi	r24, 0xFF	; 255
    63aa:	85 83       	std	Z+5, r24	; 0x05
    63ac:	8c 83       	std	Y+4, r24	; 0x04
}
    63ae:	df 91       	pop	r29
    63b0:	cf 91       	pop	r28
    63b2:	1f 91       	pop	r17
    63b4:	0f 91       	pop	r16
    63b6:	08 95       	ret

000063b8 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    63b8:	cf 93       	push	r28
    63ba:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    63bc:	fc 01       	movw	r30, r24
    63be:	c7 81       	ldd	r28, Z+7	; 0x07
    63c0:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    63c2:	81 85       	ldd	r24, Z+9	; 0x09
    63c4:	83 30       	cpi	r24, 0x03	; 3
    63c6:	c1 f4       	brne	.+48     	; 0x63f8 <nwkTxAckReceived+0x40>
    63c8:	80 e0       	ldi	r24, 0x00	; 0
    63ca:	90 e0       	ldi	r25, 0x00	; 0
    63cc:	10 c0       	rjmp	.+32     	; 0x63ee <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    63ce:	fc 01       	movw	r30, r24
    63d0:	20 81       	ld	r18, Z
    63d2:	26 31       	cpi	r18, 0x16	; 22
    63d4:	61 f4       	brne	.+24     	; 0x63ee <nwkTxAckReceived+0x36>
    63d6:	34 85       	ldd	r19, Z+12	; 0x0c
    63d8:	29 81       	ldd	r18, Y+1	; 0x01
    63da:	32 13       	cpse	r19, r18
    63dc:	08 c0       	rjmp	.+16     	; 0x63ee <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    63de:	27 e1       	ldi	r18, 0x17	; 23
    63e0:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    63e2:	2a 81       	ldd	r18, Y+2	; 0x02
    63e4:	ea 57       	subi	r30, 0x7A	; 122
    63e6:	ff 4f       	sbci	r31, 0xFF	; 255
    63e8:	20 83       	st	Z, r18
      return true;
    63ea:	81 e0       	ldi	r24, 0x01	; 1
    63ec:	06 c0       	rjmp	.+12     	; 0x63fa <nwkTxAckReceived+0x42>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    63ee:	43 da       	rcall	.-2938   	; 0x5876 <nwkFrameNext>
    63f0:	00 97       	sbiw	r24, 0x00	; 0
    63f2:	69 f7       	brne	.-38     	; 0x63ce <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    63f4:	80 e0       	ldi	r24, 0x00	; 0
    63f6:	01 c0       	rjmp	.+2      	; 0x63fa <nwkTxAckReceived+0x42>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    63f8:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    63fa:	df 91       	pop	r29
    63fc:	cf 91       	pop	r28
    63fe:	08 95       	ret

00006400 <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    6400:	27 e1       	ldi	r18, 0x17	; 23
    6402:	fc 01       	movw	r30, r24
    6404:	20 83       	st	Z, r18
  frame->tx.status = status;
    6406:	ed 57       	subi	r30, 0x7D	; 125
    6408:	ff 4f       	sbci	r31, 0xFF	; 255
    640a:	60 83       	st	Z, r22
    640c:	08 95       	ret

0000640e <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    640e:	ef 92       	push	r14
    6410:	ff 92       	push	r15
    6412:	1f 93       	push	r17
    6414:	cf 93       	push	r28
    6416:	df 93       	push	r29
    6418:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    641a:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    641c:	c0 e0       	ldi	r28, 0x00	; 0
    641e:	d0 e0       	ldi	r29, 0x00	; 0
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    6420:	13 c0       	rjmp	.+38     	; 0x6448 <nwkTxAckWaitTimerHandler+0x3a>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    6422:	88 81       	ld	r24, Y
    6424:	86 31       	cpi	r24, 0x16	; 22
    6426:	81 f4       	brne	.+32     	; 0x6448 <nwkTxAckWaitTimerHandler+0x3a>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    6428:	fe 01       	movw	r30, r28
    642a:	ec 57       	subi	r30, 0x7C	; 124
    642c:	ff 4f       	sbci	r31, 0xFF	; 255
    642e:	80 81       	ld	r24, Z
    6430:	91 81       	ldd	r25, Z+1	; 0x01
    6432:	01 97       	sbiw	r24, 0x01	; 1
    6434:	91 83       	std	Z+1, r25	; 0x01
    6436:	80 83       	st	Z, r24
    6438:	89 2b       	or	r24, r25
    643a:	29 f4       	brne	.+10     	; 0x6446 <nwkTxAckWaitTimerHandler+0x38>
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    643c:	60 e1       	ldi	r22, 0x10	; 16
    643e:	ce 01       	movw	r24, r28
    6440:	df df       	rcall	.-66     	; 0x6400 <nwkTxConfirm>

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    6442:	11 e0       	ldi	r17, 0x01	; 1
    6444:	01 c0       	rjmp	.+2      	; 0x6448 <nwkTxAckWaitTimerHandler+0x3a>
    6446:	11 e0       	ldi	r17, 0x01	; 1
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    6448:	ce 01       	movw	r24, r28
    644a:	15 da       	rcall	.-3030   	; 0x5876 <nwkFrameNext>
    644c:	ec 01       	movw	r28, r24
    644e:	89 2b       	or	r24, r25
    6450:	41 f7       	brne	.-48     	; 0x6422 <nwkTxAckWaitTimerHandler+0x14>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    6452:	11 23       	and	r17, r17
    SYS_TimerStart(timer);
    6454:	11 f0       	breq	.+4      	; 0x645a <nwkTxAckWaitTimerHandler+0x4c>
    6456:	c7 01       	movw	r24, r14
    6458:	6b d2       	rcall	.+1238   	; 0x6930 <SYS_TimerStart>
}
    645a:	df 91       	pop	r29
    645c:	cf 91       	pop	r28
    645e:	1f 91       	pop	r17
    6460:	ff 90       	pop	r15
    6462:	ef 90       	pop	r14
    6464:	08 95       	ret

00006466 <PHY_DataConf>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
    6466:	cf 93       	push	r28
    6468:	df 93       	push	r29
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    646a:	c0 91 07 1d 	lds	r28, 0x1D07	; 0x801d07 <nwkTxPhyActiveFrame>
    646e:	d0 91 08 1d 	lds	r29, 0x1D08	; 0x801d08 <nwkTxPhyActiveFrame+0x1>
    6472:	b5 de       	rcall	.-662    	; 0x61de <nwkTxConvertPhyStatus>
    6474:	fe 01       	movw	r30, r28
    6476:	ed 57       	subi	r30, 0x7D	; 125
    6478:	ff 4f       	sbci	r31, 0xFF	; 255
    647a:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    647c:	85 e1       	ldi	r24, 0x15	; 21
    647e:	88 83       	st	Y, r24
  nwkTxPhyActiveFrame = NULL;
    6480:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <nwkTxPhyActiveFrame+0x1>
    6484:	10 92 07 1d 	sts	0x1D07, r1	; 0x801d07 <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    6488:	ef e9       	ldi	r30, 0x9F	; 159
    648a:	f5 e2       	ldi	r31, 0x25	; 37
    648c:	86 a1       	ldd	r24, Z+38	; 0x26
    648e:	97 a1       	ldd	r25, Z+39	; 0x27
    6490:	01 97       	sbiw	r24, 0x01	; 1
    6492:	97 a3       	std	Z+39, r25	; 0x27
    6494:	86 a3       	std	Z+38, r24	; 0x26
}
    6496:	df 91       	pop	r29
    6498:	cf 91       	pop	r28
    649a:	08 95       	ret

0000649c <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    649c:	cf 93       	push	r28
    649e:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    64a0:	c0 e0       	ldi	r28, 0x00	; 0
    64a2:	d0 e0       	ldi	r29, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
    64a4:	68 c0       	rjmp	.+208    	; 0x6576 <nwkTxTaskHandler+0xda>
  {
    switch (frame->state)
    64a6:	88 81       	ld	r24, Y
    64a8:	83 31       	cpi	r24, 0x13	; 19
    64aa:	d1 f0       	breq	.+52     	; 0x64e0 <nwkTxTaskHandler+0x44>
    64ac:	18 f4       	brcc	.+6      	; 0x64b4 <nwkTxTaskHandler+0x18>
    64ae:	82 31       	cpi	r24, 0x12	; 18
    64b0:	39 f0       	breq	.+14     	; 0x64c0 <nwkTxTaskHandler+0x24>
    64b2:	61 c0       	rjmp	.+194    	; 0x6576 <nwkTxTaskHandler+0xda>
    64b4:	85 31       	cpi	r24, 0x15	; 21
    64b6:	69 f1       	breq	.+90     	; 0x6512 <nwkTxTaskHandler+0x76>
    64b8:	87 31       	cpi	r24, 0x17	; 23
    64ba:	09 f4       	brne	.+2      	; 0x64be <nwkTxTaskHandler+0x22>
    64bc:	4d c0       	rjmp	.+154    	; 0x6558 <nwkTxTaskHandler+0xbc>
    64be:	5b c0       	rjmp	.+182    	; 0x6576 <nwkTxTaskHandler+0xda>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    64c0:	fe 01       	movw	r30, r28
    64c2:	ec 57       	subi	r30, 0x7C	; 124
    64c4:	ff 4f       	sbci	r31, 0xFF	; 255
    64c6:	80 81       	ld	r24, Z
    64c8:	91 81       	ldd	r25, Z+1	; 0x01
    64ca:	89 2b       	or	r24, r25
    64cc:	31 f0       	breq	.+12     	; 0x64da <nwkTxTaskHandler+0x3e>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    64ce:	81 e1       	ldi	r24, 0x11	; 17
    64d0:	88 83       	st	Y, r24
          SYS_TimerStart(&nwkTxDelayTimer);
    64d2:	8d ee       	ldi	r24, 0xED	; 237
    64d4:	9c e1       	ldi	r25, 0x1C	; 28
    64d6:	2c d2       	rcall	.+1112   	; 0x6930 <SYS_TimerStart>
    64d8:	4e c0       	rjmp	.+156    	; 0x6576 <nwkTxTaskHandler+0xda>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    64da:	83 e1       	ldi	r24, 0x13	; 19
    64dc:	88 83       	st	Y, r24
    64de:	4b c0       	rjmp	.+150    	; 0x6576 <nwkTxTaskHandler+0xda>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    64e0:	80 91 07 1d 	lds	r24, 0x1D07	; 0x801d07 <nwkTxPhyActiveFrame>
    64e4:	90 91 08 1d 	lds	r25, 0x1D08	; 0x801d08 <nwkTxPhyActiveFrame+0x1>
    64e8:	89 2b       	or	r24, r25
    64ea:	09 f0       	breq	.+2      	; 0x64ee <nwkTxTaskHandler+0x52>
    64ec:	44 c0       	rjmp	.+136    	; 0x6576 <nwkTxTaskHandler+0xda>
        {
          nwkTxPhyActiveFrame = frame;
    64ee:	d0 93 08 1d 	sts	0x1D08, r29	; 0x801d08 <nwkTxPhyActiveFrame+0x1>
    64f2:	c0 93 07 1d 	sts	0x1D07, r28	; 0x801d07 <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    64f6:	84 e1       	ldi	r24, 0x14	; 20
    64f8:	88 83       	st	Y, r24
          PHY_DataReq(frame->data, frame->size);
    64fa:	69 81       	ldd	r22, Y+1	; 0x01
    64fc:	ce 01       	movw	r24, r28
    64fe:	02 96       	adiw	r24, 0x02	; 2
    6500:	c5 d0       	rcall	.+394    	; 0x668c <PHY_DataReq>
          nwkIb.lock++;
    6502:	ef e9       	ldi	r30, 0x9F	; 159
    6504:	f5 e2       	ldi	r31, 0x25	; 37
    6506:	86 a1       	ldd	r24, Z+38	; 0x26
    6508:	97 a1       	ldd	r25, Z+39	; 0x27
    650a:	01 96       	adiw	r24, 0x01	; 1
    650c:	97 a3       	std	Z+39, r25	; 0x27
    650e:	86 a3       	std	Z+38, r24	; 0x26
    6510:	32 c0       	rjmp	.+100    	; 0x6576 <nwkTxTaskHandler+0xda>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    6512:	fe 01       	movw	r30, r28
    6514:	ed 57       	subi	r30, 0x7D	; 125
    6516:	ff 4f       	sbci	r31, 0xFF	; 255
    6518:	80 81       	ld	r24, Z
    651a:	81 11       	cpse	r24, r1
    651c:	1a c0       	rjmp	.+52     	; 0x6552 <nwkTxTaskHandler+0xb6>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    651e:	2d 85       	ldd	r18, Y+13	; 0x0d
    6520:	3e 85       	ldd	r19, Y+14	; 0x0e
    6522:	80 91 9f 25 	lds	r24, 0x259F	; 0x80259f <nwkIb>
    6526:	90 91 a0 25 	lds	r25, 0x25A0	; 0x8025a0 <nwkIb+0x1>
    652a:	28 17       	cp	r18, r24
    652c:	39 07       	cpc	r19, r25
    652e:	71 f4       	brne	.+28     	; 0x654c <nwkTxTaskHandler+0xb0>
    6530:	8b 85       	ldd	r24, Y+11	; 0x0b
    6532:	80 ff       	sbrs	r24, 0
    6534:	0b c0       	rjmp	.+22     	; 0x654c <nwkTxTaskHandler+0xb0>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    6536:	86 e1       	ldi	r24, 0x16	; 22
    6538:	88 83       	st	Y, r24
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    653a:	89 e2       	ldi	r24, 0x29	; 41
    653c:	90 e0       	ldi	r25, 0x00	; 0
    653e:	31 96       	adiw	r30, 0x01	; 1
    6540:	91 83       	std	Z+1, r25	; 0x01
    6542:	80 83       	st	Z, r24
            SYS_TimerStart(&nwkTxAckWaitTimer);
    6544:	8a ef       	ldi	r24, 0xFA	; 250
    6546:	9c e1       	ldi	r25, 0x1C	; 28
    6548:	f3 d1       	rcall	.+998    	; 0x6930 <SYS_TimerStart>
    654a:	15 c0       	rjmp	.+42     	; 0x6576 <nwkTxTaskHandler+0xda>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    654c:	87 e1       	ldi	r24, 0x17	; 23
    654e:	88 83       	st	Y, r24
    6550:	12 c0       	rjmp	.+36     	; 0x6576 <nwkTxTaskHandler+0xda>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    6552:	87 e1       	ldi	r24, 0x17	; 23
    6554:	88 83       	st	Y, r24
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    6556:	0f c0       	rjmp	.+30     	; 0x6576 <nwkTxTaskHandler+0xda>
    6558:	ce 01       	movw	r24, r28
    655a:	f0 da       	rcall	.-2592   	; 0x5b3c <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    655c:	fe 01       	movw	r30, r28
    655e:	e9 57       	subi	r30, 0x79	; 121
    6560:	ff 4f       	sbci	r31, 0xFF	; 255
    6562:	01 90       	ld	r0, Z+
    6564:	f0 81       	ld	r31, Z
    6566:	e0 2d       	mov	r30, r0
    6568:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    656a:	19 f4       	brne	.+6      	; 0x6572 <nwkTxTaskHandler+0xd6>
    656c:	ce 01       	movw	r24, r28
    656e:	79 d9       	rcall	.-3342   	; 0x5862 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    6570:	02 c0       	rjmp	.+4      	; 0x6576 <nwkTxTaskHandler+0xda>
    6572:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    6574:	19 95       	eicall
    6576:	ce 01       	movw	r24, r28
    6578:	7e d9       	rcall	.-3332   	; 0x5876 <nwkFrameNext>
    657a:	ec 01       	movw	r28, r24
    657c:	89 2b       	or	r24, r25
    657e:	09 f0       	breq	.+2      	; 0x6582 <nwkTxTaskHandler+0xe6>
    6580:	92 cf       	rjmp	.-220    	; 0x64a6 <nwkTxTaskHandler+0xa>

      default:
        break;
    };
  }
}
    6582:	df 91       	pop	r29
    6584:	cf 91       	pop	r28
    6586:	08 95       	ret

00006588 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    6588:	80 91 09 1d 	lds	r24, 0x1D09	; 0x801d09 <phyBand>
    658c:	98 2f       	mov	r25, r24
    658e:	9f 70       	andi	r25, 0x0F	; 15
    6590:	e4 e5       	ldi	r30, 0x54	; 84
    6592:	f1 e0       	ldi	r31, 0x01	; 1
    6594:	80 81       	ld	r24, Z
    6596:	80 7f       	andi	r24, 0xF0	; 240
    6598:	89 2b       	or	r24, r25
    659a:	80 83       	st	Z, r24
    659c:	80 91 09 1d 	lds	r24, 0x1D09	; 0x801d09 <phyBand>
    65a0:	88 23       	and	r24, r24
    65a2:	29 f0       	breq	.+10     	; 0x65ae <phySetChannel+0x26>
    65a4:	80 91 0a 1d 	lds	r24, 0x1D0A	; 0x801d0a <phyChannel>
    65a8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    65ac:	08 95       	ret
    65ae:	80 91 0a 1d 	lds	r24, 0x1D0A	; 0x801d0a <phyChannel>
    65b2:	98 2f       	mov	r25, r24
    65b4:	9f 71       	andi	r25, 0x1F	; 31
    65b6:	e8 e4       	ldi	r30, 0x48	; 72
    65b8:	f1 e0       	ldi	r31, 0x01	; 1
    65ba:	80 81       	ld	r24, Z
    65bc:	80 7e       	andi	r24, 0xE0	; 224
    65be:	89 2b       	or	r24, r25
    65c0:	80 83       	st	Z, r24
    65c2:	08 95       	ret

000065c4 <phyTrxSetState>:
    65c4:	93 e0       	ldi	r25, 0x03	; 3
    65c6:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    65ca:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    65ce:	9f 71       	andi	r25, 0x1F	; 31
    65d0:	98 30       	cpi	r25, 0x08	; 8
    65d2:	d9 f7       	brne	.-10     	; 0x65ca <phyTrxSetState+0x6>
    65d4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    65d8:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    65dc:	9f 71       	andi	r25, 0x1F	; 31
    65de:	89 13       	cpse	r24, r25
    65e0:	fb cf       	rjmp	.-10     	; 0x65d8 <phyTrxSetState+0x14>
    65e2:	08 95       	ret

000065e4 <phySetRxState>:
    65e4:	88 e0       	ldi	r24, 0x08	; 8
    65e6:	ee df       	rcall	.-36     	; 0x65c4 <phyTrxSetState>
    65e8:	8f ef       	ldi	r24, 0xFF	; 255
    65ea:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    65ee:	80 91 0b 1d 	lds	r24, 0x1D0B	; 0x801d0b <phyRxState>
    65f2:	88 23       	and	r24, r24
    65f4:	11 f0       	breq	.+4      	; 0x65fa <phySetRxState+0x16>
    65f6:	86 e1       	ldi	r24, 0x16	; 22
    65f8:	e5 cf       	rjmp	.-54     	; 0x65c4 <phyTrxSetState>
    65fa:	08 95       	ret

000065fc <PHY_Init>:
    65fc:	e9 e3       	ldi	r30, 0x39	; 57
    65fe:	f1 e0       	ldi	r31, 0x01	; 1
    6600:	80 81       	ld	r24, Z
    6602:	81 60       	ori	r24, 0x01	; 1
    6604:	80 83       	st	Z, r24
    6606:	10 92 0b 1d 	sts	0x1D0B, r1	; 0x801d0b <phyRxState>
    660a:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <phyBand>
    660e:	81 e0       	ldi	r24, 0x01	; 1
    6610:	80 93 8c 1d 	sts	0x1D8C, r24	; 0x801d8c <phyState>
    6614:	88 e0       	ldi	r24, 0x08	; 8
    6616:	d6 df       	rcall	.-84     	; 0x65c4 <phyTrxSetState>
    6618:	8b ee       	ldi	r24, 0xEB	; 235
    661a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    661e:	ec e4       	ldi	r30, 0x4C	; 76
    6620:	f1 e0       	ldi	r31, 0x01	; 1
    6622:	80 81       	ld	r24, Z
    6624:	80 68       	ori	r24, 0x80	; 128
    6626:	80 83       	st	Z, r24
    6628:	08 95       	ret

0000662a <PHY_SetRxState>:
    662a:	80 93 0b 1d 	sts	0x1D0B, r24	; 0x801d0b <phyRxState>
    662e:	da cf       	rjmp	.-76     	; 0x65e4 <phySetRxState>
    6630:	08 95       	ret

00006632 <PHY_SetChannel>:
    6632:	80 93 0a 1d 	sts	0x1D0A, r24	; 0x801d0a <phyChannel>
    6636:	a8 cf       	rjmp	.-176    	; 0x6588 <phySetChannel>
    6638:	08 95       	ret

0000663a <PHY_SetPanId>:
    663a:	cf 93       	push	r28
    663c:	df 93       	push	r29
    663e:	1f 92       	push	r1
    6640:	1f 92       	push	r1
    6642:	cd b7       	in	r28, 0x3d	; 61
    6644:	de b7       	in	r29, 0x3e	; 62
    6646:	9a 83       	std	Y+2, r25	; 0x02
    6648:	89 83       	std	Y+1, r24	; 0x01
    664a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    664e:	8a 81       	ldd	r24, Y+2	; 0x02
    6650:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    6654:	0f 90       	pop	r0
    6656:	0f 90       	pop	r0
    6658:	df 91       	pop	r29
    665a:	cf 91       	pop	r28
    665c:	08 95       	ret

0000665e <PHY_SetShortAddr>:
    665e:	cf 93       	push	r28
    6660:	df 93       	push	r29
    6662:	1f 92       	push	r1
    6664:	1f 92       	push	r1
    6666:	cd b7       	in	r28, 0x3d	; 61
    6668:	de b7       	in	r29, 0x3e	; 62
    666a:	9a 83       	std	Y+2, r25	; 0x02
    666c:	89 83       	std	Y+1, r24	; 0x01
    666e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    6672:	8a 81       	ldd	r24, Y+2	; 0x02
    6674:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    6678:	99 81       	ldd	r25, Y+1	; 0x01
    667a:	8a 81       	ldd	r24, Y+2	; 0x02
    667c:	89 0f       	add	r24, r25
    667e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    6682:	0f 90       	pop	r0
    6684:	0f 90       	pop	r0
    6686:	df 91       	pop	r29
    6688:	cf 91       	pop	r28
    668a:	08 95       	ret

0000668c <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    668c:	0f 93       	push	r16
    668e:	1f 93       	push	r17
    6690:	cf 93       	push	r28
    6692:	8c 01       	movw	r16, r24
    6694:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    6696:	89 e1       	ldi	r24, 0x19	; 25
    6698:	95 df       	rcall	.-214    	; 0x65c4 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    669a:	8f ef       	ldi	r24, 0xFF	; 255
    669c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    66a0:	82 e0       	ldi	r24, 0x02	; 2
    66a2:	8c 0f       	add	r24, r28
    66a4:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    66a8:	20 e0       	ldi	r18, 0x00	; 0
    66aa:	0b c0       	rjmp	.+22     	; 0x66c2 <PHY_DataReq+0x36>
    TRX_FRAME_BUFFER(i+1) = data[i];
    66ac:	82 2f       	mov	r24, r18
    66ae:	90 e0       	ldi	r25, 0x00	; 0
    66b0:	fc 01       	movw	r30, r24
    66b2:	ef 57       	subi	r30, 0x7F	; 127
    66b4:	fe 4f       	sbci	r31, 0xFE	; 254
    66b6:	d8 01       	movw	r26, r16
    66b8:	a8 0f       	add	r26, r24
    66ba:	b9 1f       	adc	r27, r25
    66bc:	8c 91       	ld	r24, X
    66be:	80 83       	st	Z, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    66c0:	2f 5f       	subi	r18, 0xFF	; 255
    66c2:	2c 17       	cp	r18, r28
    66c4:	98 f3       	brcs	.-26     	; 0x66ac <PHY_DataReq+0x20>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    66c6:	83 e0       	ldi	r24, 0x03	; 3
    66c8:	80 93 8c 1d 	sts	0x1D8C, r24	; 0x801d8c <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    66cc:	82 e0       	ldi	r24, 0x02	; 2
    66ce:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    66d2:	cf 91       	pop	r28
    66d4:	1f 91       	pop	r17
    66d6:	0f 91       	pop	r16
    66d8:	08 95       	ret

000066da <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    66da:	1f 93       	push	r17
    66dc:	cf 93       	push	r28
    66de:	df 93       	push	r29
    66e0:	00 d0       	rcall	.+0      	; 0x66e2 <PHY_TaskHandler+0x8>
    66e2:	1f 92       	push	r1
    66e4:	1f 92       	push	r1
    66e6:	cd b7       	in	r28, 0x3d	; 61
    66e8:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    66ea:	80 91 8c 1d 	lds	r24, 0x1D8C	; 0x801d8c <phyState>
    66ee:	82 30       	cpi	r24, 0x02	; 2
    66f0:	09 f4       	brne	.+2      	; 0x66f4 <PHY_TaskHandler+0x1a>
    66f2:	63 c0       	rjmp	.+198    	; 0x67ba <PHY_TaskHandler+0xe0>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    66f4:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    66f8:	83 ff       	sbrs	r24, 3
    66fa:	3c c0       	rjmp	.+120    	; 0x6774 <PHY_TaskHandler+0x9a>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    66fc:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    6700:	20 e0       	ldi	r18, 0x00	; 0
    6702:	09 c0       	rjmp	.+18     	; 0x6716 <PHY_TaskHandler+0x3c>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    6704:	fc 01       	movw	r30, r24
    6706:	e0 58       	subi	r30, 0x80	; 128
    6708:	fe 4f       	sbci	r31, 0xFE	; 254
    670a:	30 81       	ld	r19, Z
    670c:	fc 01       	movw	r30, r24
    670e:	e4 5f       	subi	r30, 0xF4	; 244
    6710:	f2 4e       	sbci	r31, 0xE2	; 226
    6712:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    6714:	2f 5f       	subi	r18, 0xFF	; 255
    6716:	82 2f       	mov	r24, r18
    6718:	90 e0       	ldi	r25, 0x00	; 0
    671a:	4a 2f       	mov	r20, r26
    671c:	50 e0       	ldi	r21, 0x00	; 0
    671e:	ba 01       	movw	r22, r20
    6720:	6f 5f       	subi	r22, 0xFF	; 255
    6722:	7f 4f       	sbci	r23, 0xFF	; 255
    6724:	86 17       	cp	r24, r22
    6726:	97 07       	cpc	r25, r23
    6728:	6c f3       	brlt	.-38     	; 0x6704 <PHY_TaskHandler+0x2a>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    672a:	8c e0       	ldi	r24, 0x0C	; 12
    672c:	9d e1       	ldi	r25, 0x1D	; 29
    672e:	9a 83       	std	Y+2, r25	; 0x02
    6730:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    6732:	a2 50       	subi	r26, 0x02	; 2
    6734:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    6736:	fa 01       	movw	r30, r20
    6738:	e4 5f       	subi	r30, 0xF4	; 244
    673a:	f2 4e       	sbci	r31, 0xE2	; 226
    673c:	80 81       	ld	r24, Z
    673e:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    6740:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    6744:	8a 55       	subi	r24, 0x5A	; 90
    6746:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    6748:	ce 01       	movw	r24, r28
    674a:	01 96       	adiw	r24, 0x01	; 1
    674c:	f8 dc       	rcall	.-1552   	; 0x613e <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    674e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    6752:	8f 71       	andi	r24, 0x1F	; 31
    6754:	86 31       	cpi	r24, 0x16	; 22
    6756:	d9 f7       	brne	.-10     	; 0x674e <PHY_TaskHandler+0x74>

    IRQ_STATUS_REG_s.rxEnd = 1;
    6758:	ef e4       	ldi	r30, 0x4F	; 79
    675a:	f1 e0       	ldi	r31, 0x01	; 1
    675c:	80 81       	ld	r24, Z
    675e:	88 60       	ori	r24, 0x08	; 8
    6760:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    6762:	ec e4       	ldi	r30, 0x4C	; 76
    6764:	f1 e0       	ldi	r31, 0x01	; 1
    6766:	80 81       	ld	r24, Z
    6768:	8f 77       	andi	r24, 0x7F	; 127
    676a:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    676c:	80 81       	ld	r24, Z
    676e:	80 68       	ori	r24, 0x80	; 128
    6770:	80 83       	st	Z, r24
    6772:	23 c0       	rjmp	.+70     	; 0x67ba <PHY_TaskHandler+0xe0>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    6774:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    6778:	86 ff       	sbrs	r24, 6
    677a:	1f c0       	rjmp	.+62     	; 0x67ba <PHY_TaskHandler+0xe0>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    677c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    6780:	8f 71       	andi	r24, 0x1F	; 31
    6782:	89 31       	cpi	r24, 0x19	; 25
    6784:	a9 f4       	brne	.+42     	; 0x67b0 <PHY_TaskHandler+0xd6>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    6786:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    678a:	12 95       	swap	r17
    678c:	16 95       	lsr	r17
    678e:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    6790:	49 f0       	breq	.+18     	; 0x67a4 <PHY_TaskHandler+0xca>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    6792:	13 30       	cpi	r17, 0x03	; 3
    6794:	21 f0       	breq	.+8      	; 0x679e <PHY_TaskHandler+0xc4>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    6796:	15 30       	cpi	r17, 0x05	; 5
    6798:	21 f4       	brne	.+8      	; 0x67a2 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_NO_ACK;
    679a:	12 e0       	ldi	r17, 0x02	; 2
    679c:	03 c0       	rjmp	.+6      	; 0x67a4 <PHY_TaskHandler+0xca>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    679e:	11 e0       	ldi	r17, 0x01	; 1
    67a0:	01 c0       	rjmp	.+2      	; 0x67a4 <PHY_TaskHandler+0xca>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    67a2:	13 e0       	ldi	r17, 0x03	; 3
    67a4:	1f df       	rcall	.-450    	; 0x65e4 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    67a6:	81 e0       	ldi	r24, 0x01	; 1
    67a8:	80 93 8c 1d 	sts	0x1D8C, r24	; 0x801d8c <phyState>

      PHY_DataConf(status);
    67ac:	81 2f       	mov	r24, r17
    67ae:	5b de       	rcall	.-842    	; 0x6466 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    67b0:	ef e4       	ldi	r30, 0x4F	; 79
    67b2:	f1 e0       	ldi	r31, 0x01	; 1
    67b4:	80 81       	ld	r24, Z
    67b6:	80 64       	ori	r24, 0x40	; 64
    67b8:	80 83       	st	Z, r24
  }
}
    67ba:	0f 90       	pop	r0
    67bc:	0f 90       	pop	r0
    67be:	0f 90       	pop	r0
    67c0:	0f 90       	pop	r0
    67c2:	0f 90       	pop	r0
    67c4:	df 91       	pop	r29
    67c6:	cf 91       	pop	r28
    67c8:	1f 91       	pop	r17
    67ca:	08 95       	ret

000067cc <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    67cc:	0e 94 27 29 	call	0x524e	; 0x524e <HAL_Init>
  SYS_TimerInit();
    67d0:	60 d0       	rcall	.+192    	; 0x6892 <SYS_TimerInit>
  PHY_Init();
    67d2:	14 df       	rcall	.-472    	; 0x65fc <PHY_Init>
    67d4:	0c 94 d4 2a 	jmp	0x55a8	; 0x55a8 <NWK_Init>
  NWK_Init();
    67d8:	08 95       	ret

000067da <SYS_TaskHandler>:
    67da:	7f df       	rcall	.-258    	; 0x66da <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    67dc:	0e 94 08 2b 	call	0x5610	; 0x5610 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    67e0:	b2 c0       	rjmp	.+356    	; 0x6946 <SYS_TimerTaskHandler>
    67e2:	08 95       	ret

000067e4 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    67e4:	0f 93       	push	r16
    67e6:	1f 93       	push	r17
    67e8:	cf 93       	push	r28
    67ea:	df 93       	push	r29
    67ec:	ec 01       	movw	r28, r24
  if (timers)
    67ee:	80 91 8d 1d 	lds	r24, 0x1D8D	; 0x801d8d <timers>
    67f2:	90 91 8e 1d 	lds	r25, 0x1D8E	; 0x801d8e <timers+0x1>
    67f6:	00 97       	sbiw	r24, 0x00	; 0
    67f8:	c9 f1       	breq	.+114    	; 0x686c <placeTimer+0x88>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    67fa:	4e 81       	ldd	r20, Y+6	; 0x06
    67fc:	5f 81       	ldd	r21, Y+7	; 0x07
    67fe:	68 85       	ldd	r22, Y+8	; 0x08
    6800:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    6802:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    6804:	a0 e0       	ldi	r26, 0x00	; 0
    6806:	b0 e0       	ldi	r27, 0x00	; 0
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    6808:	1a c0       	rjmp	.+52     	; 0x683e <placeTimer+0x5a>
    {
      if (timeout < t->timeout)
    680a:	02 81       	ldd	r16, Z+2	; 0x02
    680c:	13 81       	ldd	r17, Z+3	; 0x03
    680e:	24 81       	ldd	r18, Z+4	; 0x04
    6810:	35 81       	ldd	r19, Z+5	; 0x05
    6812:	40 17       	cp	r20, r16
    6814:	51 07       	cpc	r21, r17
    6816:	62 07       	cpc	r22, r18
    6818:	73 07       	cpc	r23, r19
    681a:	48 f4       	brcc	.+18     	; 0x682e <placeTimer+0x4a>
      {
         t->timeout -= timeout;
    681c:	04 1b       	sub	r16, r20
    681e:	15 0b       	sbc	r17, r21
    6820:	26 0b       	sbc	r18, r22
    6822:	37 0b       	sbc	r19, r23
    6824:	02 83       	std	Z+2, r16	; 0x02
    6826:	13 83       	std	Z+3, r17	; 0x03
    6828:	24 83       	std	Z+4, r18	; 0x04
    682a:	35 83       	std	Z+5, r19	; 0x05
         break;
    682c:	0a c0       	rjmp	.+20     	; 0x6842 <placeTimer+0x5e>
      }
      else
        timeout -= t->timeout;
    682e:	40 1b       	sub	r20, r16
    6830:	51 0b       	sbc	r21, r17
    6832:	62 0b       	sbc	r22, r18
    6834:	73 0b       	sbc	r23, r19

      prev = t;
    6836:	df 01       	movw	r26, r30
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    6838:	01 90       	ld	r0, Z+
    683a:	f0 81       	ld	r31, Z
    683c:	e0 2d       	mov	r30, r0
    683e:	30 97       	sbiw	r30, 0x00	; 0
    6840:	21 f7       	brne	.-56     	; 0x680a <placeTimer+0x26>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    6842:	4a 83       	std	Y+2, r20	; 0x02
    6844:	5b 83       	std	Y+3, r21	; 0x03
    6846:	6c 83       	std	Y+4, r22	; 0x04
    6848:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    684a:	10 97       	sbiw	r26, 0x00	; 0
    684c:	41 f0       	breq	.+16     	; 0x685e <placeTimer+0x7a>
    {
      timer->next = prev->next;
    684e:	8d 91       	ld	r24, X+
    6850:	9c 91       	ld	r25, X
    6852:	11 97       	sbiw	r26, 0x01	; 1
    6854:	99 83       	std	Y+1, r25	; 0x01
    6856:	88 83       	st	Y, r24
      prev->next = timer;
    6858:	cd 93       	st	X+, r28
    685a:	dc 93       	st	X, r29
    685c:	15 c0       	rjmp	.+42     	; 0x6888 <placeTimer+0xa4>
    }
    else
    {
      timer->next = timers;
    685e:	99 83       	std	Y+1, r25	; 0x01
    6860:	88 83       	st	Y, r24
      timers = timer;
    6862:	d0 93 8e 1d 	sts	0x1D8E, r29	; 0x801d8e <timers+0x1>
    6866:	c0 93 8d 1d 	sts	0x1D8D, r28	; 0x801d8d <timers>
    686a:	0e c0       	rjmp	.+28     	; 0x6888 <placeTimer+0xa4>
    }
  }
  else
  {
    timer->next = NULL;
    686c:	19 82       	std	Y+1, r1	; 0x01
    686e:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    6870:	8e 81       	ldd	r24, Y+6	; 0x06
    6872:	9f 81       	ldd	r25, Y+7	; 0x07
    6874:	a8 85       	ldd	r26, Y+8	; 0x08
    6876:	b9 85       	ldd	r27, Y+9	; 0x09
    6878:	8a 83       	std	Y+2, r24	; 0x02
    687a:	9b 83       	std	Y+3, r25	; 0x03
    687c:	ac 83       	std	Y+4, r26	; 0x04
    687e:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    6880:	d0 93 8e 1d 	sts	0x1D8E, r29	; 0x801d8e <timers+0x1>
    6884:	c0 93 8d 1d 	sts	0x1D8D, r28	; 0x801d8d <timers>
  }
}
    6888:	df 91       	pop	r29
    688a:	cf 91       	pop	r28
    688c:	1f 91       	pop	r17
    688e:	0f 91       	pop	r16
    6890:	08 95       	ret

00006892 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    6892:	10 92 8e 1d 	sts	0x1D8E, r1	; 0x801d8e <timers+0x1>
    6896:	10 92 8d 1d 	sts	0x1D8D, r1	; 0x801d8d <timers>
    689a:	08 95       	ret

0000689c <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    689c:	cf 93       	push	r28
    689e:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    68a0:	e0 91 8d 1d 	lds	r30, 0x1D8D	; 0x801d8d <timers>
    68a4:	f0 91 8e 1d 	lds	r31, 0x1D8E	; 0x801d8e <timers+0x1>

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;
    68a8:	a0 e0       	ldi	r26, 0x00	; 0
    68aa:	b0 e0       	ldi	r27, 0x00	; 0

  for (SYS_Timer_t *t = timers; t; t = t->next)
    68ac:	2b c0       	rjmp	.+86     	; 0x6904 <SYS_TimerStop+0x68>
  {
    if (t == timer)
    68ae:	e8 17       	cp	r30, r24
    68b0:	f9 07       	cpc	r31, r25
    68b2:	21 f5       	brne	.+72     	; 0x68fc <SYS_TimerStop+0x60>
    {
      if (prev)
    68b4:	10 97       	sbiw	r26, 0x00	; 0
    68b6:	29 f0       	breq	.+10     	; 0x68c2 <SYS_TimerStop+0x26>
        prev->next = t->next;
    68b8:	20 81       	ld	r18, Z
    68ba:	31 81       	ldd	r19, Z+1	; 0x01
    68bc:	2d 93       	st	X+, r18
    68be:	3c 93       	st	X, r19
    68c0:	06 c0       	rjmp	.+12     	; 0x68ce <SYS_TimerStop+0x32>
      else
        timers = t->next;
    68c2:	20 81       	ld	r18, Z
    68c4:	31 81       	ldd	r19, Z+1	; 0x01
    68c6:	30 93 8e 1d 	sts	0x1D8E, r19	; 0x801d8e <timers+0x1>
    68ca:	20 93 8d 1d 	sts	0x1D8D, r18	; 0x801d8d <timers>

      if (t->next)
    68ce:	01 90       	ld	r0, Z+
    68d0:	f0 81       	ld	r31, Z
    68d2:	e0 2d       	mov	r30, r0
    68d4:	30 97       	sbiw	r30, 0x00	; 0
    68d6:	c1 f0       	breq	.+48     	; 0x6908 <SYS_TimerStop+0x6c>
        t->next->timeout += timer->timeout;
    68d8:	ec 01       	movw	r28, r24
    68da:	8a 81       	ldd	r24, Y+2	; 0x02
    68dc:	9b 81       	ldd	r25, Y+3	; 0x03
    68de:	ac 81       	ldd	r26, Y+4	; 0x04
    68e0:	bd 81       	ldd	r27, Y+5	; 0x05
    68e2:	42 81       	ldd	r20, Z+2	; 0x02
    68e4:	53 81       	ldd	r21, Z+3	; 0x03
    68e6:	64 81       	ldd	r22, Z+4	; 0x04
    68e8:	75 81       	ldd	r23, Z+5	; 0x05
    68ea:	84 0f       	add	r24, r20
    68ec:	95 1f       	adc	r25, r21
    68ee:	a6 1f       	adc	r26, r22
    68f0:	b7 1f       	adc	r27, r23
    68f2:	82 83       	std	Z+2, r24	; 0x02
    68f4:	93 83       	std	Z+3, r25	; 0x03
    68f6:	a4 83       	std	Z+4, r26	; 0x04
    68f8:	b5 83       	std	Z+5, r27	; 0x05
    68fa:	06 c0       	rjmp	.+12     	; 0x6908 <SYS_TimerStop+0x6c>

      break;
    }
    prev = t;
    68fc:	df 01       	movw	r26, r30
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    68fe:	01 90       	ld	r0, Z+
    6900:	f0 81       	ld	r31, Z
    6902:	e0 2d       	mov	r30, r0
    6904:	30 97       	sbiw	r30, 0x00	; 0
    6906:	99 f6       	brne	.-90     	; 0x68ae <SYS_TimerStop+0x12>

      break;
    }
    prev = t;
  }
}
    6908:	df 91       	pop	r29
    690a:	cf 91       	pop	r28
    690c:	08 95       	ret

0000690e <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    690e:	e0 91 8d 1d 	lds	r30, 0x1D8D	; 0x801d8d <timers>
    6912:	f0 91 8e 1d 	lds	r31, 0x1D8E	; 0x801d8e <timers+0x1>
    6916:	06 c0       	rjmp	.+12     	; 0x6924 <SYS_TimerStarted+0x16>
    if (t == timer)
    6918:	e8 17       	cp	r30, r24
    691a:	f9 07       	cpc	r31, r25
    691c:	39 f0       	breq	.+14     	; 0x692c <SYS_TimerStarted+0x1e>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    691e:	01 90       	ld	r0, Z+
    6920:	f0 81       	ld	r31, Z
    6922:	e0 2d       	mov	r30, r0
    6924:	30 97       	sbiw	r30, 0x00	; 0
    6926:	c1 f7       	brne	.-16     	; 0x6918 <SYS_TimerStarted+0xa>
    if (t == timer)
      return true;
  return false;
    6928:	80 e0       	ldi	r24, 0x00	; 0
    692a:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    692c:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    692e:	08 95       	ret

00006930 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    6930:	cf 93       	push	r28
    6932:	df 93       	push	r29
    6934:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    6936:	eb df       	rcall	.-42     	; 0x690e <SYS_TimerStarted>
    6938:	81 11       	cpse	r24, r1
    693a:	02 c0       	rjmp	.+4      	; 0x6940 <SYS_TimerStart+0x10>
    placeTimer(timer);
    693c:	ce 01       	movw	r24, r28
    693e:	52 df       	rcall	.-348    	; 0x67e4 <placeTimer>
}
    6940:	df 91       	pop	r29
    6942:	cf 91       	pop	r28
    6944:	08 95       	ret

00006946 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    6946:	cf 92       	push	r12
    6948:	df 92       	push	r13
    694a:	ef 92       	push	r14
    694c:	ff 92       	push	r15
    694e:	cf 93       	push	r28
    6950:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    6952:	80 91 9e 25 	lds	r24, 0x259E	; 0x80259e <halTimerIrqCount>
    6956:	88 23       	and	r24, r24
    6958:	09 f4       	brne	.+2      	; 0x695c <SYS_TimerTaskHandler+0x16>
    695a:	4d c0       	rjmp	.+154    	; 0x69f6 <SYS_TimerTaskHandler+0xb0>
    return;

  ATOMIC_SECTION_ENTER
    695c:	8f b7       	in	r24, 0x3f	; 63
    695e:	f8 94       	cli
    cnt = halTimerIrqCount;
    6960:	c0 90 9e 25 	lds	r12, 0x259E	; 0x80259e <halTimerIrqCount>
    halTimerIrqCount = 0;
    6964:	10 92 9e 25 	sts	0x259E, r1	; 0x80259e <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    6968:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    696a:	d1 2c       	mov	r13, r1
    696c:	e1 2c       	mov	r14, r1
    696e:	f1 2c       	mov	r15, r1
    6970:	cc 0c       	add	r12, r12
    6972:	dd 1c       	adc	r13, r13
    6974:	ee 1c       	adc	r14, r14
    6976:	ff 1c       	adc	r15, r15
    6978:	d7 01       	movw	r26, r14
    697a:	c6 01       	movw	r24, r12
    697c:	88 0f       	add	r24, r24
    697e:	99 1f       	adc	r25, r25
    6980:	aa 1f       	adc	r26, r26
    6982:	bb 1f       	adc	r27, r27
    6984:	88 0f       	add	r24, r24
    6986:	99 1f       	adc	r25, r25
    6988:	aa 1f       	adc	r26, r26
    698a:	bb 1f       	adc	r27, r27
    698c:	c8 0e       	add	r12, r24
    698e:	d9 1e       	adc	r13, r25
    6990:	ea 1e       	adc	r14, r26
    6992:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    6994:	13 c0       	rjmp	.+38     	; 0x69bc <SYS_TimerTaskHandler+0x76>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    6996:	c8 1a       	sub	r12, r24
    6998:	d9 0a       	sbc	r13, r25
    699a:	ea 0a       	sbc	r14, r26
    699c:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    699e:	88 81       	ld	r24, Y
    69a0:	99 81       	ldd	r25, Y+1	; 0x01
    69a2:	90 93 8e 1d 	sts	0x1D8E, r25	; 0x801d8e <timers+0x1>
    69a6:	80 93 8d 1d 	sts	0x1D8D, r24	; 0x801d8d <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    69aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    69ac:	81 30       	cpi	r24, 0x01	; 1
    69ae:	11 f4       	brne	.+4      	; 0x69b4 <SYS_TimerTaskHandler+0x6e>
      placeTimer(timer);
    69b0:	ce 01       	movw	r24, r28
    69b2:	18 df       	rcall	.-464    	; 0x67e4 <placeTimer>
    timer->handler(timer);
    69b4:	eb 85       	ldd	r30, Y+11	; 0x0b
    69b6:	fc 85       	ldd	r31, Y+12	; 0x0c
    69b8:	ce 01       	movw	r24, r28
    69ba:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    69bc:	c0 91 8d 1d 	lds	r28, 0x1D8D	; 0x801d8d <timers>
    69c0:	d0 91 8e 1d 	lds	r29, 0x1D8E	; 0x801d8e <timers+0x1>
    69c4:	20 97       	sbiw	r28, 0x00	; 0
    69c6:	49 f0       	breq	.+18     	; 0x69da <SYS_TimerTaskHandler+0x94>
    69c8:	8a 81       	ldd	r24, Y+2	; 0x02
    69ca:	9b 81       	ldd	r25, Y+3	; 0x03
    69cc:	ac 81       	ldd	r26, Y+4	; 0x04
    69ce:	bd 81       	ldd	r27, Y+5	; 0x05
    69d0:	c8 16       	cp	r12, r24
    69d2:	d9 06       	cpc	r13, r25
    69d4:	ea 06       	cpc	r14, r26
    69d6:	fb 06       	cpc	r15, r27
    69d8:	f0 f6       	brcc	.-68     	; 0x6996 <SYS_TimerTaskHandler+0x50>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    69da:	20 97       	sbiw	r28, 0x00	; 0
    69dc:	61 f0       	breq	.+24     	; 0x69f6 <SYS_TimerTaskHandler+0xb0>
    timers->timeout -= elapsed;
    69de:	8a 81       	ldd	r24, Y+2	; 0x02
    69e0:	9b 81       	ldd	r25, Y+3	; 0x03
    69e2:	ac 81       	ldd	r26, Y+4	; 0x04
    69e4:	bd 81       	ldd	r27, Y+5	; 0x05
    69e6:	8c 19       	sub	r24, r12
    69e8:	9d 09       	sbc	r25, r13
    69ea:	ae 09       	sbc	r26, r14
    69ec:	bf 09       	sbc	r27, r15
    69ee:	8a 83       	std	Y+2, r24	; 0x02
    69f0:	9b 83       	std	Y+3, r25	; 0x03
    69f2:	ac 83       	std	Y+4, r26	; 0x04
    69f4:	bd 83       	std	Y+5, r27	; 0x05
}
    69f6:	df 91       	pop	r29
    69f8:	cf 91       	pop	r28
    69fa:	ff 90       	pop	r15
    69fc:	ef 90       	pop	r14
    69fe:	df 90       	pop	r13
    6a00:	cf 90       	pop	r12
    6a02:	08 95       	ret

00006a04 <__udivmodsi4>:
    6a04:	a1 e2       	ldi	r26, 0x21	; 33
    6a06:	1a 2e       	mov	r1, r26
    6a08:	aa 1b       	sub	r26, r26
    6a0a:	bb 1b       	sub	r27, r27
    6a0c:	fd 01       	movw	r30, r26
    6a0e:	0d c0       	rjmp	.+26     	; 0x6a2a <__udivmodsi4_ep>

00006a10 <__udivmodsi4_loop>:
    6a10:	aa 1f       	adc	r26, r26
    6a12:	bb 1f       	adc	r27, r27
    6a14:	ee 1f       	adc	r30, r30
    6a16:	ff 1f       	adc	r31, r31
    6a18:	a2 17       	cp	r26, r18
    6a1a:	b3 07       	cpc	r27, r19
    6a1c:	e4 07       	cpc	r30, r20
    6a1e:	f5 07       	cpc	r31, r21
    6a20:	20 f0       	brcs	.+8      	; 0x6a2a <__udivmodsi4_ep>
    6a22:	a2 1b       	sub	r26, r18
    6a24:	b3 0b       	sbc	r27, r19
    6a26:	e4 0b       	sbc	r30, r20
    6a28:	f5 0b       	sbc	r31, r21

00006a2a <__udivmodsi4_ep>:
    6a2a:	66 1f       	adc	r22, r22
    6a2c:	77 1f       	adc	r23, r23
    6a2e:	88 1f       	adc	r24, r24
    6a30:	99 1f       	adc	r25, r25
    6a32:	1a 94       	dec	r1
    6a34:	69 f7       	brne	.-38     	; 0x6a10 <__udivmodsi4_loop>
    6a36:	60 95       	com	r22
    6a38:	70 95       	com	r23
    6a3a:	80 95       	com	r24
    6a3c:	90 95       	com	r25
    6a3e:	9b 01       	movw	r18, r22
    6a40:	ac 01       	movw	r20, r24
    6a42:	bd 01       	movw	r22, r26
    6a44:	cf 01       	movw	r24, r30
    6a46:	08 95       	ret

00006a48 <__tablejump2__>:
    6a48:	ee 0f       	add	r30, r30
    6a4a:	ff 1f       	adc	r31, r31
    6a4c:	88 1f       	adc	r24, r24
    6a4e:	8b bf       	out	0x3b, r24	; 59
    6a50:	07 90       	elpm	r0, Z+
    6a52:	f6 91       	elpm	r31, Z
    6a54:	e0 2d       	mov	r30, r0
    6a56:	19 94       	eijmp

00006a58 <__muluhisi3>:
    6a58:	09 d0       	rcall	.+18     	; 0x6a6c <__umulhisi3>
    6a5a:	a5 9f       	mul	r26, r21
    6a5c:	90 0d       	add	r25, r0
    6a5e:	b4 9f       	mul	r27, r20
    6a60:	90 0d       	add	r25, r0
    6a62:	a4 9f       	mul	r26, r20
    6a64:	80 0d       	add	r24, r0
    6a66:	91 1d       	adc	r25, r1
    6a68:	11 24       	eor	r1, r1
    6a6a:	08 95       	ret

00006a6c <__umulhisi3>:
    6a6c:	a2 9f       	mul	r26, r18
    6a6e:	b0 01       	movw	r22, r0
    6a70:	b3 9f       	mul	r27, r19
    6a72:	c0 01       	movw	r24, r0
    6a74:	a3 9f       	mul	r26, r19
    6a76:	70 0d       	add	r23, r0
    6a78:	81 1d       	adc	r24, r1
    6a7a:	11 24       	eor	r1, r1
    6a7c:	91 1d       	adc	r25, r1
    6a7e:	b2 9f       	mul	r27, r18
    6a80:	70 0d       	add	r23, r0
    6a82:	81 1d       	adc	r24, r1
    6a84:	11 24       	eor	r1, r1
    6a86:	91 1d       	adc	r25, r1
    6a88:	08 95       	ret

00006a8a <do_rand>:
    6a8a:	8f 92       	push	r8
    6a8c:	9f 92       	push	r9
    6a8e:	af 92       	push	r10
    6a90:	bf 92       	push	r11
    6a92:	cf 92       	push	r12
    6a94:	df 92       	push	r13
    6a96:	ef 92       	push	r14
    6a98:	ff 92       	push	r15
    6a9a:	cf 93       	push	r28
    6a9c:	df 93       	push	r29
    6a9e:	ec 01       	movw	r28, r24
    6aa0:	68 81       	ld	r22, Y
    6aa2:	79 81       	ldd	r23, Y+1	; 0x01
    6aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    6aa6:	9b 81       	ldd	r25, Y+3	; 0x03
    6aa8:	61 15       	cp	r22, r1
    6aaa:	71 05       	cpc	r23, r1
    6aac:	81 05       	cpc	r24, r1
    6aae:	91 05       	cpc	r25, r1
    6ab0:	21 f4       	brne	.+8      	; 0x6aba <do_rand+0x30>
    6ab2:	64 e2       	ldi	r22, 0x24	; 36
    6ab4:	79 ed       	ldi	r23, 0xD9	; 217
    6ab6:	8b e5       	ldi	r24, 0x5B	; 91
    6ab8:	97 e0       	ldi	r25, 0x07	; 7
    6aba:	2d e1       	ldi	r18, 0x1D	; 29
    6abc:	33 ef       	ldi	r19, 0xF3	; 243
    6abe:	41 e0       	ldi	r20, 0x01	; 1
    6ac0:	50 e0       	ldi	r21, 0x00	; 0
    6ac2:	e3 d6       	rcall	.+3526   	; 0x788a <__divmodsi4>
    6ac4:	49 01       	movw	r8, r18
    6ac6:	5a 01       	movw	r10, r20
    6ac8:	9b 01       	movw	r18, r22
    6aca:	ac 01       	movw	r20, r24
    6acc:	a7 ea       	ldi	r26, 0xA7	; 167
    6ace:	b1 e4       	ldi	r27, 0x41	; 65
    6ad0:	c3 df       	rcall	.-122    	; 0x6a58 <__muluhisi3>
    6ad2:	6b 01       	movw	r12, r22
    6ad4:	7c 01       	movw	r14, r24
    6ad6:	ac ee       	ldi	r26, 0xEC	; 236
    6ad8:	b4 ef       	ldi	r27, 0xF4	; 244
    6ada:	a5 01       	movw	r20, r10
    6adc:	94 01       	movw	r18, r8
    6ade:	f3 d6       	rcall	.+3558   	; 0x78c6 <__mulohisi3>
    6ae0:	dc 01       	movw	r26, r24
    6ae2:	cb 01       	movw	r24, r22
    6ae4:	8c 0d       	add	r24, r12
    6ae6:	9d 1d       	adc	r25, r13
    6ae8:	ae 1d       	adc	r26, r14
    6aea:	bf 1d       	adc	r27, r15
    6aec:	b7 ff       	sbrs	r27, 7
    6aee:	03 c0       	rjmp	.+6      	; 0x6af6 <do_rand+0x6c>
    6af0:	01 97       	sbiw	r24, 0x01	; 1
    6af2:	a1 09       	sbc	r26, r1
    6af4:	b0 48       	sbci	r27, 0x80	; 128
    6af6:	88 83       	st	Y, r24
    6af8:	99 83       	std	Y+1, r25	; 0x01
    6afa:	aa 83       	std	Y+2, r26	; 0x02
    6afc:	bb 83       	std	Y+3, r27	; 0x03
    6afe:	9f 77       	andi	r25, 0x7F	; 127
    6b00:	df 91       	pop	r29
    6b02:	cf 91       	pop	r28
    6b04:	ff 90       	pop	r15
    6b06:	ef 90       	pop	r14
    6b08:	df 90       	pop	r13
    6b0a:	cf 90       	pop	r12
    6b0c:	bf 90       	pop	r11
    6b0e:	af 90       	pop	r10
    6b10:	9f 90       	pop	r9
    6b12:	8f 90       	pop	r8
    6b14:	08 95       	ret

00006b16 <rand_r>:
    6b16:	b9 cf       	rjmp	.-142    	; 0x6a8a <do_rand>

00006b18 <rand>:
    6b18:	80 e0       	ldi	r24, 0x00	; 0
    6b1a:	92 e0       	ldi	r25, 0x02	; 2
    6b1c:	b6 cf       	rjmp	.-148    	; 0x6a8a <do_rand>

00006b1e <srand>:
    6b1e:	a0 e0       	ldi	r26, 0x00	; 0
    6b20:	b0 e0       	ldi	r27, 0x00	; 0
    6b22:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    6b26:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6b2a:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    6b2e:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    6b32:	08 95       	ret

00006b34 <memcpy>:
    6b34:	fb 01       	movw	r30, r22
    6b36:	dc 01       	movw	r26, r24
    6b38:	02 c0       	rjmp	.+4      	; 0x6b3e <memcpy+0xa>
    6b3a:	01 90       	ld	r0, Z+
    6b3c:	0d 92       	st	X+, r0
    6b3e:	41 50       	subi	r20, 0x01	; 1
    6b40:	50 40       	sbci	r21, 0x00	; 0
    6b42:	d8 f7       	brcc	.-10     	; 0x6b3a <memcpy+0x6>
    6b44:	08 95       	ret

00006b46 <strchr>:
    6b46:	fc 01       	movw	r30, r24
    6b48:	81 91       	ld	r24, Z+
    6b4a:	86 17       	cp	r24, r22
    6b4c:	21 f0       	breq	.+8      	; 0x6b56 <strchr+0x10>
    6b4e:	88 23       	and	r24, r24
    6b50:	d9 f7       	brne	.-10     	; 0x6b48 <strchr+0x2>
    6b52:	99 27       	eor	r25, r25
    6b54:	08 95       	ret
    6b56:	31 97       	sbiw	r30, 0x01	; 1
    6b58:	cf 01       	movw	r24, r30
    6b5a:	08 95       	ret

00006b5c <strcpy>:
    6b5c:	fb 01       	movw	r30, r22
    6b5e:	dc 01       	movw	r26, r24
    6b60:	01 90       	ld	r0, Z+
    6b62:	0d 92       	st	X+, r0
    6b64:	00 20       	and	r0, r0
    6b66:	e1 f7       	brne	.-8      	; 0x6b60 <strcpy+0x4>
    6b68:	08 95       	ret

00006b6a <strncmp>:
    6b6a:	fb 01       	movw	r30, r22
    6b6c:	dc 01       	movw	r26, r24
    6b6e:	41 50       	subi	r20, 0x01	; 1
    6b70:	50 40       	sbci	r21, 0x00	; 0
    6b72:	30 f0       	brcs	.+12     	; 0x6b80 <strncmp+0x16>
    6b74:	8d 91       	ld	r24, X+
    6b76:	01 90       	ld	r0, Z+
    6b78:	80 19       	sub	r24, r0
    6b7a:	19 f4       	brne	.+6      	; 0x6b82 <strncmp+0x18>
    6b7c:	00 20       	and	r0, r0
    6b7e:	b9 f7       	brne	.-18     	; 0x6b6e <strncmp+0x4>
    6b80:	88 1b       	sub	r24, r24
    6b82:	99 0b       	sbc	r25, r25
    6b84:	08 95       	ret

00006b86 <strncpy>:
    6b86:	fb 01       	movw	r30, r22
    6b88:	dc 01       	movw	r26, r24
    6b8a:	41 50       	subi	r20, 0x01	; 1
    6b8c:	50 40       	sbci	r21, 0x00	; 0
    6b8e:	48 f0       	brcs	.+18     	; 0x6ba2 <strncpy+0x1c>
    6b90:	01 90       	ld	r0, Z+
    6b92:	0d 92       	st	X+, r0
    6b94:	00 20       	and	r0, r0
    6b96:	c9 f7       	brne	.-14     	; 0x6b8a <strncpy+0x4>
    6b98:	01 c0       	rjmp	.+2      	; 0x6b9c <strncpy+0x16>
    6b9a:	1d 92       	st	X+, r1
    6b9c:	41 50       	subi	r20, 0x01	; 1
    6b9e:	50 40       	sbci	r21, 0x00	; 0
    6ba0:	e0 f7       	brcc	.-8      	; 0x6b9a <strncpy+0x14>
    6ba2:	08 95       	ret

00006ba4 <strstr>:
    6ba4:	fb 01       	movw	r30, r22
    6ba6:	51 91       	ld	r21, Z+
    6ba8:	55 23       	and	r21, r21
    6baa:	a9 f0       	breq	.+42     	; 0x6bd6 <strstr+0x32>
    6bac:	bf 01       	movw	r22, r30
    6bae:	dc 01       	movw	r26, r24
    6bb0:	4d 91       	ld	r20, X+
    6bb2:	45 17       	cp	r20, r21
    6bb4:	41 11       	cpse	r20, r1
    6bb6:	e1 f7       	brne	.-8      	; 0x6bb0 <strstr+0xc>
    6bb8:	59 f4       	brne	.+22     	; 0x6bd0 <strstr+0x2c>
    6bba:	cd 01       	movw	r24, r26
    6bbc:	01 90       	ld	r0, Z+
    6bbe:	00 20       	and	r0, r0
    6bc0:	49 f0       	breq	.+18     	; 0x6bd4 <strstr+0x30>
    6bc2:	4d 91       	ld	r20, X+
    6bc4:	40 15       	cp	r20, r0
    6bc6:	41 11       	cpse	r20, r1
    6bc8:	c9 f3       	breq	.-14     	; 0x6bbc <strstr+0x18>
    6bca:	fb 01       	movw	r30, r22
    6bcc:	41 11       	cpse	r20, r1
    6bce:	ef cf       	rjmp	.-34     	; 0x6bae <strstr+0xa>
    6bd0:	81 e0       	ldi	r24, 0x01	; 1
    6bd2:	90 e0       	ldi	r25, 0x00	; 0
    6bd4:	01 97       	sbiw	r24, 0x01	; 1
    6bd6:	08 95       	ret

00006bd8 <printf_P>:
    6bd8:	0f 93       	push	r16
    6bda:	1f 93       	push	r17
    6bdc:	cf 93       	push	r28
    6bde:	df 93       	push	r29
    6be0:	cd b7       	in	r28, 0x3d	; 61
    6be2:	de b7       	in	r29, 0x3e	; 62
    6be4:	ae 01       	movw	r20, r28
    6be6:	48 5f       	subi	r20, 0xF8	; 248
    6be8:	5f 4f       	sbci	r21, 0xFF	; 255
    6bea:	da 01       	movw	r26, r20
    6bec:	6d 91       	ld	r22, X+
    6bee:	7d 91       	ld	r23, X+
    6bf0:	ad 01       	movw	r20, r26
    6bf2:	0b ec       	ldi	r16, 0xCB	; 203
    6bf4:	15 e2       	ldi	r17, 0x25	; 37
    6bf6:	f8 01       	movw	r30, r16
    6bf8:	82 81       	ldd	r24, Z+2	; 0x02
    6bfa:	93 81       	ldd	r25, Z+3	; 0x03
    6bfc:	dc 01       	movw	r26, r24
    6bfe:	13 96       	adiw	r26, 0x03	; 3
    6c00:	2c 91       	ld	r18, X
    6c02:	13 97       	sbiw	r26, 0x03	; 3
    6c04:	28 60       	ori	r18, 0x08	; 8
    6c06:	13 96       	adiw	r26, 0x03	; 3
    6c08:	2c 93       	st	X, r18
    6c0a:	5c d0       	rcall	.+184    	; 0x6cc4 <vfprintf>
    6c0c:	d8 01       	movw	r26, r16
    6c0e:	12 96       	adiw	r26, 0x02	; 2
    6c10:	ed 91       	ld	r30, X+
    6c12:	fc 91       	ld	r31, X
    6c14:	13 97       	sbiw	r26, 0x03	; 3
    6c16:	23 81       	ldd	r18, Z+3	; 0x03
    6c18:	27 7f       	andi	r18, 0xF7	; 247
    6c1a:	23 83       	std	Z+3, r18	; 0x03
    6c1c:	df 91       	pop	r29
    6c1e:	cf 91       	pop	r28
    6c20:	1f 91       	pop	r17
    6c22:	0f 91       	pop	r16
    6c24:	08 95       	ret

00006c26 <sprintf_P>:
    6c26:	0f 93       	push	r16
    6c28:	1f 93       	push	r17
    6c2a:	cf 93       	push	r28
    6c2c:	df 93       	push	r29
    6c2e:	cd b7       	in	r28, 0x3d	; 61
    6c30:	de b7       	in	r29, 0x3e	; 62
    6c32:	2e 97       	sbiw	r28, 0x0e	; 14
    6c34:	0f b6       	in	r0, 0x3f	; 63
    6c36:	f8 94       	cli
    6c38:	de bf       	out	0x3e, r29	; 62
    6c3a:	0f be       	out	0x3f, r0	; 63
    6c3c:	cd bf       	out	0x3d, r28	; 61
    6c3e:	0e 89       	ldd	r16, Y+22	; 0x16
    6c40:	1f 89       	ldd	r17, Y+23	; 0x17
    6c42:	8e e0       	ldi	r24, 0x0E	; 14
    6c44:	8c 83       	std	Y+4, r24	; 0x04
    6c46:	1a 83       	std	Y+2, r17	; 0x02
    6c48:	09 83       	std	Y+1, r16	; 0x01
    6c4a:	8f ef       	ldi	r24, 0xFF	; 255
    6c4c:	9f e7       	ldi	r25, 0x7F	; 127
    6c4e:	9e 83       	std	Y+6, r25	; 0x06
    6c50:	8d 83       	std	Y+5, r24	; 0x05
    6c52:	ae 01       	movw	r20, r28
    6c54:	46 5e       	subi	r20, 0xE6	; 230
    6c56:	5f 4f       	sbci	r21, 0xFF	; 255
    6c58:	68 8d       	ldd	r22, Y+24	; 0x18
    6c5a:	79 8d       	ldd	r23, Y+25	; 0x19
    6c5c:	ce 01       	movw	r24, r28
    6c5e:	01 96       	adiw	r24, 0x01	; 1
    6c60:	31 d0       	rcall	.+98     	; 0x6cc4 <vfprintf>
    6c62:	ef 81       	ldd	r30, Y+7	; 0x07
    6c64:	f8 85       	ldd	r31, Y+8	; 0x08
    6c66:	e0 0f       	add	r30, r16
    6c68:	f1 1f       	adc	r31, r17
    6c6a:	10 82       	st	Z, r1
    6c6c:	2e 96       	adiw	r28, 0x0e	; 14
    6c6e:	0f b6       	in	r0, 0x3f	; 63
    6c70:	f8 94       	cli
    6c72:	de bf       	out	0x3e, r29	; 62
    6c74:	0f be       	out	0x3f, r0	; 63
    6c76:	cd bf       	out	0x3d, r28	; 61
    6c78:	df 91       	pop	r29
    6c7a:	cf 91       	pop	r28
    6c7c:	1f 91       	pop	r17
    6c7e:	0f 91       	pop	r16
    6c80:	08 95       	ret

00006c82 <sscanf>:
    6c82:	cf 93       	push	r28
    6c84:	df 93       	push	r29
    6c86:	cd b7       	in	r28, 0x3d	; 61
    6c88:	de b7       	in	r29, 0x3e	; 62
    6c8a:	2e 97       	sbiw	r28, 0x0e	; 14
    6c8c:	0f b6       	in	r0, 0x3f	; 63
    6c8e:	f8 94       	cli
    6c90:	de bf       	out	0x3e, r29	; 62
    6c92:	0f be       	out	0x3f, r0	; 63
    6c94:	cd bf       	out	0x3d, r28	; 61
    6c96:	85 e0       	ldi	r24, 0x05	; 5
    6c98:	8c 83       	std	Y+4, r24	; 0x04
    6c9a:	8c 89       	ldd	r24, Y+20	; 0x14
    6c9c:	9d 89       	ldd	r25, Y+21	; 0x15
    6c9e:	9a 83       	std	Y+2, r25	; 0x02
    6ca0:	89 83       	std	Y+1, r24	; 0x01
    6ca2:	ae 01       	movw	r20, r28
    6ca4:	48 5e       	subi	r20, 0xE8	; 232
    6ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    6ca8:	6e 89       	ldd	r22, Y+22	; 0x16
    6caa:	7f 89       	ldd	r23, Y+23	; 0x17
    6cac:	ce 01       	movw	r24, r28
    6cae:	01 96       	adiw	r24, 0x01	; 1
    6cb0:	b8 d3       	rcall	.+1904   	; 0x7422 <vfscanf>
    6cb2:	2e 96       	adiw	r28, 0x0e	; 14
    6cb4:	0f b6       	in	r0, 0x3f	; 63
    6cb6:	f8 94       	cli
    6cb8:	de bf       	out	0x3e, r29	; 62
    6cba:	0f be       	out	0x3f, r0	; 63
    6cbc:	cd bf       	out	0x3d, r28	; 61
    6cbe:	df 91       	pop	r29
    6cc0:	cf 91       	pop	r28
    6cc2:	08 95       	ret

00006cc4 <vfprintf>:
    6cc4:	2f 92       	push	r2
    6cc6:	3f 92       	push	r3
    6cc8:	4f 92       	push	r4
    6cca:	5f 92       	push	r5
    6ccc:	6f 92       	push	r6
    6cce:	7f 92       	push	r7
    6cd0:	8f 92       	push	r8
    6cd2:	9f 92       	push	r9
    6cd4:	af 92       	push	r10
    6cd6:	bf 92       	push	r11
    6cd8:	cf 92       	push	r12
    6cda:	df 92       	push	r13
    6cdc:	ef 92       	push	r14
    6cde:	ff 92       	push	r15
    6ce0:	0f 93       	push	r16
    6ce2:	1f 93       	push	r17
    6ce4:	cf 93       	push	r28
    6ce6:	df 93       	push	r29
    6ce8:	cd b7       	in	r28, 0x3d	; 61
    6cea:	de b7       	in	r29, 0x3e	; 62
    6cec:	2b 97       	sbiw	r28, 0x0b	; 11
    6cee:	0f b6       	in	r0, 0x3f	; 63
    6cf0:	f8 94       	cli
    6cf2:	de bf       	out	0x3e, r29	; 62
    6cf4:	0f be       	out	0x3f, r0	; 63
    6cf6:	cd bf       	out	0x3d, r28	; 61
    6cf8:	6c 01       	movw	r12, r24
    6cfa:	7b 01       	movw	r14, r22
    6cfc:	8a 01       	movw	r16, r20
    6cfe:	fc 01       	movw	r30, r24
    6d00:	17 82       	std	Z+7, r1	; 0x07
    6d02:	16 82       	std	Z+6, r1	; 0x06
    6d04:	83 81       	ldd	r24, Z+3	; 0x03
    6d06:	81 ff       	sbrs	r24, 1
    6d08:	bf c1       	rjmp	.+894    	; 0x7088 <vfprintf+0x3c4>
    6d0a:	ce 01       	movw	r24, r28
    6d0c:	01 96       	adiw	r24, 0x01	; 1
    6d0e:	3c 01       	movw	r6, r24
    6d10:	f6 01       	movw	r30, r12
    6d12:	93 81       	ldd	r25, Z+3	; 0x03
    6d14:	f7 01       	movw	r30, r14
    6d16:	93 fd       	sbrc	r25, 3
    6d18:	85 91       	lpm	r24, Z+
    6d1a:	93 ff       	sbrs	r25, 3
    6d1c:	81 91       	ld	r24, Z+
    6d1e:	7f 01       	movw	r14, r30
    6d20:	88 23       	and	r24, r24
    6d22:	09 f4       	brne	.+2      	; 0x6d26 <vfprintf+0x62>
    6d24:	ad c1       	rjmp	.+858    	; 0x7080 <vfprintf+0x3bc>
    6d26:	85 32       	cpi	r24, 0x25	; 37
    6d28:	39 f4       	brne	.+14     	; 0x6d38 <vfprintf+0x74>
    6d2a:	93 fd       	sbrc	r25, 3
    6d2c:	85 91       	lpm	r24, Z+
    6d2e:	93 ff       	sbrs	r25, 3
    6d30:	81 91       	ld	r24, Z+
    6d32:	7f 01       	movw	r14, r30
    6d34:	85 32       	cpi	r24, 0x25	; 37
    6d36:	21 f4       	brne	.+8      	; 0x6d40 <vfprintf+0x7c>
    6d38:	b6 01       	movw	r22, r12
    6d3a:	90 e0       	ldi	r25, 0x00	; 0
    6d3c:	f0 d4       	rcall	.+2528   	; 0x771e <fputc>
    6d3e:	e8 cf       	rjmp	.-48     	; 0x6d10 <vfprintf+0x4c>
    6d40:	91 2c       	mov	r9, r1
    6d42:	21 2c       	mov	r2, r1
    6d44:	31 2c       	mov	r3, r1
    6d46:	ff e1       	ldi	r31, 0x1F	; 31
    6d48:	f3 15       	cp	r31, r3
    6d4a:	d8 f0       	brcs	.+54     	; 0x6d82 <vfprintf+0xbe>
    6d4c:	8b 32       	cpi	r24, 0x2B	; 43
    6d4e:	79 f0       	breq	.+30     	; 0x6d6e <vfprintf+0xaa>
    6d50:	38 f4       	brcc	.+14     	; 0x6d60 <vfprintf+0x9c>
    6d52:	80 32       	cpi	r24, 0x20	; 32
    6d54:	79 f0       	breq	.+30     	; 0x6d74 <vfprintf+0xb0>
    6d56:	83 32       	cpi	r24, 0x23	; 35
    6d58:	a1 f4       	brne	.+40     	; 0x6d82 <vfprintf+0xbe>
    6d5a:	23 2d       	mov	r18, r3
    6d5c:	20 61       	ori	r18, 0x10	; 16
    6d5e:	1d c0       	rjmp	.+58     	; 0x6d9a <vfprintf+0xd6>
    6d60:	8d 32       	cpi	r24, 0x2D	; 45
    6d62:	61 f0       	breq	.+24     	; 0x6d7c <vfprintf+0xb8>
    6d64:	80 33       	cpi	r24, 0x30	; 48
    6d66:	69 f4       	brne	.+26     	; 0x6d82 <vfprintf+0xbe>
    6d68:	23 2d       	mov	r18, r3
    6d6a:	21 60       	ori	r18, 0x01	; 1
    6d6c:	16 c0       	rjmp	.+44     	; 0x6d9a <vfprintf+0xd6>
    6d6e:	83 2d       	mov	r24, r3
    6d70:	82 60       	ori	r24, 0x02	; 2
    6d72:	38 2e       	mov	r3, r24
    6d74:	e3 2d       	mov	r30, r3
    6d76:	e4 60       	ori	r30, 0x04	; 4
    6d78:	3e 2e       	mov	r3, r30
    6d7a:	2a c0       	rjmp	.+84     	; 0x6dd0 <vfprintf+0x10c>
    6d7c:	f3 2d       	mov	r31, r3
    6d7e:	f8 60       	ori	r31, 0x08	; 8
    6d80:	1d c0       	rjmp	.+58     	; 0x6dbc <vfprintf+0xf8>
    6d82:	37 fc       	sbrc	r3, 7
    6d84:	2d c0       	rjmp	.+90     	; 0x6de0 <vfprintf+0x11c>
    6d86:	20 ed       	ldi	r18, 0xD0	; 208
    6d88:	28 0f       	add	r18, r24
    6d8a:	2a 30       	cpi	r18, 0x0A	; 10
    6d8c:	40 f0       	brcs	.+16     	; 0x6d9e <vfprintf+0xda>
    6d8e:	8e 32       	cpi	r24, 0x2E	; 46
    6d90:	b9 f4       	brne	.+46     	; 0x6dc0 <vfprintf+0xfc>
    6d92:	36 fc       	sbrc	r3, 6
    6d94:	75 c1       	rjmp	.+746    	; 0x7080 <vfprintf+0x3bc>
    6d96:	23 2d       	mov	r18, r3
    6d98:	20 64       	ori	r18, 0x40	; 64
    6d9a:	32 2e       	mov	r3, r18
    6d9c:	19 c0       	rjmp	.+50     	; 0x6dd0 <vfprintf+0x10c>
    6d9e:	36 fe       	sbrs	r3, 6
    6da0:	06 c0       	rjmp	.+12     	; 0x6dae <vfprintf+0xea>
    6da2:	8a e0       	ldi	r24, 0x0A	; 10
    6da4:	98 9e       	mul	r9, r24
    6da6:	20 0d       	add	r18, r0
    6da8:	11 24       	eor	r1, r1
    6daa:	92 2e       	mov	r9, r18
    6dac:	11 c0       	rjmp	.+34     	; 0x6dd0 <vfprintf+0x10c>
    6dae:	ea e0       	ldi	r30, 0x0A	; 10
    6db0:	2e 9e       	mul	r2, r30
    6db2:	20 0d       	add	r18, r0
    6db4:	11 24       	eor	r1, r1
    6db6:	22 2e       	mov	r2, r18
    6db8:	f3 2d       	mov	r31, r3
    6dba:	f0 62       	ori	r31, 0x20	; 32
    6dbc:	3f 2e       	mov	r3, r31
    6dbe:	08 c0       	rjmp	.+16     	; 0x6dd0 <vfprintf+0x10c>
    6dc0:	8c 36       	cpi	r24, 0x6C	; 108
    6dc2:	21 f4       	brne	.+8      	; 0x6dcc <vfprintf+0x108>
    6dc4:	83 2d       	mov	r24, r3
    6dc6:	80 68       	ori	r24, 0x80	; 128
    6dc8:	38 2e       	mov	r3, r24
    6dca:	02 c0       	rjmp	.+4      	; 0x6dd0 <vfprintf+0x10c>
    6dcc:	88 36       	cpi	r24, 0x68	; 104
    6dce:	41 f4       	brne	.+16     	; 0x6de0 <vfprintf+0x11c>
    6dd0:	f7 01       	movw	r30, r14
    6dd2:	93 fd       	sbrc	r25, 3
    6dd4:	85 91       	lpm	r24, Z+
    6dd6:	93 ff       	sbrs	r25, 3
    6dd8:	81 91       	ld	r24, Z+
    6dda:	7f 01       	movw	r14, r30
    6ddc:	81 11       	cpse	r24, r1
    6dde:	b3 cf       	rjmp	.-154    	; 0x6d46 <vfprintf+0x82>
    6de0:	98 2f       	mov	r25, r24
    6de2:	9f 7d       	andi	r25, 0xDF	; 223
    6de4:	95 54       	subi	r25, 0x45	; 69
    6de6:	93 30       	cpi	r25, 0x03	; 3
    6de8:	28 f4       	brcc	.+10     	; 0x6df4 <vfprintf+0x130>
    6dea:	0c 5f       	subi	r16, 0xFC	; 252
    6dec:	1f 4f       	sbci	r17, 0xFF	; 255
    6dee:	9f e3       	ldi	r25, 0x3F	; 63
    6df0:	99 83       	std	Y+1, r25	; 0x01
    6df2:	0d c0       	rjmp	.+26     	; 0x6e0e <vfprintf+0x14a>
    6df4:	83 36       	cpi	r24, 0x63	; 99
    6df6:	31 f0       	breq	.+12     	; 0x6e04 <vfprintf+0x140>
    6df8:	83 37       	cpi	r24, 0x73	; 115
    6dfa:	71 f0       	breq	.+28     	; 0x6e18 <vfprintf+0x154>
    6dfc:	83 35       	cpi	r24, 0x53	; 83
    6dfe:	09 f0       	breq	.+2      	; 0x6e02 <vfprintf+0x13e>
    6e00:	55 c0       	rjmp	.+170    	; 0x6eac <vfprintf+0x1e8>
    6e02:	20 c0       	rjmp	.+64     	; 0x6e44 <vfprintf+0x180>
    6e04:	f8 01       	movw	r30, r16
    6e06:	80 81       	ld	r24, Z
    6e08:	89 83       	std	Y+1, r24	; 0x01
    6e0a:	0e 5f       	subi	r16, 0xFE	; 254
    6e0c:	1f 4f       	sbci	r17, 0xFF	; 255
    6e0e:	88 24       	eor	r8, r8
    6e10:	83 94       	inc	r8
    6e12:	91 2c       	mov	r9, r1
    6e14:	53 01       	movw	r10, r6
    6e16:	12 c0       	rjmp	.+36     	; 0x6e3c <vfprintf+0x178>
    6e18:	28 01       	movw	r4, r16
    6e1a:	f2 e0       	ldi	r31, 0x02	; 2
    6e1c:	4f 0e       	add	r4, r31
    6e1e:	51 1c       	adc	r5, r1
    6e20:	f8 01       	movw	r30, r16
    6e22:	a0 80       	ld	r10, Z
    6e24:	b1 80       	ldd	r11, Z+1	; 0x01
    6e26:	36 fe       	sbrs	r3, 6
    6e28:	03 c0       	rjmp	.+6      	; 0x6e30 <vfprintf+0x16c>
    6e2a:	69 2d       	mov	r22, r9
    6e2c:	70 e0       	ldi	r23, 0x00	; 0
    6e2e:	02 c0       	rjmp	.+4      	; 0x6e34 <vfprintf+0x170>
    6e30:	6f ef       	ldi	r22, 0xFF	; 255
    6e32:	7f ef       	ldi	r23, 0xFF	; 255
    6e34:	c5 01       	movw	r24, r10
    6e36:	2a d4       	rcall	.+2132   	; 0x768c <strnlen>
    6e38:	4c 01       	movw	r8, r24
    6e3a:	82 01       	movw	r16, r4
    6e3c:	f3 2d       	mov	r31, r3
    6e3e:	ff 77       	andi	r31, 0x7F	; 127
    6e40:	3f 2e       	mov	r3, r31
    6e42:	15 c0       	rjmp	.+42     	; 0x6e6e <vfprintf+0x1aa>
    6e44:	28 01       	movw	r4, r16
    6e46:	22 e0       	ldi	r18, 0x02	; 2
    6e48:	42 0e       	add	r4, r18
    6e4a:	51 1c       	adc	r5, r1
    6e4c:	f8 01       	movw	r30, r16
    6e4e:	a0 80       	ld	r10, Z
    6e50:	b1 80       	ldd	r11, Z+1	; 0x01
    6e52:	36 fe       	sbrs	r3, 6
    6e54:	03 c0       	rjmp	.+6      	; 0x6e5c <vfprintf+0x198>
    6e56:	69 2d       	mov	r22, r9
    6e58:	70 e0       	ldi	r23, 0x00	; 0
    6e5a:	02 c0       	rjmp	.+4      	; 0x6e60 <vfprintf+0x19c>
    6e5c:	6f ef       	ldi	r22, 0xFF	; 255
    6e5e:	7f ef       	ldi	r23, 0xFF	; 255
    6e60:	c5 01       	movw	r24, r10
    6e62:	09 d4       	rcall	.+2066   	; 0x7676 <strnlen_P>
    6e64:	4c 01       	movw	r8, r24
    6e66:	f3 2d       	mov	r31, r3
    6e68:	f0 68       	ori	r31, 0x80	; 128
    6e6a:	3f 2e       	mov	r3, r31
    6e6c:	82 01       	movw	r16, r4
    6e6e:	33 fc       	sbrc	r3, 3
    6e70:	19 c0       	rjmp	.+50     	; 0x6ea4 <vfprintf+0x1e0>
    6e72:	82 2d       	mov	r24, r2
    6e74:	90 e0       	ldi	r25, 0x00	; 0
    6e76:	88 16       	cp	r8, r24
    6e78:	99 06       	cpc	r9, r25
    6e7a:	a0 f4       	brcc	.+40     	; 0x6ea4 <vfprintf+0x1e0>
    6e7c:	b6 01       	movw	r22, r12
    6e7e:	80 e2       	ldi	r24, 0x20	; 32
    6e80:	90 e0       	ldi	r25, 0x00	; 0
    6e82:	4d d4       	rcall	.+2202   	; 0x771e <fputc>
    6e84:	2a 94       	dec	r2
    6e86:	f5 cf       	rjmp	.-22     	; 0x6e72 <vfprintf+0x1ae>
    6e88:	f5 01       	movw	r30, r10
    6e8a:	37 fc       	sbrc	r3, 7
    6e8c:	85 91       	lpm	r24, Z+
    6e8e:	37 fe       	sbrs	r3, 7
    6e90:	81 91       	ld	r24, Z+
    6e92:	5f 01       	movw	r10, r30
    6e94:	b6 01       	movw	r22, r12
    6e96:	90 e0       	ldi	r25, 0x00	; 0
    6e98:	42 d4       	rcall	.+2180   	; 0x771e <fputc>
    6e9a:	21 10       	cpse	r2, r1
    6e9c:	2a 94       	dec	r2
    6e9e:	21 e0       	ldi	r18, 0x01	; 1
    6ea0:	82 1a       	sub	r8, r18
    6ea2:	91 08       	sbc	r9, r1
    6ea4:	81 14       	cp	r8, r1
    6ea6:	91 04       	cpc	r9, r1
    6ea8:	79 f7       	brne	.-34     	; 0x6e88 <vfprintf+0x1c4>
    6eaa:	e1 c0       	rjmp	.+450    	; 0x706e <vfprintf+0x3aa>
    6eac:	84 36       	cpi	r24, 0x64	; 100
    6eae:	11 f0       	breq	.+4      	; 0x6eb4 <vfprintf+0x1f0>
    6eb0:	89 36       	cpi	r24, 0x69	; 105
    6eb2:	39 f5       	brne	.+78     	; 0x6f02 <vfprintf+0x23e>
    6eb4:	f8 01       	movw	r30, r16
    6eb6:	37 fe       	sbrs	r3, 7
    6eb8:	07 c0       	rjmp	.+14     	; 0x6ec8 <vfprintf+0x204>
    6eba:	60 81       	ld	r22, Z
    6ebc:	71 81       	ldd	r23, Z+1	; 0x01
    6ebe:	82 81       	ldd	r24, Z+2	; 0x02
    6ec0:	93 81       	ldd	r25, Z+3	; 0x03
    6ec2:	0c 5f       	subi	r16, 0xFC	; 252
    6ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    6ec6:	08 c0       	rjmp	.+16     	; 0x6ed8 <vfprintf+0x214>
    6ec8:	60 81       	ld	r22, Z
    6eca:	71 81       	ldd	r23, Z+1	; 0x01
    6ecc:	07 2e       	mov	r0, r23
    6ece:	00 0c       	add	r0, r0
    6ed0:	88 0b       	sbc	r24, r24
    6ed2:	99 0b       	sbc	r25, r25
    6ed4:	0e 5f       	subi	r16, 0xFE	; 254
    6ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    6ed8:	f3 2d       	mov	r31, r3
    6eda:	ff 76       	andi	r31, 0x6F	; 111
    6edc:	3f 2e       	mov	r3, r31
    6ede:	97 ff       	sbrs	r25, 7
    6ee0:	09 c0       	rjmp	.+18     	; 0x6ef4 <vfprintf+0x230>
    6ee2:	90 95       	com	r25
    6ee4:	80 95       	com	r24
    6ee6:	70 95       	com	r23
    6ee8:	61 95       	neg	r22
    6eea:	7f 4f       	sbci	r23, 0xFF	; 255
    6eec:	8f 4f       	sbci	r24, 0xFF	; 255
    6eee:	9f 4f       	sbci	r25, 0xFF	; 255
    6ef0:	f0 68       	ori	r31, 0x80	; 128
    6ef2:	3f 2e       	mov	r3, r31
    6ef4:	2a e0       	ldi	r18, 0x0A	; 10
    6ef6:	30 e0       	ldi	r19, 0x00	; 0
    6ef8:	a3 01       	movw	r20, r6
    6efa:	66 d4       	rcall	.+2252   	; 0x77c8 <__ultoa_invert>
    6efc:	88 2e       	mov	r8, r24
    6efe:	86 18       	sub	r8, r6
    6f00:	44 c0       	rjmp	.+136    	; 0x6f8a <vfprintf+0x2c6>
    6f02:	85 37       	cpi	r24, 0x75	; 117
    6f04:	31 f4       	brne	.+12     	; 0x6f12 <vfprintf+0x24e>
    6f06:	23 2d       	mov	r18, r3
    6f08:	2f 7e       	andi	r18, 0xEF	; 239
    6f0a:	b2 2e       	mov	r11, r18
    6f0c:	2a e0       	ldi	r18, 0x0A	; 10
    6f0e:	30 e0       	ldi	r19, 0x00	; 0
    6f10:	25 c0       	rjmp	.+74     	; 0x6f5c <vfprintf+0x298>
    6f12:	93 2d       	mov	r25, r3
    6f14:	99 7f       	andi	r25, 0xF9	; 249
    6f16:	b9 2e       	mov	r11, r25
    6f18:	8f 36       	cpi	r24, 0x6F	; 111
    6f1a:	c1 f0       	breq	.+48     	; 0x6f4c <vfprintf+0x288>
    6f1c:	18 f4       	brcc	.+6      	; 0x6f24 <vfprintf+0x260>
    6f1e:	88 35       	cpi	r24, 0x58	; 88
    6f20:	79 f0       	breq	.+30     	; 0x6f40 <vfprintf+0x27c>
    6f22:	ae c0       	rjmp	.+348    	; 0x7080 <vfprintf+0x3bc>
    6f24:	80 37       	cpi	r24, 0x70	; 112
    6f26:	19 f0       	breq	.+6      	; 0x6f2e <vfprintf+0x26a>
    6f28:	88 37       	cpi	r24, 0x78	; 120
    6f2a:	21 f0       	breq	.+8      	; 0x6f34 <vfprintf+0x270>
    6f2c:	a9 c0       	rjmp	.+338    	; 0x7080 <vfprintf+0x3bc>
    6f2e:	e9 2f       	mov	r30, r25
    6f30:	e0 61       	ori	r30, 0x10	; 16
    6f32:	be 2e       	mov	r11, r30
    6f34:	b4 fe       	sbrs	r11, 4
    6f36:	0d c0       	rjmp	.+26     	; 0x6f52 <vfprintf+0x28e>
    6f38:	fb 2d       	mov	r31, r11
    6f3a:	f4 60       	ori	r31, 0x04	; 4
    6f3c:	bf 2e       	mov	r11, r31
    6f3e:	09 c0       	rjmp	.+18     	; 0x6f52 <vfprintf+0x28e>
    6f40:	34 fe       	sbrs	r3, 4
    6f42:	0a c0       	rjmp	.+20     	; 0x6f58 <vfprintf+0x294>
    6f44:	29 2f       	mov	r18, r25
    6f46:	26 60       	ori	r18, 0x06	; 6
    6f48:	b2 2e       	mov	r11, r18
    6f4a:	06 c0       	rjmp	.+12     	; 0x6f58 <vfprintf+0x294>
    6f4c:	28 e0       	ldi	r18, 0x08	; 8
    6f4e:	30 e0       	ldi	r19, 0x00	; 0
    6f50:	05 c0       	rjmp	.+10     	; 0x6f5c <vfprintf+0x298>
    6f52:	20 e1       	ldi	r18, 0x10	; 16
    6f54:	30 e0       	ldi	r19, 0x00	; 0
    6f56:	02 c0       	rjmp	.+4      	; 0x6f5c <vfprintf+0x298>
    6f58:	20 e1       	ldi	r18, 0x10	; 16
    6f5a:	32 e0       	ldi	r19, 0x02	; 2
    6f5c:	f8 01       	movw	r30, r16
    6f5e:	b7 fe       	sbrs	r11, 7
    6f60:	07 c0       	rjmp	.+14     	; 0x6f70 <vfprintf+0x2ac>
    6f62:	60 81       	ld	r22, Z
    6f64:	71 81       	ldd	r23, Z+1	; 0x01
    6f66:	82 81       	ldd	r24, Z+2	; 0x02
    6f68:	93 81       	ldd	r25, Z+3	; 0x03
    6f6a:	0c 5f       	subi	r16, 0xFC	; 252
    6f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    6f6e:	06 c0       	rjmp	.+12     	; 0x6f7c <vfprintf+0x2b8>
    6f70:	60 81       	ld	r22, Z
    6f72:	71 81       	ldd	r23, Z+1	; 0x01
    6f74:	80 e0       	ldi	r24, 0x00	; 0
    6f76:	90 e0       	ldi	r25, 0x00	; 0
    6f78:	0e 5f       	subi	r16, 0xFE	; 254
    6f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    6f7c:	a3 01       	movw	r20, r6
    6f7e:	24 d4       	rcall	.+2120   	; 0x77c8 <__ultoa_invert>
    6f80:	88 2e       	mov	r8, r24
    6f82:	86 18       	sub	r8, r6
    6f84:	fb 2d       	mov	r31, r11
    6f86:	ff 77       	andi	r31, 0x7F	; 127
    6f88:	3f 2e       	mov	r3, r31
    6f8a:	36 fe       	sbrs	r3, 6
    6f8c:	0d c0       	rjmp	.+26     	; 0x6fa8 <vfprintf+0x2e4>
    6f8e:	23 2d       	mov	r18, r3
    6f90:	2e 7f       	andi	r18, 0xFE	; 254
    6f92:	a2 2e       	mov	r10, r18
    6f94:	89 14       	cp	r8, r9
    6f96:	58 f4       	brcc	.+22     	; 0x6fae <vfprintf+0x2ea>
    6f98:	34 fe       	sbrs	r3, 4
    6f9a:	0b c0       	rjmp	.+22     	; 0x6fb2 <vfprintf+0x2ee>
    6f9c:	32 fc       	sbrc	r3, 2
    6f9e:	09 c0       	rjmp	.+18     	; 0x6fb2 <vfprintf+0x2ee>
    6fa0:	83 2d       	mov	r24, r3
    6fa2:	8e 7e       	andi	r24, 0xEE	; 238
    6fa4:	a8 2e       	mov	r10, r24
    6fa6:	05 c0       	rjmp	.+10     	; 0x6fb2 <vfprintf+0x2ee>
    6fa8:	b8 2c       	mov	r11, r8
    6faa:	a3 2c       	mov	r10, r3
    6fac:	03 c0       	rjmp	.+6      	; 0x6fb4 <vfprintf+0x2f0>
    6fae:	b8 2c       	mov	r11, r8
    6fb0:	01 c0       	rjmp	.+2      	; 0x6fb4 <vfprintf+0x2f0>
    6fb2:	b9 2c       	mov	r11, r9
    6fb4:	a4 fe       	sbrs	r10, 4
    6fb6:	0f c0       	rjmp	.+30     	; 0x6fd6 <vfprintf+0x312>
    6fb8:	fe 01       	movw	r30, r28
    6fba:	e8 0d       	add	r30, r8
    6fbc:	f1 1d       	adc	r31, r1
    6fbe:	80 81       	ld	r24, Z
    6fc0:	80 33       	cpi	r24, 0x30	; 48
    6fc2:	21 f4       	brne	.+8      	; 0x6fcc <vfprintf+0x308>
    6fc4:	9a 2d       	mov	r25, r10
    6fc6:	99 7e       	andi	r25, 0xE9	; 233
    6fc8:	a9 2e       	mov	r10, r25
    6fca:	09 c0       	rjmp	.+18     	; 0x6fde <vfprintf+0x31a>
    6fcc:	a2 fe       	sbrs	r10, 2
    6fce:	06 c0       	rjmp	.+12     	; 0x6fdc <vfprintf+0x318>
    6fd0:	b3 94       	inc	r11
    6fd2:	b3 94       	inc	r11
    6fd4:	04 c0       	rjmp	.+8      	; 0x6fde <vfprintf+0x31a>
    6fd6:	8a 2d       	mov	r24, r10
    6fd8:	86 78       	andi	r24, 0x86	; 134
    6fda:	09 f0       	breq	.+2      	; 0x6fde <vfprintf+0x31a>
    6fdc:	b3 94       	inc	r11
    6fde:	a3 fc       	sbrc	r10, 3
    6fe0:	10 c0       	rjmp	.+32     	; 0x7002 <vfprintf+0x33e>
    6fe2:	a0 fe       	sbrs	r10, 0
    6fe4:	06 c0       	rjmp	.+12     	; 0x6ff2 <vfprintf+0x32e>
    6fe6:	b2 14       	cp	r11, r2
    6fe8:	80 f4       	brcc	.+32     	; 0x700a <vfprintf+0x346>
    6fea:	28 0c       	add	r2, r8
    6fec:	92 2c       	mov	r9, r2
    6fee:	9b 18       	sub	r9, r11
    6ff0:	0d c0       	rjmp	.+26     	; 0x700c <vfprintf+0x348>
    6ff2:	b2 14       	cp	r11, r2
    6ff4:	58 f4       	brcc	.+22     	; 0x700c <vfprintf+0x348>
    6ff6:	b6 01       	movw	r22, r12
    6ff8:	80 e2       	ldi	r24, 0x20	; 32
    6ffa:	90 e0       	ldi	r25, 0x00	; 0
    6ffc:	90 d3       	rcall	.+1824   	; 0x771e <fputc>
    6ffe:	b3 94       	inc	r11
    7000:	f8 cf       	rjmp	.-16     	; 0x6ff2 <vfprintf+0x32e>
    7002:	b2 14       	cp	r11, r2
    7004:	18 f4       	brcc	.+6      	; 0x700c <vfprintf+0x348>
    7006:	2b 18       	sub	r2, r11
    7008:	02 c0       	rjmp	.+4      	; 0x700e <vfprintf+0x34a>
    700a:	98 2c       	mov	r9, r8
    700c:	21 2c       	mov	r2, r1
    700e:	a4 fe       	sbrs	r10, 4
    7010:	0f c0       	rjmp	.+30     	; 0x7030 <vfprintf+0x36c>
    7012:	b6 01       	movw	r22, r12
    7014:	80 e3       	ldi	r24, 0x30	; 48
    7016:	90 e0       	ldi	r25, 0x00	; 0
    7018:	82 d3       	rcall	.+1796   	; 0x771e <fputc>
    701a:	a2 fe       	sbrs	r10, 2
    701c:	16 c0       	rjmp	.+44     	; 0x704a <vfprintf+0x386>
    701e:	a1 fc       	sbrc	r10, 1
    7020:	03 c0       	rjmp	.+6      	; 0x7028 <vfprintf+0x364>
    7022:	88 e7       	ldi	r24, 0x78	; 120
    7024:	90 e0       	ldi	r25, 0x00	; 0
    7026:	02 c0       	rjmp	.+4      	; 0x702c <vfprintf+0x368>
    7028:	88 e5       	ldi	r24, 0x58	; 88
    702a:	90 e0       	ldi	r25, 0x00	; 0
    702c:	b6 01       	movw	r22, r12
    702e:	0c c0       	rjmp	.+24     	; 0x7048 <vfprintf+0x384>
    7030:	8a 2d       	mov	r24, r10
    7032:	86 78       	andi	r24, 0x86	; 134
    7034:	51 f0       	breq	.+20     	; 0x704a <vfprintf+0x386>
    7036:	a1 fe       	sbrs	r10, 1
    7038:	02 c0       	rjmp	.+4      	; 0x703e <vfprintf+0x37a>
    703a:	8b e2       	ldi	r24, 0x2B	; 43
    703c:	01 c0       	rjmp	.+2      	; 0x7040 <vfprintf+0x37c>
    703e:	80 e2       	ldi	r24, 0x20	; 32
    7040:	a7 fc       	sbrc	r10, 7
    7042:	8d e2       	ldi	r24, 0x2D	; 45
    7044:	b6 01       	movw	r22, r12
    7046:	90 e0       	ldi	r25, 0x00	; 0
    7048:	6a d3       	rcall	.+1748   	; 0x771e <fputc>
    704a:	89 14       	cp	r8, r9
    704c:	30 f4       	brcc	.+12     	; 0x705a <vfprintf+0x396>
    704e:	b6 01       	movw	r22, r12
    7050:	80 e3       	ldi	r24, 0x30	; 48
    7052:	90 e0       	ldi	r25, 0x00	; 0
    7054:	64 d3       	rcall	.+1736   	; 0x771e <fputc>
    7056:	9a 94       	dec	r9
    7058:	f8 cf       	rjmp	.-16     	; 0x704a <vfprintf+0x386>
    705a:	8a 94       	dec	r8
    705c:	f3 01       	movw	r30, r6
    705e:	e8 0d       	add	r30, r8
    7060:	f1 1d       	adc	r31, r1
    7062:	80 81       	ld	r24, Z
    7064:	b6 01       	movw	r22, r12
    7066:	90 e0       	ldi	r25, 0x00	; 0
    7068:	5a d3       	rcall	.+1716   	; 0x771e <fputc>
    706a:	81 10       	cpse	r8, r1
    706c:	f6 cf       	rjmp	.-20     	; 0x705a <vfprintf+0x396>
    706e:	22 20       	and	r2, r2
    7070:	09 f4       	brne	.+2      	; 0x7074 <vfprintf+0x3b0>
    7072:	4e ce       	rjmp	.-868    	; 0x6d10 <vfprintf+0x4c>
    7074:	b6 01       	movw	r22, r12
    7076:	80 e2       	ldi	r24, 0x20	; 32
    7078:	90 e0       	ldi	r25, 0x00	; 0
    707a:	51 d3       	rcall	.+1698   	; 0x771e <fputc>
    707c:	2a 94       	dec	r2
    707e:	f7 cf       	rjmp	.-18     	; 0x706e <vfprintf+0x3aa>
    7080:	f6 01       	movw	r30, r12
    7082:	86 81       	ldd	r24, Z+6	; 0x06
    7084:	97 81       	ldd	r25, Z+7	; 0x07
    7086:	02 c0       	rjmp	.+4      	; 0x708c <vfprintf+0x3c8>
    7088:	8f ef       	ldi	r24, 0xFF	; 255
    708a:	9f ef       	ldi	r25, 0xFF	; 255
    708c:	2b 96       	adiw	r28, 0x0b	; 11
    708e:	0f b6       	in	r0, 0x3f	; 63
    7090:	f8 94       	cli
    7092:	de bf       	out	0x3e, r29	; 62
    7094:	0f be       	out	0x3f, r0	; 63
    7096:	cd bf       	out	0x3d, r28	; 61
    7098:	df 91       	pop	r29
    709a:	cf 91       	pop	r28
    709c:	1f 91       	pop	r17
    709e:	0f 91       	pop	r16
    70a0:	ff 90       	pop	r15
    70a2:	ef 90       	pop	r14
    70a4:	df 90       	pop	r13
    70a6:	cf 90       	pop	r12
    70a8:	bf 90       	pop	r11
    70aa:	af 90       	pop	r10
    70ac:	9f 90       	pop	r9
    70ae:	8f 90       	pop	r8
    70b0:	7f 90       	pop	r7
    70b2:	6f 90       	pop	r6
    70b4:	5f 90       	pop	r5
    70b6:	4f 90       	pop	r4
    70b8:	3f 90       	pop	r3
    70ba:	2f 90       	pop	r2
    70bc:	08 95       	ret

000070be <putval>:
    70be:	20 fd       	sbrc	r18, 0
    70c0:	09 c0       	rjmp	.+18     	; 0x70d4 <putval+0x16>
    70c2:	fc 01       	movw	r30, r24
    70c4:	23 fd       	sbrc	r18, 3
    70c6:	05 c0       	rjmp	.+10     	; 0x70d2 <putval+0x14>
    70c8:	22 ff       	sbrs	r18, 2
    70ca:	02 c0       	rjmp	.+4      	; 0x70d0 <putval+0x12>
    70cc:	73 83       	std	Z+3, r23	; 0x03
    70ce:	62 83       	std	Z+2, r22	; 0x02
    70d0:	51 83       	std	Z+1, r21	; 0x01
    70d2:	40 83       	st	Z, r20
    70d4:	08 95       	ret

000070d6 <mulacc>:
    70d6:	44 fd       	sbrc	r20, 4
    70d8:	17 c0       	rjmp	.+46     	; 0x7108 <mulacc+0x32>
    70da:	46 fd       	sbrc	r20, 6
    70dc:	17 c0       	rjmp	.+46     	; 0x710c <mulacc+0x36>
    70de:	ab 01       	movw	r20, r22
    70e0:	bc 01       	movw	r22, r24
    70e2:	da 01       	movw	r26, r20
    70e4:	fb 01       	movw	r30, r22
    70e6:	aa 0f       	add	r26, r26
    70e8:	bb 1f       	adc	r27, r27
    70ea:	ee 1f       	adc	r30, r30
    70ec:	ff 1f       	adc	r31, r31
    70ee:	10 94       	com	r1
    70f0:	d1 f7       	brne	.-12     	; 0x70e6 <mulacc+0x10>
    70f2:	4a 0f       	add	r20, r26
    70f4:	5b 1f       	adc	r21, r27
    70f6:	6e 1f       	adc	r22, r30
    70f8:	7f 1f       	adc	r23, r31
    70fa:	cb 01       	movw	r24, r22
    70fc:	ba 01       	movw	r22, r20
    70fe:	66 0f       	add	r22, r22
    7100:	77 1f       	adc	r23, r23
    7102:	88 1f       	adc	r24, r24
    7104:	99 1f       	adc	r25, r25
    7106:	09 c0       	rjmp	.+18     	; 0x711a <mulacc+0x44>
    7108:	33 e0       	ldi	r19, 0x03	; 3
    710a:	01 c0       	rjmp	.+2      	; 0x710e <mulacc+0x38>
    710c:	34 e0       	ldi	r19, 0x04	; 4
    710e:	66 0f       	add	r22, r22
    7110:	77 1f       	adc	r23, r23
    7112:	88 1f       	adc	r24, r24
    7114:	99 1f       	adc	r25, r25
    7116:	31 50       	subi	r19, 0x01	; 1
    7118:	d1 f7       	brne	.-12     	; 0x710e <mulacc+0x38>
    711a:	62 0f       	add	r22, r18
    711c:	71 1d       	adc	r23, r1
    711e:	81 1d       	adc	r24, r1
    7120:	91 1d       	adc	r25, r1
    7122:	08 95       	ret

00007124 <skip_spaces>:
    7124:	0f 93       	push	r16
    7126:	1f 93       	push	r17
    7128:	cf 93       	push	r28
    712a:	df 93       	push	r29
    712c:	8c 01       	movw	r16, r24
    712e:	c8 01       	movw	r24, r16
    7130:	b8 d2       	rcall	.+1392   	; 0x76a2 <fgetc>
    7132:	ec 01       	movw	r28, r24
    7134:	97 fd       	sbrc	r25, 7
    7136:	06 c0       	rjmp	.+12     	; 0x7144 <skip_spaces+0x20>
    7138:	8b d2       	rcall	.+1302   	; 0x7650 <isspace>
    713a:	89 2b       	or	r24, r25
    713c:	c1 f7       	brne	.-16     	; 0x712e <skip_spaces+0xa>
    713e:	b8 01       	movw	r22, r16
    7140:	ce 01       	movw	r24, r28
    7142:	29 d3       	rcall	.+1618   	; 0x7796 <ungetc>
    7144:	ce 01       	movw	r24, r28
    7146:	df 91       	pop	r29
    7148:	cf 91       	pop	r28
    714a:	1f 91       	pop	r17
    714c:	0f 91       	pop	r16
    714e:	08 95       	ret

00007150 <conv_int>:
    7150:	8f 92       	push	r8
    7152:	9f 92       	push	r9
    7154:	af 92       	push	r10
    7156:	bf 92       	push	r11
    7158:	ef 92       	push	r14
    715a:	ff 92       	push	r15
    715c:	0f 93       	push	r16
    715e:	1f 93       	push	r17
    7160:	cf 93       	push	r28
    7162:	df 93       	push	r29
    7164:	8c 01       	movw	r16, r24
    7166:	d6 2f       	mov	r29, r22
    7168:	7a 01       	movw	r14, r20
    716a:	b2 2e       	mov	r11, r18
    716c:	9a d2       	rcall	.+1332   	; 0x76a2 <fgetc>
    716e:	9c 01       	movw	r18, r24
    7170:	33 27       	eor	r19, r19
    7172:	2b 32       	cpi	r18, 0x2B	; 43
    7174:	31 05       	cpc	r19, r1
    7176:	31 f0       	breq	.+12     	; 0x7184 <conv_int+0x34>
    7178:	2d 32       	cpi	r18, 0x2D	; 45
    717a:	31 05       	cpc	r19, r1
    717c:	59 f4       	brne	.+22     	; 0x7194 <conv_int+0x44>
    717e:	8b 2d       	mov	r24, r11
    7180:	80 68       	ori	r24, 0x80	; 128
    7182:	b8 2e       	mov	r11, r24
    7184:	d1 50       	subi	r29, 0x01	; 1
    7186:	11 f4       	brne	.+4      	; 0x718c <conv_int+0x3c>
    7188:	80 e0       	ldi	r24, 0x00	; 0
    718a:	61 c0       	rjmp	.+194    	; 0x724e <conv_int+0xfe>
    718c:	c8 01       	movw	r24, r16
    718e:	89 d2       	rcall	.+1298   	; 0x76a2 <fgetc>
    7190:	97 fd       	sbrc	r25, 7
    7192:	fa cf       	rjmp	.-12     	; 0x7188 <conv_int+0x38>
    7194:	cb 2d       	mov	r28, r11
    7196:	cd 7f       	andi	r28, 0xFD	; 253
    7198:	2b 2d       	mov	r18, r11
    719a:	20 73       	andi	r18, 0x30	; 48
    719c:	f9 f4       	brne	.+62     	; 0x71dc <conv_int+0x8c>
    719e:	80 33       	cpi	r24, 0x30	; 48
    71a0:	e9 f4       	brne	.+58     	; 0x71dc <conv_int+0x8c>
    71a2:	aa 24       	eor	r10, r10
    71a4:	aa 94       	dec	r10
    71a6:	ad 0e       	add	r10, r29
    71a8:	09 f4       	brne	.+2      	; 0x71ac <conv_int+0x5c>
    71aa:	3e c0       	rjmp	.+124    	; 0x7228 <conv_int+0xd8>
    71ac:	c8 01       	movw	r24, r16
    71ae:	79 d2       	rcall	.+1266   	; 0x76a2 <fgetc>
    71b0:	97 fd       	sbrc	r25, 7
    71b2:	3a c0       	rjmp	.+116    	; 0x7228 <conv_int+0xd8>
    71b4:	9c 01       	movw	r18, r24
    71b6:	2f 7d       	andi	r18, 0xDF	; 223
    71b8:	33 27       	eor	r19, r19
    71ba:	28 35       	cpi	r18, 0x58	; 88
    71bc:	31 05       	cpc	r19, r1
    71be:	41 f4       	brne	.+16     	; 0x71d0 <conv_int+0x80>
    71c0:	c2 64       	ori	r28, 0x42	; 66
    71c2:	d2 50       	subi	r29, 0x02	; 2
    71c4:	89 f1       	breq	.+98     	; 0x7228 <conv_int+0xd8>
    71c6:	c8 01       	movw	r24, r16
    71c8:	6c d2       	rcall	.+1240   	; 0x76a2 <fgetc>
    71ca:	97 ff       	sbrs	r25, 7
    71cc:	07 c0       	rjmp	.+14     	; 0x71dc <conv_int+0x8c>
    71ce:	2c c0       	rjmp	.+88     	; 0x7228 <conv_int+0xd8>
    71d0:	b6 fe       	sbrs	r11, 6
    71d2:	02 c0       	rjmp	.+4      	; 0x71d8 <conv_int+0x88>
    71d4:	c2 60       	ori	r28, 0x02	; 2
    71d6:	01 c0       	rjmp	.+2      	; 0x71da <conv_int+0x8a>
    71d8:	c2 61       	ori	r28, 0x12	; 18
    71da:	da 2d       	mov	r29, r10
    71dc:	81 2c       	mov	r8, r1
    71de:	91 2c       	mov	r9, r1
    71e0:	54 01       	movw	r10, r8
    71e2:	20 ed       	ldi	r18, 0xD0	; 208
    71e4:	28 0f       	add	r18, r24
    71e6:	28 30       	cpi	r18, 0x08	; 8
    71e8:	78 f0       	brcs	.+30     	; 0x7208 <conv_int+0xb8>
    71ea:	c4 ff       	sbrs	r28, 4
    71ec:	03 c0       	rjmp	.+6      	; 0x71f4 <conv_int+0xa4>
    71ee:	b8 01       	movw	r22, r16
    71f0:	d2 d2       	rcall	.+1444   	; 0x7796 <ungetc>
    71f2:	17 c0       	rjmp	.+46     	; 0x7222 <conv_int+0xd2>
    71f4:	2a 30       	cpi	r18, 0x0A	; 10
    71f6:	40 f0       	brcs	.+16     	; 0x7208 <conv_int+0xb8>
    71f8:	c6 ff       	sbrs	r28, 6
    71fa:	f9 cf       	rjmp	.-14     	; 0x71ee <conv_int+0x9e>
    71fc:	2f 7d       	andi	r18, 0xDF	; 223
    71fe:	3f ee       	ldi	r19, 0xEF	; 239
    7200:	32 0f       	add	r19, r18
    7202:	36 30       	cpi	r19, 0x06	; 6
    7204:	a0 f7       	brcc	.-24     	; 0x71ee <conv_int+0x9e>
    7206:	27 50       	subi	r18, 0x07	; 7
    7208:	4c 2f       	mov	r20, r28
    720a:	c5 01       	movw	r24, r10
    720c:	b4 01       	movw	r22, r8
    720e:	63 df       	rcall	.-314    	; 0x70d6 <mulacc>
    7210:	4b 01       	movw	r8, r22
    7212:	5c 01       	movw	r10, r24
    7214:	c2 60       	ori	r28, 0x02	; 2
    7216:	d1 50       	subi	r29, 0x01	; 1
    7218:	51 f0       	breq	.+20     	; 0x722e <conv_int+0xde>
    721a:	c8 01       	movw	r24, r16
    721c:	42 d2       	rcall	.+1156   	; 0x76a2 <fgetc>
    721e:	97 ff       	sbrs	r25, 7
    7220:	e0 cf       	rjmp	.-64     	; 0x71e2 <conv_int+0x92>
    7222:	c1 fd       	sbrc	r28, 1
    7224:	04 c0       	rjmp	.+8      	; 0x722e <conv_int+0xde>
    7226:	b0 cf       	rjmp	.-160    	; 0x7188 <conv_int+0x38>
    7228:	81 2c       	mov	r8, r1
    722a:	91 2c       	mov	r9, r1
    722c:	54 01       	movw	r10, r8
    722e:	c7 ff       	sbrs	r28, 7
    7230:	08 c0       	rjmp	.+16     	; 0x7242 <conv_int+0xf2>
    7232:	b0 94       	com	r11
    7234:	a0 94       	com	r10
    7236:	90 94       	com	r9
    7238:	80 94       	com	r8
    723a:	81 1c       	adc	r8, r1
    723c:	91 1c       	adc	r9, r1
    723e:	a1 1c       	adc	r10, r1
    7240:	b1 1c       	adc	r11, r1
    7242:	2c 2f       	mov	r18, r28
    7244:	b5 01       	movw	r22, r10
    7246:	a4 01       	movw	r20, r8
    7248:	c7 01       	movw	r24, r14
    724a:	39 df       	rcall	.-398    	; 0x70be <putval>
    724c:	81 e0       	ldi	r24, 0x01	; 1
    724e:	df 91       	pop	r29
    7250:	cf 91       	pop	r28
    7252:	1f 91       	pop	r17
    7254:	0f 91       	pop	r16
    7256:	ff 90       	pop	r15
    7258:	ef 90       	pop	r14
    725a:	bf 90       	pop	r11
    725c:	af 90       	pop	r10
    725e:	9f 90       	pop	r9
    7260:	8f 90       	pop	r8
    7262:	08 95       	ret

00007264 <conv_brk>:
    7264:	5f 92       	push	r5
    7266:	6f 92       	push	r6
    7268:	7f 92       	push	r7
    726a:	8f 92       	push	r8
    726c:	9f 92       	push	r9
    726e:	af 92       	push	r10
    7270:	bf 92       	push	r11
    7272:	cf 92       	push	r12
    7274:	df 92       	push	r13
    7276:	ef 92       	push	r14
    7278:	ff 92       	push	r15
    727a:	0f 93       	push	r16
    727c:	1f 93       	push	r17
    727e:	cf 93       	push	r28
    7280:	df 93       	push	r29
    7282:	cd b7       	in	r28, 0x3d	; 61
    7284:	de b7       	in	r29, 0x3e	; 62
    7286:	a0 97       	sbiw	r28, 0x20	; 32
    7288:	0f b6       	in	r0, 0x3f	; 63
    728a:	f8 94       	cli
    728c:	de bf       	out	0x3e, r29	; 62
    728e:	0f be       	out	0x3f, r0	; 63
    7290:	cd bf       	out	0x3d, r28	; 61
    7292:	5c 01       	movw	r10, r24
    7294:	96 2e       	mov	r9, r22
    7296:	7a 01       	movw	r14, r20
    7298:	f9 01       	movw	r30, r18
    729a:	8e 01       	movw	r16, r28
    729c:	0f 5f       	subi	r16, 0xFF	; 255
    729e:	1f 4f       	sbci	r17, 0xFF	; 255
    72a0:	68 01       	movw	r12, r16
    72a2:	80 e2       	ldi	r24, 0x20	; 32
    72a4:	d8 01       	movw	r26, r16
    72a6:	1d 92       	st	X+, r1
    72a8:	8a 95       	dec	r24
    72aa:	e9 f7       	brne	.-6      	; 0x72a6 <conv_brk+0x42>
    72ac:	d5 01       	movw	r26, r10
    72ae:	13 96       	adiw	r26, 0x03	; 3
    72b0:	8c 90       	ld	r8, X
    72b2:	80 e0       	ldi	r24, 0x00	; 0
    72b4:	90 e0       	ldi	r25, 0x00	; 0
    72b6:	61 2c       	mov	r6, r1
    72b8:	71 2c       	mov	r7, r1
    72ba:	30 e0       	ldi	r19, 0x00	; 0
    72bc:	61 e0       	ldi	r22, 0x01	; 1
    72be:	70 e0       	ldi	r23, 0x00	; 0
    72c0:	83 fc       	sbrc	r8, 3
    72c2:	25 91       	lpm	r18, Z+
    72c4:	83 fe       	sbrs	r8, 3
    72c6:	21 91       	ld	r18, Z+
    72c8:	8f 01       	movw	r16, r30
    72ca:	52 2e       	mov	r5, r18
    72cc:	21 11       	cpse	r18, r1
    72ce:	03 c0       	rjmp	.+6      	; 0x72d6 <conv_brk+0x72>
    72d0:	80 e0       	ldi	r24, 0x00	; 0
    72d2:	90 e0       	ldi	r25, 0x00	; 0
    72d4:	90 c0       	rjmp	.+288    	; 0x73f6 <conv_brk+0x192>
    72d6:	2e 35       	cpi	r18, 0x5E	; 94
    72d8:	11 f4       	brne	.+4      	; 0x72de <conv_brk+0x7a>
    72da:	00 97       	sbiw	r24, 0x00	; 0
    72dc:	51 f1       	breq	.+84     	; 0x7332 <conv_brk+0xce>
    72de:	43 2f       	mov	r20, r19
    72e0:	50 e0       	ldi	r21, 0x00	; 0
    72e2:	48 17       	cp	r20, r24
    72e4:	59 07       	cpc	r21, r25
    72e6:	3c f4       	brge	.+14     	; 0x72f6 <conv_brk+0x92>
    72e8:	2d 35       	cpi	r18, 0x5D	; 93
    72ea:	59 f1       	breq	.+86     	; 0x7342 <conv_brk+0xde>
    72ec:	2d 32       	cpi	r18, 0x2D	; 45
    72ee:	19 f4       	brne	.+6      	; 0x72f6 <conv_brk+0x92>
    72f0:	77 20       	and	r7, r7
    72f2:	09 f1       	breq	.+66     	; 0x7336 <conv_brk+0xd2>
    72f4:	03 c0       	rjmp	.+6      	; 0x72fc <conv_brk+0x98>
    72f6:	77 20       	and	r7, r7
    72f8:	09 f4       	brne	.+2      	; 0x72fc <conv_brk+0x98>
    72fa:	68 c0       	rjmp	.+208    	; 0x73cc <conv_brk+0x168>
    72fc:	45 2d       	mov	r20, r5
    72fe:	46 95       	lsr	r20
    7300:	46 95       	lsr	r20
    7302:	46 95       	lsr	r20
    7304:	d6 01       	movw	r26, r12
    7306:	a4 0f       	add	r26, r20
    7308:	b1 1d       	adc	r27, r1
    730a:	45 2d       	mov	r20, r5
    730c:	47 70       	andi	r20, 0x07	; 7
    730e:	8b 01       	movw	r16, r22
    7310:	02 c0       	rjmp	.+4      	; 0x7316 <conv_brk+0xb2>
    7312:	00 0f       	add	r16, r16
    7314:	11 1f       	adc	r17, r17
    7316:	4a 95       	dec	r20
    7318:	e2 f7       	brpl	.-8      	; 0x7312 <conv_brk+0xae>
    731a:	a8 01       	movw	r20, r16
    731c:	5c 91       	ld	r21, X
    731e:	45 2b       	or	r20, r21
    7320:	4c 93       	st	X, r20
    7322:	65 14       	cp	r6, r5
    7324:	59 f0       	breq	.+22     	; 0x733c <conv_brk+0xd8>
    7326:	56 14       	cp	r5, r6
    7328:	10 f4       	brcc	.+4      	; 0x732e <conv_brk+0xca>
    732a:	53 94       	inc	r5
    732c:	e7 cf       	rjmp	.-50     	; 0x72fc <conv_brk+0x98>
    732e:	5a 94       	dec	r5
    7330:	e5 cf       	rjmp	.-54     	; 0x72fc <conv_brk+0x98>
    7332:	31 e0       	ldi	r19, 0x01	; 1
    7334:	04 c0       	rjmp	.+8      	; 0x733e <conv_brk+0xda>
    7336:	77 24       	eor	r7, r7
    7338:	73 94       	inc	r7
    733a:	01 c0       	rjmp	.+2      	; 0x733e <conv_brk+0xda>
    733c:	71 2c       	mov	r7, r1
    733e:	01 96       	adiw	r24, 0x01	; 1
    7340:	bf cf       	rjmp	.-130    	; 0x72c0 <conv_brk+0x5c>
    7342:	77 20       	and	r7, r7
    7344:	19 f0       	breq	.+6      	; 0x734c <conv_brk+0xe8>
    7346:	8e 81       	ldd	r24, Y+6	; 0x06
    7348:	80 62       	ori	r24, 0x20	; 32
    734a:	8e 83       	std	Y+6, r24	; 0x06
    734c:	31 11       	cpse	r19, r1
    734e:	03 c0       	rjmp	.+6      	; 0x7356 <conv_brk+0xf2>
    7350:	88 24       	eor	r8, r8
    7352:	83 94       	inc	r8
    7354:	17 c0       	rjmp	.+46     	; 0x7384 <conv_brk+0x120>
    7356:	f6 01       	movw	r30, r12
    7358:	9e 01       	movw	r18, r28
    735a:	2f 5d       	subi	r18, 0xDF	; 223
    735c:	3f 4f       	sbci	r19, 0xFF	; 255
    735e:	80 81       	ld	r24, Z
    7360:	80 95       	com	r24
    7362:	81 93       	st	Z+, r24
    7364:	2e 17       	cp	r18, r30
    7366:	3f 07       	cpc	r19, r31
    7368:	d1 f7       	brne	.-12     	; 0x735e <conv_brk+0xfa>
    736a:	f2 cf       	rjmp	.-28     	; 0x7350 <conv_brk+0xec>
    736c:	e1 14       	cp	r14, r1
    736e:	f1 04       	cpc	r15, r1
    7370:	29 f0       	breq	.+10     	; 0x737c <conv_brk+0x118>
    7372:	d7 01       	movw	r26, r14
    7374:	8c 93       	st	X, r24
    7376:	f7 01       	movw	r30, r14
    7378:	31 96       	adiw	r30, 0x01	; 1
    737a:	7f 01       	movw	r14, r30
    737c:	9a 94       	dec	r9
    737e:	81 2c       	mov	r8, r1
    7380:	99 20       	and	r9, r9
    7382:	e9 f0       	breq	.+58     	; 0x73be <conv_brk+0x15a>
    7384:	c5 01       	movw	r24, r10
    7386:	8d d1       	rcall	.+794    	; 0x76a2 <fgetc>
    7388:	97 fd       	sbrc	r25, 7
    738a:	17 c0       	rjmp	.+46     	; 0x73ba <conv_brk+0x156>
    738c:	fc 01       	movw	r30, r24
    738e:	ff 27       	eor	r31, r31
    7390:	23 e0       	ldi	r18, 0x03	; 3
    7392:	f5 95       	asr	r31
    7394:	e7 95       	ror	r30
    7396:	2a 95       	dec	r18
    7398:	e1 f7       	brne	.-8      	; 0x7392 <conv_brk+0x12e>
    739a:	ec 0d       	add	r30, r12
    739c:	fd 1d       	adc	r31, r13
    739e:	20 81       	ld	r18, Z
    73a0:	30 e0       	ldi	r19, 0x00	; 0
    73a2:	ac 01       	movw	r20, r24
    73a4:	47 70       	andi	r20, 0x07	; 7
    73a6:	55 27       	eor	r21, r21
    73a8:	02 c0       	rjmp	.+4      	; 0x73ae <conv_brk+0x14a>
    73aa:	35 95       	asr	r19
    73ac:	27 95       	ror	r18
    73ae:	4a 95       	dec	r20
    73b0:	e2 f7       	brpl	.-8      	; 0x73aa <conv_brk+0x146>
    73b2:	20 fd       	sbrc	r18, 0
    73b4:	db cf       	rjmp	.-74     	; 0x736c <conv_brk+0x108>
    73b6:	b5 01       	movw	r22, r10
    73b8:	ee d1       	rcall	.+988    	; 0x7796 <ungetc>
    73ba:	81 10       	cpse	r8, r1
    73bc:	89 cf       	rjmp	.-238    	; 0x72d0 <conv_brk+0x6c>
    73be:	e1 14       	cp	r14, r1
    73c0:	f1 04       	cpc	r15, r1
    73c2:	11 f0       	breq	.+4      	; 0x73c8 <conv_brk+0x164>
    73c4:	d7 01       	movw	r26, r14
    73c6:	1c 92       	st	X, r1
    73c8:	c8 01       	movw	r24, r16
    73ca:	15 c0       	rjmp	.+42     	; 0x73f6 <conv_brk+0x192>
    73cc:	42 2f       	mov	r20, r18
    73ce:	46 95       	lsr	r20
    73d0:	46 95       	lsr	r20
    73d2:	46 95       	lsr	r20
    73d4:	d6 01       	movw	r26, r12
    73d6:	a4 0f       	add	r26, r20
    73d8:	b1 1d       	adc	r27, r1
    73da:	42 2f       	mov	r20, r18
    73dc:	47 70       	andi	r20, 0x07	; 7
    73de:	8b 01       	movw	r16, r22
    73e0:	02 c0       	rjmp	.+4      	; 0x73e6 <conv_brk+0x182>
    73e2:	00 0f       	add	r16, r16
    73e4:	11 1f       	adc	r17, r17
    73e6:	4a 95       	dec	r20
    73e8:	e2 f7       	brpl	.-8      	; 0x73e2 <conv_brk+0x17e>
    73ea:	a8 01       	movw	r20, r16
    73ec:	5c 91       	ld	r21, X
    73ee:	45 2b       	or	r20, r21
    73f0:	4c 93       	st	X, r20
    73f2:	62 2e       	mov	r6, r18
    73f4:	a4 cf       	rjmp	.-184    	; 0x733e <conv_brk+0xda>
    73f6:	a0 96       	adiw	r28, 0x20	; 32
    73f8:	0f b6       	in	r0, 0x3f	; 63
    73fa:	f8 94       	cli
    73fc:	de bf       	out	0x3e, r29	; 62
    73fe:	0f be       	out	0x3f, r0	; 63
    7400:	cd bf       	out	0x3d, r28	; 61
    7402:	df 91       	pop	r29
    7404:	cf 91       	pop	r28
    7406:	1f 91       	pop	r17
    7408:	0f 91       	pop	r16
    740a:	ff 90       	pop	r15
    740c:	ef 90       	pop	r14
    740e:	df 90       	pop	r13
    7410:	cf 90       	pop	r12
    7412:	bf 90       	pop	r11
    7414:	af 90       	pop	r10
    7416:	9f 90       	pop	r9
    7418:	8f 90       	pop	r8
    741a:	7f 90       	pop	r7
    741c:	6f 90       	pop	r6
    741e:	5f 90       	pop	r5
    7420:	08 95       	ret

00007422 <vfscanf>:
    7422:	5f 92       	push	r5
    7424:	6f 92       	push	r6
    7426:	7f 92       	push	r7
    7428:	8f 92       	push	r8
    742a:	9f 92       	push	r9
    742c:	af 92       	push	r10
    742e:	bf 92       	push	r11
    7430:	cf 92       	push	r12
    7432:	df 92       	push	r13
    7434:	ef 92       	push	r14
    7436:	ff 92       	push	r15
    7438:	0f 93       	push	r16
    743a:	1f 93       	push	r17
    743c:	cf 93       	push	r28
    743e:	df 93       	push	r29
    7440:	6c 01       	movw	r12, r24
    7442:	eb 01       	movw	r28, r22
    7444:	5a 01       	movw	r10, r20
    7446:	fc 01       	movw	r30, r24
    7448:	17 82       	std	Z+7, r1	; 0x07
    744a:	16 82       	std	Z+6, r1	; 0x06
    744c:	51 2c       	mov	r5, r1
    744e:	f6 01       	movw	r30, r12
    7450:	e3 80       	ldd	r14, Z+3	; 0x03
    7452:	fe 01       	movw	r30, r28
    7454:	e3 fc       	sbrc	r14, 3
    7456:	85 91       	lpm	r24, Z+
    7458:	e3 fe       	sbrs	r14, 3
    745a:	81 91       	ld	r24, Z+
    745c:	18 2f       	mov	r17, r24
    745e:	ef 01       	movw	r28, r30
    7460:	88 23       	and	r24, r24
    7462:	09 f4       	brne	.+2      	; 0x7466 <vfscanf+0x44>
    7464:	e0 c0       	rjmp	.+448    	; 0x7626 <vfscanf+0x204>
    7466:	90 e0       	ldi	r25, 0x00	; 0
    7468:	f3 d0       	rcall	.+486    	; 0x7650 <isspace>
    746a:	89 2b       	or	r24, r25
    746c:	19 f0       	breq	.+6      	; 0x7474 <vfscanf+0x52>
    746e:	c6 01       	movw	r24, r12
    7470:	59 de       	rcall	.-846    	; 0x7124 <skip_spaces>
    7472:	ed cf       	rjmp	.-38     	; 0x744e <vfscanf+0x2c>
    7474:	15 32       	cpi	r17, 0x25	; 37
    7476:	41 f4       	brne	.+16     	; 0x7488 <vfscanf+0x66>
    7478:	fe 01       	movw	r30, r28
    747a:	e3 fc       	sbrc	r14, 3
    747c:	15 91       	lpm	r17, Z+
    747e:	e3 fe       	sbrs	r14, 3
    7480:	11 91       	ld	r17, Z+
    7482:	ef 01       	movw	r28, r30
    7484:	15 32       	cpi	r17, 0x25	; 37
    7486:	71 f4       	brne	.+28     	; 0x74a4 <vfscanf+0x82>
    7488:	c6 01       	movw	r24, r12
    748a:	0b d1       	rcall	.+534    	; 0x76a2 <fgetc>
    748c:	97 fd       	sbrc	r25, 7
    748e:	c9 c0       	rjmp	.+402    	; 0x7622 <vfscanf+0x200>
    7490:	41 2f       	mov	r20, r17
    7492:	50 e0       	ldi	r21, 0x00	; 0
    7494:	9c 01       	movw	r18, r24
    7496:	33 27       	eor	r19, r19
    7498:	24 17       	cp	r18, r20
    749a:	35 07       	cpc	r19, r21
    749c:	c1 f2       	breq	.-80     	; 0x744e <vfscanf+0x2c>
    749e:	b6 01       	movw	r22, r12
    74a0:	7a d1       	rcall	.+756    	; 0x7796 <ungetc>
    74a2:	c1 c0       	rjmp	.+386    	; 0x7626 <vfscanf+0x204>
    74a4:	1a 32       	cpi	r17, 0x2A	; 42
    74a6:	39 f4       	brne	.+14     	; 0x74b6 <vfscanf+0x94>
    74a8:	e3 fc       	sbrc	r14, 3
    74aa:	15 91       	lpm	r17, Z+
    74ac:	e3 fe       	sbrs	r14, 3
    74ae:	11 91       	ld	r17, Z+
    74b0:	ef 01       	movw	r28, r30
    74b2:	01 e0       	ldi	r16, 0x01	; 1
    74b4:	01 c0       	rjmp	.+2      	; 0x74b8 <vfscanf+0x96>
    74b6:	00 e0       	ldi	r16, 0x00	; 0
    74b8:	f1 2c       	mov	r15, r1
    74ba:	20 ed       	ldi	r18, 0xD0	; 208
    74bc:	21 0f       	add	r18, r17
    74be:	2a 30       	cpi	r18, 0x0A	; 10
    74c0:	78 f4       	brcc	.+30     	; 0x74e0 <vfscanf+0xbe>
    74c2:	02 60       	ori	r16, 0x02	; 2
    74c4:	6f 2d       	mov	r22, r15
    74c6:	70 e0       	ldi	r23, 0x00	; 0
    74c8:	80 e0       	ldi	r24, 0x00	; 0
    74ca:	90 e0       	ldi	r25, 0x00	; 0
    74cc:	40 e2       	ldi	r20, 0x20	; 32
    74ce:	03 de       	rcall	.-1018   	; 0x70d6 <mulacc>
    74d0:	f6 2e       	mov	r15, r22
    74d2:	fe 01       	movw	r30, r28
    74d4:	e3 fc       	sbrc	r14, 3
    74d6:	15 91       	lpm	r17, Z+
    74d8:	e3 fe       	sbrs	r14, 3
    74da:	11 91       	ld	r17, Z+
    74dc:	ef 01       	movw	r28, r30
    74de:	ed cf       	rjmp	.-38     	; 0x74ba <vfscanf+0x98>
    74e0:	01 ff       	sbrs	r16, 1
    74e2:	03 c0       	rjmp	.+6      	; 0x74ea <vfscanf+0xc8>
    74e4:	f1 10       	cpse	r15, r1
    74e6:	03 c0       	rjmp	.+6      	; 0x74ee <vfscanf+0xcc>
    74e8:	9e c0       	rjmp	.+316    	; 0x7626 <vfscanf+0x204>
    74ea:	ff 24       	eor	r15, r15
    74ec:	fa 94       	dec	r15
    74ee:	18 36       	cpi	r17, 0x68	; 104
    74f0:	19 f0       	breq	.+6      	; 0x74f8 <vfscanf+0xd6>
    74f2:	1c 36       	cpi	r17, 0x6C	; 108
    74f4:	51 f0       	breq	.+20     	; 0x750a <vfscanf+0xe8>
    74f6:	10 c0       	rjmp	.+32     	; 0x7518 <vfscanf+0xf6>
    74f8:	fe 01       	movw	r30, r28
    74fa:	e3 fc       	sbrc	r14, 3
    74fc:	15 91       	lpm	r17, Z+
    74fe:	e3 fe       	sbrs	r14, 3
    7500:	11 91       	ld	r17, Z+
    7502:	ef 01       	movw	r28, r30
    7504:	18 36       	cpi	r17, 0x68	; 104
    7506:	41 f4       	brne	.+16     	; 0x7518 <vfscanf+0xf6>
    7508:	08 60       	ori	r16, 0x08	; 8
    750a:	04 60       	ori	r16, 0x04	; 4
    750c:	fe 01       	movw	r30, r28
    750e:	e3 fc       	sbrc	r14, 3
    7510:	15 91       	lpm	r17, Z+
    7512:	e3 fe       	sbrs	r14, 3
    7514:	11 91       	ld	r17, Z+
    7516:	ef 01       	movw	r28, r30
    7518:	11 23       	and	r17, r17
    751a:	09 f4       	brne	.+2      	; 0x751e <vfscanf+0xfc>
    751c:	84 c0       	rjmp	.+264    	; 0x7626 <vfscanf+0x204>
    751e:	61 2f       	mov	r22, r17
    7520:	70 e0       	ldi	r23, 0x00	; 0
    7522:	82 e5       	ldi	r24, 0x52	; 82
    7524:	91 e0       	ldi	r25, 0x01	; 1
    7526:	9c d0       	rcall	.+312    	; 0x7660 <strchr_P>
    7528:	89 2b       	or	r24, r25
    752a:	09 f4       	brne	.+2      	; 0x752e <vfscanf+0x10c>
    752c:	7c c0       	rjmp	.+248    	; 0x7626 <vfscanf+0x204>
    752e:	00 fd       	sbrc	r16, 0
    7530:	07 c0       	rjmp	.+14     	; 0x7540 <vfscanf+0x11e>
    7532:	f5 01       	movw	r30, r10
    7534:	80 80       	ld	r8, Z
    7536:	91 80       	ldd	r9, Z+1	; 0x01
    7538:	c5 01       	movw	r24, r10
    753a:	02 96       	adiw	r24, 0x02	; 2
    753c:	5c 01       	movw	r10, r24
    753e:	02 c0       	rjmp	.+4      	; 0x7544 <vfscanf+0x122>
    7540:	81 2c       	mov	r8, r1
    7542:	91 2c       	mov	r9, r1
    7544:	1e 36       	cpi	r17, 0x6E	; 110
    7546:	49 f4       	brne	.+18     	; 0x755a <vfscanf+0x138>
    7548:	f6 01       	movw	r30, r12
    754a:	46 81       	ldd	r20, Z+6	; 0x06
    754c:	57 81       	ldd	r21, Z+7	; 0x07
    754e:	60 e0       	ldi	r22, 0x00	; 0
    7550:	70 e0       	ldi	r23, 0x00	; 0
    7552:	20 2f       	mov	r18, r16
    7554:	c4 01       	movw	r24, r8
    7556:	b3 dd       	rcall	.-1178   	; 0x70be <putval>
    7558:	7a cf       	rjmp	.-268    	; 0x744e <vfscanf+0x2c>
    755a:	13 36       	cpi	r17, 0x63	; 99
    755c:	a1 f4       	brne	.+40     	; 0x7586 <vfscanf+0x164>
    755e:	01 fd       	sbrc	r16, 1
    7560:	02 c0       	rjmp	.+4      	; 0x7566 <vfscanf+0x144>
    7562:	ff 24       	eor	r15, r15
    7564:	f3 94       	inc	r15
    7566:	c6 01       	movw	r24, r12
    7568:	9c d0       	rcall	.+312    	; 0x76a2 <fgetc>
    756a:	97 fd       	sbrc	r25, 7
    756c:	5a c0       	rjmp	.+180    	; 0x7622 <vfscanf+0x200>
    756e:	81 14       	cp	r8, r1
    7570:	91 04       	cpc	r9, r1
    7572:	29 f0       	breq	.+10     	; 0x757e <vfscanf+0x15c>
    7574:	f4 01       	movw	r30, r8
    7576:	80 83       	st	Z, r24
    7578:	c4 01       	movw	r24, r8
    757a:	01 96       	adiw	r24, 0x01	; 1
    757c:	4c 01       	movw	r8, r24
    757e:	fa 94       	dec	r15
    7580:	f1 10       	cpse	r15, r1
    7582:	f1 cf       	rjmp	.-30     	; 0x7566 <vfscanf+0x144>
    7584:	4a c0       	rjmp	.+148    	; 0x761a <vfscanf+0x1f8>
    7586:	1b 35       	cpi	r17, 0x5B	; 91
    7588:	51 f4       	brne	.+20     	; 0x759e <vfscanf+0x17c>
    758a:	9e 01       	movw	r18, r28
    758c:	a4 01       	movw	r20, r8
    758e:	6f 2d       	mov	r22, r15
    7590:	c6 01       	movw	r24, r12
    7592:	68 de       	rcall	.-816    	; 0x7264 <conv_brk>
    7594:	ec 01       	movw	r28, r24
    7596:	89 2b       	or	r24, r25
    7598:	09 f0       	breq	.+2      	; 0x759c <vfscanf+0x17a>
    759a:	3f c0       	rjmp	.+126    	; 0x761a <vfscanf+0x1f8>
    759c:	39 c0       	rjmp	.+114    	; 0x7610 <vfscanf+0x1ee>
    759e:	c6 01       	movw	r24, r12
    75a0:	c1 dd       	rcall	.-1150   	; 0x7124 <skip_spaces>
    75a2:	97 fd       	sbrc	r25, 7
    75a4:	3e c0       	rjmp	.+124    	; 0x7622 <vfscanf+0x200>
    75a6:	1f 36       	cpi	r17, 0x6F	; 111
    75a8:	49 f1       	breq	.+82     	; 0x75fc <vfscanf+0x1da>
    75aa:	28 f4       	brcc	.+10     	; 0x75b6 <vfscanf+0x194>
    75ac:	14 36       	cpi	r17, 0x64	; 100
    75ae:	21 f1       	breq	.+72     	; 0x75f8 <vfscanf+0x1d6>
    75b0:	19 36       	cpi	r17, 0x69	; 105
    75b2:	39 f1       	breq	.+78     	; 0x7602 <vfscanf+0x1e0>
    75b4:	25 c0       	rjmp	.+74     	; 0x7600 <vfscanf+0x1de>
    75b6:	13 37       	cpi	r17, 0x73	; 115
    75b8:	71 f0       	breq	.+28     	; 0x75d6 <vfscanf+0x1b4>
    75ba:	15 37       	cpi	r17, 0x75	; 117
    75bc:	e9 f0       	breq	.+58     	; 0x75f8 <vfscanf+0x1d6>
    75be:	20 c0       	rjmp	.+64     	; 0x7600 <vfscanf+0x1de>
    75c0:	81 14       	cp	r8, r1
    75c2:	91 04       	cpc	r9, r1
    75c4:	29 f0       	breq	.+10     	; 0x75d0 <vfscanf+0x1ae>
    75c6:	f4 01       	movw	r30, r8
    75c8:	60 82       	st	Z, r6
    75ca:	c4 01       	movw	r24, r8
    75cc:	01 96       	adiw	r24, 0x01	; 1
    75ce:	4c 01       	movw	r8, r24
    75d0:	fa 94       	dec	r15
    75d2:	ff 20       	and	r15, r15
    75d4:	59 f0       	breq	.+22     	; 0x75ec <vfscanf+0x1ca>
    75d6:	c6 01       	movw	r24, r12
    75d8:	64 d0       	rcall	.+200    	; 0x76a2 <fgetc>
    75da:	3c 01       	movw	r6, r24
    75dc:	97 fd       	sbrc	r25, 7
    75de:	06 c0       	rjmp	.+12     	; 0x75ec <vfscanf+0x1ca>
    75e0:	37 d0       	rcall	.+110    	; 0x7650 <isspace>
    75e2:	89 2b       	or	r24, r25
    75e4:	69 f3       	breq	.-38     	; 0x75c0 <vfscanf+0x19e>
    75e6:	b6 01       	movw	r22, r12
    75e8:	c3 01       	movw	r24, r6
    75ea:	d5 d0       	rcall	.+426    	; 0x7796 <ungetc>
    75ec:	81 14       	cp	r8, r1
    75ee:	91 04       	cpc	r9, r1
    75f0:	a1 f0       	breq	.+40     	; 0x761a <vfscanf+0x1f8>
    75f2:	f4 01       	movw	r30, r8
    75f4:	10 82       	st	Z, r1
    75f6:	11 c0       	rjmp	.+34     	; 0x761a <vfscanf+0x1f8>
    75f8:	00 62       	ori	r16, 0x20	; 32
    75fa:	03 c0       	rjmp	.+6      	; 0x7602 <vfscanf+0x1e0>
    75fc:	00 61       	ori	r16, 0x10	; 16
    75fe:	01 c0       	rjmp	.+2      	; 0x7602 <vfscanf+0x1e0>
    7600:	00 64       	ori	r16, 0x40	; 64
    7602:	20 2f       	mov	r18, r16
    7604:	a4 01       	movw	r20, r8
    7606:	6f 2d       	mov	r22, r15
    7608:	c6 01       	movw	r24, r12
    760a:	a2 dd       	rcall	.-1212   	; 0x7150 <conv_int>
    760c:	81 11       	cpse	r24, r1
    760e:	05 c0       	rjmp	.+10     	; 0x761a <vfscanf+0x1f8>
    7610:	f6 01       	movw	r30, r12
    7612:	83 81       	ldd	r24, Z+3	; 0x03
    7614:	80 73       	andi	r24, 0x30	; 48
    7616:	29 f4       	brne	.+10     	; 0x7622 <vfscanf+0x200>
    7618:	06 c0       	rjmp	.+12     	; 0x7626 <vfscanf+0x204>
    761a:	00 fd       	sbrc	r16, 0
    761c:	18 cf       	rjmp	.-464    	; 0x744e <vfscanf+0x2c>
    761e:	53 94       	inc	r5
    7620:	16 cf       	rjmp	.-468    	; 0x744e <vfscanf+0x2c>
    7622:	55 20       	and	r5, r5
    7624:	19 f0       	breq	.+6      	; 0x762c <vfscanf+0x20a>
    7626:	85 2d       	mov	r24, r5
    7628:	90 e0       	ldi	r25, 0x00	; 0
    762a:	02 c0       	rjmp	.+4      	; 0x7630 <vfscanf+0x20e>
    762c:	8f ef       	ldi	r24, 0xFF	; 255
    762e:	9f ef       	ldi	r25, 0xFF	; 255
    7630:	df 91       	pop	r29
    7632:	cf 91       	pop	r28
    7634:	1f 91       	pop	r17
    7636:	0f 91       	pop	r16
    7638:	ff 90       	pop	r15
    763a:	ef 90       	pop	r14
    763c:	df 90       	pop	r13
    763e:	cf 90       	pop	r12
    7640:	bf 90       	pop	r11
    7642:	af 90       	pop	r10
    7644:	9f 90       	pop	r9
    7646:	8f 90       	pop	r8
    7648:	7f 90       	pop	r7
    764a:	6f 90       	pop	r6
    764c:	5f 90       	pop	r5
    764e:	08 95       	ret

00007650 <isspace>:
    7650:	91 11       	cpse	r25, r1
    7652:	18 c1       	rjmp	.+560    	; 0x7884 <__ctype_isfalse>
    7654:	80 32       	cpi	r24, 0x20	; 32
    7656:	19 f0       	breq	.+6      	; 0x765e <isspace+0xe>
    7658:	89 50       	subi	r24, 0x09	; 9
    765a:	85 50       	subi	r24, 0x05	; 5
    765c:	d0 f7       	brcc	.-12     	; 0x7652 <isspace+0x2>
    765e:	08 95       	ret

00007660 <strchr_P>:
    7660:	fc 01       	movw	r30, r24
    7662:	05 90       	lpm	r0, Z+
    7664:	06 16       	cp	r0, r22
    7666:	21 f0       	breq	.+8      	; 0x7670 <strchr_P+0x10>
    7668:	00 20       	and	r0, r0
    766a:	d9 f7       	brne	.-10     	; 0x7662 <strchr_P+0x2>
    766c:	c0 01       	movw	r24, r0
    766e:	08 95       	ret
    7670:	31 97       	sbiw	r30, 0x01	; 1
    7672:	cf 01       	movw	r24, r30
    7674:	08 95       	ret

00007676 <strnlen_P>:
    7676:	fc 01       	movw	r30, r24
    7678:	05 90       	lpm	r0, Z+
    767a:	61 50       	subi	r22, 0x01	; 1
    767c:	70 40       	sbci	r23, 0x00	; 0
    767e:	01 10       	cpse	r0, r1
    7680:	d8 f7       	brcc	.-10     	; 0x7678 <strnlen_P+0x2>
    7682:	80 95       	com	r24
    7684:	90 95       	com	r25
    7686:	8e 0f       	add	r24, r30
    7688:	9f 1f       	adc	r25, r31
    768a:	08 95       	ret

0000768c <strnlen>:
    768c:	fc 01       	movw	r30, r24
    768e:	61 50       	subi	r22, 0x01	; 1
    7690:	70 40       	sbci	r23, 0x00	; 0
    7692:	01 90       	ld	r0, Z+
    7694:	01 10       	cpse	r0, r1
    7696:	d8 f7       	brcc	.-10     	; 0x768e <strnlen+0x2>
    7698:	80 95       	com	r24
    769a:	90 95       	com	r25
    769c:	8e 0f       	add	r24, r30
    769e:	9f 1f       	adc	r25, r31
    76a0:	08 95       	ret

000076a2 <fgetc>:
    76a2:	cf 93       	push	r28
    76a4:	df 93       	push	r29
    76a6:	ec 01       	movw	r28, r24
    76a8:	2b 81       	ldd	r18, Y+3	; 0x03
    76aa:	20 ff       	sbrs	r18, 0
    76ac:	33 c0       	rjmp	.+102    	; 0x7714 <fgetc+0x72>
    76ae:	26 ff       	sbrs	r18, 6
    76b0:	0a c0       	rjmp	.+20     	; 0x76c6 <fgetc+0x24>
    76b2:	2f 7b       	andi	r18, 0xBF	; 191
    76b4:	2b 83       	std	Y+3, r18	; 0x03
    76b6:	8e 81       	ldd	r24, Y+6	; 0x06
    76b8:	9f 81       	ldd	r25, Y+7	; 0x07
    76ba:	01 96       	adiw	r24, 0x01	; 1
    76bc:	9f 83       	std	Y+7, r25	; 0x07
    76be:	8e 83       	std	Y+6, r24	; 0x06
    76c0:	8a 81       	ldd	r24, Y+2	; 0x02
    76c2:	90 e0       	ldi	r25, 0x00	; 0
    76c4:	29 c0       	rjmp	.+82     	; 0x7718 <fgetc+0x76>
    76c6:	22 ff       	sbrs	r18, 2
    76c8:	0f c0       	rjmp	.+30     	; 0x76e8 <fgetc+0x46>
    76ca:	e8 81       	ld	r30, Y
    76cc:	f9 81       	ldd	r31, Y+1	; 0x01
    76ce:	80 81       	ld	r24, Z
    76d0:	08 2e       	mov	r0, r24
    76d2:	00 0c       	add	r0, r0
    76d4:	99 0b       	sbc	r25, r25
    76d6:	00 97       	sbiw	r24, 0x00	; 0
    76d8:	19 f4       	brne	.+6      	; 0x76e0 <fgetc+0x3e>
    76da:	20 62       	ori	r18, 0x20	; 32
    76dc:	2b 83       	std	Y+3, r18	; 0x03
    76de:	1a c0       	rjmp	.+52     	; 0x7714 <fgetc+0x72>
    76e0:	31 96       	adiw	r30, 0x01	; 1
    76e2:	f9 83       	std	Y+1, r31	; 0x01
    76e4:	e8 83       	st	Y, r30
    76e6:	0e c0       	rjmp	.+28     	; 0x7704 <fgetc+0x62>
    76e8:	ea 85       	ldd	r30, Y+10	; 0x0a
    76ea:	fb 85       	ldd	r31, Y+11	; 0x0b
    76ec:	19 95       	eicall
    76ee:	97 ff       	sbrs	r25, 7
    76f0:	09 c0       	rjmp	.+18     	; 0x7704 <fgetc+0x62>
    76f2:	2b 81       	ldd	r18, Y+3	; 0x03
    76f4:	01 96       	adiw	r24, 0x01	; 1
    76f6:	11 f0       	breq	.+4      	; 0x76fc <fgetc+0x5a>
    76f8:	80 e2       	ldi	r24, 0x20	; 32
    76fa:	01 c0       	rjmp	.+2      	; 0x76fe <fgetc+0x5c>
    76fc:	80 e1       	ldi	r24, 0x10	; 16
    76fe:	82 2b       	or	r24, r18
    7700:	8b 83       	std	Y+3, r24	; 0x03
    7702:	08 c0       	rjmp	.+16     	; 0x7714 <fgetc+0x72>
    7704:	2e 81       	ldd	r18, Y+6	; 0x06
    7706:	3f 81       	ldd	r19, Y+7	; 0x07
    7708:	2f 5f       	subi	r18, 0xFF	; 255
    770a:	3f 4f       	sbci	r19, 0xFF	; 255
    770c:	3f 83       	std	Y+7, r19	; 0x07
    770e:	2e 83       	std	Y+6, r18	; 0x06
    7710:	99 27       	eor	r25, r25
    7712:	02 c0       	rjmp	.+4      	; 0x7718 <fgetc+0x76>
    7714:	8f ef       	ldi	r24, 0xFF	; 255
    7716:	9f ef       	ldi	r25, 0xFF	; 255
    7718:	df 91       	pop	r29
    771a:	cf 91       	pop	r28
    771c:	08 95       	ret

0000771e <fputc>:
    771e:	0f 93       	push	r16
    7720:	1f 93       	push	r17
    7722:	cf 93       	push	r28
    7724:	df 93       	push	r29
    7726:	fb 01       	movw	r30, r22
    7728:	23 81       	ldd	r18, Z+3	; 0x03
    772a:	21 fd       	sbrc	r18, 1
    772c:	03 c0       	rjmp	.+6      	; 0x7734 <fputc+0x16>
    772e:	8f ef       	ldi	r24, 0xFF	; 255
    7730:	9f ef       	ldi	r25, 0xFF	; 255
    7732:	2c c0       	rjmp	.+88     	; 0x778c <fputc+0x6e>
    7734:	22 ff       	sbrs	r18, 2
    7736:	16 c0       	rjmp	.+44     	; 0x7764 <fputc+0x46>
    7738:	46 81       	ldd	r20, Z+6	; 0x06
    773a:	57 81       	ldd	r21, Z+7	; 0x07
    773c:	24 81       	ldd	r18, Z+4	; 0x04
    773e:	35 81       	ldd	r19, Z+5	; 0x05
    7740:	42 17       	cp	r20, r18
    7742:	53 07       	cpc	r21, r19
    7744:	44 f4       	brge	.+16     	; 0x7756 <fputc+0x38>
    7746:	a0 81       	ld	r26, Z
    7748:	b1 81       	ldd	r27, Z+1	; 0x01
    774a:	9d 01       	movw	r18, r26
    774c:	2f 5f       	subi	r18, 0xFF	; 255
    774e:	3f 4f       	sbci	r19, 0xFF	; 255
    7750:	31 83       	std	Z+1, r19	; 0x01
    7752:	20 83       	st	Z, r18
    7754:	8c 93       	st	X, r24
    7756:	26 81       	ldd	r18, Z+6	; 0x06
    7758:	37 81       	ldd	r19, Z+7	; 0x07
    775a:	2f 5f       	subi	r18, 0xFF	; 255
    775c:	3f 4f       	sbci	r19, 0xFF	; 255
    775e:	37 83       	std	Z+7, r19	; 0x07
    7760:	26 83       	std	Z+6, r18	; 0x06
    7762:	14 c0       	rjmp	.+40     	; 0x778c <fputc+0x6e>
    7764:	8b 01       	movw	r16, r22
    7766:	ec 01       	movw	r28, r24
    7768:	fb 01       	movw	r30, r22
    776a:	00 84       	ldd	r0, Z+8	; 0x08
    776c:	f1 85       	ldd	r31, Z+9	; 0x09
    776e:	e0 2d       	mov	r30, r0
    7770:	19 95       	eicall
    7772:	89 2b       	or	r24, r25
    7774:	e1 f6       	brne	.-72     	; 0x772e <fputc+0x10>
    7776:	d8 01       	movw	r26, r16
    7778:	16 96       	adiw	r26, 0x06	; 6
    777a:	8d 91       	ld	r24, X+
    777c:	9c 91       	ld	r25, X
    777e:	17 97       	sbiw	r26, 0x07	; 7
    7780:	01 96       	adiw	r24, 0x01	; 1
    7782:	17 96       	adiw	r26, 0x07	; 7
    7784:	9c 93       	st	X, r25
    7786:	8e 93       	st	-X, r24
    7788:	16 97       	sbiw	r26, 0x06	; 6
    778a:	ce 01       	movw	r24, r28
    778c:	df 91       	pop	r29
    778e:	cf 91       	pop	r28
    7790:	1f 91       	pop	r17
    7792:	0f 91       	pop	r16
    7794:	08 95       	ret

00007796 <ungetc>:
    7796:	fb 01       	movw	r30, r22
    7798:	23 81       	ldd	r18, Z+3	; 0x03
    779a:	20 ff       	sbrs	r18, 0
    779c:	12 c0       	rjmp	.+36     	; 0x77c2 <ungetc+0x2c>
    779e:	26 fd       	sbrc	r18, 6
    77a0:	10 c0       	rjmp	.+32     	; 0x77c2 <ungetc+0x2c>
    77a2:	8f 3f       	cpi	r24, 0xFF	; 255
    77a4:	3f ef       	ldi	r19, 0xFF	; 255
    77a6:	93 07       	cpc	r25, r19
    77a8:	61 f0       	breq	.+24     	; 0x77c2 <ungetc+0x2c>
    77aa:	82 83       	std	Z+2, r24	; 0x02
    77ac:	2f 7d       	andi	r18, 0xDF	; 223
    77ae:	20 64       	ori	r18, 0x40	; 64
    77b0:	23 83       	std	Z+3, r18	; 0x03
    77b2:	26 81       	ldd	r18, Z+6	; 0x06
    77b4:	37 81       	ldd	r19, Z+7	; 0x07
    77b6:	21 50       	subi	r18, 0x01	; 1
    77b8:	31 09       	sbc	r19, r1
    77ba:	37 83       	std	Z+7, r19	; 0x07
    77bc:	26 83       	std	Z+6, r18	; 0x06
    77be:	99 27       	eor	r25, r25
    77c0:	08 95       	ret
    77c2:	8f ef       	ldi	r24, 0xFF	; 255
    77c4:	9f ef       	ldi	r25, 0xFF	; 255
    77c6:	08 95       	ret

000077c8 <__ultoa_invert>:
    77c8:	fa 01       	movw	r30, r20
    77ca:	aa 27       	eor	r26, r26
    77cc:	28 30       	cpi	r18, 0x08	; 8
    77ce:	51 f1       	breq	.+84     	; 0x7824 <__ultoa_invert+0x5c>
    77d0:	20 31       	cpi	r18, 0x10	; 16
    77d2:	81 f1       	breq	.+96     	; 0x7834 <__ultoa_invert+0x6c>
    77d4:	e8 94       	clt
    77d6:	6f 93       	push	r22
    77d8:	6e 7f       	andi	r22, 0xFE	; 254
    77da:	6e 5f       	subi	r22, 0xFE	; 254
    77dc:	7f 4f       	sbci	r23, 0xFF	; 255
    77de:	8f 4f       	sbci	r24, 0xFF	; 255
    77e0:	9f 4f       	sbci	r25, 0xFF	; 255
    77e2:	af 4f       	sbci	r26, 0xFF	; 255
    77e4:	b1 e0       	ldi	r27, 0x01	; 1
    77e6:	3e d0       	rcall	.+124    	; 0x7864 <__ultoa_invert+0x9c>
    77e8:	b4 e0       	ldi	r27, 0x04	; 4
    77ea:	3c d0       	rcall	.+120    	; 0x7864 <__ultoa_invert+0x9c>
    77ec:	67 0f       	add	r22, r23
    77ee:	78 1f       	adc	r23, r24
    77f0:	89 1f       	adc	r24, r25
    77f2:	9a 1f       	adc	r25, r26
    77f4:	a1 1d       	adc	r26, r1
    77f6:	68 0f       	add	r22, r24
    77f8:	79 1f       	adc	r23, r25
    77fa:	8a 1f       	adc	r24, r26
    77fc:	91 1d       	adc	r25, r1
    77fe:	a1 1d       	adc	r26, r1
    7800:	6a 0f       	add	r22, r26
    7802:	71 1d       	adc	r23, r1
    7804:	81 1d       	adc	r24, r1
    7806:	91 1d       	adc	r25, r1
    7808:	a1 1d       	adc	r26, r1
    780a:	20 d0       	rcall	.+64     	; 0x784c <__ultoa_invert+0x84>
    780c:	09 f4       	brne	.+2      	; 0x7810 <__ultoa_invert+0x48>
    780e:	68 94       	set
    7810:	3f 91       	pop	r19
    7812:	2a e0       	ldi	r18, 0x0A	; 10
    7814:	26 9f       	mul	r18, r22
    7816:	11 24       	eor	r1, r1
    7818:	30 19       	sub	r19, r0
    781a:	30 5d       	subi	r19, 0xD0	; 208
    781c:	31 93       	st	Z+, r19
    781e:	de f6       	brtc	.-74     	; 0x77d6 <__ultoa_invert+0xe>
    7820:	cf 01       	movw	r24, r30
    7822:	08 95       	ret
    7824:	46 2f       	mov	r20, r22
    7826:	47 70       	andi	r20, 0x07	; 7
    7828:	40 5d       	subi	r20, 0xD0	; 208
    782a:	41 93       	st	Z+, r20
    782c:	b3 e0       	ldi	r27, 0x03	; 3
    782e:	0f d0       	rcall	.+30     	; 0x784e <__ultoa_invert+0x86>
    7830:	c9 f7       	brne	.-14     	; 0x7824 <__ultoa_invert+0x5c>
    7832:	f6 cf       	rjmp	.-20     	; 0x7820 <__ultoa_invert+0x58>
    7834:	46 2f       	mov	r20, r22
    7836:	4f 70       	andi	r20, 0x0F	; 15
    7838:	40 5d       	subi	r20, 0xD0	; 208
    783a:	4a 33       	cpi	r20, 0x3A	; 58
    783c:	18 f0       	brcs	.+6      	; 0x7844 <__ultoa_invert+0x7c>
    783e:	49 5d       	subi	r20, 0xD9	; 217
    7840:	31 fd       	sbrc	r19, 1
    7842:	40 52       	subi	r20, 0x20	; 32
    7844:	41 93       	st	Z+, r20
    7846:	02 d0       	rcall	.+4      	; 0x784c <__ultoa_invert+0x84>
    7848:	a9 f7       	brne	.-22     	; 0x7834 <__ultoa_invert+0x6c>
    784a:	ea cf       	rjmp	.-44     	; 0x7820 <__ultoa_invert+0x58>
    784c:	b4 e0       	ldi	r27, 0x04	; 4
    784e:	a6 95       	lsr	r26
    7850:	97 95       	ror	r25
    7852:	87 95       	ror	r24
    7854:	77 95       	ror	r23
    7856:	67 95       	ror	r22
    7858:	ba 95       	dec	r27
    785a:	c9 f7       	brne	.-14     	; 0x784e <__ultoa_invert+0x86>
    785c:	00 97       	sbiw	r24, 0x00	; 0
    785e:	61 05       	cpc	r22, r1
    7860:	71 05       	cpc	r23, r1
    7862:	08 95       	ret
    7864:	9b 01       	movw	r18, r22
    7866:	ac 01       	movw	r20, r24
    7868:	0a 2e       	mov	r0, r26
    786a:	06 94       	lsr	r0
    786c:	57 95       	ror	r21
    786e:	47 95       	ror	r20
    7870:	37 95       	ror	r19
    7872:	27 95       	ror	r18
    7874:	ba 95       	dec	r27
    7876:	c9 f7       	brne	.-14     	; 0x786a <__ultoa_invert+0xa2>
    7878:	62 0f       	add	r22, r18
    787a:	73 1f       	adc	r23, r19
    787c:	84 1f       	adc	r24, r20
    787e:	95 1f       	adc	r25, r21
    7880:	a0 1d       	adc	r26, r0
    7882:	08 95       	ret

00007884 <__ctype_isfalse>:
    7884:	99 27       	eor	r25, r25
    7886:	88 27       	eor	r24, r24

00007888 <__ctype_istrue>:
    7888:	08 95       	ret

0000788a <__divmodsi4>:
    788a:	05 2e       	mov	r0, r21
    788c:	97 fb       	bst	r25, 7
    788e:	16 f4       	brtc	.+4      	; 0x7894 <__divmodsi4+0xa>
    7890:	00 94       	com	r0
    7892:	0f d0       	rcall	.+30     	; 0x78b2 <__negsi2>
    7894:	57 fd       	sbrc	r21, 7
    7896:	05 d0       	rcall	.+10     	; 0x78a2 <__divmodsi4_neg2>
    7898:	b5 d8       	rcall	.-3734   	; 0x6a04 <__udivmodsi4>
    789a:	07 fc       	sbrc	r0, 7
    789c:	02 d0       	rcall	.+4      	; 0x78a2 <__divmodsi4_neg2>
    789e:	46 f4       	brtc	.+16     	; 0x78b0 <__divmodsi4_exit>
    78a0:	08 c0       	rjmp	.+16     	; 0x78b2 <__negsi2>

000078a2 <__divmodsi4_neg2>:
    78a2:	50 95       	com	r21
    78a4:	40 95       	com	r20
    78a6:	30 95       	com	r19
    78a8:	21 95       	neg	r18
    78aa:	3f 4f       	sbci	r19, 0xFF	; 255
    78ac:	4f 4f       	sbci	r20, 0xFF	; 255
    78ae:	5f 4f       	sbci	r21, 0xFF	; 255

000078b0 <__divmodsi4_exit>:
    78b0:	08 95       	ret

000078b2 <__negsi2>:
    78b2:	90 95       	com	r25
    78b4:	80 95       	com	r24
    78b6:	70 95       	com	r23
    78b8:	61 95       	neg	r22
    78ba:	7f 4f       	sbci	r23, 0xFF	; 255
    78bc:	8f 4f       	sbci	r24, 0xFF	; 255
    78be:	9f 4f       	sbci	r25, 0xFF	; 255
    78c0:	08 95       	ret

000078c2 <__mulshisi3>:
    78c2:	b7 ff       	sbrs	r27, 7
    78c4:	c9 c8       	rjmp	.-3694   	; 0x6a58 <__muluhisi3>

000078c6 <__mulohisi3>:
    78c6:	c8 d8       	rcall	.-3696   	; 0x6a58 <__muluhisi3>
    78c8:	82 1b       	sub	r24, r18
    78ca:	93 0b       	sbc	r25, r19
    78cc:	08 95       	ret

000078ce <_exit>:
    78ce:	f8 94       	cli

000078d0 <__stop_program>:
    78d0:	ff cf       	rjmp	.-2      	; 0x78d0 <__stop_program>
