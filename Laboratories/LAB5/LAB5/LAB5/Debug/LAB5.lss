
LAB5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00001d10  00001da4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001818  00800206  00800206  00001daa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001daa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ddc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000062a9  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002caf  00000000  00000000  000084e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026e5  00000000  00000000  0000b194  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009e8  00000000  00000000  0000d87c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f10  00000000  00000000  0000e264  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002512  00000000  00000000  00010174  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a0  00000000  00000000  00012686  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	f4 c1       	rjmp	.+1000   	; 0x41e <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	93 c2       	rjmp	.+1318   	; 0x5b8 <__vector_36>
      92:	00 00       	nop
      94:	75 c2       	rjmp	.+1258   	; 0x580 <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	a9 c1       	rjmp	.+850    	; 0x3fc <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e0 e1       	ldi	r30, 0x10	; 16
     14c:	fd e1       	ldi	r31, 0x1D	; 29
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a6 30       	cpi	r26, 0x06	; 6
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2a e1       	ldi	r18, 0x1A	; 26
     160:	a6 e0       	ldi	r26, 0x06	; 6
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	ae 31       	cpi	r26, 0x1E	; 30
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	d4 d0       	rcall	.+424    	; 0x318 <main>
     170:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
appDataReqBusy = false;
     176:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <appDataReqBusy>
     17a:	08 95       	ret

0000017c <appSendData>:
}

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
if (appDataReqBusy || 0 == appUartBufferPtr)
     180:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <appDataReqBusy>
     184:	81 11       	cpse	r24, r1
     186:	26 c0       	rjmp	.+76     	; 0x1d4 <appSendData+0x58>
     188:	c0 91 13 02 	lds	r28, 0x0213	; 0x800213 <appUartBufferPtr>
     18c:	cc 23       	and	r28, r28
     18e:	11 f1       	breq	.+68     	; 0x1d4 <appSendData+0x58>
return;

memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
     190:	4c 2f       	mov	r20, r28
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	64 e1       	ldi	r22, 0x14	; 20
     196:	72 e0       	ldi	r23, 0x02	; 2
     198:	81 e8       	ldi	r24, 0x81	; 129
     19a:	92 e0       	ldi	r25, 0x02	; 2
     19c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <memcpy>

appDataReq.dstAddr = 1-APP_ADDR;
     1a0:	ef ee       	ldi	r30, 0xEF	; 239
     1a2:	f2 e0       	ldi	r31, 0x02	; 2
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	96 83       	std	Z+6, r25	; 0x06
     1aa:	85 83       	std	Z+5, r24	; 0x05
appDataReq.dstEndpoint = APP_ENDPOINT;
     1ac:	d1 e0       	ldi	r29, 0x01	; 1
     1ae:	d7 83       	std	Z+7, r29	; 0x07
appDataReq.srcEndpoint = APP_ENDPOINT;
     1b0:	d0 87       	std	Z+8, r29	; 0x08
appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     1b2:	82 e0       	ldi	r24, 0x02	; 2
     1b4:	81 87       	std	Z+9, r24	; 0x09
appDataReq.data = appDataReqBuffer;
     1b6:	81 e8       	ldi	r24, 0x81	; 129
     1b8:	92 e0       	ldi	r25, 0x02	; 2
     1ba:	93 87       	std	Z+11, r25	; 0x0b
     1bc:	82 87       	std	Z+10, r24	; 0x0a
appDataReq.size = appUartBufferPtr;
     1be:	c4 87       	std	Z+12, r28	; 0x0c
appDataReq.confirm = appDataConf;
     1c0:	8b eb       	ldi	r24, 0xBB	; 187
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	96 87       	std	Z+14, r25	; 0x0e
     1c6:	85 87       	std	Z+13, r24	; 0x0d
NWK_DataReq(&appDataReq);
     1c8:	cf 01       	movw	r24, r30
     1ca:	ea d2       	rcall	.+1492   	; 0x7a0 <NWK_DataReq>

appUartBufferPtr = 0;
     1cc:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <appUartBufferPtr>
appDataReqBusy = true;
     1d0:	d0 93 ee 02 	sts	0x02EE, r29	; 0x8002ee <appDataReqBusy>
}
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <appTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
appSendData();
     1da:	d0 cf       	rjmp	.-96     	; 0x17c <appSendData>
     1dc:	08 95       	ret

000001de <appTimerHandlerMOJ>:
	return true;
}

static SYS_Timer_t appTimerMOJ;
static void appTimerHandlerMOJ(SYS_Timer_t *timer)
{
     1de:	cf 93       	push	r28
}

static void appSendDataTemp(void)
{
	static char ack = 59;
	appDataReq.dstAddr = 1-APP_ADDR;
     1e0:	ef ee       	ldi	r30, 0xEF	; 239
     1e2:	f2 e0       	ldi	r31, 0x02	; 2
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	96 83       	std	Z+6, r25	; 0x06
     1ea:	85 83       	std	Z+5, r24	; 0x05
	appDataReq.dstEndpoint = APP_ENDPOINT;
     1ec:	c1 e0       	ldi	r28, 0x01	; 1
     1ee:	c7 83       	std	Z+7, r28	; 0x07
	appDataReq.srcEndpoint = APP_ENDPOINT;
     1f0:	c0 87       	std	Z+8, r28	; 0x08
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	81 87       	std	Z+9, r24	; 0x09
	appDataReq.data = &ack;
     1f6:	85 e0       	ldi	r24, 0x05	; 5
     1f8:	92 e0       	ldi	r25, 0x02	; 2
     1fa:	93 87       	std	Z+11, r25	; 0x0b
     1fc:	82 87       	std	Z+10, r24	; 0x0a
	appDataReq.size = sizeof(char);
     1fe:	c4 87       	std	Z+12, r28	; 0x0c
	appDataReq.confirm = appDataConf;
     200:	8b eb       	ldi	r24, 0xBB	; 187
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	96 87       	std	Z+14, r25	; 0x0e
     206:	85 87       	std	Z+13, r24	; 0x0d
	NWK_DataReq(&appDataReq);
     208:	cf 01       	movw	r24, r30
     20a:	ca d2       	rcall	.+1428   	; 0x7a0 <NWK_DataReq>

	appUartBufferPtr = 0;
     20c:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <appUartBufferPtr>
	appDataReqBusy = true;
     210:	c0 93 ee 02 	sts	0x02EE, r28	; 0x8002ee <appDataReqBusy>
	// handle timer event
	appSendDataTemp();
	
	//If (timeToStop)
	//SYS_TimerStop(timer);
}
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <appDataInd>:
return true;
}
*/

static bool appDataInd(NWK_DataInd_t *ind)
{
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
     21c:	cf 93       	push	r28
     21e:	8c 01       	movw	r16, r24
	if ((ind->data[0] == 06 && ind->size == 1 ) || (ind->data[0] == 79 && ind->data[1] == 75 && ind->size == 2 )) {
     220:	dc 01       	movw	r26, r24
     222:	17 96       	adiw	r26, 0x07	; 7
     224:	ed 91       	ld	r30, X+
     226:	fc 91       	ld	r31, X
     228:	18 97       	sbiw	r26, 0x08	; 8
     22a:	80 81       	ld	r24, Z
     22c:	86 30       	cpi	r24, 0x06	; 6
     22e:	29 f4       	brne	.+10     	; 0x23a <appDataInd+0x22>
     230:	19 96       	adiw	r26, 0x09	; 9
     232:	8c 91       	ld	r24, X
     234:	81 30       	cpi	r24, 0x01	; 1
     236:	51 f4       	brne	.+20     	; 0x24c <appDataInd+0x34>
     238:	0f c0       	rjmp	.+30     	; 0x258 <appDataInd+0x40>
     23a:	8f 34       	cpi	r24, 0x4F	; 79
     23c:	39 f4       	brne	.+14     	; 0x24c <appDataInd+0x34>
     23e:	81 81       	ldd	r24, Z+1	; 0x01
     240:	8b 34       	cpi	r24, 0x4B	; 75
     242:	21 f4       	brne	.+8      	; 0x24c <appDataInd+0x34>
     244:	f8 01       	movw	r30, r16
     246:	81 85       	ldd	r24, Z+9	; 0x09
     248:	82 30       	cpi	r24, 0x02	; 2
     24a:	31 f0       	breq	.+12     	; 0x258 <appDataInd+0x40>
		HAL_UartWriteByte(ind->rssi);
		HAL_UartWriteByte(ind->dstAddr >> 8 );
		HAL_UartWriteByte(ind->dstAddr & 0xff);
		*/
		} else {
		for (uint8_t i = 0; i < ind->size; i++) {
     24c:	d8 01       	movw	r26, r16
     24e:	19 96       	adiw	r26, 0x09	; 9
     250:	8c 91       	ld	r24, X
     252:	81 11       	cpse	r24, r1
     254:	04 c0       	rjmp	.+8      	; 0x25e <appDataInd+0x46>
     256:	12 c0       	rjmp	.+36     	; 0x27c <appDataInd+0x64>
*/

static bool appDataInd(NWK_DataInd_t *ind)
{
	if ((ind->data[0] == 06 && ind->size == 1 ) || (ind->data[0] == 79 && ind->data[1] == 75 && ind->size == 2 )) {
		HAL_UartWriteByte('|');
     258:	8c e7       	ldi	r24, 0x7C	; 124
     25a:	45 d1       	rcall	.+650    	; 0x4e6 <HAL_UartWriteByte>
     25c:	29 c0       	rjmp	.+82     	; 0x2b0 <appDataInd+0x98>
		HAL_UartWriteByte(ind->rssi);
		HAL_UartWriteByte(ind->dstAddr >> 8 );
		HAL_UartWriteByte(ind->dstAddr & 0xff);
		*/
		} else {
		for (uint8_t i = 0; i < ind->size; i++) {
     25e:	c0 e0       	ldi	r28, 0x00	; 0
			HAL_UartWriteByte(ind->data[i]);
     260:	d8 01       	movw	r26, r16
     262:	17 96       	adiw	r26, 0x07	; 7
     264:	ed 91       	ld	r30, X+
     266:	fc 91       	ld	r31, X
     268:	18 97       	sbiw	r26, 0x08	; 8
     26a:	ec 0f       	add	r30, r28
     26c:	f1 1d       	adc	r31, r1
     26e:	80 81       	ld	r24, Z
     270:	3a d1       	rcall	.+628    	; 0x4e6 <HAL_UartWriteByte>
		HAL_UartWriteByte(ind->rssi);
		HAL_UartWriteByte(ind->dstAddr >> 8 );
		HAL_UartWriteByte(ind->dstAddr & 0xff);
		*/
		} else {
		for (uint8_t i = 0; i < ind->size; i++) {
     272:	cf 5f       	subi	r28, 0xFF	; 255
     274:	f8 01       	movw	r30, r16
     276:	81 85       	ldd	r24, Z+9	; 0x09
     278:	c8 17       	cp	r28, r24
     27a:	90 f3       	brcs	.-28     	; 0x260 <appDataInd+0x48>
}
/*- Implementations --------------------------------------------------------*/
static void appSendDataRecv(void)
{
	static char ack = 06;
	appDataReq.dstAddr = 1-APP_ADDR;
     27c:	ef ee       	ldi	r30, 0xEF	; 239
     27e:	f2 e0       	ldi	r31, 0x02	; 2
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	96 83       	std	Z+6, r25	; 0x06
     286:	85 83       	std	Z+5, r24	; 0x05
	appDataReq.dstEndpoint = APP_ENDPOINT;
     288:	c1 e0       	ldi	r28, 0x01	; 1
     28a:	c7 83       	std	Z+7, r28	; 0x07
	appDataReq.srcEndpoint = APP_ENDPOINT;
     28c:	c0 87       	std	Z+8, r28	; 0x08
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	81 87       	std	Z+9, r24	; 0x09
	appDataReq.data = &ack;
     292:	84 e0       	ldi	r24, 0x04	; 4
     294:	92 e0       	ldi	r25, 0x02	; 2
     296:	93 87       	std	Z+11, r25	; 0x0b
     298:	82 87       	std	Z+10, r24	; 0x0a
	appDataReq.size = sizeof(char);
     29a:	c4 87       	std	Z+12, r28	; 0x0c
	appDataReq.confirm = appDataConf;
     29c:	8b eb       	ldi	r24, 0xBB	; 187
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	96 87       	std	Z+14, r25	; 0x0e
	NWK_DataReq(&appDataReq);
     2a2:	85 87       	std	Z+13, r24	; 0x0d
     2a4:	cf 01       	movw	r24, r30
     2a6:	7c d2       	rcall	.+1272   	; 0x7a0 <NWK_DataReq>

	appUartBufferPtr = 0;
     2a8:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <appUartBufferPtr>
	appDataReqBusy = true;
     2ac:	c0 93 ee 02 	sts	0x02EE, r28	; 0x8002ee <appDataReqBusy>
			HAL_UartWriteByte(ind->data[i]);
		}
		appSendDataRecv();
	}
	return true;
}
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	cf 91       	pop	r28
     2b4:	1f 91       	pop	r17
     2b6:	0f 91       	pop	r16
     2b8:	08 95       	ret

000002ba <HAL_UartBytesReceived>:


/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
     2ba:	ff 92       	push	r15
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	8c 01       	movw	r16, r24
for (uint16_t i = 0; i < bytes; i++)
     2c6:	89 2b       	or	r24, r25
     2c8:	c9 f0       	breq	.+50     	; 0x2fc <HAL_UartBytesReceived+0x42>
     2ca:	c0 e0       	ldi	r28, 0x00	; 0
     2cc:	d0 e0       	ldi	r29, 0x00	; 0
{
uint8_t byte = HAL_UartReadByte();
     2ce:	32 d1       	rcall	.+612    	; 0x534 <HAL_UartReadByte>
     2d0:	f8 2e       	mov	r15, r24

if (appUartBufferPtr == sizeof(appUartBuffer))
     2d2:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <appUartBufferPtr>
     2d6:	8d 36       	cpi	r24, 0x6D	; 109
appSendData();
     2d8:	09 f4       	brne	.+2      	; 0x2dc <HAL_UartBytesReceived+0x22>
     2da:	50 df       	rcall	.-352    	; 0x17c <appSendData>

if (appUartBufferPtr < sizeof(appUartBuffer))
     2dc:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <appUartBufferPtr>
     2e0:	ed 36       	cpi	r30, 0x6D	; 109
     2e2:	40 f4       	brcc	.+16     	; 0x2f4 <HAL_UartBytesReceived+0x3a>
appUartBuffer[appUartBufferPtr++] = byte;
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	8e 0f       	add	r24, r30
     2e8:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <appUartBufferPtr>
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	ec 5e       	subi	r30, 0xEC	; 236
     2f0:	fd 4f       	sbci	r31, 0xFD	; 253
     2f2:	f0 82       	st	Z, r15

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
for (uint16_t i = 0; i < bytes; i++)
     2f4:	21 96       	adiw	r28, 0x01	; 1
     2f6:	0c 17       	cp	r16, r28
     2f8:	1d 07       	cpc	r17, r29
     2fa:	49 f7       	brne	.-46     	; 0x2ce <HAL_UartBytesReceived+0x14>

if (appUartBufferPtr < sizeof(appUartBuffer))
appUartBuffer[appUartBufferPtr++] = byte;
}

SYS_TimerStop(&appTimer);
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	93 e0       	ldi	r25, 0x03	; 3
     300:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <SYS_TimerStop>
SYS_TimerStart(&appTimer);
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	93 e0       	ldi	r25, 0x03	; 3
     308:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <SYS_TimerStart>
}
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	ff 90       	pop	r15
     316:	08 95       	ret

00000318 <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
SYS_Init();
     318:	0e 94 89 0c 	call	0x1912	; 0x1912 <SYS_Init>
HAL_UartInit(38400);
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	76 e9       	ldi	r23, 0x96	; 150
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	8b d0       	rcall	.+278    	; 0x43c <HAL_UartInit>
HAL_UartWriteByte('a');
     326:	81 e6       	ldi	r24, 0x61	; 97
     328:	de d0       	rcall	.+444    	; 0x4e6 <HAL_UartWriteByte>
	//If (timeToStop)
	//SYS_TimerStop(timer);
}
static void startTimerMOJ(void)
{
	appTimerMOJ.interval = 2000;
     32a:	e6 e0       	ldi	r30, 0x06	; 6
     32c:	f2 e0       	ldi	r31, 0x02	; 2
     32e:	80 ed       	ldi	r24, 0xD0	; 208
     330:	97 e0       	ldi	r25, 0x07	; 7
     332:	a0 e0       	ldi	r26, 0x00	; 0
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	86 83       	std	Z+6, r24	; 0x06
     338:	97 83       	std	Z+7, r25	; 0x07
     33a:	a0 87       	std	Z+8, r26	; 0x08
     33c:	b1 87       	std	Z+9, r27	; 0x09
	appTimerMOJ.mode = SYS_TIMER_PERIODIC_MODE;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	82 87       	std	Z+10, r24	; 0x0a
	appTimerMOJ.handler = appTimerHandlerMOJ;
     342:	8f ee       	ldi	r24, 0xEF	; 239
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	94 87       	std	Z+12, r25	; 0x0c
     348:	83 87       	std	Z+11, r24	; 0x0b
	SYS_TimerStart(&appTimerMOJ);
     34a:	cf 01       	movw	r24, r30
     34c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <SYS_TimerStart>

NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     350:	c0 e0       	ldi	r28, 0x00	; 0
     352:	d3 e0       	ldi	r29, 0x03	; 3
     354:	0f 2e       	mov	r0, r31
     356:	f4 e1       	ldi	r31, 0x14	; 20
     358:	cf 2e       	mov	r12, r31
     35a:	d1 2c       	mov	r13, r1
     35c:	e1 2c       	mov	r14, r1
     35e:	f1 2c       	mov	r15, r1
     360:	f0 2d       	mov	r31, r0
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
appTimer.handler = appTimerHandler;
     362:	0d ee       	ldi	r16, 0xED	; 237
     364:	10 e0       	ldi	r17, 0x00	; 0
HAL_UartWriteByte('a');
startTimerMOJ();

while (1)
{
SYS_TaskHandler();
     366:	0e 94 90 0c 	call	0x1920	; 0x1920 <SYS_TaskHandler>
HAL_UartTaskHandler();
     36a:	7d d1       	rcall	.+762    	; 0x666 <HAL_UartTaskHandler>

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
switch (appState)
     36c:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <appState>
     370:	81 11       	cpse	r24, r1

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
NWK_SetAddr(APP_ADDR);
     372:	f9 cf       	rjmp	.-14     	; 0x366 <main+0x4e>
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
NWK_SetPanId(APP_PANID);
     378:	d0 d1       	rcall	.+928    	; 0x71a <NWK_SetAddr>
     37a:	84 e0       	ldi	r24, 0x04	; 4
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	d4 d1       	rcall	.+936    	; 0x728 <NWK_SetPanId>
PHY_SetChannel(APP_CHANNEL);
     380:	84 e0       	ldi	r24, 0x04	; 4
     382:	0e 94 b8 0b 	call	0x1770	; 0x1770 <PHY_SetChannel>
#ifdef PHY_AT86RF212
PHY_SetBand(APP_BAND);
PHY_SetModulation(APP_MODULATION);
#endif
PHY_SetRxState(true);
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	0e 94 b4 0b 	call	0x1768	; 0x1768 <PHY_SetRxState>

NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     38c:	6c e0       	ldi	r22, 0x0C	; 12
     38e:	71 e0       	ldi	r23, 0x01	; 1
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	d1 d1       	rcall	.+930    	; 0x736 <NWK_OpenEndpoint>

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     394:	ce 82       	std	Y+6, r12	; 0x06
     396:	df 82       	std	Y+7, r13	; 0x07
     398:	e8 86       	std	Y+8, r14	; 0x08
     39a:	f9 86       	std	Y+9, r15	; 0x09
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
     39c:	1a 86       	std	Y+10, r1	; 0x0a
appTimer.handler = appTimerHandler;
     39e:	1c 87       	std	Y+12, r17	; 0x0c
     3a0:	0b 87       	std	Y+11, r16	; 0x0b
switch (appState)
{
case APP_STATE_INITIAL:
{
appInit();
appState = APP_STATE_IDLE;
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <appState>
     3a8:	de cf       	rjmp	.-68     	; 0x366 <main+0x4e>

000003aa <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     3aa:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	f8 94       	cli
     3b0:	a8 95       	wdr
     3b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3b6:	88 61       	ori	r24, 0x18	; 24
     3b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3bc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3c0:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     3c2:	e1 e6       	ldi	r30, 0x61	; 97
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 e8       	ldi	r24, 0x80	; 128
     3c8:	80 83       	st	Z, r24
  CLKPR = 0;
     3ca:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     3cc:	78 94       	sei

  HAL_TimerInit();
     3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <HAL_TimerInit>
     3d0:	08 95       	ret

000003d2 <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
     3d2:	10 92 f5 19 	sts	0x19F5, r1	; 0x8019f5 <halTimerIrqCount>
     3d6:	80 e1       	ldi	r24, 0x10	; 16
     3d8:	97 e2       	ldi	r25, 0x27	; 39
     3da:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     3de:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     3e2:	e1 ea       	ldi	r30, 0xA1	; 161
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	88 e0       	ldi	r24, 0x08	; 8
     3e8:	80 83       	st	Z, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	82 60       	ori	r24, 0x02	; 2
     3ee:	80 83       	st	Z, r24
     3f0:	e2 e7       	ldi	r30, 0x72	; 114
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	82 60       	ori	r24, 0x02	; 2
     3f8:	80 83       	st	Z, r24
     3fa:	08 95       	ret

000003fc <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     3fc:	1f 92       	push	r1
     3fe:	0f 92       	push	r0
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	0f 92       	push	r0
     404:	11 24       	eor	r1, r1
     406:	8f 93       	push	r24
  halTimerIrqCount++;
     408:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <halTimerIrqCount>
     40c:	8f 5f       	subi	r24, 0xFF	; 255
     40e:	80 93 f5 19 	sts	0x19F5, r24	; 0x8019f5 <halTimerIrqCount>
}
     412:	8f 91       	pop	r24
     414:	0f 90       	pop	r0
     416:	0f be       	out	0x3f, r0	; 63
     418:	0f 90       	pop	r0
     41a:	1f 90       	pop	r1
     41c:	18 95       	reti

0000041e <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     41e:	1f 92       	push	r1
     420:	0f 92       	push	r0
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	0f 92       	push	r0
     426:	11 24       	eor	r1, r1
     428:	8f 93       	push	r24
  halSleepTimerEvent = true;
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <halSleepTimerEvent>
}
     430:	8f 91       	pop	r24
     432:	0f 90       	pop	r0
     434:	0f be       	out	0x3f, r0	; 63
     436:	0f 90       	pop	r0
     438:	1f 90       	pop	r1
     43a:	18 95       	reti

0000043c <HAL_UartInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
     43c:	dc 01       	movw	r26, r24
     43e:	cb 01       	movw	r24, r22
     440:	88 0f       	add	r24, r24
     442:	99 1f       	adc	r25, r25
     444:	aa 1f       	adc	r26, r26
     446:	bb 1f       	adc	r27, r27
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	aa 1f       	adc	r26, r26
     44e:	bb 1f       	adc	r27, r27
     450:	9c 01       	movw	r18, r24
     452:	ad 01       	movw	r20, r26
     454:	22 0f       	add	r18, r18
     456:	33 1f       	adc	r19, r19
     458:	44 1f       	adc	r20, r20
     45a:	55 1f       	adc	r21, r21
     45c:	22 0f       	add	r18, r18
     45e:	33 1f       	adc	r19, r19
     460:	44 1f       	adc	r20, r20
     462:	55 1f       	adc	r21, r21
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	74 e2       	ldi	r23, 0x24	; 36
     468:	84 ef       	ldi	r24, 0xF4	; 244
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__udivmodsi4>
     470:	ba 01       	movw	r22, r20
     472:	a9 01       	movw	r20, r18
     474:	41 50       	subi	r20, 0x01	; 1
     476:	51 09       	sbc	r21, r1
     478:	61 09       	sbc	r22, r1
     47a:	71 09       	sbc	r23, r1

  UBRRxH = (brr >> 8) & 0xff;
     47c:	bb 27       	eor	r27, r27
     47e:	a7 2f       	mov	r26, r23
     480:	96 2f       	mov	r25, r22
     482:	85 2f       	mov	r24, r21
     484:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
  UBRRxL = (brr & 0xff);
     488:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
  UCSRxA = (1 << U2X1);
     48c:	82 e0       	ldi	r24, 0x02	; 2
     48e:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
     492:	88 e9       	ldi	r24, 0x98	; 152
     494:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
  UCSRxC = (3 << UCSZ10);
     498:	86 e0       	ldi	r24, 0x06	; 6
     49a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>

  txFifo.data = txData;
     49e:	ed e3       	ldi	r30, 0x3D	; 61
     4a0:	f6 e0       	ldi	r31, 0x06	; 6
     4a2:	8c ea       	ldi	r24, 0xAC	; 172
     4a4:	94 e0       	ldi	r25, 0x04	; 4
     4a6:	91 87       	std	Z+9, r25	; 0x09
     4a8:	80 87       	std	Z+8, r24	; 0x08
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
     4aa:	80 e9       	ldi	r24, 0x90	; 144
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	95 83       	std	Z+5, r25	; 0x05
     4b0:	84 83       	std	Z+4, r24	; 0x04
  txFifo.bytes = 0;
     4b2:	17 82       	std	Z+7, r1	; 0x07
     4b4:	16 82       	std	Z+6, r1	; 0x06
  txFifo.head = 0;
     4b6:	11 82       	std	Z+1, r1	; 0x01
     4b8:	10 82       	st	Z, r1
  txFifo.tail = 0;
     4ba:	13 82       	std	Z+3, r1	; 0x03
     4bc:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
     4be:	e2 ea       	ldi	r30, 0xA2	; 162
     4c0:	f4 e0       	ldi	r31, 0x04	; 4
     4c2:	21 e1       	ldi	r18, 0x11	; 17
     4c4:	33 e0       	ldi	r19, 0x03	; 3
     4c6:	31 87       	std	Z+9, r19	; 0x09
     4c8:	20 87       	std	Z+8, r18	; 0x08
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
     4ca:	95 83       	std	Z+5, r25	; 0x05
     4cc:	84 83       	std	Z+4, r24	; 0x04
  rxFifo.bytes = 0;
     4ce:	17 82       	std	Z+7, r1	; 0x07
     4d0:	16 82       	std	Z+6, r1	; 0x06
  rxFifo.head = 0;
     4d2:	11 82       	std	Z+1, r1	; 0x01
     4d4:	10 82       	st	Z, r1
  rxFifo.tail = 0;
     4d6:	13 82       	std	Z+3, r1	; 0x03
     4d8:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <udrEmpty>
  newData = false;
     4e0:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <newData>
     4e4:	08 95       	ret

000004e6 <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
     4ea:	ed e3       	ldi	r30, 0x3D	; 61
     4ec:	f6 e0       	ldi	r31, 0x06	; 6
     4ee:	26 81       	ldd	r18, Z+6	; 0x06
     4f0:	37 81       	ldd	r19, Z+7	; 0x07
     4f2:	64 81       	ldd	r22, Z+4	; 0x04
     4f4:	75 81       	ldd	r23, Z+5	; 0x05
     4f6:	26 17       	cp	r18, r22
     4f8:	37 07       	cpc	r19, r23
     4fa:	c9 f0       	breq	.+50     	; 0x52e <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
     4fc:	c0 85       	ldd	r28, Z+8	; 0x08
     4fe:	d1 85       	ldd	r29, Z+9	; 0x09
     500:	42 81       	ldd	r20, Z+2	; 0x02
     502:	53 81       	ldd	r21, Z+3	; 0x03
     504:	da 01       	movw	r26, r20
     506:	11 96       	adiw	r26, 0x01	; 1
     508:	b3 83       	std	Z+3, r27	; 0x03
     50a:	a2 83       	std	Z+2, r26	; 0x02
     50c:	fe 01       	movw	r30, r28
     50e:	e4 0f       	add	r30, r20
     510:	f5 1f       	adc	r31, r21
     512:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
     514:	6a 17       	cp	r22, r26
     516:	7b 07       	cpc	r23, r27
     518:	21 f4       	brne	.+8      	; 0x522 <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
     51a:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <txFifo+0x3>
     51e:	10 92 3f 06 	sts	0x063F, r1	; 0x80063f <txFifo+0x2>
  txFifo.bytes++;
     522:	2f 5f       	subi	r18, 0xFF	; 255
     524:	3f 4f       	sbci	r19, 0xFF	; 255
     526:	30 93 44 06 	sts	0x0644, r19	; 0x800644 <txFifo+0x7>
     52a:	20 93 43 06 	sts	0x0643, r18	; 0x800643 <txFifo+0x6>
}
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
     534:	4f b7       	in	r20, 0x3f	; 63
     536:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
     538:	e2 ea       	ldi	r30, 0xA2	; 162
     53a:	f4 e0       	ldi	r31, 0x04	; 4
     53c:	20 85       	ldd	r18, Z+8	; 0x08
     53e:	31 85       	ldd	r19, Z+9	; 0x09
     540:	80 81       	ld	r24, Z
     542:	91 81       	ldd	r25, Z+1	; 0x01
     544:	bc 01       	movw	r22, r24
     546:	6f 5f       	subi	r22, 0xFF	; 255
     548:	7f 4f       	sbci	r23, 0xFF	; 255
     54a:	71 83       	std	Z+1, r23	; 0x01
     54c:	60 83       	st	Z, r22
     54e:	d9 01       	movw	r26, r18
     550:	a8 0f       	add	r26, r24
     552:	b9 1f       	adc	r27, r25
     554:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
     556:	60 81       	ld	r22, Z
     558:	71 81       	ldd	r23, Z+1	; 0x01
     55a:	24 81       	ldd	r18, Z+4	; 0x04
     55c:	35 81       	ldd	r19, Z+5	; 0x05
     55e:	62 17       	cp	r22, r18
     560:	73 07       	cpc	r23, r19
     562:	21 f4       	brne	.+8      	; 0x56c <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
     564:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <rxFifo+0x1>
     568:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <rxFifo>
    rxFifo.bytes--;
     56c:	e2 ea       	ldi	r30, 0xA2	; 162
     56e:	f4 e0       	ldi	r31, 0x04	; 4
     570:	26 81       	ldd	r18, Z+6	; 0x06
     572:	37 81       	ldd	r19, Z+7	; 0x07
     574:	21 50       	subi	r18, 0x01	; 1
     576:	31 09       	sbc	r19, r1
     578:	37 83       	std	Z+7, r19	; 0x07
     57a:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
     57c:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
     57e:	08 95       	ret

00000580 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     580:	1f 92       	push	r1
     582:	0f 92       	push	r0
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	0f 92       	push	r0
     588:	11 24       	eor	r1, r1
     58a:	0b b6       	in	r0, 0x3b	; 59
     58c:	0f 92       	push	r0
     58e:	8f 93       	push	r24
     590:	ef 93       	push	r30
     592:	ff 93       	push	r31
  udrEmpty = true;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     59a:	e9 ec       	ldi	r30, 0xC9	; 201
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	80 81       	ld	r24, Z
     5a0:	8f 7d       	andi	r24, 0xDF	; 223
     5a2:	80 83       	st	Z, r24
}
     5a4:	ff 91       	pop	r31
     5a6:	ef 91       	pop	r30
     5a8:	8f 91       	pop	r24
     5aa:	0f 90       	pop	r0
     5ac:	0b be       	out	0x3b, r0	; 59
     5ae:	0f 90       	pop	r0
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	0f 90       	pop	r0
     5b4:	1f 90       	pop	r1
     5b6:	18 95       	reti

000005b8 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     5b8:	1f 92       	push	r1
     5ba:	0f 92       	push	r0
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	0f 92       	push	r0
     5c0:	11 24       	eor	r1, r1
     5c2:	0b b6       	in	r0, 0x3b	; 59
     5c4:	0f 92       	push	r0
     5c6:	2f 93       	push	r18
     5c8:	3f 93       	push	r19
     5ca:	4f 93       	push	r20
     5cc:	5f 93       	push	r21
     5ce:	6f 93       	push	r22
     5d0:	7f 93       	push	r23
     5d2:	8f 93       	push	r24
     5d4:	9f 93       	push	r25
     5d6:	af 93       	push	r26
     5d8:	bf 93       	push	r27
     5da:	ef 93       	push	r30
     5dc:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     5de:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
     5e2:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     5e6:	8c 71       	andi	r24, 0x1C	; 28
     5e8:	59 f5       	brne	.+86     	; 0x640 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     5ea:	e2 ea       	ldi	r30, 0xA2	; 162
     5ec:	f4 e0       	ldi	r31, 0x04	; 4
     5ee:	46 81       	ldd	r20, Z+6	; 0x06
     5f0:	57 81       	ldd	r21, Z+7	; 0x07
     5f2:	84 81       	ldd	r24, Z+4	; 0x04
     5f4:	95 81       	ldd	r25, Z+5	; 0x05
     5f6:	48 17       	cp	r20, r24
     5f8:	59 07       	cpc	r21, r25
     5fa:	11 f1       	breq	.+68     	; 0x640 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     5fc:	40 85       	ldd	r20, Z+8	; 0x08
     5fe:	51 85       	ldd	r21, Z+9	; 0x09
     600:	82 81       	ldd	r24, Z+2	; 0x02
     602:	93 81       	ldd	r25, Z+3	; 0x03
     604:	bc 01       	movw	r22, r24
     606:	6f 5f       	subi	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	73 83       	std	Z+3, r23	; 0x03
     60c:	62 83       	std	Z+2, r22	; 0x02
     60e:	da 01       	movw	r26, r20
     610:	a8 0f       	add	r26, r24
     612:	b9 1f       	adc	r27, r25
     614:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     616:	22 81       	ldd	r18, Z+2	; 0x02
     618:	33 81       	ldd	r19, Z+3	; 0x03
     61a:	84 81       	ldd	r24, Z+4	; 0x04
     61c:	95 81       	ldd	r25, Z+5	; 0x05
     61e:	28 17       	cp	r18, r24
     620:	39 07       	cpc	r19, r25
     622:	21 f4       	brne	.+8      	; 0x62c <__vector_36+0x74>
      rxFifo.tail = 0;
     624:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <rxFifo+0x3>
     628:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <rxFifo+0x2>
    rxFifo.bytes++;
     62c:	e2 ea       	ldi	r30, 0xA2	; 162
     62e:	f4 e0       	ldi	r31, 0x04	; 4
     630:	86 81       	ldd	r24, Z+6	; 0x06
     632:	97 81       	ldd	r25, Z+7	; 0x07
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	97 83       	std	Z+7, r25	; 0x07
     638:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     640:	ff 91       	pop	r31
     642:	ef 91       	pop	r30
     644:	bf 91       	pop	r27
     646:	af 91       	pop	r26
     648:	9f 91       	pop	r25
     64a:	8f 91       	pop	r24
     64c:	7f 91       	pop	r23
     64e:	6f 91       	pop	r22
     650:	5f 91       	pop	r21
     652:	4f 91       	pop	r20
     654:	3f 91       	pop	r19
     656:	2f 91       	pop	r18
     658:	0f 90       	pop	r0
     65a:	0b be       	out	0x3b, r0	; 59
     65c:	0f 90       	pop	r0
     65e:	0f be       	out	0x3f, r0	; 63
     660:	0f 90       	pop	r0
     662:	1f 90       	pop	r1
     664:	18 95       	reti

00000666 <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     666:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <txFifo+0x6>
     66a:	90 91 44 06 	lds	r25, 0x0644	; 0x800644 <txFifo+0x7>
     66e:	00 97       	sbiw	r24, 0x00	; 0
     670:	69 f1       	breq	.+90     	; 0x6cc <HAL_UartTaskHandler+0x66>
     672:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <udrEmpty>
     676:	22 23       	and	r18, r18
     678:	49 f1       	breq	.+82     	; 0x6cc <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     67a:	ed e3       	ldi	r30, 0x3D	; 61
     67c:	f6 e0       	ldi	r31, 0x06	; 6
     67e:	60 85       	ldd	r22, Z+8	; 0x08
     680:	71 85       	ldd	r23, Z+9	; 0x09
     682:	20 81       	ld	r18, Z
     684:	31 81       	ldd	r19, Z+1	; 0x01
     686:	a9 01       	movw	r20, r18
     688:	4f 5f       	subi	r20, 0xFF	; 255
     68a:	5f 4f       	sbci	r21, 0xFF	; 255
     68c:	51 83       	std	Z+1, r21	; 0x01
     68e:	40 83       	st	Z, r20
     690:	db 01       	movw	r26, r22
     692:	a2 0f       	add	r26, r18
     694:	b3 1f       	adc	r27, r19
     696:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     698:	64 81       	ldd	r22, Z+4	; 0x04
     69a:	75 81       	ldd	r23, Z+5	; 0x05
     69c:	46 17       	cp	r20, r22
     69e:	57 07       	cpc	r21, r23
     6a0:	21 f4       	brne	.+8      	; 0x6aa <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     6a2:	10 92 3e 06 	sts	0x063E, r1	; 0x80063e <txFifo+0x1>
     6a6:	10 92 3d 06 	sts	0x063D, r1	; 0x80063d <txFifo>
    txFifo.bytes--;
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	90 93 44 06 	sts	0x0644, r25	; 0x800644 <txFifo+0x7>
     6b0:	80 93 43 06 	sts	0x0643, r24	; 0x800643 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     6b4:	9f b7       	in	r25, 0x3f	; 63
     6b6:	f8 94       	cli
      UDRx = byte;
     6b8:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
     6bc:	e9 ec       	ldi	r30, 0xC9	; 201
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	80 62       	ori	r24, 0x20	; 32
     6c4:	80 83       	st	Z, r24
      udrEmpty = false;
     6c6:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     6ca:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     6cc:	2f b7       	in	r18, 0x3f	; 63
     6ce:	f8 94       	cli
      new = newData;
     6d0:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <newData>
      newData = false;
     6d4:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <newData>
      bytes = rxFifo.bytes;
     6d8:	40 91 a8 04 	lds	r20, 0x04A8	; 0x8004a8 <rxFifo+0x6>
     6dc:	50 91 a9 04 	lds	r21, 0x04A9	; 0x8004a9 <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
     6e0:	2f bf       	out	0x3f, r18	; 63

    if (new)
     6e2:	99 23       	and	r25, r25
     6e4:	11 f0       	breq	.+4      	; 0x6ea <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
     6e6:	ca 01       	movw	r24, r20
     6e8:	e8 cd       	rjmp	.-1072   	; 0x2ba <HAL_UartBytesReceived>
     6ea:	08 95       	ret

000006ec <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     6ec:	e6 ef       	ldi	r30, 0xF6	; 246
     6ee:	f9 e1       	ldi	r31, 0x19	; 25
     6f0:	14 82       	std	Z+4, r1	; 0x04
     6f2:	15 82       	std	Z+5, r1	; 0x05
     6f4:	11 82       	std	Z+1, r1	; 0x01
     6f6:	10 82       	st	Z, r1
     6f8:	17 a2       	std	Z+39, r1	; 0x27
     6fa:	16 a2       	std	Z+38, r1	; 0x26
     6fc:	ec ef       	ldi	r30, 0xFC	; 252
     6fe:	f9 e1       	ldi	r31, 0x19	; 25
     700:	8c e1       	ldi	r24, 0x1C	; 28
     702:	9a e1       	ldi	r25, 0x1A	; 26
     704:	11 92       	st	Z+, r1
     706:	11 92       	st	Z+, r1
     708:	e8 17       	cp	r30, r24
     70a:	f9 07       	cpc	r31, r25
     70c:	d9 f7       	brne	.-10     	; 0x704 <NWK_Init+0x18>
     70e:	42 d6       	rcall	.+3204   	; 0x1394 <nwkTxInit>
     710:	60 d3       	rcall	.+1728   	; 0xdd2 <nwkRxInit>
     712:	0d d1       	rcall	.+538    	; 0x92e <nwkFrameInit>
     714:	40 d0       	rcall	.+128    	; 0x796 <nwkDataReqInit>
     716:	92 c1       	rjmp	.+804    	; 0xa3c <nwkRouteInit>
     718:	08 95       	ret

0000071a <NWK_SetAddr>:
     71a:	90 93 f7 19 	sts	0x19F7, r25	; 0x8019f7 <nwkIb+0x1>
     71e:	80 93 f6 19 	sts	0x19F6, r24	; 0x8019f6 <nwkIb>
     722:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <PHY_SetShortAddr>
     726:	08 95       	ret

00000728 <NWK_SetPanId>:
     728:	90 93 f9 19 	sts	0x19F9, r25	; 0x8019f9 <nwkIb+0x3>
     72c:	80 93 f8 19 	sts	0x19F8, r24	; 0x8019f8 <nwkIb+0x2>
     730:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <PHY_SetPanId>
     734:	08 95       	ret

00000736 <NWK_OpenEndpoint>:
     736:	e8 2f       	mov	r30, r24
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	ee 0f       	add	r30, r30
     73c:	ff 1f       	adc	r31, r31
     73e:	e4 50       	subi	r30, 0x04	; 4
     740:	f6 4e       	sbci	r31, 0xE6	; 230
     742:	71 83       	std	Z+1, r23	; 0x01
     744:	60 83       	st	Z, r22
     746:	08 95       	ret

00000748 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     748:	8b d3       	rcall	.+1814   	; 0xe60 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     74a:	20 d7       	rcall	.+3648   	; 0x158c <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     74c:	4d c0       	rjmp	.+154    	; 0x7e8 <nwkDataReqTaskHandler>
     74e:	08 95       	ret

00000750 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     750:	e0 91 47 06 	lds	r30, 0x0647	; 0x800647 <nwkDataReqQueue>
     754:	f0 91 48 06 	lds	r31, 0x0648	; 0x800648 <nwkDataReqQueue+0x1>
     758:	30 97       	sbiw	r30, 0x00	; 0
     75a:	d9 f0       	breq	.+54     	; 0x792 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     75c:	22 81       	ldd	r18, Z+2	; 0x02
     75e:	33 81       	ldd	r19, Z+3	; 0x03
     760:	82 17       	cp	r24, r18
     762:	93 07       	cpc	r25, r19
     764:	89 f4       	brne	.+34     	; 0x788 <nwkDataReqTxConf+0x38>
     766:	05 c0       	rjmp	.+10     	; 0x772 <nwkDataReqTxConf+0x22>
     768:	22 81       	ldd	r18, Z+2	; 0x02
     76a:	33 81       	ldd	r19, Z+3	; 0x03
     76c:	28 17       	cp	r18, r24
     76e:	39 07       	cpc	r19, r25
     770:	59 f4       	brne	.+22     	; 0x788 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     772:	dc 01       	movw	r26, r24
     774:	ad 57       	subi	r26, 0x7D	; 125
     776:	bf 4f       	sbci	r27, 0xFF	; 255
     778:	2c 91       	ld	r18, X
     77a:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     77c:	13 96       	adiw	r26, 0x03	; 3
     77e:	2c 91       	ld	r18, X
     780:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     782:	22 e0       	ldi	r18, 0x02	; 2
     784:	24 83       	std	Z+4, r18	; 0x04
      break;
     786:	05 c0       	rjmp	.+10     	; 0x792 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     788:	01 90       	ld	r0, Z+
     78a:	f0 81       	ld	r31, Z
     78c:	e0 2d       	mov	r30, r0
     78e:	30 97       	sbiw	r30, 0x00	; 0
     790:	59 f7       	brne	.-42     	; 0x768 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     792:	11 c1       	rjmp	.+546    	; 0x9b6 <nwkFrameFree>
     794:	08 95       	ret

00000796 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     796:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <nwkDataReqQueue+0x1>
     79a:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <nwkDataReqQueue>
     79e:	08 95       	ret

000007a0 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     7a0:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     7a2:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     7a4:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     7a6:	13 82       	std	Z+3, r1	; 0x03
     7a8:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     7aa:	a6 ef       	ldi	r26, 0xF6	; 246
     7ac:	b9 e1       	ldi	r27, 0x19	; 25
     7ae:	96 96       	adiw	r26, 0x26	; 38
     7b0:	8d 91       	ld	r24, X+
     7b2:	9c 91       	ld	r25, X
     7b4:	97 97       	sbiw	r26, 0x27	; 39
     7b6:	01 96       	adiw	r24, 0x01	; 1
     7b8:	97 96       	adiw	r26, 0x27	; 39
     7ba:	9c 93       	st	X, r25
     7bc:	8e 93       	st	-X, r24
     7be:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     7c0:	80 91 47 06 	lds	r24, 0x0647	; 0x800647 <nwkDataReqQueue>
     7c4:	90 91 48 06 	lds	r25, 0x0648	; 0x800648 <nwkDataReqQueue+0x1>
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	39 f4       	brne	.+14     	; 0x7da <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     7cc:	11 82       	std	Z+1, r1	; 0x01
     7ce:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     7d0:	f0 93 48 06 	sts	0x0648, r31	; 0x800648 <nwkDataReqQueue+0x1>
     7d4:	e0 93 47 06 	sts	0x0647, r30	; 0x800647 <nwkDataReqQueue>
     7d8:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     7da:	91 83       	std	Z+1, r25	; 0x01
     7dc:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     7de:	f0 93 48 06 	sts	0x0648, r31	; 0x800648 <nwkDataReqQueue+0x1>
     7e2:	e0 93 47 06 	sts	0x0647, r30	; 0x800647 <nwkDataReqQueue>
     7e6:	08 95       	ret

000007e8 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     7f0:	e0 91 47 06 	lds	r30, 0x0647	; 0x800647 <nwkDataReqQueue>
     7f4:	f0 91 48 06 	lds	r31, 0x0648	; 0x800648 <nwkDataReqQueue+0x1>
     7f8:	30 97       	sbiw	r30, 0x00	; 0
     7fa:	09 f4       	brne	.+2      	; 0x7fe <nwkDataReqTaskHandler+0x16>
     7fc:	93 c0       	rjmp	.+294    	; 0x924 <nwkDataReqTaskHandler+0x13c>
     7fe:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     800:	8c 81       	ldd	r24, Y+4	; 0x04
     802:	88 23       	and	r24, r24
     804:	21 f0       	breq	.+8      	; 0x80e <nwkDataReqTaskHandler+0x26>
     806:	82 30       	cpi	r24, 0x02	; 2
     808:	09 f4       	brne	.+2      	; 0x80c <nwkDataReqTaskHandler+0x24>
     80a:	66 c0       	rjmp	.+204    	; 0x8d8 <nwkDataReqTaskHandler+0xf0>
     80c:	85 c0       	rjmp	.+266    	; 0x918 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     80e:	9a d0       	rcall	.+308    	; 0x944 <nwkFrameAlloc>
     810:	8c 01       	movw	r16, r24
     812:	00 97       	sbiw	r24, 0x00	; 0
     814:	21 f4       	brne	.+8      	; 0x81e <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     816:	82 e0       	ldi	r24, 0x02	; 2
     818:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     81a:	8f 87       	std	Y+15, r24	; 0x0f
     81c:	83 c0       	rjmp	.+262    	; 0x924 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     81e:	9b 83       	std	Y+3, r25	; 0x03
     820:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     826:	f8 01       	movw	r30, r16
     828:	e9 57       	subi	r30, 0x79	; 121
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	88 ea       	ldi	r24, 0xA8	; 168
     82e:	93 e0       	ldi	r25, 0x03	; 3
     830:	91 83       	std	Z+1, r25	; 0x01
     832:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     834:	31 97       	sbiw	r30, 0x01	; 1
     836:	89 85       	ldd	r24, Y+9	; 0x09
     838:	82 fb       	bst	r24, 2
     83a:	88 27       	eor	r24, r24
     83c:	80 f9       	bld	r24, 0
     83e:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     840:	99 85       	ldd	r25, Y+9	; 0x09
     842:	d8 01       	movw	r26, r16
     844:	1b 96       	adiw	r26, 0x0b	; 11
     846:	8c 91       	ld	r24, X
     848:	1b 97       	sbiw	r26, 0x0b	; 11
     84a:	90 fb       	bst	r25, 0
     84c:	80 f9       	bld	r24, 0
     84e:	1b 96       	adiw	r26, 0x0b	; 11
     850:	8c 93       	st	X, r24
     852:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     854:	99 85       	ldd	r25, Y+9	; 0x09
     856:	93 fb       	bst	r25, 3
     858:	99 27       	eor	r25, r25
     85a:	90 f9       	bld	r25, 0
     85c:	90 fb       	bst	r25, 0
     85e:	82 f9       	bld	r24, 2
     860:	1b 96       	adiw	r26, 0x0b	; 11
     862:	8c 93       	st	X, r24
     864:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     866:	e6 ef       	ldi	r30, 0xF6	; 246
     868:	f9 e1       	ldi	r31, 0x19	; 25
     86a:	84 81       	ldd	r24, Z+4	; 0x04
     86c:	8f 5f       	subi	r24, 0xFF	; 255
     86e:	84 83       	std	Z+4, r24	; 0x04
     870:	1c 96       	adiw	r26, 0x0c	; 12
     872:	8c 93       	st	X, r24
     874:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	1e 96       	adiw	r26, 0x0e	; 14
     87c:	9c 93       	st	X, r25
     87e:	8e 93       	st	-X, r24
     880:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     882:	8d 81       	ldd	r24, Y+5	; 0x05
     884:	9e 81       	ldd	r25, Y+6	; 0x06
     886:	50 96       	adiw	r26, 0x10	; 16
     888:	9c 93       	st	X, r25
     88a:	8e 93       	st	-X, r24
     88c:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     88e:	88 85       	ldd	r24, Y+8	; 0x08
     890:	98 2f       	mov	r25, r24
     892:	9f 70       	andi	r25, 0x0F	; 15
     894:	51 96       	adiw	r26, 0x11	; 17
     896:	8c 91       	ld	r24, X
     898:	51 97       	sbiw	r26, 0x11	; 17
     89a:	80 7f       	andi	r24, 0xF0	; 240
     89c:	89 2b       	or	r24, r25
     89e:	51 96       	adiw	r26, 0x11	; 17
     8a0:	8c 93       	st	X, r24
     8a2:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     8a4:	9f 81       	ldd	r25, Y+7	; 0x07
     8a6:	92 95       	swap	r25
     8a8:	90 7f       	andi	r25, 0xF0	; 240
     8aa:	8f 70       	andi	r24, 0x0F	; 15
     8ac:	89 2b       	or	r24, r25
     8ae:	51 96       	adiw	r26, 0x11	; 17
     8b0:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     8b2:	f8 01       	movw	r30, r16
     8b4:	ef 57       	subi	r30, 0x7F	; 127
     8b6:	ff 4f       	sbci	r31, 0xFF	; 255
     8b8:	4c 85       	ldd	r20, Y+12	; 0x0c
     8ba:	50 e0       	ldi	r21, 0x00	; 0
     8bc:	6a 85       	ldd	r22, Y+10	; 0x0a
     8be:	7b 85       	ldd	r23, Y+11	; 0x0b
     8c0:	80 81       	ld	r24, Z
     8c2:	91 81       	ldd	r25, Z+1	; 0x01
     8c4:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <memcpy>
  frame->size += req->size;
     8c8:	f8 01       	movw	r30, r16
     8ca:	91 81       	ldd	r25, Z+1	; 0x01
     8cc:	8c 85       	ldd	r24, Y+12	; 0x0c
     8ce:	89 0f       	add	r24, r25
     8d0:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     8d2:	c8 01       	movw	r24, r16
     8d4:	82 d5       	rcall	.+2820   	; 0x13da <nwkTxFrame>
     8d6:	26 c0       	rjmp	.+76     	; 0x924 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     8d8:	ec 17       	cp	r30, r28
     8da:	fd 07       	cpc	r31, r29
     8dc:	41 f4       	brne	.+16     	; 0x8ee <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     8de:	80 81       	ld	r24, Z
     8e0:	91 81       	ldd	r25, Z+1	; 0x01
     8e2:	90 93 48 06 	sts	0x0648, r25	; 0x800648 <nwkDataReqQueue+0x1>
     8e6:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <nwkDataReqQueue>
     8ea:	0a c0       	rjmp	.+20     	; 0x900 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     8ec:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     8ee:	80 81       	ld	r24, Z
     8f0:	91 81       	ldd	r25, Z+1	; 0x01
     8f2:	8c 17       	cp	r24, r28
     8f4:	9d 07       	cpc	r25, r29
     8f6:	d1 f7       	brne	.-12     	; 0x8ec <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     8f8:	88 81       	ld	r24, Y
     8fa:	99 81       	ldd	r25, Y+1	; 0x01
     8fc:	91 83       	std	Z+1, r25	; 0x01
     8fe:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     900:	e6 ef       	ldi	r30, 0xF6	; 246
     902:	f9 e1       	ldi	r31, 0x19	; 25
     904:	86 a1       	ldd	r24, Z+38	; 0x26
     906:	97 a1       	ldd	r25, Z+39	; 0x27
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	97 a3       	std	Z+39, r25	; 0x27
     90c:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     90e:	ed 85       	ldd	r30, Y+13	; 0x0d
     910:	fe 85       	ldd	r31, Y+14	; 0x0e
     912:	ce 01       	movw	r24, r28
     914:	19 95       	eicall
     916:	06 c0       	rjmp	.+12     	; 0x924 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     918:	09 90       	ld	r0, Y+
     91a:	d8 81       	ld	r29, Y
     91c:	c0 2d       	mov	r28, r0
     91e:	20 97       	sbiw	r28, 0x00	; 0
     920:	09 f0       	breq	.+2      	; 0x924 <nwkDataReqTaskHandler+0x13c>
     922:	6e cf       	rjmp	.-292    	; 0x800 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	08 95       	ret

0000092e <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     92e:	e9 e4       	ldi	r30, 0x49	; 73
     930:	f6 e0       	ldi	r31, 0x06	; 6
     932:	87 e5       	ldi	r24, 0x57	; 87
     934:	96 e1       	ldi	r25, 0x16	; 22
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     936:	10 82       	st	Z, r1
     938:	e7 57       	subi	r30, 0x77	; 119
     93a:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     93c:	e8 17       	cp	r30, r24
     93e:	f9 07       	cpc	r31, r25
     940:	d1 f7       	brne	.-12     	; 0x936 <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     942:	08 95       	ret

00000944 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     944:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <nwkFrameFrames>
     948:	88 23       	and	r24, r24
     94a:	59 f0       	breq	.+22     	; 0x962 <nwkFrameAlloc+0x1e>
     94c:	e2 ed       	ldi	r30, 0xD2	; 210
     94e:	f6 e0       	ldi	r31, 0x06	; 6
     950:	67 e5       	ldi	r22, 0x57	; 87
     952:	76 e1       	ldi	r23, 0x16	; 22
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	ac 01       	movw	r20, r24
     95a:	20 81       	ld	r18, Z
     95c:	21 11       	cpse	r18, r1
     95e:	22 c0       	rjmp	.+68     	; 0x9a4 <nwkFrameAlloc+0x60>
     960:	02 c0       	rjmp	.+4      	; 0x966 <nwkFrameAlloc+0x22>
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     966:	69 e8       	ldi	r22, 0x89	; 137
     968:	64 9f       	mul	r22, r20
     96a:	90 01       	movw	r18, r0
     96c:	65 9f       	mul	r22, r21
     96e:	30 0d       	add	r19, r0
     970:	11 24       	eor	r1, r1
     972:	c9 01       	movw	r24, r18
     974:	87 5b       	subi	r24, 0xB7	; 183
     976:	99 4f       	sbci	r25, 0xF9	; 249
     978:	fc 01       	movw	r30, r24
     97a:	11 92       	st	Z+, r1
     97c:	6a 95       	dec	r22
     97e:	e9 f7       	brne	.-6      	; 0x97a <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     980:	40 e1       	ldi	r20, 0x10	; 16
     982:	fc 01       	movw	r30, r24
     984:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     986:	ef 57       	subi	r30, 0x7F	; 127
     988:	ff 4f       	sbci	r31, 0xFF	; 255
     98a:	25 5a       	subi	r18, 0xA5	; 165
     98c:	39 4f       	sbci	r19, 0xF9	; 249
     98e:	31 83       	std	Z+1, r19	; 0x01
     990:	20 83       	st	Z, r18
      nwkIb.lock++;
     992:	e6 ef       	ldi	r30, 0xF6	; 246
     994:	f9 e1       	ldi	r31, 0x19	; 25
     996:	26 a1       	ldd	r18, Z+38	; 0x26
     998:	37 a1       	ldd	r19, Z+39	; 0x27
     99a:	2f 5f       	subi	r18, 0xFF	; 255
     99c:	3f 4f       	sbci	r19, 0xFF	; 255
     99e:	37 a3       	std	Z+39, r19	; 0x27
     9a0:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     9a2:	08 95       	ret
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	e7 57       	subi	r30, 0x77	; 119
     9a8:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     9aa:	e6 17       	cp	r30, r22
     9ac:	f7 07       	cpc	r31, r23
     9ae:	a1 f6       	brne	.-88     	; 0x958 <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
}
     9b4:	08 95       	ret

000009b6 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     9b6:	fc 01       	movw	r30, r24
     9b8:	10 82       	st	Z, r1
  nwkIb.lock--;
     9ba:	e6 ef       	ldi	r30, 0xF6	; 246
     9bc:	f9 e1       	ldi	r31, 0x19	; 25
     9be:	86 a1       	ldd	r24, Z+38	; 0x26
     9c0:	97 a1       	ldd	r25, Z+39	; 0x27
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	97 a3       	std	Z+39, r25	; 0x27
     9c6:	86 a3       	std	Z+38, r24	; 0x26
     9c8:	08 95       	ret

000009ca <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     9ca:	00 97       	sbiw	r24, 0x00	; 0
     9cc:	41 f0       	breq	.+16     	; 0x9de <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     9ce:	fc 01       	movw	r30, r24
     9d0:	e7 57       	subi	r30, 0x77	; 119
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     9d4:	86 e1       	ldi	r24, 0x16	; 22
     9d6:	e7 35       	cpi	r30, 0x57	; 87
     9d8:	f8 07       	cpc	r31, r24
     9da:	18 f0       	brcs	.+6      	; 0x9e2 <nwkFrameNext+0x18>
     9dc:	12 c0       	rjmp	.+36     	; 0xa02 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     9de:	e9 e4       	ldi	r30, 0x49	; 73
     9e0:	f6 e0       	ldi	r31, 0x06	; 6
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     9e2:	80 81       	ld	r24, Z
     9e4:	88 23       	and	r24, r24
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <nwkFrameNext+0x26>
     9e8:	0f c0       	rjmp	.+30     	; 0xa08 <nwkFrameNext+0x3e>
     9ea:	80 81       	ld	r24, Z
     9ec:	81 11       	cpse	r24, r1
     9ee:	0f c0       	rjmp	.+30     	; 0xa0e <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     9f0:	e7 57       	subi	r30, 0x77	; 119
     9f2:	ff 4f       	sbci	r31, 0xFF	; 255
     9f4:	86 e1       	ldi	r24, 0x16	; 22
     9f6:	e7 35       	cpi	r30, 0x57	; 87
     9f8:	f8 07       	cpc	r31, r24
     9fa:	b8 f3       	brcs	.-18     	; 0x9ea <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	08 95       	ret
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     a08:	8e 2f       	mov	r24, r30
     a0a:	9f 2f       	mov	r25, r31
     a0c:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a0e:	8e 2f       	mov	r24, r30
     a10:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     a12:	08 95       	ret

00000a14 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     a14:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     a16:	dc 01       	movw	r26, r24
     a18:	ad 57       	subi	r26, 0x7D	; 125
     a1a:	bf 4f       	sbci	r27, 0xFF	; 255
     a1c:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     a1e:	a6 ef       	ldi	r26, 0xF6	; 246
     a20:	b9 e1       	ldi	r27, 0x19	; 25
     a22:	14 96       	adiw	r26, 0x04	; 4
     a24:	9c 91       	ld	r25, X
     a26:	14 97       	sbiw	r26, 0x04	; 4
     a28:	9f 5f       	subi	r25, 0xFF	; 255
     a2a:	14 96       	adiw	r26, 0x04	; 4
     a2c:	9c 93       	st	X, r25
     a2e:	14 97       	sbiw	r26, 0x04	; 4
     a30:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     a32:	8d 91       	ld	r24, X+
     a34:	9c 91       	ld	r25, X
     a36:	96 87       	std	Z+14, r25	; 0x0e
     a38:	85 87       	std	Z+13, r24	; 0x0d
     a3a:	08 95       	ret

00000a3c <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     a3c:	a8 e5       	ldi	r26, 0x58	; 88
     a3e:	b6 e1       	ldi	r27, 0x16	; 22
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	4f ef       	ldi	r20, 0xFF	; 255
     a46:	5f ef       	ldi	r21, 0xFF	; 255
     a48:	11 96       	adiw	r26, 0x01	; 1
     a4a:	5c 93       	st	X, r21
     a4c:	4e 93       	st	-X, r20
     a4e:	fc 01       	movw	r30, r24
     a50:	ee 0f       	add	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	ee 0f       	add	r30, r30
     a56:	ff 1f       	adc	r31, r31
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	e8 1b       	sub	r30, r24
     a5e:	f9 0b       	sbc	r31, r25
     a60:	e9 5a       	subi	r30, 0xA9	; 169
     a62:	f9 4e       	sbci	r31, 0xE9	; 233
     a64:	20 81       	ld	r18, Z
     a66:	2e 7f       	andi	r18, 0xFE	; 254
     a68:	20 83       	st	Z, r18
     a6a:	14 96       	adiw	r26, 0x04	; 4
     a6c:	1c 92       	st	X, r1
     a6e:	14 97       	sbiw	r26, 0x04	; 4
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	17 96       	adiw	r26, 0x07	; 7
     a74:	84 36       	cpi	r24, 0x64	; 100
     a76:	91 05       	cpc	r25, r1
     a78:	39 f7       	brne	.-50     	; 0xa48 <nwkRouteInit+0xc>
     a7a:	08 95       	ret

00000a7c <NWK_RouteFindEntry>:
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	e8 e5       	ldi	r30, 0x58	; 88
     a86:	f6 e1       	ldi	r31, 0x16	; 22
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	06 2f       	mov	r16, r22
     a8e:	10 e0       	ldi	r17, 0x00	; 0
     a90:	40 81       	ld	r20, Z
     a92:	51 81       	ldd	r21, Z+1	; 0x01
     a94:	48 17       	cp	r20, r24
     a96:	59 07       	cpc	r21, r25
     a98:	b1 f4       	brne	.+44     	; 0xac6 <NWK_RouteFindEntry+0x4a>
     a9a:	d9 01       	movw	r26, r18
     a9c:	aa 0f       	add	r26, r26
     a9e:	bb 1f       	adc	r27, r27
     aa0:	aa 0f       	add	r26, r26
     aa2:	bb 1f       	adc	r27, r27
     aa4:	aa 0f       	add	r26, r26
     aa6:	bb 1f       	adc	r27, r27
     aa8:	a2 1b       	sub	r26, r18
     aaa:	b3 0b       	sbc	r27, r19
     aac:	a9 5a       	subi	r26, 0xA9	; 169
     aae:	b9 4e       	sbci	r27, 0xE9	; 233
     ab0:	4c 91       	ld	r20, X
     ab2:	46 95       	lsr	r20
     ab4:	41 70       	andi	r20, 0x01	; 1
     ab6:	c4 2f       	mov	r28, r20
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	d4 2f       	mov	r29, r20
     abc:	c0 17       	cp	r28, r16
     abe:	d1 07       	cpc	r29, r17
     ac0:	11 f4       	brne	.+4      	; 0xac6 <NWK_RouteFindEntry+0x4a>
     ac2:	cd 01       	movw	r24, r26
     ac4:	08 c0       	rjmp	.+16     	; 0xad6 <NWK_RouteFindEntry+0x5a>
     ac6:	2f 5f       	subi	r18, 0xFF	; 255
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	37 96       	adiw	r30, 0x07	; 7
     acc:	24 36       	cpi	r18, 0x64	; 100
     ace:	31 05       	cpc	r19, r1
     ad0:	f9 f6       	brne	.-66     	; 0xa90 <NWK_RouteFindEntry+0x14>
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	08 95       	ret

00000ae0 <NWK_RouteNewEntry>:
     ae0:	a0 e0       	ldi	r26, 0x00	; 0
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	e7 e5       	ldi	r30, 0x57	; 87
     ae6:	f6 e1       	ldi	r31, 0x16	; 22
     ae8:	80 81       	ld	r24, Z
     aea:	80 fd       	sbrc	r24, 0
     aec:	0d c0       	rjmp	.+26     	; 0xb08 <NWK_RouteNewEntry+0x28>
     aee:	85 81       	ldd	r24, Z+5	; 0x05
     af0:	88 23       	and	r24, r24
     af2:	81 f0       	breq	.+32     	; 0xb14 <NWK_RouteNewEntry+0x34>
     af4:	10 97       	sbiw	r26, 0x00	; 0
     af6:	39 f0       	breq	.+14     	; 0xb06 <NWK_RouteNewEntry+0x26>
     af8:	15 96       	adiw	r26, 0x05	; 5
     afa:	9c 91       	ld	r25, X
     afc:	15 97       	sbiw	r26, 0x05	; 5
     afe:	89 17       	cp	r24, r25
     b00:	18 f4       	brcc	.+6      	; 0xb08 <NWK_RouteNewEntry+0x28>
     b02:	df 01       	movw	r26, r30
     b04:	01 c0       	rjmp	.+2      	; 0xb08 <NWK_RouteNewEntry+0x28>
     b06:	df 01       	movw	r26, r30
     b08:	37 96       	adiw	r30, 0x07	; 7
     b0a:	89 e1       	ldi	r24, 0x19	; 25
     b0c:	e3 31       	cpi	r30, 0x13	; 19
     b0e:	f8 07       	cpc	r31, r24
     b10:	59 f7       	brne	.-42     	; 0xae8 <NWK_RouteNewEntry+0x8>
     b12:	fd 01       	movw	r30, r26
     b14:	80 81       	ld	r24, Z
     b16:	8d 70       	andi	r24, 0x0D	; 13
     b18:	80 63       	ori	r24, 0x30	; 48
     b1a:	80 83       	st	Z, r24
     b1c:	80 e8       	ldi	r24, 0x80	; 128
     b1e:	85 83       	std	Z+5, r24	; 0x05
     b20:	cf 01       	movw	r24, r30
     b22:	08 95       	ret

00000b24 <NWK_RouteFreeEntry>:
     b24:	fc 01       	movw	r30, r24
     b26:	80 81       	ld	r24, Z
     b28:	80 fd       	sbrc	r24, 0
     b2a:	05 c0       	rjmp	.+10     	; 0xb36 <NWK_RouteFreeEntry+0x12>
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	9f ef       	ldi	r25, 0xFF	; 255
     b30:	92 83       	std	Z+2, r25	; 0x02
     b32:	81 83       	std	Z+1, r24	; 0x01
     b34:	15 82       	std	Z+5, r1	; 0x05
     b36:	08 95       	ret

00000b38 <NWK_RouteNextHop>:
     b38:	a1 df       	rcall	.-190    	; 0xa7c <NWK_RouteFindEntry>
     b3a:	00 97       	sbiw	r24, 0x00	; 0
     b3c:	21 f0       	breq	.+8      	; 0xb46 <NWK_RouteNextHop+0xe>
     b3e:	fc 01       	movw	r30, r24
     b40:	83 81       	ldd	r24, Z+3	; 0x03
     b42:	94 81       	ldd	r25, Z+4	; 0x04
     b44:	08 95       	ret
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	9f ef       	ldi	r25, 0xFF	; 255
     b4a:	08 95       	ret

00000b4c <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     b4c:	97 df       	rcall	.-210    	; 0xa7c <NWK_RouteFindEntry>
  if (entry)
     b4e:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
     b50:	09 f0       	breq	.+2      	; 0xb54 <nwkRouteRemove+0x8>
     b52:	e8 cf       	rjmp	.-48     	; 0xb24 <NWK_RouteFreeEntry>
     b54:	08 95       	ret

00000b56 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     b60:	01 85       	ldd	r16, Z+9	; 0x09
     b62:	12 85       	ldd	r17, Z+10	; 0x0a
     b64:	11 23       	and	r17, r17
     b66:	2c f4       	brge	.+10     	; 0xb72 <nwkRouteFrameReceived+0x1c>
     b68:	85 85       	ldd	r24, Z+13	; 0x0d
     b6a:	96 85       	ldd	r25, Z+14	; 0x0e
     b6c:	08 17       	cp	r16, r24
     b6e:	19 07       	cpc	r17, r25
     b70:	e1 f5       	brne	.+120    	; 0xbea <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     b72:	85 81       	ldd	r24, Z+5	; 0x05
     b74:	96 81       	ldd	r25, Z+6	; 0x06
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	c1 f1       	breq	.+112    	; 0xbea <nwkRouteFrameReceived+0x94>
     b7a:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	85 85       	ldd	r24, Z+13	; 0x0d
     b80:	96 85       	ldd	r25, Z+14	; 0x0e
     b82:	7c df       	rcall	.-264    	; 0xa7c <NWK_RouteFindEntry>
     b84:	fc 01       	movw	r30, r24

  if (entry)
     b86:	89 2b       	or	r24, r25
     b88:	a1 f0       	breq	.+40     	; 0xbb2 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     b8a:	8f 81       	ldd	r24, Y+7	; 0x07
     b8c:	98 85       	ldd	r25, Y+8	; 0x08
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	f9 f4       	brne	.+62     	; 0xbd0 <nwkRouteFrameReceived+0x7a>
     b92:	20 91 f6 19 	lds	r18, 0x19F6	; 0x8019f6 <nwkIb>
     b96:	30 91 f7 19 	lds	r19, 0x19F7	; 0x8019f7 <nwkIb+0x1>
     b9a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b9c:	98 89       	ldd	r25, Y+16	; 0x10
     b9e:	28 17       	cp	r18, r24
     ba0:	39 07       	cpc	r19, r25
     ba2:	b1 f4       	brne	.+44     	; 0xbd0 <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     ba4:	14 83       	std	Z+4, r17	; 0x04
     ba6:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     ba8:	80 81       	ld	r24, Z
     baa:	8f 70       	andi	r24, 0x0F	; 15
     bac:	80 63       	ori	r24, 0x30	; 48
     bae:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     bb0:	0a c0       	rjmp	.+20     	; 0xbc6 <nwkRouteFrameReceived+0x70>
     bb2:	96 df       	rcall	.-212    	; 0xae0 <NWK_RouteNewEntry>
     bb4:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     bb6:	8d 85       	ldd	r24, Y+13	; 0x0d
     bb8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bba:	92 83       	std	Z+2, r25	; 0x02
     bbc:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     bbe:	89 85       	ldd	r24, Y+9	; 0x09
     bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc2:	94 83       	std	Z+4, r25	; 0x04
     bc4:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     bc6:	cd 57       	subi	r28, 0x7D	; 125
     bc8:	df 4f       	sbci	r29, 0xFF	; 255
     bca:	88 81       	ld	r24, Y
     bcc:	86 83       	std	Z+6, r24	; 0x06
     bce:	0d c0       	rjmp	.+26     	; 0xbea <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     bd0:	83 81       	ldd	r24, Z+3	; 0x03
     bd2:	94 81       	ldd	r25, Z+4	; 0x04
     bd4:	08 17       	cp	r16, r24
     bd6:	19 07       	cpc	r17, r25
     bd8:	b1 f3       	breq	.-20     	; 0xbc6 <nwkRouteFrameReceived+0x70>
     bda:	96 81       	ldd	r25, Z+6	; 0x06
     bdc:	de 01       	movw	r26, r28
     bde:	ad 57       	subi	r26, 0x7D	; 125
     be0:	bf 4f       	sbci	r27, 0xFF	; 255
     be2:	8c 91       	ld	r24, X
     be4:	98 17       	cp	r25, r24
     be6:	f0 f2       	brcs	.-68     	; 0xba4 <nwkRouteFrameReceived+0x4e>
     be8:	ee cf       	rjmp	.-36     	; 0xbc6 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	08 95       	ret

00000bf4 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     bfa:	87 85       	ldd	r24, Z+15	; 0x0f
     bfc:	90 89       	ldd	r25, Z+16	; 0x10
     bfe:	8f 3f       	cpi	r24, 0xFF	; 255
     c00:	2f ef       	ldi	r18, 0xFF	; 255
     c02:	92 07       	cpc	r25, r18
     c04:	d9 f1       	breq	.+118    	; 0xc7c <nwkRouteFrameSent+0x88>
     c06:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     c08:	63 85       	ldd	r22, Z+11	; 0x0b
     c0a:	63 fb       	bst	r22, 3
     c0c:	66 27       	eor	r22, r22
     c0e:	60 f9       	bld	r22, 0
     c10:	35 df       	rcall	.-406    	; 0xa7c <NWK_RouteFindEntry>
     c12:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     c14:	89 2b       	or	r24, r25
     c16:	91 f1       	breq	.+100    	; 0xc7c <nwkRouteFrameSent+0x88>
     c18:	8c 91       	ld	r24, X
     c1a:	80 fd       	sbrc	r24, 0
     c1c:	2f c0       	rjmp	.+94     	; 0xc7c <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     c1e:	fe 01       	movw	r30, r28
     c20:	ed 57       	subi	r30, 0x7D	; 125
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	80 81       	ld	r24, Z
     c26:	81 11       	cpse	r24, r1
     c28:	19 c0       	rjmp	.+50     	; 0xc5c <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     c2a:	8c 91       	ld	r24, X
     c2c:	8f 70       	andi	r24, 0x0F	; 15
     c2e:	80 63       	ori	r24, 0x30	; 48
     c30:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     c32:	15 96       	adiw	r26, 0x05	; 5
     c34:	8c 91       	ld	r24, X
     c36:	15 97       	sbiw	r26, 0x05	; 5
     c38:	8f 5f       	subi	r24, 0xFF	; 255
     c3a:	15 96       	adiw	r26, 0x05	; 5
     c3c:	8c 93       	st	X, r24
     c3e:	8f 3f       	cpi	r24, 0xFF	; 255
     c40:	e9 f4       	brne	.+58     	; 0xc7c <nwkRouteFrameSent+0x88>
     c42:	ec e5       	ldi	r30, 0x5C	; 92
     c44:	f6 e1       	ldi	r31, 0x16	; 22
     c46:	28 e1       	ldi	r18, 0x18	; 24
     c48:	39 e1       	ldi	r19, 0x19	; 25
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     c4a:	80 81       	ld	r24, Z
     c4c:	86 95       	lsr	r24
     c4e:	8f 5f       	subi	r24, 0xFF	; 255
     c50:	80 83       	st	Z, r24
     c52:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     c54:	e2 17       	cp	r30, r18
     c56:	f3 07       	cpc	r31, r19
     c58:	c1 f7       	brne	.-16     	; 0xc4a <nwkRouteFrameSent+0x56>
     c5a:	10 c0       	rjmp	.+32     	; 0xc7c <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     c5c:	9c 91       	ld	r25, X
     c5e:	89 2f       	mov	r24, r25
     c60:	82 95       	swap	r24
     c62:	8f 70       	andi	r24, 0x0F	; 15
     c64:	81 5f       	subi	r24, 0xF1	; 241
     c66:	8f 70       	andi	r24, 0x0F	; 15
     c68:	28 2f       	mov	r18, r24
     c6a:	22 95       	swap	r18
     c6c:	20 7f       	andi	r18, 0xF0	; 240
     c6e:	9f 70       	andi	r25, 0x0F	; 15
     c70:	92 2b       	or	r25, r18
     c72:	9c 93       	st	X, r25
     c74:	81 11       	cpse	r24, r1
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     c78:	cd 01       	movw	r24, r26
     c7a:	54 df       	rcall	.-344    	; 0xb24 <NWK_RouteFreeEntry>
  }
}
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	08 95       	ret

00000c82 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     c88:	87 85       	ldd	r24, Z+15	; 0x0f
     c8a:	90 89       	ldd	r25, Z+16	; 0x10
     c8c:	8f 3f       	cpi	r24, 0xFF	; 255
     c8e:	2f ef       	ldi	r18, 0xFF	; 255
     c90:	92 07       	cpc	r25, r18
     c92:	29 f4       	brne	.+10     	; 0xc9e <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     c94:	8f ef       	ldi	r24, 0xFF	; 255
     c96:	9f ef       	ldi	r25, 0xFF	; 255
     c98:	90 87       	std	Z+8, r25	; 0x08
     c9a:	87 83       	std	Z+7, r24	; 0x07
     c9c:	0e c0       	rjmp	.+28     	; 0xcba <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     c9e:	23 85       	ldd	r18, Z+11	; 0x0b
     ca0:	22 ff       	sbrs	r18, 2
     ca2:	03 c0       	rjmp	.+6      	; 0xcaa <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     ca4:	90 87       	std	Z+8, r25	; 0x08
     ca6:	87 83       	std	Z+7, r24	; 0x07
     ca8:	08 c0       	rjmp	.+16     	; 0xcba <nwkRoutePrepareTx+0x38>
     caa:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     cac:	63 85       	ldd	r22, Z+11	; 0x0b
     cae:	63 fb       	bst	r22, 3
     cb0:	66 27       	eor	r22, r22
     cb2:	60 f9       	bld	r22, 0
     cb4:	41 df       	rcall	.-382    	; 0xb38 <NWK_RouteNextHop>
     cb6:	98 87       	std	Y+8, r25	; 0x08
     cb8:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     cc0:	af 92       	push	r10
     cc2:	bf 92       	push	r11
     cc4:	cf 92       	push	r12
     cc6:	df 92       	push	r13
     cc8:	ef 92       	push	r14
     cca:	ff 92       	push	r15
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     cd4:	1b 85       	ldd	r17, Y+11	; 0x0b
     cd6:	13 fb       	bst	r17, 3
     cd8:	11 27       	eor	r17, r17
     cda:	10 f9       	bld	r17, 0
     cdc:	cf 84       	ldd	r12, Y+15	; 0x0f
     cde:	d8 88       	ldd	r13, Y+16	; 0x10
     ce0:	61 2f       	mov	r22, r17
     ce2:	c6 01       	movw	r24, r12
     ce4:	29 df       	rcall	.-430    	; 0xb38 <NWK_RouteNextHop>
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	59 f0       	breq	.+22     	; 0xd00 <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     cea:	fe 01       	movw	r30, r28
     cec:	e9 57       	subi	r30, 0x79	; 121
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	11 82       	std	Z+1, r1	; 0x01
     cf2:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     cf4:	31 97       	sbiw	r30, 0x01	; 1
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     cfa:	ce 01       	movw	r24, r28
     cfc:	6e d3       	rcall	.+1756   	; 0x13da <nwkTxFrame>
     cfe:	22 c0       	rjmp	.+68     	; 0xd44 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     d00:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     d02:	be 84       	ldd	r11, Y+14	; 0x0e
     d04:	1f de       	rcall	.-962    	; 0x944 <nwkFrameAlloc>
     d06:	7c 01       	movw	r14, r24
     d08:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
     d0a:	d1 f0       	breq	.+52     	; 0xd40 <nwkRouteFrame+0x80>
     d0c:	83 de       	rcall	.-762    	; 0xa14 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     d0e:	f7 01       	movw	r30, r14
     d10:	81 81       	ldd	r24, Z+1	; 0x01
     d12:	8a 5f       	subi	r24, 0xFA	; 250
     d14:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     d16:	e9 57       	subi	r30, 0x79	; 121
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	11 82       	std	Z+1, r1	; 0x01
     d1c:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     d1e:	f7 01       	movw	r30, r14
     d20:	b0 8a       	std	Z+16, r11	; 0x10
     d22:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     d24:	ef 57       	subi	r30, 0x7F	; 127
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	01 90       	ld	r0, Z+
     d2a:	f0 81       	ld	r31, Z
     d2c:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	80 83       	st	Z, r24
  command->srcAddr = src;
     d32:	b2 82       	std	Z+2, r11	; 0x02
     d34:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     d36:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
     d38:	c3 82       	std	Z+3, r12	; 0x03
     d3a:	15 83       	std	Z+5, r17	; 0x05
     d3c:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     d3e:	4d d3       	rcall	.+1690   	; 0x13da <nwkTxFrame>
     d40:	ce 01       	movw	r24, r28
     d42:	39 de       	rcall	.-910    	; 0x9b6 <nwkFrameFree>
  }
}
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	df 90       	pop	r13
     d50:	cf 90       	pop	r12
     d52:	bf 90       	pop	r11
     d54:	af 90       	pop	r10
     d56:	08 95       	ret

00000d58 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     d58:	fc 01       	movw	r30, r24
     d5a:	21 85       	ldd	r18, Z+9	; 0x09
     d5c:	26 30       	cpi	r18, 0x06	; 6
     d5e:	49 f4       	brne	.+18     	; 0xd72 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     d60:	07 80       	ldd	r0, Z+7	; 0x07
     d62:	f0 85       	ldd	r31, Z+8	; 0x08
     d64:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     d66:	65 81       	ldd	r22, Z+5	; 0x05
     d68:	83 81       	ldd	r24, Z+3	; 0x03
     d6a:	94 81       	ldd	r25, Z+4	; 0x04
     d6c:	ef de       	rcall	.-546    	; 0xb4c <nwkRouteRemove>

  return true;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     d72:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     d74:	08 95       	ret

00000d76 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     d76:	dc 01       	movw	r26, r24
     d78:	19 96       	adiw	r26, 0x09	; 9
     d7a:	2c 91       	ld	r18, X
     d7c:	19 97       	sbiw	r26, 0x09	; 9
     d7e:	22 23       	and	r18, r18
     d80:	71 f0       	breq	.+28     	; 0xd9e <nwkRxServiceDataInd+0x28>
     d82:	17 96       	adiw	r26, 0x07	; 7
     d84:	ed 91       	ld	r30, X+
     d86:	fc 91       	ld	r31, X
     d88:	18 97       	sbiw	r26, 0x08	; 8
     d8a:	20 81       	ld	r18, Z
     d8c:	22 23       	and	r18, r18
     d8e:	19 f0       	breq	.+6      	; 0xd96 <nwkRxServiceDataInd+0x20>
     d90:	21 30       	cpi	r18, 0x01	; 1
     d92:	19 f0       	breq	.+6      	; 0xd9a <nwkRxServiceDataInd+0x24>
     d94:	06 c0       	rjmp	.+12     	; 0xda2 <nwkRxServiceDataInd+0x2c>
     d96:	b2 c3       	rjmp	.+1892   	; 0x14fc <nwkTxAckReceived>
     d98:	08 95       	ret
     d9a:	de cf       	rjmp	.-68     	; 0xd58 <nwkRouteErrorReceived>
     d9c:	08 95       	ret
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	08 95       	ret
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	08 95       	ret

00000da6 <nwkRxDuplicateRejectionTimerHandler>:
     da6:	bc 01       	movw	r22, r24
     da8:	e5 e2       	ldi	r30, 0x25	; 37
     daa:	f9 e1       	ldi	r31, 0x19	; 25
     dac:	27 e5       	ldi	r18, 0x57	; 87
     dae:	39 e1       	ldi	r19, 0x19	; 25
     db0:	40 e0       	ldi	r20, 0x00	; 0
     db2:	51 e0       	ldi	r21, 0x01	; 1
     db4:	90 81       	ld	r25, Z
     db6:	99 23       	and	r25, r25
     db8:	19 f0       	breq	.+6      	; 0xdc0 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     dba:	91 50       	subi	r25, 0x01	; 1
     dbc:	90 83       	st	Z, r25
     dbe:	45 2f       	mov	r20, r21
     dc0:	35 96       	adiw	r30, 0x05	; 5
     dc2:	e2 17       	cp	r30, r18
     dc4:	f3 07       	cpc	r31, r19
     dc6:	b1 f7       	brne	.-20     	; 0xdb4 <nwkRxDuplicateRejectionTimerHandler+0xe>
     dc8:	44 23       	and	r20, r20
     dca:	11 f0       	breq	.+4      	; 0xdd0 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     dcc:	cb 01       	movw	r24, r22
     dce:	6d c6       	rjmp	.+3290   	; 0x1aaa <SYS_TimerStart>
     dd0:	08 95       	ret

00000dd2 <nwkRxInit>:
     dd2:	e5 e2       	ldi	r30, 0x25	; 37
     dd4:	f9 e1       	ldi	r31, 0x19	; 25
     dd6:	87 e5       	ldi	r24, 0x57	; 87
     dd8:	99 e1       	ldi	r25, 0x19	; 25
     dda:	10 82       	st	Z, r1
     ddc:	35 96       	adiw	r30, 0x05	; 5
     dde:	e8 17       	cp	r30, r24
     de0:	f9 07       	cpc	r31, r25
     de2:	d9 f7       	brne	.-10     	; 0xdda <nwkRxInit+0x8>
     de4:	e3 e1       	ldi	r30, 0x13	; 19
     de6:	f9 e1       	ldi	r31, 0x19	; 25
     de8:	84 e6       	ldi	r24, 0x64	; 100
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	a0 e0       	ldi	r26, 0x00	; 0
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	86 83       	std	Z+6, r24	; 0x06
     df2:	97 83       	std	Z+7, r25	; 0x07
     df4:	a0 87       	std	Z+8, r26	; 0x08
     df6:	b1 87       	std	Z+9, r27	; 0x09
     df8:	12 86       	std	Z+10, r1	; 0x0a
     dfa:	83 ed       	ldi	r24, 0xD3	; 211
     dfc:	96 e0       	ldi	r25, 0x06	; 6
     dfe:	94 87       	std	Z+12, r25	; 0x0c
     e00:	83 87       	std	Z+11, r24	; 0x0b
     e02:	6b eb       	ldi	r22, 0xBB	; 187
     e04:	76 e0       	ldi	r23, 0x06	; 6
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	96 cc       	rjmp	.-1748   	; 0x736 <NWK_OpenEndpoint>
     e0a:	08 95       	ret

00000e0c <PHY_DataInd>:
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	dc 01       	movw	r26, r24
     e12:	ed 91       	ld	r30, X+
     e14:	fc 91       	ld	r31, X
     e16:	11 97       	sbiw	r26, 0x01	; 1
     e18:	21 81       	ldd	r18, Z+1	; 0x01
     e1a:	28 38       	cpi	r18, 0x88	; 136
     e1c:	f1 f4       	brne	.+60     	; 0xe5a <PHY_DataInd+0x4e>
     e1e:	20 81       	ld	r18, Z
     e20:	2f 7d       	andi	r18, 0xDF	; 223
     e22:	21 34       	cpi	r18, 0x41	; 65
     e24:	d1 f4       	brne	.+52     	; 0xe5a <PHY_DataInd+0x4e>
     e26:	12 96       	adiw	r26, 0x02	; 2
     e28:	2c 91       	ld	r18, X
     e2a:	20 31       	cpi	r18, 0x10	; 16
     e2c:	b0 f0       	brcs	.+44     	; 0xe5a <PHY_DataInd+0x4e>
     e2e:	ec 01       	movw	r28, r24
     e30:	89 dd       	rcall	.-1262   	; 0x944 <nwkFrameAlloc>
     e32:	00 97       	sbiw	r24, 0x00	; 0
     e34:	91 f0       	breq	.+36     	; 0xe5a <PHY_DataInd+0x4e>
     e36:	20 e2       	ldi	r18, 0x20	; 32
     e38:	fc 01       	movw	r30, r24
     e3a:	20 83       	st	Z, r18
     e3c:	2a 81       	ldd	r18, Y+2	; 0x02
     e3e:	21 83       	std	Z+1, r18	; 0x01
     e40:	2b 81       	ldd	r18, Y+3	; 0x03
     e42:	ed 57       	subi	r30, 0x7D	; 125
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	20 83       	st	Z, r18
     e48:	2c 81       	ldd	r18, Y+4	; 0x04
     e4a:	31 96       	adiw	r30, 0x01	; 1
     e4c:	20 83       	st	Z, r18
     e4e:	4a 81       	ldd	r20, Y+2	; 0x02
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	68 81       	ld	r22, Y
     e54:	79 81       	ldd	r23, Y+1	; 0x01
     e56:	02 96       	adiw	r24, 0x02	; 2
     e58:	15 d7       	rcall	.+3626   	; 0x1c84 <memcpy>
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     e60:	2f 92       	push	r2
     e62:	3f 92       	push	r3
     e64:	4f 92       	push	r4
     e66:	5f 92       	push	r5
     e68:	6f 92       	push	r6
     e6a:	7f 92       	push	r7
     e6c:	8f 92       	push	r8
     e6e:	9f 92       	push	r9
     e70:	af 92       	push	r10
     e72:	bf 92       	push	r11
     e74:	cf 92       	push	r12
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	2c 97       	sbiw	r28, 0x0c	; 12
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     e94:	00 e0       	ldi	r16, 0x00	; 0
     e96:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     e98:	0f 2e       	mov	r0, r31
     e9a:	f4 e2       	ldi	r31, 0x24	; 36
     e9c:	bf 2e       	mov	r11, r31
     e9e:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     ea0:	0f 2e       	mov	r0, r31
     ea2:	f6 ef       	ldi	r31, 0xF6	; 246
     ea4:	ef 2e       	mov	r14, r31
     ea6:	f9 e1       	ldi	r31, 0x19	; 25
     ea8:	ff 2e       	mov	r15, r31
     eaa:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     eac:	55 24       	eor	r5, r5
     eae:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     eb0:	68 94       	set
     eb2:	aa 24       	eor	r10, r10
     eb4:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     eb6:	68 94       	set
     eb8:	77 24       	eor	r7, r7
     eba:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     ebc:	68 94       	set
     ebe:	66 24       	eor	r6, r6
     ec0:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     ec2:	31 2c       	mov	r3, r1
     ec4:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     ec6:	0f 2e       	mov	r0, r31
     ec8:	ff e1       	ldi	r31, 0x1F	; 31
     eca:	4f 2e       	mov	r4, r31
     ecc:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     ece:	cc 24       	eor	r12, r12
     ed0:	c3 94       	inc	r12
     ed2:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     ed4:	da c1       	rjmp	.+948    	; 0x128a <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
     ed6:	d8 01       	movw	r26, r16
     ed8:	8c 91       	ld	r24, X
     eda:	82 32       	cpi	r24, 0x22	; 34
     edc:	09 f4       	brne	.+2      	; 0xee0 <nwkRxTaskHandler+0x80>
     ede:	05 c1       	rjmp	.+522    	; 0x10ea <nwkRxTaskHandler+0x28a>
     ee0:	18 f4       	brcc	.+6      	; 0xee8 <nwkRxTaskHandler+0x88>
     ee2:	80 32       	cpi	r24, 0x20	; 32
     ee4:	41 f0       	breq	.+16     	; 0xef6 <nwkRxTaskHandler+0x96>
     ee6:	d1 c1       	rjmp	.+930    	; 0x128a <nwkRxTaskHandler+0x42a>
     ee8:	83 32       	cpi	r24, 0x23	; 35
     eea:	09 f4       	brne	.+2      	; 0xeee <nwkRxTaskHandler+0x8e>
     eec:	c9 c1       	rjmp	.+914    	; 0x1280 <nwkRxTaskHandler+0x420>
     eee:	84 32       	cpi	r24, 0x24	; 36
     ef0:	09 f4       	brne	.+2      	; 0xef4 <nwkRxTaskHandler+0x94>
     ef2:	c9 c1       	rjmp	.+914    	; 0x1286 <nwkRxTaskHandler+0x426>
     ef4:	ca c1       	rjmp	.+916    	; 0x128a <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     ef6:	f8 01       	movw	r30, r16
     ef8:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     efa:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     efc:	98 2f       	mov	r25, r24
     efe:	9a 70       	andi	r25, 0x0A	; 10
     f00:	09 f0       	breq	.+2      	; 0xf04 <nwkRxTaskHandler+0xa4>
     f02:	c3 c1       	rjmp	.+902    	; 0x128a <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     f04:	25 81       	ldd	r18, Z+5	; 0x05
     f06:	36 81       	ldd	r19, Z+6	; 0x06
     f08:	2f 3f       	cpi	r18, 0xFF	; 255
     f0a:	3f 4f       	sbci	r19, 0xFF	; 255
     f0c:	91 f4       	brne	.+36     	; 0xf32 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     f0e:	d8 01       	movw	r26, r16
     f10:	1f 96       	adiw	r26, 0x0f	; 15
     f12:	8d 91       	ld	r24, X+
     f14:	9c 91       	ld	r25, X
     f16:	50 97       	sbiw	r26, 0x10	; 16
     f18:	f7 01       	movw	r30, r14
     f1a:	20 81       	ld	r18, Z
     f1c:	31 81       	ldd	r19, Z+1	; 0x01
     f1e:	28 17       	cp	r18, r24
     f20:	39 07       	cpc	r19, r25
     f22:	19 f0       	breq	.+6      	; 0xf2a <nwkRxTaskHandler+0xca>
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	09 f0       	breq	.+2      	; 0xf2a <nwkRxTaskHandler+0xca>
     f28:	b0 c1       	rjmp	.+864    	; 0x128a <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     f2a:	e2 e2       	ldi	r30, 0x22	; 34
     f2c:	d8 01       	movw	r26, r16
     f2e:	ec 93       	st	X, r30
     f30:	ac c1       	rjmp	.+856    	; 0x128a <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     f32:	d8 01       	movw	r26, r16
     f34:	1f 96       	adiw	r26, 0x0f	; 15
     f36:	2d 91       	ld	r18, X+
     f38:	3c 91       	ld	r19, X
     f3a:	50 97       	sbiw	r26, 0x10	; 16
     f3c:	2f 3f       	cpi	r18, 0xFF	; 255
     f3e:	3f 4f       	sbci	r19, 0xFF	; 255
     f40:	11 f4       	brne	.+4      	; 0xf46 <nwkRxTaskHandler+0xe6>
     f42:	80 fd       	sbrc	r24, 0
     f44:	a2 c1       	rjmp	.+836    	; 0x128a <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     f46:	f7 01       	movw	r30, r14
     f48:	20 81       	ld	r18, Z
     f4a:	31 81       	ldd	r19, Z+1	; 0x01
     f4c:	d8 01       	movw	r26, r16
     f4e:	1d 96       	adiw	r26, 0x0d	; 13
     f50:	8d 91       	ld	r24, X+
     f52:	9c 91       	ld	r25, X
     f54:	1e 97       	sbiw	r26, 0x0e	; 14
     f56:	28 17       	cp	r18, r24
     f58:	39 07       	cpc	r19, r25
     f5a:	09 f4       	brne	.+2      	; 0xf5e <nwkRxTaskHandler+0xfe>
     f5c:	96 c1       	rjmp	.+812    	; 0x128a <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     f5e:	c8 01       	movw	r24, r16
     f60:	fa dd       	rcall	.-1036   	; 0xb56 <nwkRouteFrameReceived>
     f62:	e1 e2       	ldi	r30, 0x21	; 33
     f64:	f9 e1       	ldi	r31, 0x19	; 25
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     f6a:	83 2c       	mov	r8, r3
     f6c:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     f6e:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     f70:	44 81       	ldd	r20, Z+4	; 0x04
     f72:	44 23       	and	r20, r20
     f74:	09 f4       	brne	.+2      	; 0xf78 <nwkRxTaskHandler+0x118>
     f76:	74 c0       	rjmp	.+232    	; 0x1060 <nwkRxTaskHandler+0x200>
     f78:	d8 01       	movw	r26, r16
     f7a:	1d 96       	adiw	r26, 0x0d	; 13
     f7c:	6d 91       	ld	r22, X+
     f7e:	7c 91       	ld	r23, X
     f80:	1e 97       	sbiw	r26, 0x0e	; 14
     f82:	40 81       	ld	r20, Z
     f84:	51 81       	ldd	r21, Z+1	; 0x01
     f86:	64 17       	cp	r22, r20
     f88:	75 07       	cpc	r23, r21
     f8a:	09 f0       	breq	.+2      	; 0xf8e <nwkRxTaskHandler+0x12e>
     f8c:	6a c0       	rjmp	.+212    	; 0x1062 <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     f8e:	1c 96       	adiw	r26, 0x0c	; 12
     f90:	8c 91       	ld	r24, X
     f92:	1c 97       	sbiw	r26, 0x0c	; 12
     f94:	f9 01       	movw	r30, r18
     f96:	ee 0f       	add	r30, r30
     f98:	ff 1f       	adc	r31, r31
     f9a:	ee 0f       	add	r30, r30
     f9c:	ff 1f       	adc	r31, r31
     f9e:	e2 0f       	add	r30, r18
     fa0:	f3 1f       	adc	r31, r19
     fa2:	ef 5d       	subi	r30, 0xDF	; 223
     fa4:	f6 4e       	sbci	r31, 0xE6	; 230
     fa6:	92 81       	ldd	r25, Z+2	; 0x02
     fa8:	98 1b       	sub	r25, r24

      if (diff < 8)
     faa:	98 30       	cpi	r25, 0x08	; 8
     fac:	08 f0       	brcs	.+2      	; 0xfb0 <nwkRxTaskHandler+0x150>
     fae:	3e c0       	rjmp	.+124    	; 0x102c <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
     fb0:	f9 01       	movw	r30, r18
     fb2:	ee 0f       	add	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	ee 0f       	add	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	e2 0f       	add	r30, r18
     fbc:	f3 1f       	adc	r31, r19
     fbe:	ef 5d       	subi	r30, 0xDF	; 223
     fc0:	f6 4e       	sbci	r31, 0xE6	; 230
     fc2:	83 81       	ldd	r24, Z+3	; 0x03
     fc4:	48 2f       	mov	r20, r24
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	09 2e       	mov	r0, r25
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <nwkRxTaskHandler+0x170>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <nwkRxTaskHandler+0x16c>
     fd4:	40 ff       	sbrs	r20, 0
     fd6:	17 c0       	rjmp	.+46     	; 0x1006 <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
     fd8:	f7 01       	movw	r30, r14
     fda:	20 81       	ld	r18, Z
     fdc:	31 81       	ldd	r19, Z+1	; 0x01
     fde:	17 96       	adiw	r26, 0x07	; 7
     fe0:	8d 91       	ld	r24, X+
     fe2:	9c 91       	ld	r25, X
     fe4:	18 97       	sbiw	r26, 0x08	; 8
     fe6:	28 17       	cp	r18, r24
     fe8:	39 07       	cpc	r19, r25
     fea:	09 f0       	breq	.+2      	; 0xfee <nwkRxTaskHandler+0x18e>
     fec:	4e c1       	rjmp	.+668    	; 0x128a <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
     fee:	1b 96       	adiw	r26, 0x0b	; 11
     ff0:	6c 91       	ld	r22, X
     ff2:	1b 97       	sbiw	r26, 0x0b	; 11
     ff4:	63 fb       	bst	r22, 3
     ff6:	66 27       	eor	r22, r22
     ff8:	60 f9       	bld	r22, 0
     ffa:	1f 96       	adiw	r26, 0x0f	; 15
     ffc:	8d 91       	ld	r24, X+
     ffe:	9c 91       	ld	r25, X
    1000:	50 97       	sbiw	r26, 0x10	; 16
    1002:	a4 dd       	rcall	.-1208   	; 0xb4c <nwkRouteRemove>
    1004:	42 c1       	rjmp	.+644    	; 0x128a <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    1006:	f9 01       	movw	r30, r18
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	2e 0f       	add	r18, r30
    1012:	3f 1f       	adc	r19, r31
    1014:	f9 01       	movw	r30, r18
    1016:	ef 5d       	subi	r30, 0xDF	; 223
    1018:	f6 4e       	sbci	r31, 0xE6	; 230
    101a:	96 01       	movw	r18, r12
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <nwkRxTaskHandler+0x1c2>
    101e:	22 0f       	add	r18, r18
    1020:	33 1f       	adc	r19, r19
    1022:	9a 95       	dec	r25
    1024:	e2 f7       	brpl	.-8      	; 0x101e <nwkRxTaskHandler+0x1be>
    1026:	82 2b       	or	r24, r18
    1028:	83 83       	std	Z+3, r24	; 0x03
    102a:	36 c1       	rjmp	.+620    	; 0x1298 <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    102c:	f9 01       	movw	r30, r18
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	ee 0f       	add	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	2e 0f       	add	r18, r30
    1038:	3f 1f       	adc	r19, r31
    103a:	f9 01       	movw	r30, r18
    103c:	ef 5d       	subi	r30, 0xDF	; 223
    103e:	f6 4e       	sbci	r31, 0xE6	; 230
    1040:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    1042:	83 81       	ldd	r24, Z+3	; 0x03
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	91 95       	neg	r25
    104a:	a9 01       	movw	r20, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <nwkRxTaskHandler+0x1f2>
    104e:	44 0f       	add	r20, r20
    1050:	55 1f       	adc	r21, r21
    1052:	9a 95       	dec	r25
    1054:	e2 f7       	brpl	.-8      	; 0x104e <nwkRxTaskHandler+0x1ee>
    1056:	ca 01       	movw	r24, r20
    1058:	81 60       	ori	r24, 0x01	; 1
    105a:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    105c:	44 82       	std	Z+4, r4	; 0x04
    105e:	1c c1       	rjmp	.+568    	; 0x1298 <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
    1060:	4f 01       	movw	r8, r30
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1066:	8a 30       	cpi	r24, 0x0A	; 10
    1068:	91 05       	cpc	r25, r1
    106a:	09 f0       	breq	.+2      	; 0x106e <nwkRxTaskHandler+0x20e>
    106c:	80 cf       	rjmp	.-256    	; 0xf6e <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    106e:	81 14       	cp	r8, r1
    1070:	91 04       	cpc	r9, r1
    1072:	09 f4       	brne	.+2      	; 0x1076 <nwkRxTaskHandler+0x216>
    1074:	0a c1       	rjmp	.+532    	; 0x128a <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    1076:	d8 01       	movw	r26, r16
    1078:	1d 96       	adiw	r26, 0x0d	; 13
    107a:	8d 91       	ld	r24, X+
    107c:	9c 91       	ld	r25, X
    107e:	1e 97       	sbiw	r26, 0x0e	; 14
    1080:	f4 01       	movw	r30, r8
    1082:	91 83       	std	Z+1, r25	; 0x01
    1084:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    1086:	1c 96       	adiw	r26, 0x0c	; 12
    1088:	8c 91       	ld	r24, X
    108a:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    108c:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    108e:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    1090:	83 e1       	ldi	r24, 0x13	; 19
    1092:	99 e1       	ldi	r25, 0x19	; 25
    1094:	0a d5       	rcall	.+2580   	; 0x1aaa <SYS_TimerStart>
    1096:	00 c1       	rjmp	.+512    	; 0x1298 <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1098:	d7 01       	movw	r26, r14
    109a:	2d 91       	ld	r18, X+
    109c:	3c 91       	ld	r19, X
    109e:	f8 01       	movw	r30, r16
    10a0:	87 85       	ldd	r24, Z+15	; 0x0f
    10a2:	90 89       	ldd	r25, Z+16	; 0x10
    10a4:	28 17       	cp	r18, r24
    10a6:	39 07       	cpc	r19, r25
    10a8:	81 f0       	breq	.+32     	; 0x10ca <nwkRxTaskHandler+0x26a>
    10aa:	43 85       	ldd	r20, Z+11	; 0x0b
    10ac:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    10ae:	0b c0       	rjmp	.+22     	; 0x10c6 <nwkRxTaskHandler+0x266>
    10b0:	c8 01       	movw	r24, r16
    10b2:	e1 d1       	rcall	.+962    	; 0x1476 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    10b4:	d7 01       	movw	r26, r14
    10b6:	2d 91       	ld	r18, X+
    10b8:	3c 91       	ld	r19, X
    10ba:	f8 01       	movw	r30, r16
    10bc:	87 85       	ldd	r24, Z+15	; 0x0f
    10be:	90 89       	ldd	r25, Z+16	; 0x10
    10c0:	28 17       	cp	r18, r24
    10c2:	39 07       	cpc	r19, r25
    10c4:	11 f0       	breq	.+4      	; 0x10ca <nwkRxTaskHandler+0x26a>
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    10ca:	e2 e2       	ldi	r30, 0x22	; 34
    10cc:	d8 01       	movw	r26, r16
    10ce:	ec 93       	st	X, r30
    10d0:	dc c0       	rjmp	.+440    	; 0x128a <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    10d2:	d8 01       	movw	r26, r16
    10d4:	17 96       	adiw	r26, 0x07	; 7
    10d6:	8d 91       	ld	r24, X+
    10d8:	9c 91       	ld	r25, X
    10da:	18 97       	sbiw	r26, 0x08	; 8
    10dc:	82 17       	cp	r24, r18
    10de:	93 07       	cpc	r25, r19
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <nwkRxTaskHandler+0x284>
    10e2:	d3 c0       	rjmp	.+422    	; 0x128a <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    10e4:	e3 e2       	ldi	r30, 0x23	; 35
    10e6:	ec 93       	st	X, r30
    10e8:	d0 c0       	rjmp	.+416    	; 0x128a <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    10ea:	10 92 20 19 	sts	0x1920, r1	; 0x801920 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    10ee:	d8 01       	movw	r26, r16
    10f0:	51 96       	adiw	r26, 0x11	; 17
    10f2:	8c 91       	ld	r24, X
    10f4:	51 97       	sbiw	r26, 0x11	; 17
    10f6:	82 95       	swap	r24
    10f8:	8f 70       	andi	r24, 0x0F	; 15
    10fa:	e8 2f       	mov	r30, r24
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	e4 50       	subi	r30, 0x04	; 4
    1104:	f6 4e       	sbci	r31, 0xE6	; 230
    1106:	01 90       	ld	r0, Z+
    1108:	f0 81       	ld	r31, Z
    110a:	e0 2d       	mov	r30, r0
    110c:	30 97       	sbiw	r30, 0x00	; 0
    110e:	09 f4       	brne	.+2      	; 0x1112 <nwkRxTaskHandler+0x2b2>
    1110:	60 c0       	rjmp	.+192    	; 0x11d2 <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    1112:	1d 96       	adiw	r26, 0x0d	; 13
    1114:	2d 91       	ld	r18, X+
    1116:	3c 91       	ld	r19, X
    1118:	1e 97       	sbiw	r26, 0x0e	; 14
    111a:	3a 83       	std	Y+2, r19	; 0x02
    111c:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    111e:	1f 96       	adiw	r26, 0x0f	; 15
    1120:	4d 91       	ld	r20, X+
    1122:	5c 91       	ld	r21, X
    1124:	50 97       	sbiw	r26, 0x10	; 16
    1126:	5c 83       	std	Y+4, r21	; 0x04
    1128:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    112a:	51 96       	adiw	r26, 0x11	; 17
    112c:	9c 91       	ld	r25, X
    112e:	51 97       	sbiw	r26, 0x11	; 17
    1130:	9f 70       	andi	r25, 0x0F	; 15
    1132:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    1134:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    1136:	af 57       	subi	r26, 0x7F	; 127
    1138:	bf 4f       	sbci	r27, 0xFF	; 255
    113a:	8d 91       	ld	r24, X+
    113c:	9c 91       	ld	r25, X
    113e:	99 87       	std	Y+9, r25	; 0x09
    1140:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    1142:	b8 01       	movw	r22, r16
    1144:	6e 5f       	subi	r22, 0xFE	; 254
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    1148:	86 1b       	sub	r24, r22
    114a:	97 0b       	sbc	r25, r23
    114c:	d8 01       	movw	r26, r16
    114e:	11 96       	adiw	r26, 0x01	; 1
    1150:	9c 91       	ld	r25, X
    1152:	11 97       	sbiw	r26, 0x01	; 1
    1154:	98 1b       	sub	r25, r24
    1156:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    1158:	ad 57       	subi	r26, 0x7D	; 125
    115a:	bf 4f       	sbci	r27, 0xFF	; 255
    115c:	8c 91       	ld	r24, X
    115e:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    1160:	11 96       	adiw	r26, 0x01	; 1
    1162:	8c 91       	ld	r24, X
    1164:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1166:	d8 01       	movw	r26, r16
    1168:	1b 96       	adiw	r26, 0x0b	; 11
    116a:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    116c:	69 2f       	mov	r22, r25
    116e:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1170:	92 fd       	sbrc	r25, 2
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <nwkRxTaskHandler+0x318>
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	01 c0       	rjmp	.+2      	; 0x117a <nwkRxTaskHandler+0x31a>
    1178:	80 e2       	ldi	r24, 0x20	; 32
    117a:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    117c:	93 fd       	sbrc	r25, 3
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <nwkRxTaskHandler+0x324>
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <nwkRxTaskHandler+0x326>
    1184:	90 e4       	ldi	r25, 0x40	; 64
    1186:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1188:	4f 3f       	cpi	r20, 0xFF	; 255
    118a:	5f 4f       	sbci	r21, 0xFF	; 255
    118c:	11 f0       	breq	.+4      	; 0x1192 <nwkRxTaskHandler+0x332>
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	01 c0       	rjmp	.+2      	; 0x1194 <nwkRxTaskHandler+0x334>
    1192:	96 2d       	mov	r25, r6
    1194:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1196:	d8 01       	movw	r26, r16
    1198:	19 96       	adiw	r26, 0x09	; 9
    119a:	4d 91       	ld	r20, X+
    119c:	5c 91       	ld	r21, X
    119e:	1a 97       	sbiw	r26, 0x0a	; 10
    11a0:	24 17       	cp	r18, r20
    11a2:	35 07       	cpc	r19, r21
    11a4:	11 f0       	breq	.+4      	; 0x11aa <nwkRxTaskHandler+0x34a>
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	01 c0       	rjmp	.+2      	; 0x11ac <nwkRxTaskHandler+0x34c>
    11aa:	97 2d       	mov	r25, r7
    11ac:	89 2b       	or	r24, r25
    11ae:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    11b0:	d8 01       	movw	r26, r16
    11b2:	15 96       	adiw	r26, 0x05	; 5
    11b4:	2d 91       	ld	r18, X+
    11b6:	3c 91       	ld	r19, X
    11b8:	16 97       	sbiw	r26, 0x06	; 6
    11ba:	2f 3f       	cpi	r18, 0xFF	; 255
    11bc:	3f 4f       	sbci	r19, 0xFF	; 255
    11be:	11 f0       	breq	.+4      	; 0x11c4 <nwkRxTaskHandler+0x364>
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <nwkRxTaskHandler+0x366>
    11c4:	9a 2d       	mov	r25, r10
    11c6:	89 2b       	or	r24, r25
    11c8:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    11ca:	ce 01       	movw	r24, r28
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	19 95       	eicall
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    11d2:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    11d4:	f8 01       	movw	r30, r16
    11d6:	93 85       	ldd	r25, Z+11	; 0x0b
    11d8:	90 ff       	sbrs	r25, 0
    ack = false;
    11da:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    11dc:	d8 01       	movw	r26, r16
    11de:	17 96       	adiw	r26, 0x07	; 7
    11e0:	2d 91       	ld	r18, X+
    11e2:	3c 91       	ld	r19, X
    11e4:	18 97       	sbiw	r26, 0x08	; 8
    11e6:	2f 3f       	cpi	r18, 0xFF	; 255
    11e8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ea:	69 f4       	brne	.+26     	; 0x1206 <nwkRxTaskHandler+0x3a6>
    11ec:	f7 01       	movw	r30, r14
    11ee:	40 81       	ld	r20, Z
    11f0:	51 81       	ldd	r21, Z+1	; 0x01
    11f2:	d8 01       	movw	r26, r16
    11f4:	1f 96       	adiw	r26, 0x0f	; 15
    11f6:	2d 91       	ld	r18, X+
    11f8:	3c 91       	ld	r19, X
    11fa:	50 97       	sbiw	r26, 0x10	; 16
    11fc:	42 17       	cp	r20, r18
    11fe:	53 07       	cpc	r21, r19
    1200:	11 f4       	brne	.+4      	; 0x1206 <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    1202:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    1204:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    1206:	f8 01       	movw	r30, r16
    1208:	25 81       	ldd	r18, Z+5	; 0x05
    120a:	36 81       	ldd	r19, Z+6	; 0x06
    120c:	2f 3f       	cpi	r18, 0xFF	; 255
    120e:	3f 4f       	sbci	r19, 0xFF	; 255
    1210:	a1 f1       	breq	.+104    	; 0x127a <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1212:	d7 01       	movw	r26, r14
    1214:	2d 91       	ld	r18, X+
    1216:	3c 91       	ld	r19, X
    1218:	2f 3f       	cpi	r18, 0xFF	; 255
    121a:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    121c:	71 f1       	breq	.+92     	; 0x127a <nwkRxTaskHandler+0x41a>
    121e:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    1220:	61 f1       	breq	.+88     	; 0x127a <nwkRxTaskHandler+0x41a>
    1222:	90 db       	rcall	.-2272   	; 0x944 <nwkFrameAlloc>
    1224:	4c 01       	movw	r8, r24
    1226:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    1228:	41 f1       	breq	.+80     	; 0x127a <nwkRxTaskHandler+0x41a>
    122a:	f4 db       	rcall	.-2072   	; 0xa14 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    122c:	f4 01       	movw	r30, r8
    122e:	81 81       	ldd	r24, Z+1	; 0x01
    1230:	8d 5f       	subi	r24, 0xFD	; 253
    1232:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    1234:	e9 57       	subi	r30, 0x79	; 121
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	11 82       	std	Z+1, r1	; 0x01
    123a:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    123c:	d8 01       	movw	r26, r16
    123e:	1b 96       	adiw	r26, 0x0b	; 11
    1240:	8c 91       	ld	r24, X
    1242:	1b 97       	sbiw	r26, 0x0b	; 11
    1244:	86 95       	lsr	r24
    1246:	81 70       	andi	r24, 0x01	; 1
    1248:	f4 01       	movw	r30, r8
    124a:	93 85       	ldd	r25, Z+11	; 0x0b
    124c:	80 fb       	bst	r24, 0
    124e:	91 f9       	bld	r25, 1
    1250:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    1252:	1d 96       	adiw	r26, 0x0d	; 13
    1254:	8d 91       	ld	r24, X+
    1256:	9c 91       	ld	r25, X
    1258:	1e 97       	sbiw	r26, 0x0e	; 14
    125a:	90 8b       	std	Z+16, r25	; 0x10
    125c:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    125e:	ef 57       	subi	r30, 0x7F	; 127
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	01 90       	ld	r0, Z+
    1264:	f0 81       	ld	r31, Z
    1266:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    1268:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    126a:	80 91 20 19 	lds	r24, 0x1920	; 0x801920 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    126e:	82 83       	std	Z+2, r24	; 0x02
    1270:	1c 96       	adiw	r26, 0x0c	; 12
    1272:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    1274:	81 83       	std	Z+1, r24	; 0x01
    1276:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1278:	b0 d0       	rcall	.+352    	; 0x13da <nwkTxFrame>
    127a:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    127c:	bc 92       	st	X, r11
    127e:	05 c0       	rjmp	.+10     	; 0x128a <nwkRxTaskHandler+0x42a>
    1280:	c8 01       	movw	r24, r16
      } break;
    1282:	1e dd       	rcall	.-1476   	; 0xcc0 <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    1284:	02 c0       	rjmp	.+4      	; 0x128a <nwkRxTaskHandler+0x42a>
    1286:	c8 01       	movw	r24, r16
    1288:	96 db       	rcall	.-2260   	; 0x9b6 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    128a:	c8 01       	movw	r24, r16
    128c:	9e db       	rcall	.-2244   	; 0x9ca <nwkFrameNext>
    128e:	8c 01       	movw	r16, r24
    1290:	89 2b       	or	r24, r25
    1292:	09 f0       	breq	.+2      	; 0x1296 <nwkRxTaskHandler+0x436>
    1294:	20 ce       	rjmp	.-960    	; 0xed6 <nwkRxTaskHandler+0x76>
    1296:	07 c0       	rjmp	.+14     	; 0x12a6 <nwkRxTaskHandler+0x446>
    1298:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    129a:	87 81       	ldd	r24, Z+7	; 0x07
    129c:	90 85       	ldd	r25, Z+8	; 0x08
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <nwkRxTaskHandler+0x444>
    12a2:	08 cf       	rjmp	.-496    	; 0x10b4 <nwkRxTaskHandler+0x254>
    12a4:	f9 ce       	rjmp	.-526    	; 0x1098 <nwkRxTaskHandler+0x238>
    12a6:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	df 90       	pop	r13
    12c0:	cf 90       	pop	r12
    12c2:	bf 90       	pop	r11
    12c4:	af 90       	pop	r10
    12c6:	9f 90       	pop	r9
    12c8:	8f 90       	pop	r8
    12ca:	7f 90       	pop	r7
    12cc:	6f 90       	pop	r6
    12ce:	5f 90       	pop	r5
    12d0:	4f 90       	pop	r4
    12d2:	3f 90       	pop	r3
    12d4:	2f 90       	pop	r2
    12d6:	08 95       	ret

000012d8 <nwkTxDelayTimerHandler>:
    12d8:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    12da:	ff 92       	push	r15
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	7c 01       	movw	r14, r24
    12e4:	10 e0       	ldi	r17, 0x00	; 0
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	01 e0       	ldi	r16, 0x01	; 1
    12ec:	c3 e1       	ldi	r28, 0x13	; 19
    12ee:	13 c0       	rjmp	.+38     	; 0x1316 <nwkTxDelayTimerHandler+0x3e>
    12f0:	fc 01       	movw	r30, r24
    12f2:	20 81       	ld	r18, Z
    12f4:	21 31       	cpi	r18, 0x11	; 17
    12f6:	79 f4       	brne	.+30     	; 0x1316 <nwkTxDelayTimerHandler+0x3e>
    12f8:	ec 57       	subi	r30, 0x7C	; 124
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	20 81       	ld	r18, Z
    12fe:	31 81       	ldd	r19, Z+1	; 0x01
    1300:	21 50       	subi	r18, 0x01	; 1
    1302:	31 09       	sbc	r19, r1
    1304:	31 83       	std	Z+1, r19	; 0x01
    1306:	20 83       	st	Z, r18
    1308:	23 2b       	or	r18, r19
    130a:	21 f4       	brne	.+8      	; 0x1314 <nwkTxDelayTimerHandler+0x3c>
    130c:	fc 01       	movw	r30, r24
    130e:	c0 83       	st	Z, r28
    1310:	10 2f       	mov	r17, r16
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <nwkTxDelayTimerHandler+0x3e>
    1314:	10 2f       	mov	r17, r16
    1316:	59 db       	rcall	.-2382   	; 0x9ca <nwkFrameNext>
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	51 f7       	brne	.-44     	; 0x12f0 <nwkTxDelayTimerHandler+0x18>
    131c:	11 23       	and	r17, r17
    131e:	11 f0       	breq	.+4      	; 0x1324 <nwkTxDelayTimerHandler+0x4c>
    1320:	c7 01       	movw	r24, r14
    1322:	c3 d3       	rcall	.+1926   	; 0x1aaa <SYS_TimerStart>
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	08 95       	ret

00001330 <nwkTxAckWaitTimerHandler>:
    1330:	ef 92       	push	r14
    1332:	ff 92       	push	r15
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	7c 01       	movw	r14, r24
    133e:	10 e0       	ldi	r17, 0x00	; 0
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	01 e0       	ldi	r16, 0x01	; 1
    1346:	d7 e1       	ldi	r29, 0x17	; 23
    1348:	c0 e1       	ldi	r28, 0x10	; 16
    134a:	16 c0       	rjmp	.+44     	; 0x1378 <nwkTxAckWaitTimerHandler+0x48>
    134c:	fc 01       	movw	r30, r24
    134e:	20 81       	ld	r18, Z
    1350:	26 31       	cpi	r18, 0x16	; 22
    1352:	91 f4       	brne	.+36     	; 0x1378 <nwkTxAckWaitTimerHandler+0x48>
    1354:	ec 57       	subi	r30, 0x7C	; 124
    1356:	ff 4f       	sbci	r31, 0xFF	; 255
    1358:	20 81       	ld	r18, Z
    135a:	31 81       	ldd	r19, Z+1	; 0x01
    135c:	21 50       	subi	r18, 0x01	; 1
    135e:	31 09       	sbc	r19, r1
    1360:	31 83       	std	Z+1, r19	; 0x01
    1362:	20 83       	st	Z, r18
    1364:	23 2b       	or	r18, r19
    1366:	39 f4       	brne	.+14     	; 0x1376 <nwkTxAckWaitTimerHandler+0x46>
    1368:	fc 01       	movw	r30, r24
    136a:	d0 83       	st	Z, r29
    136c:	ed 57       	subi	r30, 0x7D	; 125
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	c0 83       	st	Z, r28
    1372:	10 2f       	mov	r17, r16
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <nwkTxAckWaitTimerHandler+0x48>
    1376:	10 2f       	mov	r17, r16
    1378:	28 db       	rcall	.-2480   	; 0x9ca <nwkFrameNext>
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	39 f7       	brne	.-50     	; 0x134c <nwkTxAckWaitTimerHandler+0x1c>
    137e:	11 23       	and	r17, r17
    1380:	11 f0       	breq	.+4      	; 0x1386 <nwkTxAckWaitTimerHandler+0x56>
    1382:	c7 01       	movw	r24, r14
    1384:	92 d3       	rcall	.+1828   	; 0x1aaa <SYS_TimerStart>
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	08 95       	ret

00001394 <nwkTxInit>:
    1394:	10 92 6e 19 	sts	0x196E, r1	; 0x80196e <nwkTxPhyActiveFrame+0x1>
    1398:	10 92 6d 19 	sts	0x196D, r1	; 0x80196d <nwkTxPhyActiveFrame>
    139c:	e0 e6       	ldi	r30, 0x60	; 96
    139e:	f9 e1       	ldi	r31, 0x19	; 25
    13a0:	82 e3       	ldi	r24, 0x32	; 50
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	a0 e0       	ldi	r26, 0x00	; 0
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	86 83       	std	Z+6, r24	; 0x06
    13aa:	97 83       	std	Z+7, r25	; 0x07
    13ac:	a0 87       	std	Z+8, r26	; 0x08
    13ae:	b1 87       	std	Z+9, r27	; 0x09
    13b0:	12 86       	std	Z+10, r1	; 0x0a
    13b2:	88 e9       	ldi	r24, 0x98	; 152
    13b4:	99 e0       	ldi	r25, 0x09	; 9
    13b6:	94 87       	std	Z+12, r25	; 0x0c
    13b8:	83 87       	std	Z+11, r24	; 0x0b
    13ba:	e3 e5       	ldi	r30, 0x53	; 83
    13bc:	f9 e1       	ldi	r31, 0x19	; 25
    13be:	8a e0       	ldi	r24, 0x0A	; 10
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a0 e0       	ldi	r26, 0x00	; 0
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	86 83       	std	Z+6, r24	; 0x06
    13c8:	97 83       	std	Z+7, r25	; 0x07
    13ca:	a0 87       	std	Z+8, r26	; 0x08
    13cc:	b1 87       	std	Z+9, r27	; 0x09
    13ce:	12 86       	std	Z+10, r1	; 0x0a
    13d0:	8c e6       	ldi	r24, 0x6C	; 108
    13d2:	99 e0       	ldi	r25, 0x09	; 9
    13d4:	94 87       	std	Z+12, r25	; 0x0c
    13d6:	83 87       	std	Z+11, r24	; 0x0b
    13d8:	08 95       	ret

000013da <nwkTxFrame>:
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	ec 01       	movw	r28, r24
    13e0:	fc 01       	movw	r30, r24
    13e2:	ea 57       	subi	r30, 0x7A	; 122
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	80 81       	ld	r24, Z
    13e8:	81 ff       	sbrs	r24, 1
    13ea:	03 c0       	rjmp	.+6      	; 0x13f2 <nwkTxFrame+0x18>
    13ec:	92 e1       	ldi	r25, 0x12	; 18
    13ee:	98 83       	st	Y, r25
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <nwkTxFrame+0x1c>
    13f2:	92 e1       	ldi	r25, 0x12	; 18
    13f4:	98 83       	st	Y, r25
    13f6:	fe 01       	movw	r30, r28
    13f8:	ed 57       	subi	r30, 0x7D	; 125
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	10 82       	st	Z, r1
    13fe:	80 ff       	sbrs	r24, 0
    1400:	05 c0       	rjmp	.+10     	; 0x140c <nwkTxFrame+0x32>
    1402:	2f ef       	ldi	r18, 0xFF	; 255
    1404:	3f ef       	ldi	r19, 0xFF	; 255
    1406:	3e 83       	std	Y+6, r19	; 0x06
    1408:	2d 83       	std	Y+5, r18	; 0x05
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <nwkTxFrame+0x3e>
    140c:	20 91 f8 19 	lds	r18, 0x19F8	; 0x8019f8 <nwkIb+0x2>
    1410:	30 91 f9 19 	lds	r19, 0x19F9	; 0x8019f9 <nwkIb+0x3>
    1414:	3e 83       	std	Y+6, r19	; 0x06
    1416:	2d 83       	std	Y+5, r18	; 0x05
    1418:	85 70       	andi	r24, 0x05	; 5
    141a:	19 f4       	brne	.+6      	; 0x1422 <nwkTxFrame+0x48>
    141c:	ce 01       	movw	r24, r28
    141e:	31 dc       	rcall	.-1950   	; 0xc82 <nwkRoutePrepareTx>
    1420:	04 c0       	rjmp	.+8      	; 0x142a <nwkTxFrame+0x50>
    1422:	8f 85       	ldd	r24, Y+15	; 0x0f
    1424:	98 89       	ldd	r25, Y+16	; 0x10
    1426:	98 87       	std	Y+8, r25	; 0x08
    1428:	8f 83       	std	Y+7, r24	; 0x07
    142a:	e6 ef       	ldi	r30, 0xF6	; 246
    142c:	f9 e1       	ldi	r31, 0x19	; 25
    142e:	80 81       	ld	r24, Z
    1430:	91 81       	ldd	r25, Z+1	; 0x01
    1432:	9a 87       	std	Y+10, r25	; 0x0a
    1434:	89 87       	std	Y+9, r24	; 0x09
    1436:	85 81       	ldd	r24, Z+5	; 0x05
    1438:	8f 5f       	subi	r24, 0xFF	; 255
    143a:	85 83       	std	Z+5, r24	; 0x05
    143c:	8c 83       	std	Y+4, r24	; 0x04
    143e:	8f 81       	ldd	r24, Y+7	; 0x07
    1440:	98 85       	ldd	r25, Y+8	; 0x08
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	69 f4       	brne	.+26     	; 0x1460 <nwkTxFrame+0x86>
    1446:	81 e4       	ldi	r24, 0x41	; 65
    1448:	98 e8       	ldi	r25, 0x88	; 136
    144a:	9b 83       	std	Y+3, r25	; 0x03
    144c:	8a 83       	std	Y+2, r24	; 0x02
    144e:	0c d4       	rcall	.+2072   	; 0x1c68 <rand>
    1450:	cc 57       	subi	r28, 0x7C	; 124
    1452:	df 4f       	sbci	r29, 0xFF	; 255
    1454:	87 70       	andi	r24, 0x07	; 7
    1456:	99 27       	eor	r25, r25
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	99 83       	std	Y+1, r25	; 0x01
    145c:	88 83       	st	Y, r24
    145e:	08 c0       	rjmp	.+16     	; 0x1470 <nwkTxFrame+0x96>
    1460:	81 e6       	ldi	r24, 0x61	; 97
    1462:	98 e8       	ldi	r25, 0x88	; 136
    1464:	9b 83       	std	Y+3, r25	; 0x03
    1466:	8a 83       	std	Y+2, r24	; 0x02
    1468:	cc 57       	subi	r28, 0x7C	; 124
    146a:	df 4f       	sbci	r29, 0xFF	; 255
    146c:	19 82       	std	Y+1, r1	; 0x01
    146e:	18 82       	st	Y, r1
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	08 95       	ret

00001476 <nwkTxBroadcastFrame>:
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	8c 01       	movw	r16, r24
    1480:	61 da       	rcall	.-2878   	; 0x944 <nwkFrameAlloc>
    1482:	ec 01       	movw	r28, r24
    1484:	89 2b       	or	r24, r25
    1486:	a9 f1       	breq	.+106    	; 0x14f2 <nwkTxBroadcastFrame+0x7c>
    1488:	82 e1       	ldi	r24, 0x12	; 18
    148a:	88 83       	st	Y, r24
    148c:	f8 01       	movw	r30, r16
    148e:	81 81       	ldd	r24, Z+1	; 0x01
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	fe 01       	movw	r30, r28
    1494:	ed 57       	subi	r30, 0x7D	; 125
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	10 82       	st	Z, r1
    149a:	e6 d3       	rcall	.+1996   	; 0x1c68 <rand>
    149c:	fe 01       	movw	r30, r28
    149e:	ec 57       	subi	r30, 0x7C	; 124
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	87 70       	andi	r24, 0x07	; 7
    14a4:	99 27       	eor	r25, r25
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	91 83       	std	Z+1, r25	; 0x01
    14aa:	80 83       	st	Z, r24
    14ac:	33 96       	adiw	r30, 0x03	; 3
    14ae:	11 82       	std	Z+1, r1	; 0x01
    14b0:	10 82       	st	Z, r1
    14b2:	f8 01       	movw	r30, r16
    14b4:	41 81       	ldd	r20, Z+1	; 0x01
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	b8 01       	movw	r22, r16
    14ba:	6e 5f       	subi	r22, 0xFE	; 254
    14bc:	7f 4f       	sbci	r23, 0xFF	; 255
    14be:	ce 01       	movw	r24, r28
    14c0:	02 96       	adiw	r24, 0x02	; 2
    14c2:	e0 d3       	rcall	.+1984   	; 0x1c84 <memcpy>
    14c4:	81 e4       	ldi	r24, 0x41	; 65
    14c6:	98 e8       	ldi	r25, 0x88	; 136
    14c8:	9b 83       	std	Y+3, r25	; 0x03
    14ca:	8a 83       	std	Y+2, r24	; 0x02
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
    14ce:	9f ef       	ldi	r25, 0xFF	; 255
    14d0:	98 87       	std	Y+8, r25	; 0x08
    14d2:	8f 83       	std	Y+7, r24	; 0x07
    14d4:	f8 01       	movw	r30, r16
    14d6:	85 81       	ldd	r24, Z+5	; 0x05
    14d8:	96 81       	ldd	r25, Z+6	; 0x06
    14da:	9e 83       	std	Y+6, r25	; 0x06
    14dc:	8d 83       	std	Y+5, r24	; 0x05
    14de:	e6 ef       	ldi	r30, 0xF6	; 246
    14e0:	f9 e1       	ldi	r31, 0x19	; 25
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	9a 87       	std	Y+10, r25	; 0x0a
    14e8:	89 87       	std	Y+9, r24	; 0x09
    14ea:	85 81       	ldd	r24, Z+5	; 0x05
    14ec:	8f 5f       	subi	r24, 0xFF	; 255
    14ee:	85 83       	std	Z+5, r24	; 0x05
    14f0:	8c 83       	std	Y+4, r24	; 0x04
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	08 95       	ret

000014fc <nwkTxAckReceived>:
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	fc 01       	movw	r30, r24
    1502:	21 85       	ldd	r18, Z+9	; 0x09
    1504:	23 30       	cpi	r18, 0x03	; 3
    1506:	d9 f4       	brne	.+54     	; 0x153e <nwkTxAckReceived+0x42>
    1508:	10 c0       	rjmp	.+32     	; 0x152a <nwkTxAckReceived+0x2e>
    150a:	fc 01       	movw	r30, r24
    150c:	20 81       	ld	r18, Z
    150e:	26 31       	cpi	r18, 0x16	; 22
    1510:	89 f4       	brne	.+34     	; 0x1534 <nwkTxAckReceived+0x38>
    1512:	34 85       	ldd	r19, Z+12	; 0x0c
    1514:	29 81       	ldd	r18, Y+1	; 0x01
    1516:	32 13       	cpse	r19, r18
    1518:	0d c0       	rjmp	.+26     	; 0x1534 <nwkTxAckReceived+0x38>
    151a:	27 e1       	ldi	r18, 0x17	; 23
    151c:	20 83       	st	Z, r18
    151e:	2a 81       	ldd	r18, Y+2	; 0x02
    1520:	ea 57       	subi	r30, 0x7A	; 122
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	20 83       	st	Z, r18
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	0b c0       	rjmp	.+22     	; 0x1540 <nwkTxAckReceived+0x44>
    152a:	fc 01       	movw	r30, r24
    152c:	c7 81       	ldd	r28, Z+7	; 0x07
    152e:	d0 85       	ldd	r29, Z+8	; 0x08
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	4a da       	rcall	.-2924   	; 0x9ca <nwkFrameNext>
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	41 f7       	brne	.-48     	; 0x150a <nwkTxAckReceived+0xe>
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <nwkTxAckReceived+0x44>
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	08 95       	ret

00001546 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1546:	e0 91 6d 19 	lds	r30, 0x196D	; 0x80196d <nwkTxPhyActiveFrame>
    154a:	f0 91 6e 19 	lds	r31, 0x196E	; 0x80196e <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	21 f0       	breq	.+8      	; 0x155a <PHY_DataConf+0x14>
    1552:	48 f0       	brcs	.+18     	; 0x1566 <PHY_DataConf+0x20>
    1554:	82 30       	cpi	r24, 0x02	; 2
    1556:	19 f0       	breq	.+6      	; 0x155e <PHY_DataConf+0x18>
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    155a:	80 e2       	ldi	r24, 0x20	; 32
    155c:	05 c0       	rjmp	.+10     	; 0x1568 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    155e:	81 e2       	ldi	r24, 0x21	; 33
    1560:	03 c0       	rjmp	.+6      	; 0x1568 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    1566:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1568:	df 01       	movw	r26, r30
    156a:	ad 57       	subi	r26, 0x7D	; 125
    156c:	bf 4f       	sbci	r27, 0xFF	; 255
    156e:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1570:	85 e1       	ldi	r24, 0x15	; 21
    1572:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1574:	10 92 6e 19 	sts	0x196E, r1	; 0x80196e <nwkTxPhyActiveFrame+0x1>
    1578:	10 92 6d 19 	sts	0x196D, r1	; 0x80196d <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    157c:	e6 ef       	ldi	r30, 0xF6	; 246
    157e:	f9 e1       	ldi	r31, 0x19	; 25
    1580:	86 a1       	ldd	r24, Z+38	; 0x26
    1582:	97 a1       	ldd	r25, Z+39	; 0x27
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	97 a3       	std	Z+39, r25	; 0x27
    1588:	86 a3       	std	Z+38, r24	; 0x26
    158a:	08 95       	ret

0000158c <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    158c:	9f 92       	push	r9
    158e:	af 92       	push	r10
    1590:	bf 92       	push	r11
    1592:	cf 92       	push	r12
    1594:	df 92       	push	r13
    1596:	ef 92       	push	r14
    1598:	ff 92       	push	r15
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    15a2:	c0 e0       	ldi	r28, 0x00	; 0
    15a4:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    15a6:	0f 2e       	mov	r0, r31
    15a8:	f4 e1       	ldi	r31, 0x14	; 20
    15aa:	af 2e       	mov	r10, r31
    15ac:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    15ae:	06 ef       	ldi	r16, 0xF6	; 246
    15b0:	19 e1       	ldi	r17, 0x19	; 25
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    15b2:	0f 2e       	mov	r0, r31
    15b4:	f7 e1       	ldi	r31, 0x17	; 23
    15b6:	df 2e       	mov	r13, r31
    15b8:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    15ba:	0f 2e       	mov	r0, r31
    15bc:	f6 e1       	ldi	r31, 0x16	; 22
    15be:	9f 2e       	mov	r9, r31
    15c0:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    15c2:	0f 2e       	mov	r0, r31
    15c4:	f9 e2       	ldi	r31, 0x29	; 41
    15c6:	ef 2e       	mov	r14, r31
    15c8:	f1 2c       	mov	r15, r1
    15ca:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    15cc:	0f 2e       	mov	r0, r31
    15ce:	f3 e1       	ldi	r31, 0x13	; 19
    15d0:	cf 2e       	mov	r12, r31
    15d2:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    15d4:	0f 2e       	mov	r0, r31
    15d6:	f1 e1       	ldi	r31, 0x11	; 17
    15d8:	bf 2e       	mov	r11, r31
    15da:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    15dc:	60 c0       	rjmp	.+192    	; 0x169e <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    15de:	88 81       	ld	r24, Y
    15e0:	83 31       	cpi	r24, 0x13	; 19
    15e2:	c1 f0       	breq	.+48     	; 0x1614 <nwkTxTaskHandler+0x88>
    15e4:	18 f4       	brcc	.+6      	; 0x15ec <nwkTxTaskHandler+0x60>
    15e6:	82 31       	cpi	r24, 0x12	; 18
    15e8:	39 f0       	breq	.+14     	; 0x15f8 <nwkTxTaskHandler+0x6c>
    15ea:	59 c0       	rjmp	.+178    	; 0x169e <nwkTxTaskHandler+0x112>
    15ec:	85 31       	cpi	r24, 0x15	; 21
    15ee:	49 f1       	breq	.+82     	; 0x1642 <nwkTxTaskHandler+0xb6>
    15f0:	87 31       	cpi	r24, 0x17	; 23
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <nwkTxTaskHandler+0x6a>
    15f4:	45 c0       	rjmp	.+138    	; 0x1680 <nwkTxTaskHandler+0xf4>
    15f6:	53 c0       	rjmp	.+166    	; 0x169e <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    15f8:	fe 01       	movw	r30, r28
    15fa:	ec 57       	subi	r30, 0x7C	; 124
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	80 81       	ld	r24, Z
    1600:	91 81       	ldd	r25, Z+1	; 0x01
    1602:	89 2b       	or	r24, r25
    1604:	29 f0       	breq	.+10     	; 0x1610 <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1606:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    1608:	83 e5       	ldi	r24, 0x53	; 83
    160a:	99 e1       	ldi	r25, 0x19	; 25
    160c:	4e d2       	rcall	.+1180   	; 0x1aaa <SYS_TimerStart>
    160e:	47 c0       	rjmp	.+142    	; 0x169e <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1610:	c8 82       	st	Y, r12
    1612:	45 c0       	rjmp	.+138    	; 0x169e <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    1614:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <nwkTxPhyActiveFrame>
    1618:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <nwkTxPhyActiveFrame+0x1>
    161c:	89 2b       	or	r24, r25
    161e:	09 f0       	breq	.+2      	; 0x1622 <nwkTxTaskHandler+0x96>
    1620:	3e c0       	rjmp	.+124    	; 0x169e <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    1622:	d0 93 6e 19 	sts	0x196E, r29	; 0x80196e <nwkTxPhyActiveFrame+0x1>
    1626:	c0 93 6d 19 	sts	0x196D, r28	; 0x80196d <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    162a:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    162c:	69 81       	ldd	r22, Y+1	; 0x01
    162e:	ce 01       	movw	r24, r28
    1630:	02 96       	adiw	r24, 0x02	; 2
    1632:	cb d0       	rcall	.+406    	; 0x17ca <PHY_DataReq>
          nwkIb.lock++;
    1634:	f8 01       	movw	r30, r16
    1636:	86 a1       	ldd	r24, Z+38	; 0x26
    1638:	97 a1       	ldd	r25, Z+39	; 0x27
    163a:	01 96       	adiw	r24, 0x01	; 1
    163c:	97 a3       	std	Z+39, r25	; 0x27
    163e:	86 a3       	std	Z+38, r24	; 0x26
    1640:	2e c0       	rjmp	.+92     	; 0x169e <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    1642:	fe 01       	movw	r30, r28
    1644:	ed 57       	subi	r30, 0x7D	; 125
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	80 81       	ld	r24, Z
    164a:	81 11       	cpse	r24, r1
    164c:	17 c0       	rjmp	.+46     	; 0x167c <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    164e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1650:	3e 85       	ldd	r19, Y+14	; 0x0e
    1652:	f8 01       	movw	r30, r16
    1654:	80 81       	ld	r24, Z
    1656:	91 81       	ldd	r25, Z+1	; 0x01
    1658:	28 17       	cp	r18, r24
    165a:	39 07       	cpc	r19, r25
    165c:	69 f4       	brne	.+26     	; 0x1678 <nwkTxTaskHandler+0xec>
    165e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1660:	80 ff       	sbrs	r24, 0
    1662:	0a c0       	rjmp	.+20     	; 0x1678 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1664:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1666:	fe 01       	movw	r30, r28
    1668:	ec 57       	subi	r30, 0x7C	; 124
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	f1 82       	std	Z+1, r15	; 0x01
    166e:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    1670:	80 e6       	ldi	r24, 0x60	; 96
    1672:	99 e1       	ldi	r25, 0x19	; 25
    1674:	1a d2       	rcall	.+1076   	; 0x1aaa <SYS_TimerStart>
    1676:	13 c0       	rjmp	.+38     	; 0x169e <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    1678:	d8 82       	st	Y, r13
    167a:	11 c0       	rjmp	.+34     	; 0x169e <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    167c:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    167e:	0f c0       	rjmp	.+30     	; 0x169e <nwkTxTaskHandler+0x112>
    1680:	ce 01       	movw	r24, r28
    1682:	b8 da       	rcall	.-2704   	; 0xbf4 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    1684:	fe 01       	movw	r30, r28
    1686:	e9 57       	subi	r30, 0x79	; 121
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	01 90       	ld	r0, Z+
    168c:	f0 81       	ld	r31, Z
    168e:	e0 2d       	mov	r30, r0
    1690:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    1692:	19 f4       	brne	.+6      	; 0x169a <nwkTxTaskHandler+0x10e>
    1694:	ce 01       	movw	r24, r28
    1696:	8f d9       	rcall	.-3298   	; 0x9b6 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    1698:	02 c0       	rjmp	.+4      	; 0x169e <nwkTxTaskHandler+0x112>
    169a:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    169c:	19 95       	eicall
    169e:	ce 01       	movw	r24, r28
    16a0:	94 d9       	rcall	.-3288   	; 0x9ca <nwkFrameNext>
    16a2:	ec 01       	movw	r28, r24
    16a4:	89 2b       	or	r24, r25
    16a6:	09 f0       	breq	.+2      	; 0x16aa <nwkTxTaskHandler+0x11e>
    16a8:	9a cf       	rjmp	.-204    	; 0x15de <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	df 90       	pop	r13
    16b8:	cf 90       	pop	r12
    16ba:	bf 90       	pop	r11
    16bc:	af 90       	pop	r10
    16be:	9f 90       	pop	r9
    16c0:	08 95       	ret

000016c2 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    16c2:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <phyBand>
    16c6:	98 2f       	mov	r25, r24
    16c8:	9f 70       	andi	r25, 0x0F	; 15
    16ca:	e4 e5       	ldi	r30, 0x54	; 84
    16cc:	f1 e0       	ldi	r31, 0x01	; 1
    16ce:	80 81       	ld	r24, Z
    16d0:	80 7f       	andi	r24, 0xF0	; 240
    16d2:	89 2b       	or	r24, r25
    16d4:	80 83       	st	Z, r24
    16d6:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <phyBand>
    16da:	88 23       	and	r24, r24
    16dc:	29 f0       	breq	.+10     	; 0x16e8 <phySetChannel+0x26>
    16de:	80 91 70 19 	lds	r24, 0x1970	; 0x801970 <phyChannel>
    16e2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    16e6:	08 95       	ret
    16e8:	80 91 70 19 	lds	r24, 0x1970	; 0x801970 <phyChannel>
    16ec:	98 2f       	mov	r25, r24
    16ee:	9f 71       	andi	r25, 0x1F	; 31
    16f0:	e8 e4       	ldi	r30, 0x48	; 72
    16f2:	f1 e0       	ldi	r31, 0x01	; 1
    16f4:	80 81       	ld	r24, Z
    16f6:	80 7e       	andi	r24, 0xE0	; 224
    16f8:	89 2b       	or	r24, r25
    16fa:	80 83       	st	Z, r24
    16fc:	08 95       	ret

000016fe <phyTrxSetState>:
    16fe:	93 e0       	ldi	r25, 0x03	; 3
    1700:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1704:	e1 e4       	ldi	r30, 0x41	; 65
    1706:	f1 e0       	ldi	r31, 0x01	; 1
    1708:	90 81       	ld	r25, Z
    170a:	9f 71       	andi	r25, 0x1F	; 31
    170c:	98 30       	cpi	r25, 0x08	; 8
    170e:	e1 f7       	brne	.-8      	; 0x1708 <phyTrxSetState+0xa>
    1710:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1714:	e1 e4       	ldi	r30, 0x41	; 65
    1716:	f1 e0       	ldi	r31, 0x01	; 1
    1718:	90 81       	ld	r25, Z
    171a:	9f 71       	andi	r25, 0x1F	; 31
    171c:	89 13       	cpse	r24, r25
    171e:	fc cf       	rjmp	.-8      	; 0x1718 <phyTrxSetState+0x1a>
    1720:	08 95       	ret

00001722 <phySetRxState>:
    1722:	88 e0       	ldi	r24, 0x08	; 8
    1724:	ec df       	rcall	.-40     	; 0x16fe <phyTrxSetState>
    1726:	8f ef       	ldi	r24, 0xFF	; 255
    1728:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    172c:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <phyRxState>
    1730:	88 23       	and	r24, r24
    1732:	11 f0       	breq	.+4      	; 0x1738 <phySetRxState+0x16>
    1734:	86 e1       	ldi	r24, 0x16	; 22
    1736:	e3 cf       	rjmp	.-58     	; 0x16fe <phyTrxSetState>
    1738:	08 95       	ret

0000173a <PHY_Init>:
    173a:	e9 e3       	ldi	r30, 0x39	; 57
    173c:	f1 e0       	ldi	r31, 0x01	; 1
    173e:	80 81       	ld	r24, Z
    1740:	81 60       	ori	r24, 0x01	; 1
    1742:	80 83       	st	Z, r24
    1744:	10 92 71 19 	sts	0x1971, r1	; 0x801971 <phyRxState>
    1748:	10 92 6f 19 	sts	0x196F, r1	; 0x80196f <phyBand>
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	80 93 f2 19 	sts	0x19F2, r24	; 0x8019f2 <phyState>
    1752:	88 e0       	ldi	r24, 0x08	; 8
    1754:	d4 df       	rcall	.-88     	; 0x16fe <phyTrxSetState>
    1756:	8b ee       	ldi	r24, 0xEB	; 235
    1758:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    175c:	ec e4       	ldi	r30, 0x4C	; 76
    175e:	f1 e0       	ldi	r31, 0x01	; 1
    1760:	80 81       	ld	r24, Z
    1762:	80 68       	ori	r24, 0x80	; 128
    1764:	80 83       	st	Z, r24
    1766:	08 95       	ret

00001768 <PHY_SetRxState>:
    1768:	80 93 71 19 	sts	0x1971, r24	; 0x801971 <phyRxState>
    176c:	da cf       	rjmp	.-76     	; 0x1722 <phySetRxState>
    176e:	08 95       	ret

00001770 <PHY_SetChannel>:
    1770:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <phyChannel>
    1774:	a6 cf       	rjmp	.-180    	; 0x16c2 <phySetChannel>
    1776:	08 95       	ret

00001778 <PHY_SetPanId>:
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	1f 92       	push	r1
    177e:	1f 92       	push	r1
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	08 95       	ret

0000179c <PHY_SetShortAddr>:
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	1f 92       	push	r1
    17a2:	1f 92       	push	r1
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	9a 83       	std	Y+2, r25	; 0x02
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    17b6:	99 81       	ldd	r25, Y+1	; 0x01
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	89 0f       	add	r24, r25
    17bc:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	08 95       	ret

000017ca <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	18 2f       	mov	r17, r24
    17d2:	d9 2f       	mov	r29, r25
    17d4:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    17d6:	89 e1       	ldi	r24, 0x19	; 25
    17d8:	92 df       	rcall	.-220    	; 0x16fe <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    17e0:	82 e0       	ldi	r24, 0x02	; 2
    17e2:	8c 0f       	add	r24, r28
    17e4:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    17e8:	cc 23       	and	r28, r28
    17ea:	71 f0       	breq	.+28     	; 0x1808 <PHY_DataReq+0x3e>
    17ec:	a1 2f       	mov	r26, r17
    17ee:	bd 2f       	mov	r27, r29
    17f0:	c1 50       	subi	r28, 0x01	; 1
    17f2:	6c 2f       	mov	r22, r28
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	6e 57       	subi	r22, 0x7E	; 126
    17f8:	7e 4f       	sbci	r23, 0xFE	; 254
    17fa:	e1 e8       	ldi	r30, 0x81	; 129
    17fc:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    17fe:	8d 91       	ld	r24, X+
    1800:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    1802:	e6 17       	cp	r30, r22
    1804:	f7 07       	cpc	r31, r23
    1806:	d9 f7       	brne	.-10     	; 0x17fe <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    1808:	83 e0       	ldi	r24, 0x03	; 3
    180a:	80 93 f2 19 	sts	0x19F2, r24	; 0x8019f2 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    180e:	82 e0       	ldi	r24, 0x02	; 2
    1810:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	08 95       	ret

0000181c <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	00 d0       	rcall	.+0      	; 0x1824 <PHY_TaskHandler+0x8>
    1824:	1f 92       	push	r1
    1826:	1f 92       	push	r1
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    182c:	80 91 f2 19 	lds	r24, 0x19F2	; 0x8019f2 <phyState>
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	09 f4       	brne	.+2      	; 0x1836 <PHY_TaskHandler+0x1a>
    1834:	65 c0       	rjmp	.+202    	; 0x1900 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    1836:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    183a:	83 ff       	sbrs	r24, 3
    183c:	3e c0       	rjmp	.+124    	; 0x18ba <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    183e:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1842:	6a 2f       	mov	r22, r26
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	ab 01       	movw	r20, r22
    1848:	4f 5f       	subi	r20, 0xFF	; 255
    184a:	5f 4f       	sbci	r21, 0xFF	; 255
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1852:	fc 01       	movw	r30, r24
    1854:	e0 58       	subi	r30, 0x80	; 128
    1856:	fe 4f       	sbci	r31, 0xFE	; 254
    1858:	30 81       	ld	r19, Z
    185a:	fc 01       	movw	r30, r24
    185c:	ee 58       	subi	r30, 0x8E	; 142
    185e:	f6 4e       	sbci	r31, 0xE6	; 230
    1860:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1862:	2f 5f       	subi	r18, 0xFF	; 255
    1864:	82 2f       	mov	r24, r18
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	84 17       	cp	r24, r20
    186a:	95 07       	cpc	r25, r21
    186c:	94 f3       	brlt	.-28     	; 0x1852 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    186e:	82 e7       	ldi	r24, 0x72	; 114
    1870:	99 e1       	ldi	r25, 0x19	; 25
    1872:	9a 83       	std	Y+2, r25	; 0x02
    1874:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    1876:	a2 50       	subi	r26, 0x02	; 2
    1878:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    187a:	fb 01       	movw	r30, r22
    187c:	ee 58       	subi	r30, 0x8E	; 142
    187e:	f6 4e       	sbci	r31, 0xE6	; 230
    1880:	80 81       	ld	r24, Z
    1882:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1884:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    1888:	8a 55       	subi	r24, 0x5A	; 90
    188a:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    188c:	ce 01       	movw	r24, r28
    188e:	01 96       	adiw	r24, 0x01	; 1
    1890:	bd da       	rcall	.-2694   	; 0xe0c <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    1892:	e1 e4       	ldi	r30, 0x41	; 65
    1894:	f1 e0       	ldi	r31, 0x01	; 1
    1896:	80 81       	ld	r24, Z
    1898:	8f 71       	andi	r24, 0x1F	; 31
    189a:	86 31       	cpi	r24, 0x16	; 22
    189c:	e1 f7       	brne	.-8      	; 0x1896 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    189e:	ef e4       	ldi	r30, 0x4F	; 79
    18a0:	f1 e0       	ldi	r31, 0x01	; 1
    18a2:	80 81       	ld	r24, Z
    18a4:	88 60       	ori	r24, 0x08	; 8
    18a6:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    18a8:	ec e4       	ldi	r30, 0x4C	; 76
    18aa:	f1 e0       	ldi	r31, 0x01	; 1
    18ac:	80 81       	ld	r24, Z
    18ae:	8f 77       	andi	r24, 0x7F	; 127
    18b0:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    18b2:	80 81       	ld	r24, Z
    18b4:	80 68       	ori	r24, 0x80	; 128
    18b6:	80 83       	st	Z, r24
    18b8:	23 c0       	rjmp	.+70     	; 0x1900 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    18ba:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    18be:	86 ff       	sbrs	r24, 6
    18c0:	1f c0       	rjmp	.+62     	; 0x1900 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    18c2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    18c6:	8f 71       	andi	r24, 0x1F	; 31
    18c8:	89 31       	cpi	r24, 0x19	; 25
    18ca:	a9 f4       	brne	.+42     	; 0x18f6 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    18cc:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    18d0:	12 95       	swap	r17
    18d2:	16 95       	lsr	r17
    18d4:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    18d6:	49 f0       	breq	.+18     	; 0x18ea <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    18d8:	13 30       	cpi	r17, 0x03	; 3
    18da:	21 f0       	breq	.+8      	; 0x18e4 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    18dc:	15 30       	cpi	r17, 0x05	; 5
    18de:	21 f0       	breq	.+8      	; 0x18e8 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    18e0:	13 e0       	ldi	r17, 0x03	; 3
    18e2:	03 c0       	rjmp	.+6      	; 0x18ea <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    18e4:	11 e0       	ldi	r17, 0x01	; 1
    18e6:	01 c0       	rjmp	.+2      	; 0x18ea <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    18e8:	12 e0       	ldi	r17, 0x02	; 2
    18ea:	1b df       	rcall	.-458    	; 0x1722 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	80 93 f2 19 	sts	0x19F2, r24	; 0x8019f2 <phyState>

      PHY_DataConf(status);
    18f2:	81 2f       	mov	r24, r17
    18f4:	28 de       	rcall	.-944    	; 0x1546 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    18f6:	ef e4       	ldi	r30, 0x4F	; 79
    18f8:	f1 e0       	ldi	r31, 0x01	; 1
    18fa:	80 81       	ld	r24, Z
    18fc:	80 64       	ori	r24, 0x40	; 64
    18fe:	80 83       	st	Z, r24
  }
}
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	1f 91       	pop	r17
    1910:	08 95       	ret

00001912 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    1912:	0e 94 d5 01 	call	0x3aa	; 0x3aa <HAL_Init>
  SYS_TimerInit();
    1916:	6d d0       	rcall	.+218    	; 0x19f2 <SYS_TimerInit>
  PHY_Init();
    1918:	10 df       	rcall	.-480    	; 0x173a <PHY_Init>
    191a:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <NWK_Init>
  NWK_Init();
    191e:	08 95       	ret

00001920 <SYS_TaskHandler>:
    1920:	7d df       	rcall	.-262    	; 0x181c <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    1922:	0e 94 a4 03 	call	0x748	; 0x748 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    1926:	cc c0       	rjmp	.+408    	; 0x1ac0 <SYS_TimerTaskHandler>
    1928:	08 95       	ret

0000192a <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	ec 01       	movw	r28, r24
  if (timers)
    1934:	80 91 f3 19 	lds	r24, 0x19F3	; 0x8019f3 <timers>
    1938:	90 91 f4 19 	lds	r25, 0x19F4	; 0x8019f4 <timers+0x1>
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	09 f4       	brne	.+2      	; 0x1942 <placeTimer+0x18>
    1940:	45 c0       	rjmp	.+138    	; 0x19cc <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    1942:	4e 81       	ldd	r20, Y+6	; 0x06
    1944:	5f 81       	ldd	r21, Y+7	; 0x07
    1946:	68 85       	ldd	r22, Y+8	; 0x08
    1948:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    194a:	fc 01       	movw	r30, r24
    194c:	02 81       	ldd	r16, Z+2	; 0x02
    194e:	13 81       	ldd	r17, Z+3	; 0x03
    1950:	24 81       	ldd	r18, Z+4	; 0x04
    1952:	35 81       	ldd	r19, Z+5	; 0x05
    1954:	40 17       	cp	r20, r16
    1956:	51 07       	cpc	r21, r17
    1958:	62 07       	cpc	r22, r18
    195a:	73 07       	cpc	r23, r19
    195c:	60 f0       	brcs	.+24     	; 0x1976 <placeTimer+0x4c>
    195e:	dc 01       	movw	r26, r24
    1960:	17 c0       	rjmp	.+46     	; 0x1990 <placeTimer+0x66>
    1962:	02 81       	ldd	r16, Z+2	; 0x02
    1964:	13 81       	ldd	r17, Z+3	; 0x03
    1966:	24 81       	ldd	r18, Z+4	; 0x04
    1968:	35 81       	ldd	r19, Z+5	; 0x05
    196a:	40 17       	cp	r20, r16
    196c:	51 07       	cpc	r21, r17
    196e:	62 07       	cpc	r22, r18
    1970:	73 07       	cpc	r23, r19
    1972:	68 f4       	brcc	.+26     	; 0x198e <placeTimer+0x64>
    1974:	03 c0       	rjmp	.+6      	; 0x197c <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1976:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    1978:	a0 e0       	ldi	r26, 0x00	; 0
    197a:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    197c:	04 1b       	sub	r16, r20
    197e:	15 0b       	sbc	r17, r21
    1980:	26 0b       	sbc	r18, r22
    1982:	37 0b       	sbc	r19, r23
    1984:	02 83       	std	Z+2, r16	; 0x02
    1986:	13 83       	std	Z+3, r17	; 0x03
    1988:	24 83       	std	Z+4, r18	; 0x04
    198a:	35 83       	std	Z+5, r19	; 0x05
         break;
    198c:	0a c0       	rjmp	.+20     	; 0x19a2 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    198e:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    1990:	40 1b       	sub	r20, r16
    1992:	51 0b       	sbc	r21, r17
    1994:	62 0b       	sbc	r22, r18
    1996:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1998:	ed 91       	ld	r30, X+
    199a:	fc 91       	ld	r31, X
    199c:	11 97       	sbiw	r26, 0x01	; 1
    199e:	30 97       	sbiw	r30, 0x00	; 0
    19a0:	01 f7       	brne	.-64     	; 0x1962 <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    19a2:	4a 83       	std	Y+2, r20	; 0x02
    19a4:	5b 83       	std	Y+3, r21	; 0x03
    19a6:	6c 83       	std	Y+4, r22	; 0x04
    19a8:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    19aa:	10 97       	sbiw	r26, 0x00	; 0
    19ac:	41 f0       	breq	.+16     	; 0x19be <placeTimer+0x94>
    {
      timer->next = prev->next;
    19ae:	8d 91       	ld	r24, X+
    19b0:	9c 91       	ld	r25, X
    19b2:	11 97       	sbiw	r26, 0x01	; 1
    19b4:	99 83       	std	Y+1, r25	; 0x01
    19b6:	88 83       	st	Y, r24
      prev->next = timer;
    19b8:	cd 93       	st	X+, r28
    19ba:	dc 93       	st	X, r29
    19bc:	15 c0       	rjmp	.+42     	; 0x19e8 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    19be:	99 83       	std	Y+1, r25	; 0x01
    19c0:	88 83       	st	Y, r24
      timers = timer;
    19c2:	d0 93 f4 19 	sts	0x19F4, r29	; 0x8019f4 <timers+0x1>
    19c6:	c0 93 f3 19 	sts	0x19F3, r28	; 0x8019f3 <timers>
    19ca:	0e c0       	rjmp	.+28     	; 0x19e8 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    19cc:	19 82       	std	Y+1, r1	; 0x01
    19ce:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    19d0:	8e 81       	ldd	r24, Y+6	; 0x06
    19d2:	9f 81       	ldd	r25, Y+7	; 0x07
    19d4:	a8 85       	ldd	r26, Y+8	; 0x08
    19d6:	b9 85       	ldd	r27, Y+9	; 0x09
    19d8:	8a 83       	std	Y+2, r24	; 0x02
    19da:	9b 83       	std	Y+3, r25	; 0x03
    19dc:	ac 83       	std	Y+4, r26	; 0x04
    19de:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    19e0:	d0 93 f4 19 	sts	0x19F4, r29	; 0x8019f4 <timers+0x1>
    19e4:	c0 93 f3 19 	sts	0x19F3, r28	; 0x8019f3 <timers>
  }
}
    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	08 95       	ret

000019f2 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    19f2:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <timers+0x1>
    19f6:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <timers>
    19fa:	08 95       	ret

000019fc <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    1a00:	a0 91 f3 19 	lds	r26, 0x19F3	; 0x8019f3 <timers>
    1a04:	b0 91 f4 19 	lds	r27, 0x19F4	; 0x8019f4 <timers+0x1>
    1a08:	10 97       	sbiw	r26, 0x00	; 0
    1a0a:	91 f1       	breq	.+100    	; 0x1a70 <SYS_TimerStop+0x74>
  {
    if (t == timer)
    1a0c:	a8 17       	cp	r26, r24
    1a0e:	b9 07       	cpc	r27, r25
    1a10:	51 f5       	brne	.+84     	; 0x1a66 <SYS_TimerStop+0x6a>
    1a12:	0a c0       	rjmp	.+20     	; 0x1a28 <SYS_TimerStop+0x2c>
    1a14:	8e 17       	cp	r24, r30
    1a16:	9f 07       	cpc	r25, r31
    1a18:	29 f5       	brne	.+74     	; 0x1a64 <SYS_TimerStop+0x68>
    {
      if (prev)
    1a1a:	10 97       	sbiw	r26, 0x00	; 0
    1a1c:	31 f0       	breq	.+12     	; 0x1a2a <SYS_TimerStop+0x2e>
        prev->next = t->next;
    1a1e:	20 81       	ld	r18, Z
    1a20:	31 81       	ldd	r19, Z+1	; 0x01
    1a22:	2d 93       	st	X+, r18
    1a24:	3c 93       	st	X, r19
    1a26:	07 c0       	rjmp	.+14     	; 0x1a36 <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    1a28:	fc 01       	movw	r30, r24
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    1a2a:	20 81       	ld	r18, Z
    1a2c:	31 81       	ldd	r19, Z+1	; 0x01
    1a2e:	30 93 f4 19 	sts	0x19F4, r19	; 0x8019f4 <timers+0x1>
    1a32:	20 93 f3 19 	sts	0x19F3, r18	; 0x8019f3 <timers>

      if (t->next)
    1a36:	01 90       	ld	r0, Z+
    1a38:	f0 81       	ld	r31, Z
    1a3a:	e0 2d       	mov	r30, r0
    1a3c:	30 97       	sbiw	r30, 0x00	; 0
    1a3e:	c1 f0       	breq	.+48     	; 0x1a70 <SYS_TimerStop+0x74>
        t->next->timeout += timer->timeout;
    1a40:	42 81       	ldd	r20, Z+2	; 0x02
    1a42:	53 81       	ldd	r21, Z+3	; 0x03
    1a44:	64 81       	ldd	r22, Z+4	; 0x04
    1a46:	75 81       	ldd	r23, Z+5	; 0x05
    1a48:	ec 01       	movw	r28, r24
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a4e:	ac 81       	ldd	r26, Y+4	; 0x04
    1a50:	bd 81       	ldd	r27, Y+5	; 0x05
    1a52:	84 0f       	add	r24, r20
    1a54:	95 1f       	adc	r25, r21
    1a56:	a6 1f       	adc	r26, r22
    1a58:	b7 1f       	adc	r27, r23
    1a5a:	82 83       	std	Z+2, r24	; 0x02
    1a5c:	93 83       	std	Z+3, r25	; 0x03
    1a5e:	a4 83       	std	Z+4, r26	; 0x04
    1a60:	b5 83       	std	Z+5, r27	; 0x05
    1a62:	06 c0       	rjmp	.+12     	; 0x1a70 <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    1a64:	df 01       	movw	r26, r30
    1a66:	ed 91       	ld	r30, X+
    1a68:	fc 91       	ld	r31, X
    1a6a:	11 97       	sbiw	r26, 0x01	; 1
    1a6c:	30 97       	sbiw	r30, 0x00	; 0
    1a6e:	91 f6       	brne	.-92     	; 0x1a14 <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	08 95       	ret

00001a76 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1a76:	e0 91 f3 19 	lds	r30, 0x19F3	; 0x8019f3 <timers>
    1a7a:	f0 91 f4 19 	lds	r31, 0x19F4	; 0x8019f4 <timers+0x1>
    1a7e:	30 97       	sbiw	r30, 0x00	; 0
    1a80:	71 f0       	breq	.+28     	; 0x1a9e <SYS_TimerStarted+0x28>
    if (t == timer)
    1a82:	e8 17       	cp	r30, r24
    1a84:	f9 07       	cpc	r31, r25
    1a86:	21 f4       	brne	.+8      	; 0x1a90 <SYS_TimerStarted+0x1a>
    1a88:	0c c0       	rjmp	.+24     	; 0x1aa2 <SYS_TimerStarted+0x2c>
    1a8a:	8e 17       	cp	r24, r30
    1a8c:	9f 07       	cpc	r25, r31
    1a8e:	59 f0       	breq	.+22     	; 0x1aa6 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1a90:	01 90       	ld	r0, Z+
    1a92:	f0 81       	ld	r31, Z
    1a94:	e0 2d       	mov	r30, r0
    1a96:	30 97       	sbiw	r30, 0x00	; 0
    1a98:	c1 f7       	brne	.-16     	; 0x1a8a <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	08 95       	ret
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	08 95       	ret
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1aa8:	08 95       	ret

00001aaa <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1ab0:	e2 df       	rcall	.-60     	; 0x1a76 <SYS_TimerStarted>
    1ab2:	81 11       	cpse	r24, r1
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <SYS_TimerStart+0x10>
    placeTimer(timer);
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	38 df       	rcall	.-400    	; 0x192a <placeTimer>
}
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	08 95       	ret

00001ac0 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1ac0:	cf 92       	push	r12
    1ac2:	df 92       	push	r13
    1ac4:	ef 92       	push	r14
    1ac6:	ff 92       	push	r15
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    1acc:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <halTimerIrqCount>
    1ad0:	88 23       	and	r24, r24
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <SYS_TimerTaskHandler+0x16>
    1ad4:	59 c0       	rjmp	.+178    	; 0x1b88 <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    1ad6:	8f b7       	in	r24, 0x3f	; 63
    1ad8:	f8 94       	cli
    cnt = halTimerIrqCount;
    1ada:	c0 90 f5 19 	lds	r12, 0x19F5	; 0x8019f5 <halTimerIrqCount>
    halTimerIrqCount = 0;
    1ade:	10 92 f5 19 	sts	0x19F5, r1	; 0x8019f5 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    1ae2:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    1ae4:	d1 2c       	mov	r13, r1
    1ae6:	e1 2c       	mov	r14, r1
    1ae8:	f1 2c       	mov	r15, r1
    1aea:	cc 0c       	add	r12, r12
    1aec:	dd 1c       	adc	r13, r13
    1aee:	ee 1c       	adc	r14, r14
    1af0:	ff 1c       	adc	r15, r15
    1af2:	d7 01       	movw	r26, r14
    1af4:	c6 01       	movw	r24, r12
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	aa 1f       	adc	r26, r26
    1afc:	bb 1f       	adc	r27, r27
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	aa 1f       	adc	r26, r26
    1b04:	bb 1f       	adc	r27, r27
    1b06:	c8 0e       	add	r12, r24
    1b08:	d9 1e       	adc	r13, r25
    1b0a:	ea 1e       	adc	r14, r26
    1b0c:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    1b0e:	c0 91 f3 19 	lds	r28, 0x19F3	; 0x8019f3 <timers>
    1b12:	d0 91 f4 19 	lds	r29, 0x19F4	; 0x8019f4 <timers+0x1>
    1b16:	20 97       	sbiw	r28, 0x00	; 0
    1b18:	b9 f1       	breq	.+110    	; 0x1b88 <SYS_TimerTaskHandler+0xc8>
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1e:	ac 81       	ldd	r26, Y+4	; 0x04
    1b20:	bd 81       	ldd	r27, Y+5	; 0x05
    1b22:	c8 16       	cp	r12, r24
    1b24:	d9 06       	cpc	r13, r25
    1b26:	ea 06       	cpc	r14, r26
    1b28:	fb 06       	cpc	r15, r27
    1b2a:	10 f1       	brcs	.+68     	; 0x1b70 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    1b2c:	c8 1a       	sub	r12, r24
    1b2e:	d9 0a       	sbc	r13, r25
    1b30:	ea 0a       	sbc	r14, r26
    1b32:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    1b34:	88 81       	ld	r24, Y
    1b36:	99 81       	ldd	r25, Y+1	; 0x01
    1b38:	90 93 f4 19 	sts	0x19F4, r25	; 0x8019f4 <timers+0x1>
    1b3c:	80 93 f3 19 	sts	0x19F3, r24	; 0x8019f3 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    1b40:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	11 f4       	brne	.+4      	; 0x1b4a <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    1b46:	ce 01       	movw	r24, r28
    1b48:	f0 de       	rcall	.-544    	; 0x192a <placeTimer>
    timer->handler(timer);
    1b4a:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b4c:	fc 85       	ldd	r31, Y+12	; 0x0c
    1b4e:	ce 01       	movw	r24, r28
    1b50:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    1b52:	c0 91 f3 19 	lds	r28, 0x19F3	; 0x8019f3 <timers>
    1b56:	d0 91 f4 19 	lds	r29, 0x19F4	; 0x8019f4 <timers+0x1>
    1b5a:	20 97       	sbiw	r28, 0x00	; 0
    1b5c:	a9 f0       	breq	.+42     	; 0x1b88 <SYS_TimerTaskHandler+0xc8>
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	9b 81       	ldd	r25, Y+3	; 0x03
    1b62:	ac 81       	ldd	r26, Y+4	; 0x04
    1b64:	bd 81       	ldd	r27, Y+5	; 0x05
    1b66:	c8 16       	cp	r12, r24
    1b68:	d9 06       	cpc	r13, r25
    1b6a:	ea 06       	cpc	r14, r26
    1b6c:	fb 06       	cpc	r15, r27
    1b6e:	f0 f6       	brcc	.-68     	; 0x1b2c <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	9b 81       	ldd	r25, Y+3	; 0x03
    1b74:	ac 81       	ldd	r26, Y+4	; 0x04
    1b76:	bd 81       	ldd	r27, Y+5	; 0x05
    1b78:	8c 19       	sub	r24, r12
    1b7a:	9d 09       	sbc	r25, r13
    1b7c:	ae 09       	sbc	r26, r14
    1b7e:	bf 09       	sbc	r27, r15
    1b80:	8a 83       	std	Y+2, r24	; 0x02
    1b82:	9b 83       	std	Y+3, r25	; 0x03
    1b84:	ac 83       	std	Y+4, r26	; 0x04
    1b86:	bd 83       	std	Y+5, r27	; 0x05
}
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	ff 90       	pop	r15
    1b8e:	ef 90       	pop	r14
    1b90:	df 90       	pop	r13
    1b92:	cf 90       	pop	r12
    1b94:	08 95       	ret

00001b96 <__udivmodsi4>:
    1b96:	a1 e2       	ldi	r26, 0x21	; 33
    1b98:	1a 2e       	mov	r1, r26
    1b9a:	aa 1b       	sub	r26, r26
    1b9c:	bb 1b       	sub	r27, r27
    1b9e:	fd 01       	movw	r30, r26
    1ba0:	0d c0       	rjmp	.+26     	; 0x1bbc <__udivmodsi4_ep>

00001ba2 <__udivmodsi4_loop>:
    1ba2:	aa 1f       	adc	r26, r26
    1ba4:	bb 1f       	adc	r27, r27
    1ba6:	ee 1f       	adc	r30, r30
    1ba8:	ff 1f       	adc	r31, r31
    1baa:	a2 17       	cp	r26, r18
    1bac:	b3 07       	cpc	r27, r19
    1bae:	e4 07       	cpc	r30, r20
    1bb0:	f5 07       	cpc	r31, r21
    1bb2:	20 f0       	brcs	.+8      	; 0x1bbc <__udivmodsi4_ep>
    1bb4:	a2 1b       	sub	r26, r18
    1bb6:	b3 0b       	sbc	r27, r19
    1bb8:	e4 0b       	sbc	r30, r20
    1bba:	f5 0b       	sbc	r31, r21

00001bbc <__udivmodsi4_ep>:
    1bbc:	66 1f       	adc	r22, r22
    1bbe:	77 1f       	adc	r23, r23
    1bc0:	88 1f       	adc	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	1a 94       	dec	r1
    1bc6:	69 f7       	brne	.-38     	; 0x1ba2 <__udivmodsi4_loop>
    1bc8:	60 95       	com	r22
    1bca:	70 95       	com	r23
    1bcc:	80 95       	com	r24
    1bce:	90 95       	com	r25
    1bd0:	9b 01       	movw	r18, r22
    1bd2:	ac 01       	movw	r20, r24
    1bd4:	bd 01       	movw	r22, r26
    1bd6:	cf 01       	movw	r24, r30
    1bd8:	08 95       	ret

00001bda <do_rand>:
    1bda:	8f 92       	push	r8
    1bdc:	9f 92       	push	r9
    1bde:	af 92       	push	r10
    1be0:	bf 92       	push	r11
    1be2:	cf 92       	push	r12
    1be4:	df 92       	push	r13
    1be6:	ef 92       	push	r14
    1be8:	ff 92       	push	r15
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	ec 01       	movw	r28, r24
    1bf0:	68 81       	ld	r22, Y
    1bf2:	79 81       	ldd	r23, Y+1	; 0x01
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf8:	61 15       	cp	r22, r1
    1bfa:	71 05       	cpc	r23, r1
    1bfc:	81 05       	cpc	r24, r1
    1bfe:	91 05       	cpc	r25, r1
    1c00:	21 f4       	brne	.+8      	; 0x1c0a <do_rand+0x30>
    1c02:	64 e2       	ldi	r22, 0x24	; 36
    1c04:	79 ed       	ldi	r23, 0xD9	; 217
    1c06:	8b e5       	ldi	r24, 0x5B	; 91
    1c08:	97 e0       	ldi	r25, 0x07	; 7
    1c0a:	2d e1       	ldi	r18, 0x1D	; 29
    1c0c:	33 ef       	ldi	r19, 0xF3	; 243
    1c0e:	41 e0       	ldi	r20, 0x01	; 1
    1c10:	50 e0       	ldi	r21, 0x00	; 0
    1c12:	41 d0       	rcall	.+130    	; 0x1c96 <__divmodsi4>
    1c14:	49 01       	movw	r8, r18
    1c16:	5a 01       	movw	r10, r20
    1c18:	9b 01       	movw	r18, r22
    1c1a:	ac 01       	movw	r20, r24
    1c1c:	a7 ea       	ldi	r26, 0xA7	; 167
    1c1e:	b1 e4       	ldi	r27, 0x41	; 65
    1c20:	56 d0       	rcall	.+172    	; 0x1cce <__muluhisi3>
    1c22:	6b 01       	movw	r12, r22
    1c24:	7c 01       	movw	r14, r24
    1c26:	ac ee       	ldi	r26, 0xEC	; 236
    1c28:	b4 ef       	ldi	r27, 0xF4	; 244
    1c2a:	a5 01       	movw	r20, r10
    1c2c:	94 01       	movw	r18, r8
    1c2e:	5b d0       	rcall	.+182    	; 0x1ce6 <__mulohisi3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	8c 0d       	add	r24, r12
    1c36:	9d 1d       	adc	r25, r13
    1c38:	ae 1d       	adc	r26, r14
    1c3a:	bf 1d       	adc	r27, r15
    1c3c:	b7 ff       	sbrs	r27, 7
    1c3e:	03 c0       	rjmp	.+6      	; 0x1c46 <do_rand+0x6c>
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	a1 09       	sbc	r26, r1
    1c44:	b0 48       	sbci	r27, 0x80	; 128
    1c46:	88 83       	st	Y, r24
    1c48:	99 83       	std	Y+1, r25	; 0x01
    1c4a:	aa 83       	std	Y+2, r26	; 0x02
    1c4c:	bb 83       	std	Y+3, r27	; 0x03
    1c4e:	9f 77       	andi	r25, 0x7F	; 127
    1c50:	df 91       	pop	r29
    1c52:	cf 91       	pop	r28
    1c54:	ff 90       	pop	r15
    1c56:	ef 90       	pop	r14
    1c58:	df 90       	pop	r13
    1c5a:	cf 90       	pop	r12
    1c5c:	bf 90       	pop	r11
    1c5e:	af 90       	pop	r10
    1c60:	9f 90       	pop	r9
    1c62:	8f 90       	pop	r8
    1c64:	08 95       	ret

00001c66 <rand_r>:
    1c66:	b9 cf       	rjmp	.-142    	; 0x1bda <do_rand>

00001c68 <rand>:
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	92 e0       	ldi	r25, 0x02	; 2
    1c6c:	b6 cf       	rjmp	.-148    	; 0x1bda <do_rand>

00001c6e <srand>:
    1c6e:	a0 e0       	ldi	r26, 0x00	; 0
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1c76:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1c7a:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1c7e:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1c82:	08 95       	ret

00001c84 <memcpy>:
    1c84:	fb 01       	movw	r30, r22
    1c86:	dc 01       	movw	r26, r24
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <memcpy+0xa>
    1c8a:	01 90       	ld	r0, Z+
    1c8c:	0d 92       	st	X+, r0
    1c8e:	41 50       	subi	r20, 0x01	; 1
    1c90:	50 40       	sbci	r21, 0x00	; 0
    1c92:	d8 f7       	brcc	.-10     	; 0x1c8a <memcpy+0x6>
    1c94:	08 95       	ret

00001c96 <__divmodsi4>:
    1c96:	05 2e       	mov	r0, r21
    1c98:	97 fb       	bst	r25, 7
    1c9a:	16 f4       	brtc	.+4      	; 0x1ca0 <__divmodsi4+0xa>
    1c9c:	00 94       	com	r0
    1c9e:	0f d0       	rcall	.+30     	; 0x1cbe <__negsi2>
    1ca0:	57 fd       	sbrc	r21, 7
    1ca2:	05 d0       	rcall	.+10     	; 0x1cae <__divmodsi4_neg2>
    1ca4:	78 df       	rcall	.-272    	; 0x1b96 <__udivmodsi4>
    1ca6:	07 fc       	sbrc	r0, 7
    1ca8:	02 d0       	rcall	.+4      	; 0x1cae <__divmodsi4_neg2>
    1caa:	46 f4       	brtc	.+16     	; 0x1cbc <__divmodsi4_exit>
    1cac:	08 c0       	rjmp	.+16     	; 0x1cbe <__negsi2>

00001cae <__divmodsi4_neg2>:
    1cae:	50 95       	com	r21
    1cb0:	40 95       	com	r20
    1cb2:	30 95       	com	r19
    1cb4:	21 95       	neg	r18
    1cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb8:	4f 4f       	sbci	r20, 0xFF	; 255
    1cba:	5f 4f       	sbci	r21, 0xFF	; 255

00001cbc <__divmodsi4_exit>:
    1cbc:	08 95       	ret

00001cbe <__negsi2>:
    1cbe:	90 95       	com	r25
    1cc0:	80 95       	com	r24
    1cc2:	70 95       	com	r23
    1cc4:	61 95       	neg	r22
    1cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ccc:	08 95       	ret

00001cce <__muluhisi3>:
    1cce:	0f d0       	rcall	.+30     	; 0x1cee <__umulhisi3>
    1cd0:	a5 9f       	mul	r26, r21
    1cd2:	90 0d       	add	r25, r0
    1cd4:	b4 9f       	mul	r27, r20
    1cd6:	90 0d       	add	r25, r0
    1cd8:	a4 9f       	mul	r26, r20
    1cda:	80 0d       	add	r24, r0
    1cdc:	91 1d       	adc	r25, r1
    1cde:	11 24       	eor	r1, r1
    1ce0:	08 95       	ret

00001ce2 <__mulshisi3>:
    1ce2:	b7 ff       	sbrs	r27, 7
    1ce4:	f4 cf       	rjmp	.-24     	; 0x1cce <__muluhisi3>

00001ce6 <__mulohisi3>:
    1ce6:	f3 df       	rcall	.-26     	; 0x1cce <__muluhisi3>
    1ce8:	82 1b       	sub	r24, r18
    1cea:	93 0b       	sbc	r25, r19
    1cec:	08 95       	ret

00001cee <__umulhisi3>:
    1cee:	a2 9f       	mul	r26, r18
    1cf0:	b0 01       	movw	r22, r0
    1cf2:	b3 9f       	mul	r27, r19
    1cf4:	c0 01       	movw	r24, r0
    1cf6:	a3 9f       	mul	r26, r19
    1cf8:	70 0d       	add	r23, r0
    1cfa:	81 1d       	adc	r24, r1
    1cfc:	11 24       	eor	r1, r1
    1cfe:	91 1d       	adc	r25, r1
    1d00:	b2 9f       	mul	r27, r18
    1d02:	70 0d       	add	r23, r0
    1d04:	81 1d       	adc	r24, r1
    1d06:	11 24       	eor	r1, r1
    1d08:	91 1d       	adc	r25, r1
    1d0a:	08 95       	ret

00001d0c <_exit>:
    1d0c:	f8 94       	cli

00001d0e <__stop_program>:
    1d0e:	ff cf       	rjmp	.-2      	; 0x1d0e <__stop_program>
